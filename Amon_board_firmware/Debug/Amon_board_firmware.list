
Amon_board_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800bfdc  0800bfdc  0001bfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c040  0800c040  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c048  0800c048  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800c050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001eec  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ff0  20001ff0  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eca1  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e77  00000000  00000000  0003edd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a0  00000000  00000000  00042c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  000445f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246ea  00000000  00000000  00045e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020774  00000000  00000000  0006a50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ede  00000000  00000000  0008ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160b5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006df4  00000000  00000000  00160bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bfc4 	.word	0x0800bfc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800bfc4 	.word	0x0800bfc4

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9bf 	b.w	8000568 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b974 	b.w	8000568 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9d08      	ldr	r5, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	468e      	mov	lr, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14d      	bne.n	8000342 <__udivmoddi4+0xaa>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4694      	mov	ip, r2
 80002aa:	d969      	bls.n	8000380 <__udivmoddi4+0xe8>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b152      	cbz	r2, 80002c8 <__udivmoddi4+0x30>
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	f1c2 0120 	rsb	r1, r2, #32
 80002ba:	fa20 f101 	lsr.w	r1, r0, r1
 80002be:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c2:	ea41 0e03 	orr.w	lr, r1, r3
 80002c6:	4094      	lsls	r4, r2
 80002c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002cc:	0c21      	lsrs	r1, r4, #16
 80002ce:	fbbe f6f8 	udiv	r6, lr, r8
 80002d2:	fa1f f78c 	uxth.w	r7, ip
 80002d6:	fb08 e316 	mls	r3, r8, r6, lr
 80002da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002de:	fb06 f107 	mul.w	r1, r6, r7
 80002e2:	4299      	cmp	r1, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x64>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ee:	f080 811f 	bcs.w	8000530 <__udivmoddi4+0x298>
 80002f2:	4299      	cmp	r1, r3
 80002f4:	f240 811c 	bls.w	8000530 <__udivmoddi4+0x298>
 80002f8:	3e02      	subs	r6, #2
 80002fa:	4463      	add	r3, ip
 80002fc:	1a5b      	subs	r3, r3, r1
 80002fe:	b2a4      	uxth	r4, r4
 8000300:	fbb3 f0f8 	udiv	r0, r3, r8
 8000304:	fb08 3310 	mls	r3, r8, r0, r3
 8000308:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800030c:	fb00 f707 	mul.w	r7, r0, r7
 8000310:	42a7      	cmp	r7, r4
 8000312:	d90a      	bls.n	800032a <__udivmoddi4+0x92>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 33ff 	add.w	r3, r0, #4294967295
 800031c:	f080 810a 	bcs.w	8000534 <__udivmoddi4+0x29c>
 8000320:	42a7      	cmp	r7, r4
 8000322:	f240 8107 	bls.w	8000534 <__udivmoddi4+0x29c>
 8000326:	4464      	add	r4, ip
 8000328:	3802      	subs	r0, #2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	1be4      	subs	r4, r4, r7
 8000330:	2600      	movs	r6, #0
 8000332:	b11d      	cbz	r5, 800033c <__udivmoddi4+0xa4>
 8000334:	40d4      	lsrs	r4, r2
 8000336:	2300      	movs	r3, #0
 8000338:	e9c5 4300 	strd	r4, r3, [r5]
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0xc2>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80ef 	beq.w	800052a <__udivmoddi4+0x292>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x160>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xd4>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80f9 	bhi.w	800055e <__udivmoddi4+0x2c6>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0303 	sbc.w	r3, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	469e      	mov	lr, r3
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e0      	beq.n	800033c <__udivmoddi4+0xa4>
 800037a:	e9c5 4e00 	strd	r4, lr, [r5]
 800037e:	e7dd      	b.n	800033c <__udivmoddi4+0xa4>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xec>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	2a00      	cmp	r2, #0
 800038a:	f040 8092 	bne.w	80004b2 <__udivmoddi4+0x21a>
 800038e:	eba1 010c 	sub.w	r1, r1, ip
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2601      	movs	r6, #1
 800039c:	0c20      	lsrs	r0, r4, #16
 800039e:	fbb1 f3f7 	udiv	r3, r1, r7
 80003a2:	fb07 1113 	mls	r1, r7, r3, r1
 80003a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003aa:	fb0e f003 	mul.w	r0, lr, r3
 80003ae:	4288      	cmp	r0, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x12c>
 80003b2:	eb1c 0101 	adds.w	r1, ip, r1
 80003b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x12a>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2c0>
 80003c2:	4643      	mov	r3, r8
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003cc:	fb07 1110 	mls	r1, r7, r0, r1
 80003d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x156>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x154>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2ca>
 80003ec:	4608      	mov	r0, r1
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f6:	e79c      	b.n	8000332 <__udivmoddi4+0x9a>
 80003f8:	f1c6 0720 	rsb	r7, r6, #32
 80003fc:	40b3      	lsls	r3, r6
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa20 f407 	lsr.w	r4, r0, r7
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	431c      	orrs	r4, r3
 8000410:	40f9      	lsrs	r1, r7
 8000412:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000416:	fa00 f306 	lsl.w	r3, r0, r6
 800041a:	fbb1 f8f9 	udiv	r8, r1, r9
 800041e:	0c20      	lsrs	r0, r4, #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fb09 1118 	mls	r1, r9, r8, r1
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	fb08 f00e 	mul.w	r0, r8, lr
 8000430:	4288      	cmp	r0, r1
 8000432:	fa02 f206 	lsl.w	r2, r2, r6
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b8>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2bc>
 8000444:	4288      	cmp	r0, r1
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2bc>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4461      	add	r1, ip
 8000450:	1a09      	subs	r1, r1, r0
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb1 f0f9 	udiv	r0, r1, r9
 8000458:	fb09 1110 	mls	r1, r9, r0, r1
 800045c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	458e      	cmp	lr, r1
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1e2>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2b4>
 8000472:	458e      	cmp	lr, r1
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2b4>
 8000476:	3802      	subs	r0, #2
 8000478:	4461      	add	r1, ip
 800047a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047e:	fba0 9402 	umull	r9, r4, r0, r2
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	42a1      	cmp	r1, r4
 8000488:	46c8      	mov	r8, r9
 800048a:	46a6      	mov	lr, r4
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x2a4>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x2a0>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x212>
 8000492:	ebb3 0208 	subs.w	r2, r3, r8
 8000496:	eb61 010e 	sbc.w	r1, r1, lr
 800049a:	fa01 f707 	lsl.w	r7, r1, r7
 800049e:	fa22 f306 	lsr.w	r3, r2, r6
 80004a2:	40f1      	lsrs	r1, r6
 80004a4:	431f      	orrs	r7, r3
 80004a6:	e9c5 7100 	strd	r7, r1, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	40d8      	lsrs	r0, r3
 80004b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004bc:	fa21 f303 	lsr.w	r3, r1, r3
 80004c0:	4091      	lsls	r1, r2
 80004c2:	4301      	orrs	r1, r0
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d0:	fb07 3610 	mls	r6, r7, r0, r3
 80004d4:	0c0b      	lsrs	r3, r1, #16
 80004d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004da:	fb00 f60e 	mul.w	r6, r0, lr
 80004de:	429e      	cmp	r6, r3
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x260>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b8>
 80004f0:	429e      	cmp	r6, r3
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b8>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	1b9b      	subs	r3, r3, r6
 80004fa:	b289      	uxth	r1, r1
 80004fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000500:	fb07 3316 	mls	r3, r7, r6, r3
 8000504:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000508:	fb06 f30e 	mul.w	r3, r6, lr
 800050c:	428b      	cmp	r3, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x28a>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f106 38ff 	add.w	r8, r6, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2b0>
 800051a:	428b      	cmp	r3, r1
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2b0>
 800051e:	3e02      	subs	r6, #2
 8000520:	4461      	add	r1, ip
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0x104>
 800052a:	462e      	mov	r6, r5
 800052c:	4628      	mov	r0, r5
 800052e:	e705      	b.n	800033c <__udivmoddi4+0xa4>
 8000530:	4606      	mov	r6, r0
 8000532:	e6e3      	b.n	80002fc <__udivmoddi4+0x64>
 8000534:	4618      	mov	r0, r3
 8000536:	e6f8      	b.n	800032a <__udivmoddi4+0x92>
 8000538:	454b      	cmp	r3, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f8>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000544:	3801      	subs	r0, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f8>
 8000548:	4646      	mov	r6, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x28a>
 800054c:	4620      	mov	r0, r4
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1e2>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x260>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b8>
 8000558:	3b02      	subs	r3, #2
 800055a:	4461      	add	r1, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x12c>
 800055e:	4630      	mov	r0, r6
 8000560:	e709      	b.n	8000376 <__udivmoddi4+0xde>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x156>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <BME280_ReadDeviceID>:
#define BME280_C_

#include "BME280.h"


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 800057c:	f107 030e 	add.w	r3, r7, #14
 8000580:	461a      	mov	r2, r3
 8000582:	21d0      	movs	r1, #208	; 0xd0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fd32 	bl	8000fee <BME280_ReadRegister>
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <BME280_ReadDeviceID+0x2c>
	{
		return 255;	// NOK
 8000594:	23ff      	movs	r3, #255	; 0xff
 8000596:	e005      	b.n	80005a4 <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	2b76      	cmp	r3, #118	; 0x76
 800059c:	d101      	bne.n	80005a2 <BME280_ReadDeviceID+0x36>
			return 1; // NOK
 800059e:	2301      	movs	r3, #1
 80005a0:	e000      	b.n	80005a4 <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 80005a2:	2300      	movs	r3, #0
		}
	}
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 80005bc:	22b6      	movs	r2, #182	; 0xb6
 80005be:	21e0      	movs	r1, #224	; 0xe0
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 fd4c 	bl	800105e <BME280_WriteRegister>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <BME280_Reset+0x28>
	{
		return 255;	// NOK
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	e000      	b.n	80005d6 <BME280_Reset+0x2a>
	}
	else
	{
		return 0; // OK
 80005d4:	2300      	movs	r3, #0
	}
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	// Humidity; Set value: 011 = oversampling x4
	static const uint8_t ctrl_humData = 0x03;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <BME280_Init+0x70>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	21f2      	movs	r1, #242	; 0xf2
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fd30 	bl	800105e <BME280_WriteRegister>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <BME280_Init+0x2c>
	{
		return 255;	// NOK
 8000608:	23ff      	movs	r3, #255	; 0xff
 800060a:	e01c      	b.n	8000646 <BME280_Init+0x66>
	}

	// Temp, Press, Mode; Set value: 01101111 = oversampling x4, oversampling x4, normal mode
	static const uint8_t scrl_meadData = 0x6F;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <BME280_Init+0x74>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	21f4      	movs	r1, #244	; 0xf4
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fd22 	bl	800105e <BME280_WriteRegister>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <BME280_Init+0x48>
	{
		return 255;	// NOK
 8000624:	23ff      	movs	r3, #255	; 0xff
 8000626:	e00e      	b.n	8000646 <BME280_Init+0x66>
	}

	// Standbay, time IIR filter, 3-wire SPI, Mode; Set value: 0000010 = standbay 0.5ms, IIR 2, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <BME280_Init+0x78>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	21f5      	movs	r1, #245	; 0xf5
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 fd14 	bl	800105e <BME280_WriteRegister>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <BME280_Init+0x64>
	{
		return 255;	// NOK
 8000640:	23ff      	movs	r3, #255	; 0xff
 8000642:	e000      	b.n	8000646 <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 8000644:	2300      	movs	r3, #0
	}
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	0800c022 	.word	0x0800c022
 8000654:	0800c023 	.word	0x0800c023
 8000658:	0800c024 	.word	0x0800c024

0800065c <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25];

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 800066c:	f107 0214 	add.w	r2, r7, #20
 8000670:	2319      	movs	r3, #25
 8000672:	2188      	movs	r1, #136	; 0x88
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fcd4 	bl	8001022 <BME280_ReadRegisters>
 800067a:	4603      	mov	r3, r0
 800067c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8000680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <BME280_ReadCalibData+0x30>
	{
		return 255;	// NOK
 8000688:	23ff      	movs	r3, #255	; 0xff
 800068a:	e0bc      	b.n	8000806 <BME280_ReadCalibData+0x1aa>
	}

	dev -> dig_T1 = ((uint16_t)CalibData[1] << 8) | (CalibData[0]);
 800068c:	7d7b      	ldrb	r3, [r7, #21]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	7d3b      	ldrb	r3, [r7, #20]
 8000694:	b21b      	sxth	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b21b      	sxth	r3, r3
 800069a:	b29a      	uxth	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = ((uint16_t)CalibData[3] << 8) | (CalibData[2]);
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7dbb      	ldrb	r3, [r7, #22]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = ((uint16_t)CalibData[5] << 8) | (CalibData[4]);
 80006b2:	7e7b      	ldrb	r3, [r7, #25]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7e3b      	ldrb	r3, [r7, #24]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21a      	sxth	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = ((uint16_t)CalibData[7] << 8) | (CalibData[6]);
 80006c4:	7efb      	ldrb	r3, [r7, #27]
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	7ebb      	ldrb	r3, [r7, #26]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = ((uint16_t)CalibData[9] << 8) | (CalibData[8]);
 80006d8:	7f7b      	ldrb	r3, [r7, #29]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21a      	sxth	r2, r3
 80006de:	7f3b      	ldrb	r3, [r7, #28]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = ((uint16_t)CalibData[11] << 8) | (CalibData[10]);
 80006ea:	7ffb      	ldrb	r3, [r7, #31]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	7fbb      	ldrb	r3, [r7, #30]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = ((uint16_t)CalibData[13] << 8) | (CalibData[12]);
 80006fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	b21a      	sxth	r2, r3
 8000704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21a      	sxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = ((uint16_t)CalibData[15] << 8) | (CalibData[14]);
 8000712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21a      	sxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = ((uint16_t)CalibData[17] << 8) | (CalibData[16]);
 8000728:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = ((uint16_t)CalibData[19] << 8) | (CalibData[18]);
 800073e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21a      	sxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = ((uint16_t)CalibData[21] << 8) | (CalibData[20]);
 8000754:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	b21a      	sxth	r2, r3
 800075c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21a      	sxth	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = ((uint16_t)CalibData[23] << 8) | (CalibData[22]);
 800076a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	b21a      	sxth	r2, r3
 8000772:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21a      	sxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 8000780:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 800078a:	f107 020c 	add.w	r2, r7, #12
 800078e:	2307      	movs	r3, #7
 8000790:	21e1      	movs	r1, #225	; 0xe1
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 fc45 	bl	8001022 <BME280_ReadRegisters>
 8000798:	4603      	mov	r3, r0
 800079a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 800079e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <BME280_ReadCalibData+0x14e>
	{
		return 255;	// NOK
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	e02d      	b.n	8000806 <BME280_ReadCalibData+0x1aa>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 80007aa:	7b7b      	ldrb	r3, [r7, #13]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	7b3b      	ldrb	r3, [r7, #12]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 80007bc:	7bba      	ldrb	r2, [r7, #14]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	7c3b      	ldrb	r3, [r7, #16]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21a      	sxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 80007e0:	7c7b      	ldrb	r3, [r7, #17]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	091b      	lsrs	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 80007fa:	7cbb      	ldrb	r3, [r7, #18]
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3730      	adds	r7, #48	; 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <BME280_ReadTemperature>:


uint8_t BME280_ReadTemperature(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 800080e:	b580      	push	{r7, lr}
 8000810:	b088      	sub	sp, #32
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t TempData[3];
	int32_t RawTemp;

	status = BME280_ReadRegisters(dev, TEMP_MSB, TempData, 3);
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	2303      	movs	r3, #3
 8000824:	21fa      	movs	r1, #250	; 0xfa
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 fbfb 	bl	8001022 <BME280_ReadRegisters>
 800082c:	4603      	mov	r3, r0
 800082e:	77fb      	strb	r3, [r7, #31]

	if (status != HAL_OK)
 8000830:	7ffb      	ldrb	r3, [r7, #31]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <BME280_ReadTemperature+0x2c>
	{
		return 255;	// NOK
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	e018      	b.n	800086c <BME280_ReadTemperature+0x5e>
	}

	uint32_t DataMSB = (uint32_t)TempData[0] << 12;
 800083a:	7a3b      	ldrb	r3, [r7, #8]
 800083c:	031b      	lsls	r3, r3, #12
 800083e:	61bb      	str	r3, [r7, #24]
	uint32_t DataLSB = (uint32_t)TempData[1] << 4;
 8000840:	7a7b      	ldrb	r3, [r7, #9]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	617b      	str	r3, [r7, #20]
	uint32_t DataXLSB = (uint32_t)TempData[2] >> 4;
 8000846:	7abb      	ldrb	r3, [r7, #10]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	b2db      	uxtb	r3, r3
 800084c:	613b      	str	r3, [r7, #16]

	RawTemp = DataMSB | DataLSB | DataXLSB;
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	431a      	orrs	r2, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]

	// compensate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f809 	bl	8000874 <BME280_TemperatureCompesation>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]

	return 0; // OK
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <BME280_TemperatureCompesation>:


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	10da      	asrs	r2, r3, #3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	8a9b      	ldrh	r3, [r3, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	12db      	asrs	r3, r3, #11
 8000896:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	111b      	asrs	r3, r3, #4
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	8a92      	ldrh	r2, [r2, #20]
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	1112      	asrs	r2, r2, #4
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	8a89      	ldrh	r1, [r1, #20]
 80008aa:	1a52      	subs	r2, r2, r1
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	131b      	asrs	r3, r3, #12
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	139b      	asrs	r3, r3, #14
 80008be:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	441a      	add	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	3380      	adds	r3, #128	; 0x80
 80008d6:	121b      	asrs	r3, r3, #8
 80008d8:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <BME280_ReadPressure>:


uint8_t BME280_ReadPressure(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t PressData[3];
	int32_t RawPressure;

	status = BME280_ReadRegisters(dev, PRESS_MSB, PressData, 3);
 80008f8:	f107 020c 	add.w	r2, r7, #12
 80008fc:	2303      	movs	r3, #3
 80008fe:	21f7      	movs	r1, #247	; 0xf7
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 fb8e 	bl	8001022 <BME280_ReadRegisters>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status != HAL_OK)
 800090c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <BME280_ReadPressure+0x30>
	{
		return 255;	// NOK
 8000914:	23ff      	movs	r3, #255	; 0xff
 8000916:	e019      	b.n	800094c <BME280_ReadPressure+0x64>
	}

	uint32_t DataMSB = (uint32_t)PressData[0] << 12;
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	031b      	lsls	r3, r3, #12
 800091c:	623b      	str	r3, [r7, #32]
	uint32_t DataLSB = (uint32_t)PressData[1] << 4;
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
	uint32_t DataXLSB = (uint32_t)PressData[2] >> 4;
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	61bb      	str	r3, [r7, #24]

	RawPressure = DataMSB | DataLSB | DataXLSB;
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	431a      	orrs	r2, r3
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	4313      	orrs	r3, r2
 8000936:	617b      	str	r3, [r7, #20]

	// compesate and save to struct
	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f80a 	bl	8000954 <BME280_PressureCompesation>
 8000940:	6138      	str	r0, [r7, #16]
	dev -> Press_Pa = (press / 256);
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	0a1a      	lsrs	r2, r3, #8
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60da      	str	r2, [r3, #12]

	return 0; // OK
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <BME280_PressureCompesation>:


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8000954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000958:	b0ca      	sub	sp, #296	; 0x128
 800095a:	af00      	add	r7, sp, #0
 800095c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000960:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8000964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	17da      	asrs	r2, r3, #31
 800096c:	461c      	mov	r4, r3
 800096e:	4615      	mov	r5, r2
 8000970:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000974:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000978:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800097c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000980:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000984:	fb03 f102 	mul.w	r1, r3, r2
 8000988:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800098c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	18ca      	adds	r2, r1, r3
 8000996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800099a:	fba3 8903 	umull	r8, r9, r3, r3
 800099e:	eb02 0309 	add.w	r3, r2, r9
 80009a2:	4699      	mov	r9, r3
 80009a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009a8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	17da      	asrs	r2, r3, #31
 80009b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80009b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80009b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80009bc:	4603      	mov	r3, r0
 80009be:	fb03 f209 	mul.w	r2, r3, r9
 80009c2:	460b      	mov	r3, r1
 80009c4:	fb08 f303 	mul.w	r3, r8, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	4602      	mov	r2, r0
 80009cc:	fba8 1202 	umull	r1, r2, r8, r2
 80009d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80009d4:	460a      	mov	r2, r1
 80009d6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80009da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009de:	4413      	add	r3, r2
 80009e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80009e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80009e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80009ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80009f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009f4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	17da      	asrs	r2, r3, #31
 80009fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a00:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a08:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000a0c:	462a      	mov	r2, r5
 8000a0e:	fb02 f203 	mul.w	r2, r2, r3
 8000a12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a16:	4621      	mov	r1, r4
 8000a18:	fb01 f303 	mul.w	r3, r1, r3
 8000a1c:	441a      	add	r2, r3
 8000a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a22:	4621      	mov	r1, r4
 8000a24:	fba3 1301 	umull	r1, r3, r3, r1
 8000a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	f04f 0100 	mov.w	r1, #0
 8000a44:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000a48:	462b      	mov	r3, r5
 8000a4a:	0459      	lsls	r1, r3, #17
 8000a4c:	4623      	mov	r3, r4
 8000a4e:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000a52:	4623      	mov	r3, r4
 8000a54:	0458      	lsls	r0, r3, #17
 8000a56:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a5a:	1814      	adds	r4, r2, r0
 8000a5c:	643c      	str	r4, [r7, #64]	; 0x40
 8000a5e:	414b      	adcs	r3, r1
 8000a60:	647b      	str	r3, [r7, #68]	; 0x44
 8000a62:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000a66:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8000a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a6e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	17da      	asrs	r2, r3, #31
 8000a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a7a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	f04f 0100 	mov.w	r1, #0
 8000a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a8a:	00d9      	lsls	r1, r3, #3
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a92:	1814      	adds	r4, r2, r0
 8000a94:	63bc      	str	r4, [r7, #56]	; 0x38
 8000a96:	414b      	adcs	r3, r1
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a9a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 8000aa2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aaa:	fb03 f102 	mul.w	r1, r3, r2
 8000aae:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	18ca      	adds	r2, r1, r3
 8000abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac0:	fba3 1303 	umull	r1, r3, r3, r3
 8000ac4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ac8:	460b      	mov	r3, r1
 8000aca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ad2:	18d3      	adds	r3, r2, r3
 8000ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000adc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	17da      	asrs	r2, r3, #31
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000ae8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000aec:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000af0:	462b      	mov	r3, r5
 8000af2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000af6:	4642      	mov	r2, r8
 8000af8:	fb02 f203 	mul.w	r2, r2, r3
 8000afc:	464b      	mov	r3, r9
 8000afe:	4621      	mov	r1, r4
 8000b00:	fb01 f303 	mul.w	r3, r1, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	4622      	mov	r2, r4
 8000b08:	4641      	mov	r1, r8
 8000b0a:	fba2 1201 	umull	r1, r2, r2, r1
 8000b0e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000b12:	460a      	mov	r2, r1
 8000b14:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000b18:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000b1c:	4413      	add	r3, r2
 8000b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	f04f 0100 	mov.w	r1, #0
 8000b2a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000b2e:	4623      	mov	r3, r4
 8000b30:	0a18      	lsrs	r0, r3, #8
 8000b32:	462b      	mov	r3, r5
 8000b34:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b38:	462b      	mov	r3, r5
 8000b3a:	1219      	asrs	r1, r3, #8
 8000b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b40:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	17da      	asrs	r2, r3, #31
 8000b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b4c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000b50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b54:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000b58:	464a      	mov	r2, r9
 8000b5a:	fb02 f203 	mul.w	r2, r2, r3
 8000b5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b62:	4644      	mov	r4, r8
 8000b64:	fb04 f303 	mul.w	r3, r4, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b6e:	4644      	mov	r4, r8
 8000b70:	fba3 4304 	umull	r4, r3, r3, r4
 8000b74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000b78:	4623      	mov	r3, r4
 8000b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000b7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b82:	18d3      	adds	r3, r2, r3
 8000b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000b94:	464c      	mov	r4, r9
 8000b96:	0323      	lsls	r3, r4, #12
 8000b98:	4644      	mov	r4, r8
 8000b9a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000b9e:	4644      	mov	r4, r8
 8000ba0:	0322      	lsls	r2, r4, #12
 8000ba2:	1884      	adds	r4, r0, r2
 8000ba4:	633c      	str	r4, [r7, #48]	; 0x30
 8000ba6:	eb41 0303 	adc.w	r3, r1, r3
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
 8000bac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000bb0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 8000bb4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000bb8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bbc:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000bc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bc8:	8b5b      	ldrh	r3, [r3, #26]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000bd2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000bda:	462b      	mov	r3, r5
 8000bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000be0:	4642      	mov	r2, r8
 8000be2:	fb02 f203 	mul.w	r2, r2, r3
 8000be6:	464b      	mov	r3, r9
 8000be8:	4621      	mov	r1, r4
 8000bea:	fb01 f303 	mul.w	r3, r1, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	4622      	mov	r2, r4
 8000bf2:	4641      	mov	r1, r8
 8000bf4:	fba2 1201 	umull	r1, r2, r2, r1
 8000bf8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000c02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000c06:	4413      	add	r3, r2
 8000c08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000c18:	4629      	mov	r1, r5
 8000c1a:	104a      	asrs	r2, r1, #1
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	17cb      	asrs	r3, r1, #31
 8000c20:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8000c24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <BME280_PressureCompesation+0x2dc>
	{
		return 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e148      	b.n	8000ec2 <BME280_PressureCompesation+0x56e>
	}

	pressure = 1048576 - RawPress;
 8000c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c34:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c38:	17da      	asrs	r2, r3, #31
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c3e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000c42:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8000c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c4a:	105b      	asrs	r3, r3, #1
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c54:	07db      	lsls	r3, r3, #31
 8000c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000c5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000c62:	4621      	mov	r1, r4
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	67b9      	str	r1, [r7, #120]	; 0x78
 8000c68:	4629      	mov	r1, r5
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c70:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000c74:	4622      	mov	r2, r4
 8000c76:	462b      	mov	r3, r5
 8000c78:	1891      	adds	r1, r2, r2
 8000c7a:	6239      	str	r1, [r7, #32]
 8000c7c:	415b      	adcs	r3, r3
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c84:	4621      	mov	r1, r4
 8000c86:	1851      	adds	r1, r2, r1
 8000c88:	61b9      	str	r1, [r7, #24]
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	414b      	adcs	r3, r1
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	018b      	lsls	r3, r1, #6
 8000ca0:	4641      	mov	r1, r8
 8000ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	018a      	lsls	r2, r1, #6
 8000caa:	4641      	mov	r1, r8
 8000cac:	1889      	adds	r1, r1, r2
 8000cae:	6139      	str	r1, [r7, #16]
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	eb43 0101 	adc.w	r1, r3, r1
 8000cb6:	6179      	str	r1, [r7, #20]
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	008b      	lsls	r3, r1, #2
 8000cc8:	4641      	mov	r1, r8
 8000cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000cce:	4641      	mov	r1, r8
 8000cd0:	008a      	lsls	r2, r1, #2
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4622      	mov	r2, r4
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	462a      	mov	r2, r5
 8000ce2:	eb42 0303 	adc.w	r3, r2, r3
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	008b      	lsls	r3, r1, #2
 8000cf8:	4641      	mov	r1, r8
 8000cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000cfe:	4641      	mov	r1, r8
 8000d00:	008a      	lsls	r2, r1, #2
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	4622      	mov	r2, r4
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8000d0e:	462b      	mov	r3, r5
 8000d10:	460a      	mov	r2, r1
 8000d12:	eb42 0303 	adc.w	r3, r2, r3
 8000d16:	677b      	str	r3, [r7, #116]	; 0x74
 8000d18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000d20:	f7ff fa52 	bl	80001c8 <__aeabi_ldivmod>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8000d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d30:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	17da      	asrs	r2, r3, #31
 8000d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d3c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d40:	f04f 0000 	mov.w	r0, #0
 8000d44:	f04f 0100 	mov.w	r1, #0
 8000d48:	0b50      	lsrs	r0, r2, #13
 8000d4a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d4e:	1359      	asrs	r1, r3, #13
 8000d50:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000d54:	462b      	mov	r3, r5
 8000d56:	fb00 f203 	mul.w	r2, r0, r3
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	fb03 f301 	mul.w	r3, r3, r1
 8000d60:	4413      	add	r3, r2
 8000d62:	4622      	mov	r2, r4
 8000d64:	fba2 1200 	umull	r1, r2, r2, r0
 8000d68:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000d72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000d76:	4413      	add	r3, r2
 8000d78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d80:	f04f 0000 	mov.w	r0, #0
 8000d84:	f04f 0100 	mov.w	r1, #0
 8000d88:	0b50      	lsrs	r0, r2, #13
 8000d8a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d8e:	1359      	asrs	r1, r3, #13
 8000d90:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000d94:	462b      	mov	r3, r5
 8000d96:	fb00 f203 	mul.w	r2, r0, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	fb03 f301 	mul.w	r3, r3, r1
 8000da0:	4413      	add	r3, r2
 8000da2:	4622      	mov	r2, r4
 8000da4:	fba2 1200 	umull	r1, r2, r2, r0
 8000da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000dac:	460a      	mov	r2, r1
 8000dae:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000db2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000db6:	4413      	add	r3, r2
 8000db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000dc8:	4621      	mov	r1, r4
 8000dca:	0e4a      	lsrs	r2, r1, #25
 8000dcc:	4629      	mov	r1, r5
 8000dce:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	164b      	asrs	r3, r1, #25
 8000dd6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 8000dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dde:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	17da      	asrs	r2, r3, #31
 8000de6:	663b      	str	r3, [r7, #96]	; 0x60
 8000de8:	667a      	str	r2, [r7, #100]	; 0x64
 8000dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000dee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000df2:	462a      	mov	r2, r5
 8000df4:	fb02 f203 	mul.w	r2, r2, r3
 8000df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e08:	4621      	mov	r1, r4
 8000e0a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e0e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000e12:	460a      	mov	r2, r1
 8000e14:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8000e18:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8000e2e:	4621      	mov	r1, r4
 8000e30:	0cca      	lsrs	r2, r1, #19
 8000e32:	4629      	mov	r1, r5
 8000e34:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e38:	4629      	mov	r1, r5
 8000e3a:	14cb      	asrs	r3, r1, #19
 8000e3c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8000e40:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000e44:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e48:	1884      	adds	r4, r0, r2
 8000e4a:	65bc      	str	r4, [r7, #88]	; 0x58
 8000e4c:	eb41 0303 	adc.w	r3, r1, r3
 8000e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e56:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	1889      	adds	r1, r1, r2
 8000e5e:	6539      	str	r1, [r7, #80]	; 0x50
 8000e60:	4629      	mov	r1, r5
 8000e62:	eb43 0101 	adc.w	r1, r3, r1
 8000e66:	6579      	str	r1, [r7, #84]	; 0x54
 8000e68:	f04f 0000 	mov.w	r0, #0
 8000e6c:	f04f 0100 	mov.w	r1, #0
 8000e70:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000e74:	4623      	mov	r3, r4
 8000e76:	0a18      	lsrs	r0, r3, #8
 8000e78:	462b      	mov	r3, r5
 8000e7a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e7e:	462b      	mov	r3, r5
 8000e80:	1219      	asrs	r1, r3, #8
 8000e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e86:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	17da      	asrs	r2, r3, #31
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8000e9e:	464c      	mov	r4, r9
 8000ea0:	0123      	lsls	r3, r4, #4
 8000ea2:	4644      	mov	r4, r8
 8000ea4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ea8:	4644      	mov	r4, r8
 8000eaa:	0122      	lsls	r2, r4, #4
 8000eac:	1884      	adds	r4, r0, r2
 8000eae:	603c      	str	r4, [r7, #0]
 8000eb0:	eb41 0303 	adc.w	r3, r1, r3
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000eba:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)pressure;
 8000ebe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000ece <BME280_ReadHumidity>:


uint8_t BME280_ReadHumidity(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b088      	sub	sp, #32
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]
	uint8_t HumData[2];
	int32_t RawHumidity;

	status = BME280_ReadRegisters(dev, HUM_MSB, HumData, 2);
 8000ee2:	f107 0208 	add.w	r2, r7, #8
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	21fd      	movs	r1, #253	; 0xfd
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f899 	bl	8001022 <BME280_ReadRegisters>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	77fb      	strb	r3, [r7, #31]

	if (status != HAL_OK)
 8000ef4:	7ffb      	ldrb	r3, [r7, #31]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <BME280_ReadHumidity+0x30>
	{
		return 255;	// NOK
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	e012      	b.n	8000f24 <BME280_ReadHumidity+0x56>
	}

	uint32_t DataMSB = (uint32_t)HumData[0] << 8;
 8000efe:	7a3b      	ldrb	r3, [r7, #8]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	61bb      	str	r3, [r7, #24]
	uint32_t DataLSB = (uint32_t)HumData[1];
 8000f04:	7a7b      	ldrb	r3, [r7, #9]
 8000f06:	617b      	str	r3, [r7, #20]

	RawHumidity = DataMSB | DataLSB;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

	// compesate and save to struct
	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f80a 	bl	8000f2c <BME280_HumidityCompesation>
 8000f18:	60f8      	str	r0, [r7, #12]
	dev -> Hum_Perc = (hum / 1024);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0a9a      	lsrs	r2, r3, #10
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <BME280_HumidityCompesation>:


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000f3e:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	039a      	lsls	r2, r3, #14
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000f4a:	051b      	lsls	r3, r3, #20
 8000f4c:	1ad2      	subs	r2, r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000f54:	4619      	mov	r1, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f62:	13db      	asrs	r3, r3, #15
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f992 2036 	ldrsb.w	r2, [r2, #54]	; 0x36
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	fb01 f202 	mul.w	r2, r1, r2
 8000f72:	1292      	asrs	r2, r2, #10
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	68f9      	ldr	r1, [r7, #12]
 8000f7e:	fb00 f101 	mul.w	r1, r0, r1
 8000f82:	12c9      	asrs	r1, r1, #11
 8000f84:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8000f88:	fb01 f202 	mul.w	r2, r1, r2
 8000f8c:	1292      	asrs	r2, r2, #10
 8000f8e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	; 0x2e
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000fa0:	1392      	asrs	r2, r2, #14
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	13db      	asrs	r3, r3, #15
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	13d2      	asrs	r2, r2, #15
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	11db      	asrs	r3, r3, #7
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	111b      	asrs	r3, r3, #4
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000fce:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000fd6:	bfa8      	it	ge
 8000fd8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000fdc:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	131b      	asrs	r3, r3, #12
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b088      	sub	sp, #32
 8000ff2:	af04      	add	r7, sp, #16
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	b29a      	uxth	r2, r3
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	21ec      	movs	r1, #236	; 0xec
 8001014:	f002 f952 	bl	80032bc <HAL_I2C_Mem_Read>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001022:	b580      	push	{r7, lr}
 8001024:	b088      	sub	sp, #32
 8001026:	af04      	add	r7, sp, #16
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	461a      	mov	r2, r3
 800102e:	460b      	mov	r3, r1
 8001030:	72fb      	strb	r3, [r7, #11]
 8001032:	4613      	mov	r3, r2
 8001034:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	b29a      	uxth	r2, r3
 800103e:	7abb      	ldrb	r3, [r7, #10]
 8001040:	b29b      	uxth	r3, r3
 8001042:	2164      	movs	r1, #100	; 0x64
 8001044:	9102      	str	r1, [sp, #8]
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	21ec      	movs	r1, #236	; 0xec
 8001050:	f002 f934 	bl	80032bc <HAL_I2C_Mem_Read>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af04      	add	r7, sp, #16
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	70fb      	strb	r3, [r7, #3]
 800106a:	4613      	mov	r3, r2
 800106c:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100); //?????????????????????
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	b29a      	uxth	r2, r3
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	21ec      	movs	r1, #236	; 0xec
 8001086:	f002 f81f 	bl	80030c8 <HAL_I2C_Mem_Write>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b098      	sub	sp, #96	; 0x60
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 fff9 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f85f 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 fbc7 	bl	8001834 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010a6:	f000 f8c5 	bl	8001234 <MX_ADC1_Init>
  MX_SPI1_Init();
 80010aa:	f000 f951 	bl	8001350 <MX_SPI1_Init>
  MX_UART4_Init();
 80010ae:	f000 fb97 	bl	80017e0 <MX_UART4_Init>
  MX_TIM3_Init();
 80010b2:	f000 faaf 	bl	8001614 <MX_TIM3_Init>
  MX_I2C3_Init();
 80010b6:	f000 f91d 	bl	80012f4 <MX_I2C3_Init>
  MX_TIM2_Init();
 80010ba:	f000 fa2b 	bl	8001514 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010be:	f000 f97d 	bl	80013bc <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80010c2:	f00a fa4b 	bl	800b55c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80010c6:	f000 fb3d 	bl	8001744 <MX_TIM4_Init>
  BME280  bme280;

  /* Variables */
  uint16_t MainBat;

  uint32_t ServoPWM = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /*  */

  /* DMA */
  HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 100);
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	491c      	ldr	r1, [pc, #112]	; (8001144 <main+0xb0>)
 80010d2:	481d      	ldr	r0, [pc, #116]	; (8001148 <main+0xb4>)
 80010d4:	f005 fdbd 	bl	8006c52 <HAL_UART_Receive_DMA>

  /* Inits */
  HAL_TIM_Base_Start_IT(&htim4); // TVC LOOP (leg leds)
 80010d8:	481c      	ldr	r0, [pc, #112]	; (800114c <main+0xb8>)
 80010da:	f004 fe1d 	bl	8005d18 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DroneStatus = 1;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <main+0xbc>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	481a      	ldr	r0, [pc, #104]	; (8001154 <main+0xc0>)
 80010ea:	f001 fe8f 	bl	8002e0c <HAL_GPIO_WritePin>
	  BME280_Reset(&bme280, &hi2c3);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4919      	ldr	r1, [pc, #100]	; (8001158 <main+0xc4>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa5a 	bl	80005ac <BME280_Reset>
	  BME280_ReadDeviceID(&bme280, &hi2c3);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4917      	ldr	r1, [pc, #92]	; (8001158 <main+0xc4>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa35 	bl	800056c <BME280_ReadDeviceID>
	  BME280_Init(&bme280, &hi2c3);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4914      	ldr	r1, [pc, #80]	; (8001158 <main+0xc4>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa6a 	bl	80005e0 <BME280_Init>
	  BME280_ReadCalibData(&bme280, &hi2c3);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4912      	ldr	r1, [pc, #72]	; (8001158 <main+0xc4>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff faa3 	bl	800065c <BME280_ReadCalibData>
	  BME280_ReadTemperature(&bme280, &hi2c3);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	490f      	ldr	r1, [pc, #60]	; (8001158 <main+0xc4>)
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb77 	bl	800080e <BME280_ReadTemperature>
	  BME280_ReadPressure(&bme280, &hi2c3);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <main+0xc4>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fbdf 	bl	80008e8 <BME280_ReadPressure>
	  BME280_ReadHumidity(&bme280, &hi2c3);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <main+0xc4>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fecd 	bl	8000ece <BME280_ReadHumidity>

	  //MainBat = ADC_Read_Main_Battery();

	  //65536-4299=60737

		TIM3->CCR2 = 10;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <main+0xc8>)
 8001136:	220a      	movs	r2, #10
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 100;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <main+0xc8>)
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
	  DroneStatus = 1;
 8001140:	e7cd      	b.n	80010de <main+0x4a>
 8001142:	bf00      	nop
 8001144:	2000037c 	.word	0x2000037c
 8001148:	20000334 	.word	0x20000334
 800114c:	200002ec 	.word	0x200002ec
 8001150:	20000378 	.word	0x20000378
 8001154:	40020400 	.word	0x40020400
 8001158:	20000168 	.word	0x20000168
 800115c:	40000400 	.word	0x40000400

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00a ff20 	bl	800bfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <SystemClock_Config+0xcc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <SystemClock_Config+0xcc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <SystemClock_Config+0xcc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <SystemClock_Config+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <SystemClock_Config+0xd0>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011d0:	230f      	movs	r3, #15
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011d4:	2390      	movs	r3, #144	; 0x90
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011dc:	2305      	movs	r3, #5
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f867 	bl	80052b8 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f0:	f000 fc28 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2103      	movs	r1, #3
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fac8 	bl	80057a8 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800121e:	f000 fc11 	bl	8001a44 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <MX_ADC1_Init+0xb8>)
 800124a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC1_Init+0xb4>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC1_Init+0xb4>)
 800125a:	2201      	movs	r2, #1
 800125c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001260:	2201      	movs	r2, #1
 8001262:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC1_Init+0xb4>)
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001274:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <MX_ADC1_Init+0xbc>)
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_ADC1_Init+0xb4>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001280:	2202      	movs	r2, #2
 8001282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_ADC1_Init+0xb4>)
 800128e:	2201      	movs	r2, #1
 8001290:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <MX_ADC1_Init+0xb4>)
 8001294:	f000 ff92 	bl	80021bc <HAL_ADC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 fbd1 	bl	8001a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_ADC1_Init+0xb4>)
 80012b4:	f000 ffc6 	bl	8002244 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012be:	f000 fbc1 	bl	8001a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_ADC1_Init+0xb4>)
 80012d0:	f000 ffb8 	bl	8002244 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80012da:	f000 fbb3 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000120 	.word	0x20000120
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C3_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_I2C3_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C3_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_I2C3_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C3_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C3_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2C3_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C3_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2C3_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2C3_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2C3_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2C3_Init+0x50>)
 8001332:	f001 fd85 	bl	8002e40 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fb82 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000168 	.word	0x20000168
 8001348:	40005c00 	.word	0x40005c00
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_SPI1_Init+0x64>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_SPI1_Init+0x64>)
 800137c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001380:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_SPI1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_SPI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_SPI1_Init+0x64>)
 800139c:	220a      	movs	r2, #10
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_SPI1_Init+0x64>)
 80013a2:	f004 fbe1 	bl	8005b68 <HAL_SPI_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013ac:	f000 fb4a 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001bc 	.word	0x200001bc
 80013b8:	40013000 	.word	0x40013000

080013bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b096      	sub	sp, #88	; 0x58
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2220      	movs	r2, #32
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a fddd 	bl	800bfb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <MX_TIM1_Init+0x150>)
 80013fc:	4a44      	ldr	r2, [pc, #272]	; (8001510 <MX_TIM1_Init+0x154>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_TIM1_Init+0x150>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <MX_TIM1_Init+0x150>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800140c:	4b3f      	ldr	r3, [pc, #252]	; (800150c <MX_TIM1_Init+0x150>)
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_TIM1_Init+0x150>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_TIM1_Init+0x150>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_TIM1_Init+0x150>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001426:	4839      	ldr	r0, [pc, #228]	; (800150c <MX_TIM1_Init+0x150>)
 8001428:	f004 fc27 	bl	8005c7a <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001432:	f000 fb07 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001440:	4619      	mov	r1, r3
 8001442:	4832      	ldr	r0, [pc, #200]	; (800150c <MX_TIM1_Init+0x150>)
 8001444:	f004 fefc 	bl	8006240 <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800144e:	f000 faf9 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001452:	482e      	ldr	r0, [pc, #184]	; (800150c <MX_TIM1_Init+0x150>)
 8001454:	f004 fcd0 	bl	8005df8 <HAL_TIM_PWM_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800145e:	f000 faf1 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	4619      	mov	r1, r3
 8001470:	4826      	ldr	r0, [pc, #152]	; (800150c <MX_TIM1_Init+0x150>)
 8001472:	f005 fabf 	bl	80069f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800147c:	f000 fae2 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	; 0x60
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <MX_TIM1_Init+0x150>)
 80014a6:	f004 fe09 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014b0:	f000 fac8 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2208      	movs	r2, #8
 80014ba:	4619      	mov	r1, r3
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_TIM1_Init+0x150>)
 80014be:	f004 fdfd 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014c8:	f000 fabc 	bl	8001a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM1_Init+0x150>)
 80014f0:	f005 fafc 	bl	8006aec <HAL_TIMEx_ConfigBreakDeadTime>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014fa:	f000 faa3 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM1_Init+0x150>)
 8001500:	f000 fc2c 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3758      	adds	r7, #88	; 0x58
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000214 	.word	0x20000214
 8001510:	40010000 	.word	0x40010000

08001514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_TIM2_Init+0xfc>)
 8001546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <MX_TIM2_Init+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_TIM2_Init+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <MX_TIM2_Init+0xfc>)
 800155a:	f04f 32ff 	mov.w	r2, #4294967295
 800155e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_TIM2_Init+0xfc>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_TIM2_Init+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156c:	4828      	ldr	r0, [pc, #160]	; (8001610 <MX_TIM2_Init+0xfc>)
 800156e:	f004 fb84 	bl	8005c7a <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001578:	f000 fa64 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	4619      	mov	r1, r3
 8001588:	4821      	ldr	r0, [pc, #132]	; (8001610 <MX_TIM2_Init+0xfc>)
 800158a:	f004 fe59 	bl	8006240 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001594:	f000 fa56 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <MX_TIM2_Init+0xfc>)
 800159a:	f004 fc2d 	bl	8005df8 <HAL_TIM_PWM_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015a4:	f000 fa4e 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4619      	mov	r1, r3
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <MX_TIM2_Init+0xfc>)
 80015b8:	f005 fa1c 	bl	80069f4 <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015c2:	f000 fa3f 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c6:	2360      	movs	r3, #96	; 0x60
 80015c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2208      	movs	r2, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM2_Init+0xfc>)
 80015de:	f004 fd6d 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015e8:	f000 fa2c 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	220c      	movs	r2, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM2_Init+0xfc>)
 80015f4:	f004 fd62 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015fe:	f000 fa21 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM2_Init+0xfc>)
 8001604:	f000 fbaa 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000025c 	.word	0x2000025c

08001614 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <MX_TIM3_Init+0x128>)
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <MX_TIM3_Init+0x12c>)
 8001648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <MX_TIM3_Init+0x128>)
 800164c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001650:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <MX_TIM3_Init+0x128>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <MX_TIM3_Init+0x128>)
 800165a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800165e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <MX_TIM3_Init+0x128>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <MX_TIM3_Init+0x128>)
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800166c:	4833      	ldr	r0, [pc, #204]	; (800173c <MX_TIM3_Init+0x128>)
 800166e:	f004 fb04 	bl	8005c7a <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001678:	f000 f9e4 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	4619      	mov	r1, r3
 8001688:	482c      	ldr	r0, [pc, #176]	; (800173c <MX_TIM3_Init+0x128>)
 800168a:	f004 fdd9 	bl	8006240 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001694:	f000 f9d6 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001698:	4828      	ldr	r0, [pc, #160]	; (800173c <MX_TIM3_Init+0x128>)
 800169a:	f004 fbad 	bl	8005df8 <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016a4:	f000 f9ce 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	4619      	mov	r1, r3
 80016b6:	4821      	ldr	r0, [pc, #132]	; (800173c <MX_TIM3_Init+0x128>)
 80016b8:	f005 f99c 	bl	80069f4 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016c2:	f000 f9bf 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c6:	2360      	movs	r3, #96	; 0x60
 80016c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	4817      	ldr	r0, [pc, #92]	; (800173c <MX_TIM3_Init+0x128>)
 80016de:	f004 fced 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016e8:	f000 f9ac 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2204      	movs	r2, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_TIM3_Init+0x128>)
 80016f4:	f004 fce2 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80016fe:	f000 f9a1 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2208      	movs	r2, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM3_Init+0x128>)
 800170a:	f004 fcd7 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001714:	f000 f996 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	220c      	movs	r2, #12
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM3_Init+0x128>)
 8001720:	f004 fccc 	bl	80060bc <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800172a:	f000 f98b 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM3_Init+0x128>)
 8001730:	f000 fb14 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002a4 	.word	0x200002a4
 8001740:	40000400 	.word	0x40000400

08001744 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM4_Init+0x94>)
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_TIM4_Init+0x98>)
 8001764:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM4_Init+0x94>)
 8001768:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800176c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM4_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM4_Init+0x94>)
 8001776:	f640 125f 	movw	r2, #2399	; 0x95f
 800177a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM4_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM4_Init+0x94>)
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_TIM4_Init+0x94>)
 800178a:	f004 fa76 	bl	8005c7a <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001794:	f000 f956 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM4_Init+0x94>)
 80017a6:	f004 fd4b 	bl	8006240 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017b0:	f000 f948 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM4_Init+0x94>)
 80017c2:	f005 f917 	bl	80069f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f000 f93a 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002ec 	.word	0x200002ec
 80017dc:	40000800 	.word	0x40000800

080017e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_UART4_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_UART4_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_UART4_Init+0x4c>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_UART4_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_UART4_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_UART4_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_UART4_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_UART4_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_UART4_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_UART4_Init+0x4c>)
 8001818:	f005 f9ce 	bl	8006bb8 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 f90f 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000334 	.word	0x20000334
 8001830:	40004c00 	.word	0x40004c00

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <MX_GPIO_Init+0x150>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <MX_GPIO_Init+0x150>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <MX_GPIO_Init+0x150>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <MX_GPIO_Init+0x150>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a45      	ldr	r2, [pc, #276]	; (8001984 <MX_GPIO_Init+0x150>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <MX_GPIO_Init+0x150>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <MX_GPIO_Init+0x150>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a3e      	ldr	r2, [pc, #248]	; (8001984 <MX_GPIO_Init+0x150>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <MX_GPIO_Init+0x150>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <MX_GPIO_Init+0x150>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a37      	ldr	r2, [pc, #220]	; (8001984 <MX_GPIO_Init+0x150>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <MX_GPIO_Init+0x150>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <MX_GPIO_Init+0x150>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <MX_GPIO_Init+0x150>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <MX_GPIO_Init+0x150>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Brd_Pin|CS_Flash_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2118      	movs	r1, #24
 80018da:	482b      	ldr	r0, [pc, #172]	; (8001988 <MX_GPIO_Init+0x154>)
 80018dc:	f001 fa96 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Ext_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2130      	movs	r1, #48	; 0x30
 80018e4:	4829      	ldr	r0, [pc, #164]	; (800198c <MX_GPIO_Init+0x158>)
 80018e6:	f001 fa91 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 80018ea:	2200      	movs	r2, #0
 80018ec:	f240 7134 	movw	r1, #1844	; 0x734
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <MX_GPIO_Init+0x15c>)
 80018f2:	f001 fa8b 	bl	8002e0c <HAL_GPIO_WritePin>
                          |EN_RF1_Pin|CS_RF1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Brd_Pin CS_Flash_Pin */
  GPIO_InitStruct.Pin = LED_Brd_Pin|CS_Flash_Pin;
 80018f6:	2318      	movs	r3, #24
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	481e      	ldr	r0, [pc, #120]	; (8001988 <MX_GPIO_Init+0x154>)
 800190e:	f001 f8e1 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Ext_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_Ext_Pin|CS_SD_Pin;
 8001912:	2330      	movs	r3, #48	; 0x30
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <MX_GPIO_Init+0x158>)
 800192a:	f001 f8d3 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_White_Pin CS_RF2_Pin EN_RF2_Pin
                           EN_RF1_Pin CS_RF1_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 800192e:	f240 7334 	movw	r3, #1844	; 0x734
 8001932:	617b      	str	r3, [r7, #20]
                          |EN_RF1_Pin|CS_RF1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001948:	f001 f8c4 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ2_Pin */
  GPIO_InitStruct.Pin = RF_IRQ2_Pin;
 800194c:	2304      	movs	r3, #4
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ2_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_GPIO_Init+0x160>)
 8001960:	f001 f8b8 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ1_Pin */
  GPIO_InitStruct.Pin = RF_IRQ1_Pin;
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001978:	f001 f8ac 	bl	8002ad4 <HAL_GPIO_Init>

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020800 	.word	0x40020800
 8001990:	40020400 	.word	0x40020400
 8001994:	40020c00 	.word	0x40020c00

08001998 <HAL_UART_RxCpltCallback>:

/*
 * UART
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 100);
 80019a0:	2264      	movs	r2, #100	; 0x64
 80019a2:	4904      	ldr	r1, [pc, #16]	; (80019b4 <HAL_UART_RxCpltCallback+0x1c>)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_UART_RxCpltCallback+0x20>)
 80019a6:	f005 f954 	bl	8006c52 <HAL_UART_Receive_DMA>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000037c 	.word	0x2000037c
 80019b8:	20000334 	.word	0x20000334

080019bc <HAL_TIM_PeriodElapsedCallback>:
 * 	- send over RF
 * 	- save to flash
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

	if (DroneStatus != STATUS_STARTUP && DroneStatus != STATUS_ERROR)
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d02f      	beq.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x70>
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d02b      	beq.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if (LED_blink_cnt_ON < 50) // LED OFF
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b31      	cmp	r3, #49	; 0x31
 80019da:	d806      	bhi.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			LED_blink_cnt_ON++;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019e6:	701a      	strb	r2, [r3, #0]
				LED_blink_cnt_OFF = 0;
				LED_blink_cnt_ON = 0;
			}
		}
	}
}
 80019e8:	e020      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x70>
			if (LED_blink_cnt_OFF < 10) // LED ON for short time
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	d810      	bhi.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x58>
				if (LED_blink_cnt_OFF == 0) // check LED state and not set if is already set
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_TIM_PeriodElapsedCallback+0x4a>
					HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a02:	f001 fa03 	bl	8002e0c <HAL_GPIO_WritePin>
				LED_blink_cnt_OFF++;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	e00b      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x70>
				HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a1c:	f001 f9f6 	bl	8002e0c <HAL_GPIO_WritePin>
				LED_blink_cnt_OFF = 0;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
				LED_blink_cnt_ON = 0;
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000378 	.word	0x20000378
 8001a38:	20000379 	.word	0x20000379
 8001a3c:	2000037a 	.word	0x2000037a
 8001a40:	40020400 	.word	0x40020400

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_ADC_MspInit+0x7c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d127      	bne.n	8001b12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_ADC_MspInit+0x80>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = EDF_BAT_Pin|BRDD_BAT_Pin;
 8001afa:	2303      	movs	r3, #3
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_ADC_MspInit+0x84>)
 8001b0e:	f000 ffe1 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_I2C_MspInit+0xc4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d14b      	bne.n	8001be2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b88:	2312      	movs	r3, #18
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b94:	2304      	movs	r3, #4
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <HAL_I2C_MspInit+0xcc>)
 8001ba0:	f000 ff98 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <HAL_I2C_MspInit+0xd0>)
 8001bc2:	f000 ff87 	bl	8002ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_I2C_MspInit+0xc8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40005c00 	.word	0x40005c00
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_SPI_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12b      	bne.n	8001c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_SPI_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c56:	23e0      	movs	r3, #224	; 0xe0
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c66:	2305      	movs	r3, #5
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_SPI_MspInit+0x8c>)
 8001c72:	f000 ff2f 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40013000 	.word	0x40013000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <HAL_TIM_Base_MspInit+0xc0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cba:	e042      	b.n	8001d42 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
}
 8001ce2:	e02e      	b.n	8001d42 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_TIM_Base_MspInit+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	e01a      	b.n	8001d42 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_TIM_Base_MspInit+0xcc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d115      	bne.n	8001d42 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_TIM_Base_MspInit+0xc4>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2101      	movs	r1, #1
 8001d36:	201e      	movs	r0, #30
 8001d38:	f000 fd7d 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d3c:	201e      	movs	r0, #30
 8001d3e:	f000 fd96 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800

08001d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a55      	ldr	r2, [pc, #340]	; (8001ed0 <HAL_TIM_MspPostInit+0x174>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d11f      	bne.n	8001dbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a53      	ldr	r2, [pc, #332]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH2_RGB_G_Pin|TIM1_CH3_RGB_R_Pin;
 8001d9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4848      	ldr	r0, [pc, #288]	; (8001ed8 <HAL_TIM_MspPostInit+0x17c>)
 8001db8:	f000 fe8c 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dbc:	e083      	b.n	8001ec6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d13d      	bne.n	8001e44 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4a39      	ldr	r2, [pc, #228]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	6313      	str	r3, [r2, #48]	; 0x30
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_RGB_B_Pin;
 8001e00:	2304      	movs	r3, #4
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_RGB_B_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	482f      	ldr	r0, [pc, #188]	; (8001ed8 <HAL_TIM_MspPostInit+0x17c>)
 8001e1c:	f000 fe5a 	bl	8002ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH4_EDF_Pin;
 8001e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH4_EDF_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4827      	ldr	r0, [pc, #156]	; (8001edc <HAL_TIM_MspPostInit+0x180>)
 8001e3e:	f000 fe49 	bl	8002ad4 <HAL_GPIO_Init>
}
 8001e42:	e040      	b.n	8001ec6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <HAL_TIM_MspPostInit+0x184>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d13b      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_TIM_MspPostInit+0x178>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH3_Y__Pin|TIM3_CH4_Y__Pin;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e96:	2302      	movs	r3, #2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480e      	ldr	r0, [pc, #56]	; (8001edc <HAL_TIM_MspPostInit+0x180>)
 8001ea2:	f000 fe17 	bl	8002ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH1_X__Pin|TIM3_CH2_X__Pin;
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4808      	ldr	r0, [pc, #32]	; (8001ee4 <HAL_TIM_MspPostInit+0x188>)
 8001ec2:	f000 fe07 	bl	8002ad4 <HAL_GPIO_Init>
}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	; 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40020800 	.word	0x40020800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d134      	bne.n	8001f74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_GPS_Pin|UART4_RX_GPS_Pin;
 8001f42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f54:	2308      	movs	r3, #8
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <HAL_UART_MspInit+0x9c>)
 8001f60:	f000 fdb8 	bl	8002ad4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2102      	movs	r1, #2
 8001f68:	2034      	movs	r0, #52	; 0x34
 8001f6a:	f000 fc64 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f6e:	2034      	movs	r0, #52	; 0x34
 8001f70:	f000 fc7d 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40004c00 	.word	0x40004c00
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020800 	.word	0x40020800

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f8ae 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM4_IRQHandler+0x10>)
 8001fe2:	f003 ff62 	bl	8005eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200002ec 	.word	0x200002ec

08001ff0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <UART4_IRQHandler+0x10>)
 8001ff6:	f004 fe5d 	bl	8006cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000334 	.word	0x20000334

08002004 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <OTG_FS_IRQHandler+0x10>)
 800200a:	f002 f828 	bl	800405e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200018c4 	.word	0x200018c4

08002018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002042:	490e      	ldr	r1, [pc, #56]	; (800207c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002058:	4c0b      	ldr	r4, [pc, #44]	; (8002088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002066:	f7ff ffd7 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f009 ff7f 	bl	800bf6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7ff f811 	bl	8001094 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002080:	0800c050 	.word	0x0800c050
  ldr r2, =_sbss
 8002084:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002088:	20001ff0 	.word	0x20001ff0

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_Init+0x40>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_Init+0x40>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_Init+0x40>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 fbb1 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f000 f808 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fcc4 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fbc9 	bl	800288a <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 fb91 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	200003e0 	.word	0x200003e0

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200003e0 	.word	0x200003e0

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_Delay+0x44>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffde 	bl	800215c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e033      	b.n	800223a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fc60 	bl	8001aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002202:	f023 0302 	bic.w	r3, r3, #2
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f93a 	bl	8002488 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f023 0303 	bic.w	r3, r3, #3
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
 800222a:	e001      	b.n	8002230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e105      	b.n	800246c <HAL_ADC_ConfigChannel+0x228>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b09      	cmp	r3, #9
 800226e:	d925      	bls.n	80022bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	3b1e      	subs	r3, #30
 8002286:	2207      	movs	r2, #7
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43da      	mvns	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	400a      	ands	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4403      	add	r3, r0
 80022ae:	3b1e      	subs	r3, #30
 80022b0:	409a      	lsls	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e022      	b.n	8002302 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6919      	ldr	r1, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	2207      	movs	r2, #7
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	409a      	lsls	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d824      	bhi.n	8002354 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b05      	subs	r3, #5
 800231c:	221f      	movs	r2, #31
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b05      	subs	r3, #5
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	; 0x34
 8002352:	e04c      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d824      	bhi.n	80023a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b23      	subs	r3, #35	; 0x23
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43da      	mvns	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	400a      	ands	r2, r1
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b23      	subs	r3, #35	; 0x23
 8002398:	fa00 f203 	lsl.w	r2, r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
 80023a4:	e023      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b41      	subs	r3, #65	; 0x41
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	400a      	ands	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b41      	subs	r3, #65	; 0x41
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_ADC_ConfigChannel+0x234>)
 80023f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_ADC_ConfigChannel+0x238>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1cc>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_ADC_ConfigChannel+0x238>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d123      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x21e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d003      	beq.n	800242a <HAL_ADC_ConfigChannel+0x1e6>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b11      	cmp	r3, #17
 8002428:	d11b      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d111      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_ADC_ConfigChannel+0x23c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_ADC_ConfigChannel+0x240>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9a      	lsrs	r2, r3, #18
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002454:	e002      	b.n	800245c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012300 	.word	0x40012300
 800247c:	40012000 	.word	0x40012000
 8002480:	20000000 	.word	0x20000000
 8002484:	431bde83 	.word	0x431bde83

08002488 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002490:	4b79      	ldr	r3, [pc, #484]	; (8002678 <ADC_Init+0x1f0>)
 8002492:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	4a58      	ldr	r2, [pc, #352]	; (800267c <ADC_Init+0x1f4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	e00f      	b.n	8002586 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002584:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0202 	bic.w	r2, r2, #2
 8002594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
 80025a0:	005a      	lsls	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	3b01      	subs	r3, #1
 80025e0:	035a      	lsls	r2, r3, #13
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	e007      	b.n	80025fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	3b01      	subs	r3, #1
 8002618:	051a      	lsls	r2, r3, #20
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800263e:	025a      	lsls	r2, r3, #9
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6899      	ldr	r1, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	029a      	lsls	r2, r3, #10
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40012300 	.word	0x40012300
 800267c:	0f000001 	.word	0x0f000001

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_Start_IT+0x26>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e040      	b.n	800294a <HAL_DMA_Start_IT+0xa8>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d12f      	bne.n	800293c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f8c0 	bl	8002a76 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	223f      	movs	r2, #63	; 0x3f
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0216 	orr.w	r2, r2, #22
 8002910:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0208 	orr.w	r2, r2, #8
 8002928:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e005      	b.n	8002948 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fbfc 	bl	800215c <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d008      	beq.n	8002984 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e052      	b.n	8002a2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0216 	bic.w	r2, r2, #22
 8002992:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_DMA_Abort+0x62>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d4:	e013      	b.n	80029fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d6:	f7ff fbc1 	bl	800215c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d90c      	bls.n	80029fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2203      	movs	r2, #3
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e015      	b.n	8002a2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e4      	bne.n	80029d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	223f      	movs	r2, #63	; 0x3f
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d004      	beq.n	8002a50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e00c      	b.n	8002a6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2205      	movs	r2, #5
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a92:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d108      	bne.n	8002ab6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ab4:	e007      	b.n	8002ac6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e16b      	b.n	8002dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 815a 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d005      	beq.n	8002b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d017      	beq.n	8002bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d123      	bne.n	8002c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0203 	and.w	r2, r3, #3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b4 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <HAL_GPIO_Init+0x30c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_GPIO_Init+0x30c>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_GPIO_Init+0x30c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c76:	4a5b      	ldr	r2, [pc, #364]	; (8002de4 <HAL_GPIO_Init+0x310>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_GPIO_Init+0x314>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_GPIO_Init+0x318>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a50      	ldr	r2, [pc, #320]	; (8002df0 <HAL_GPIO_Init+0x31c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4f      	ldr	r2, [pc, #316]	; (8002df4 <HAL_GPIO_Init+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4e      	ldr	r2, [pc, #312]	; (8002df8 <HAL_GPIO_Init+0x324>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x216>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_GPIO_Init+0x328>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x212>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <HAL_GPIO_Init+0x32c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4b      	ldr	r2, [pc, #300]	; (8002e04 <HAL_GPIO_Init+0x330>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x20a>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00e      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e00c      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e00a      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x228>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_GPIO_Init+0x310>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_GPIO_Init+0x334>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f ae90 	bls.w	8002af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40021400 	.word	0x40021400
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40021c00 	.word	0x40021c00
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e28:	e003      	b.n	8002e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fe5e 	bl	8001b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f002 fe38 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e2:	f7ff f83b 	bl	800215c <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80d9 	bne.w	80032a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2319      	movs	r3, #25
 80030fc:	2201      	movs	r2, #1
 80030fe:	496d      	ldr	r1, [pc, #436]	; (80032b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fc7f 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	e0cc      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_I2C_Mem_Write+0x56>
 800311a:	2302      	movs	r3, #2
 800311c:	e0c5      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003186:	88f8      	ldrh	r0, [r7, #6]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fab6 	bl	8003708 <I2C_RequestMemoryWrite>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d052      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e081      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fd00 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_I2C_Mem_Write+0x180>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1aa      	bne.n	80031a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fcec 	bl	8003c32 <I2C_WaitOnBTFFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e016      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d6:	f7fe ff41 	bl	800215c <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	f040 8208 	bne.w	80036fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2319      	movs	r3, #25
 80032f0:	2201      	movs	r2, #1
 80032f2:	497b      	ldr	r1, [pc, #492]	; (80034e0 <HAL_I2C_Mem_Read+0x224>)
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fb85 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
 8003302:	e1fb      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_I2C_Mem_Read+0x56>
 800330e:	2302      	movs	r3, #2
 8003310:	e1f4      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d007      	beq.n	8003338 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2222      	movs	r2, #34	; 0x22
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a5b      	ldr	r2, [pc, #364]	; (80034e4 <HAL_I2C_Mem_Read+0x228>)
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337a:	88f8      	ldrh	r0, [r7, #6]
 800337c:	893a      	ldrh	r2, [r7, #8]
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4603      	mov	r3, r0
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa52 	bl	8003834 <I2C_RequestMemoryRead>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1b0      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e184      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d11b      	bne.n	800340a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e164      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b02      	cmp	r3, #2
 8003410:	d11b      	bne.n	800344a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	e144      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003460:	e138      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	2b03      	cmp	r3, #3
 8003468:	f200 80f1 	bhi.w	800364e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b01      	cmp	r3, #1
 8003472:	d123      	bne.n	80034bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fc1b 	bl	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e139      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ba:	e10b      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d14e      	bne.n	8003562 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	2200      	movs	r2, #0
 80034cc:	4906      	ldr	r1, [pc, #24]	; (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fa98 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e10e      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
 80034de:	bf00      	nop
 80034e0:	00100002 	.word	0x00100002
 80034e4:	ffff0000 	.word	0xffff0000
 80034e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003560:	e0b8      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4966      	ldr	r1, [pc, #408]	; (8003704 <HAL_I2C_Mem_Read+0x448>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fa49 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0bf      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2200      	movs	r2, #0
 80035c6:	494f      	ldr	r1, [pc, #316]	; (8003704 <HAL_I2C_Mem_Read+0x448>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fa1b 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e091      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e042      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fb2e 	bl	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e04c      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d118      	bne.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f aec2 	bne.w	8003462 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010004 	.word	0x00010004

08003708 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	4603      	mov	r3, r0
 8003718:	817b      	strh	r3, [r7, #10]
 800371a:	460b      	mov	r3, r1
 800371c:	813b      	strh	r3, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2200      	movs	r2, #0
 800373a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f960 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003758:	d103      	bne.n	8003762 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e05f      	b.n	8003826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003766:	897b      	ldrh	r3, [r7, #10]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	492d      	ldr	r1, [pc, #180]	; (8003830 <I2C_RequestMemoryWrite+0x128>)
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f998 	bl	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e04c      	b.n	8003826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	6a39      	ldr	r1, [r7, #32]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fa02 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d107      	bne.n	80037ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e02b      	b.n	8003826 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]
 80037de:	e021      	b.n	8003824 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037e0:	893b      	ldrh	r3, [r7, #8]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	6a39      	ldr	r1, [r7, #32]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f9dc 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b04      	cmp	r3, #4
 8003804:	d107      	bne.n	8003816 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e005      	b.n	8003826 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381a:	893b      	ldrh	r3, [r7, #8]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	00010002 	.word	0x00010002

08003834 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2200      	movs	r2, #0
 8003876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8c2 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003894:	d103      	bne.n	800389e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0aa      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	4952      	ldr	r1, [pc, #328]	; (8003a00 <I2C_RequestMemoryRead+0x1cc>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f8fa 	bl	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e097      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f964 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e076      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e021      	b.n	8003960 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f93e 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e050      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	6a39      	ldr	r1, [r7, #32]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f923 	bl	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2b04      	cmp	r3, #4
 8003976:	d107      	bne.n	8003988 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e035      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f82b 	bl	8003a04 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c2:	d103      	bne.n	80039cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e013      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	4906      	ldr	r1, [pc, #24]	; (8003a00 <I2C_RequestMemoryRead+0x1cc>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f863 	bl	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	00010002 	.word	0x00010002

08003a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a14:	e025      	b.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d021      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fe fb9d 	bl	800215c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d116      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e023      	b.n	8003aaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10d      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	e00c      	b.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d0b6      	beq.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac0:	e051      	b.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad0:	d123      	bne.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f043 0204 	orr.w	r2, r3, #4
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e046      	b.n	8003ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d021      	beq.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7fe fb1b 	bl	800215c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e020      	b.n	8003ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10c      	bne.n	8003b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e00b      	b.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	43da      	mvns	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d18d      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bbc:	e02d      	b.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f8ce 	bl	8003d60 <I2C_IsAcknowledgeFailed>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02d      	b.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d021      	beq.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fe fac1 	bl	800215c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d116      	bne.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e007      	b.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d1ca      	bne.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c3e:	e02d      	b.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f88d 	bl	8003d60 <I2C_IsAcknowledgeFailed>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e02d      	b.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d021      	beq.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fe fa80 	bl	800215c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d1ca      	bne.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc0:	e042      	b.n	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d119      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0210 	mvn.w	r2, #16
 8003cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e029      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d04:	f7fe fa2a 	bl	800215c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e007      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d1b5      	bne.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d11b      	bne.n	8003db0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc0:	b08f      	sub	sp, #60	; 0x3c
 8003dc2:	af0a      	add	r7, sp, #40	; 0x28
 8003dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e10f      	b.n	8003ff0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f007 fdaa 	bl	800b944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f8e9 	bl	8007fe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	687e      	ldr	r6, [r7, #4]
 8003e1c:	466d      	mov	r5, sp
 8003e1e:	f106 0410 	add.w	r4, r6, #16
 8003e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e32:	1d33      	adds	r3, r6, #4
 8003e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f003 ffc0 	bl	8007dbc <USB_CoreInit>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0d0      	b.n	8003ff0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 f8d7 	bl	8008008 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e04a      	b.n	8003ef6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	333d      	adds	r3, #61	; 0x3d
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	333c      	adds	r3, #60	; 0x3c
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	b298      	uxth	r0, r3
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3344      	adds	r3, #68	; 0x44
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3340      	adds	r3, #64	; 0x40
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3348      	adds	r3, #72	; 0x48
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	334c      	adds	r3, #76	; 0x4c
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3354      	adds	r3, #84	; 0x54
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3af      	bcc.n	8003e60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e044      	b.n	8003f90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3b5      	bcc.n	8003f06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	687e      	ldr	r6, [r7, #4]
 8003fa2:	466d      	mov	r5, sp
 8003fa4:	f106 0410 	add.w	r4, r6, #16
 8003fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fb8:	1d33      	adds	r3, r6, #4
 8003fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fbc:	6838      	ldr	r0, [r7, #0]
 8003fbe:	f004 f86f 	bl	80080a0 <USB_DevInit>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e00d      	b.n	8003ff0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f005 f9be 	bl	800936a <USB_DevDisconnect>

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_PCD_Start+0x1c>
 8004010:	2302      	movs	r3, #2
 8004012:	e020      	b.n	8004056 <HAL_PCD_Start+0x5e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2b01      	cmp	r3, #1
 8004022:	d109      	bne.n	8004038 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004028:	2b01      	cmp	r3, #1
 800402a:	d005      	beq.n	8004038 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f003 ffc1 	bl	8007fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f005 f96e 	bl	8009328 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b08d      	sub	sp, #52	; 0x34
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f005 fa2c 	bl	80094d2 <USB_GetMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 848a 	bne.w	8004996 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 f990 	bl	80093ac <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8480 	beq.w	8004994 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f005 f97d 	bl	80093ac <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d107      	bne.n	80040cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f002 0202 	and.w	r2, r2, #2
 80040ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 f96b 	bl	80093ac <USB_ReadInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d161      	bne.n	80041a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0210 	bic.w	r2, r2, #16
 80040ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	0c5b      	lsrs	r3, r3, #17
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2b02      	cmp	r3, #2
 800411a:	d124      	bne.n	8004166 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d035      	beq.n	8004194 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6a38      	ldr	r0, [r7, #32]
 800413c:	f004 ffa2 	bl	8009084 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414c:	441a      	add	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415e:	441a      	add	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
 8004164:	e016      	b.n	8004194 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	0c5b      	lsrs	r3, r3, #17
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	2b06      	cmp	r3, #6
 8004170:	d110      	bne.n	8004194 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004178:	2208      	movs	r2, #8
 800417a:	4619      	mov	r1, r3
 800417c:	6a38      	ldr	r0, [r7, #32]
 800417e:	f004 ff81 	bl	8009084 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418e:	441a      	add	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0210 	orr.w	r2, r2, #16
 80041a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f005 f8ff 	bl	80093ac <USB_ReadInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041b8:	f040 80a7 	bne.w	800430a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 f904 	bl	80093d2 <USB_ReadDevAllOutEpInterrupt>
 80041ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041cc:	e099      	b.n	8004302 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808e 	beq.w	80042f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 f928 	bl	800943a <USB_ReadDevOutEPInterrupt>
 80041ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2301      	movs	r3, #1
 8004206:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fec2 	bl	8004f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2308      	movs	r3, #8
 800422a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800422c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ff98 	bl	8005164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	461a      	mov	r2, r3
 800424c:	2310      	movs	r3, #16
 800424e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d030      	beq.n	80042bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d109      	bne.n	800427a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004278:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f007 fc53 	bl	800bb50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	461a      	mov	r2, r3
 80042b8:	2302      	movs	r3, #2
 80042ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	2320      	movs	r3, #32
 80042d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	3301      	adds	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af62 	bne.w	80041ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f005 f84c 	bl	80093ac <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800431e:	f040 80db 	bne.w	80044d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f005 f86d 	bl	8009406 <USB_ReadDevAllInEpInterrupt>
 800432c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004332:	e0cd      	b.n	80044d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80c2 	beq.w	80044c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f005 f893 	bl	8009476 <USB_ReadDevInEPInterrupt>
 8004350:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d057      	beq.n	800440c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4013      	ands	r3, r2
 800437e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	2301      	movs	r3, #1
 8004390:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d132      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334c      	adds	r3, #76	; 0x4c
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4403      	add	r3, r0
 80043ba:	3348      	adds	r3, #72	; 0x48
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4419      	add	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4403      	add	r3, r0
 80043ce:	334c      	adds	r3, #76	; 0x4c
 80043d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3354      	adds	r3, #84	; 0x54
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043f8:	461a      	mov	r2, r3
 80043fa:	2101      	movs	r1, #1
 80043fc:	f005 f89a 	bl	8009534 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	b2db      	uxtb	r3, r3
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f007 fb1d 	bl	800ba46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	2308      	movs	r3, #8
 8004426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	461a      	mov	r2, r3
 8004440:	2310      	movs	r3, #16
 8004442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	461a      	mov	r2, r3
 800445c:	2340      	movs	r3, #64	; 0x40
 800445e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800446a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446c:	6a38      	ldr	r0, [r7, #32]
 800446e:	f003 ff7b 	bl	8008368 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3338      	adds	r3, #56	; 0x38
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	78db      	ldrb	r3, [r3, #3]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d108      	bne.n	80044a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f007 fb6a 	bl	800bb74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2302      	movs	r3, #2
 80044b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fcdb 	bl	8004e7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f af2e 	bne.w	8004334 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f004 ff65 	bl	80093ac <USB_ReadInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ec:	d122      	bne.n	8004534 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004508:	2b01      	cmp	r3, #1
 800450a:	d108      	bne.n	800451e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004514:	2100      	movs	r1, #0
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fec2 	bl	80052a0 <HAL_PCDEx_LPM_Callback>
 800451c:	e002      	b.n	8004524 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f007 fb08 	bl	800bb34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f004 ff37 	bl	80093ac <USB_ReadInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d112      	bne.n	8004570 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f007 fac4 	bl	800bae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800456e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f004 ff19 	bl	80093ac <USB_ReadInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	f040 80b7 	bne.w	80046f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2110      	movs	r1, #16
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fee0 	bl	8008368 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ac:	e046      	b.n	800463c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	461a      	mov	r2, r3
 80045bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004614:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004634:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	3301      	adds	r3, #1
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d3b3      	bcc.n	80045ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004654:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004658:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004672:	f043 030b 	orr.w	r3, r3, #11
 8004676:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004688:	f043 030b 	orr.w	r3, r3, #11
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	e015      	b.n	80046bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b6:	f043 030b 	orr.w	r3, r3, #11
 80046ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046e0:	461a      	mov	r2, r3
 80046e2:	f004 ff27 	bl	8009534 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 fe56 	bl	80093ac <USB_ReadInterrupts>
 8004700:	4603      	mov	r3, r0
 8004702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	d124      	bne.n	8004756 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f004 feec 	bl	80094ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f003 fea1 	bl	8008462 <USB_GetDevSpeed>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681c      	ldr	r4, [r3, #0]
 800472c:	f001 f9e8 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8004730:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	4620      	mov	r0, r4
 800473c:	f003 fba0 	bl	8007e80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f007 f9a8 	bl	800ba96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004754:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fe26 	bl	80093ac <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d10a      	bne.n	8004780 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f007 f985 	bl	800ba7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f002 0208 	and.w	r2, r2, #8
 800477e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f004 fe11 	bl	80093ac <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d122      	bne.n	80047da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a0:	2301      	movs	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	e014      	b.n	80047d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb27 	bl	8004e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3301      	adds	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3e5      	bcc.n	80047a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fde4 	bl	80093ac <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ee:	d13b      	bne.n	8004868 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	e02b      	b.n	800484e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3340      	adds	r3, #64	; 0x40
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d115      	bne.n	8004848 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800481c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	da12      	bge.n	8004848 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	333f      	adds	r3, #63	; 0x3f
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fae8 	bl	8004e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	3301      	adds	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	429a      	cmp	r2, r3
 8004856:	d3ce      	bcc.n	80047f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f004 fd9d 	bl	80093ac <USB_ReadInterrupts>
 8004872:	4603      	mov	r3, r0
 8004874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800487c:	d155      	bne.n	800492a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487e:	2301      	movs	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	e045      	b.n	8004910 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d12e      	bne.n	800490a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da2b      	bge.n	800490a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d121      	bne.n	800490a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004906:	6053      	str	r3, [r2, #4]
            break;
 8004908:	e007      	b.n	800491a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	3301      	adds	r3, #1
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b4      	bcc.n	8004884 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f004 fd3c 	bl	80093ac <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d10a      	bne.n	8004956 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f007 f929 	bl	800bb98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fd26 	bl	80093ac <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d115      	bne.n	8004996 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f007 f919 	bl	800bbb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e000      	b.n	8004996 <HAL_PCD_IRQHandler+0x938>
      return;
 8004994:	bf00      	nop
    }
  }
}
 8004996:	3734      	adds	r7, #52	; 0x34
 8004998:	46bd      	mov	sp, r7
 800499a:	bd90      	pop	{r4, r7, pc}

0800499c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_PCD_SetAddress+0x1a>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e013      	b.n	80049de <HAL_PCD_SetAddress+0x42>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 fc84 	bl	80092dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	4608      	mov	r0, r1
 80049f0:	4611      	mov	r1, r2
 80049f2:	461a      	mov	r2, r3
 80049f4:	4603      	mov	r3, r0
 80049f6:	70fb      	strb	r3, [r7, #3]
 80049f8:	460b      	mov	r3, r1
 80049fa:	803b      	strh	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da0f      	bge.n	8004a2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3338      	adds	r3, #56	; 0x38
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3304      	adds	r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	705a      	strb	r2, [r3, #1]
 8004a2a:	e00f      	b.n	8004a4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	3304      	adds	r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a58:	883a      	ldrh	r2, [r7, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	78ba      	ldrb	r2, [r7, #2]
 8004a62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a76:	78bb      	ldrb	r3, [r7, #2]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d102      	bne.n	8004a82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_PCD_EP_Open+0xaa>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e00e      	b.n	8004aae <HAL_PCD_EP_Open+0xc8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f003 fd04 	bl	80084ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004aac:	7afb      	ldrb	r3, [r7, #11]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da0f      	bge.n	8004aea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3338      	adds	r3, #56	; 0x38
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	3304      	adds	r3, #4
 8004ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	705a      	strb	r2, [r3, #1]
 8004ae8:	e00f      	b.n	8004b0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4413      	add	r3, r2
 8004b00:	3304      	adds	r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_PCD_EP_Close+0x6e>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e00e      	b.n	8004b42 <HAL_PCD_EP_Close+0x8c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 fd42 	bl	80085bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	460b      	mov	r3, r1
 8004b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	3304      	adds	r3, #4
 8004b72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b8c:	7afb      	ldrb	r3, [r7, #11]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	f004 f821 	bl	8008c04 <USB_EP0StartXfer>
 8004bc2:	e008      	b.n	8004bd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	f003 fdcf 	bl	8008774 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f003 020f 	and.w	r2, r3, #15
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c20:	7afb      	ldrb	r3, [r7, #11]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	3338      	adds	r3, #56	; 0x38
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	3304      	adds	r3, #4
 8004c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c50:	7afb      	ldrb	r3, [r7, #11]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d102      	bne.n	8004c6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	f003 ffbf 	bl	8008c04 <USB_EP0StartXfer>
 8004c86:	e008      	b.n	8004c9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	f003 fd6d 	bl	8008774 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d901      	bls.n	8004cc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e050      	b.n	8004d64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0f      	bge.n	8004cea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	3338      	adds	r3, #56	; 0x38
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3304      	adds	r3, #4
 8004ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	705a      	strb	r2, [r3, #1]
 8004ce8:	e00d      	b.n	8004d06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_PCD_EP_SetStall+0x82>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e01e      	b.n	8004d64 <HAL_PCD_EP_SetStall+0xc0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 f9fd 	bl	8009134 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d54:	461a      	mov	r2, r3
 8004d56:	f004 fbed 	bl	8009534 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d901      	bls.n	8004d8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e042      	b.n	8004e10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da0f      	bge.n	8004db2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	3338      	adds	r3, #56	; 0x38
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	3304      	adds	r3, #4
 8004da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	705a      	strb	r2, [r3, #1]
 8004db0:	e00f      	b.n	8004dd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_EP_ClrStall+0x86>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e00e      	b.n	8004e10 <HAL_PCD_EP_ClrStall+0xa4>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fa05 	bl	8009210 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da0c      	bge.n	8004e46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 020f 	and.w	r2, r3, #15
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	3338      	adds	r3, #56	; 0x38
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3304      	adds	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e00c      	b.n	8004e60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f004 f824 	bl	8008eb4 <USB_EPStopXfer>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e70:	7afb      	ldrb	r3, [r7, #11]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08a      	sub	sp, #40	; 0x28
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	3338      	adds	r3, #56	; 0x38
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d901      	bls.n	8004eb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e06c      	b.n	8004f8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d902      	bls.n	8004ece <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ed6:	e02b      	b.n	8004f30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d902      	bls.n	8004ef4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3303      	adds	r3, #3
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6919      	ldr	r1, [r3, #16]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4603      	mov	r3, r0
 8004f12:	6978      	ldr	r0, [r7, #20]
 8004f14:	f004 f878 	bl	8009008 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	441a      	add	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d809      	bhi.n	8004f5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1be      	bne.n	8004ed8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d811      	bhi.n	8004f8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	6939      	ldr	r1, [r7, #16]
 8004f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f86:	4013      	ands	r3, r2
 8004f88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	333c      	adds	r3, #60	; 0x3c
 8004fac:	3304      	adds	r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d17b      	bne.n	80050c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4a61      	ldr	r2, [pc, #388]	; (800515c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	f240 80b9 	bls.w	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80b3 	beq.w	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffc:	6093      	str	r3, [r2, #8]
 8004ffe:	e0a7      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	461a      	mov	r2, r3
 8005018:	2320      	movs	r3, #32
 800501a:	6093      	str	r3, [r2, #8]
 800501c:	e098      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8093 	bne.w	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4a4b      	ldr	r2, [pc, #300]	; (800515c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d90f      	bls.n	8005052 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	6093      	str	r3, [r2, #8]
 8005050:	e07e      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	0159      	lsls	r1, r3, #5
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	440b      	add	r3, r1
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d114      	bne.n	80050b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800509c:	461a      	mov	r2, r3
 800509e:	2101      	movs	r1, #1
 80050a0:	f004 fa48 	bl	8009534 <USB_EP0_OutStart>
 80050a4:	e006      	b.n	80050b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	441a      	add	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f006 fca8 	bl	800ba10 <HAL_PCD_DataOutStageCallback>
 80050c0:	e046      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d124      	bne.n	8005114 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	6093      	str	r3, [r2, #8]
 80050e8:	e032      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	2320      	movs	r3, #32
 8005104:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f006 fc7f 	bl	800ba10 <HAL_PCD_DataOutStageCallback>
 8005112:	e01d      	b.n	8005150 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d114      	bne.n	8005144 <PCD_EP_OutXfrComplete_int+0x1b0>
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800513c:	461a      	mov	r2, r3
 800513e:	2100      	movs	r1, #0
 8005140:	f004 f9f8 	bl	8009534 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f006 fc60 	bl	800ba10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	4f54300a 	.word	0x4f54300a
 8005160:	4f54310a 	.word	0x4f54310a

08005164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	333c      	adds	r3, #60	; 0x3c
 800517c:	3304      	adds	r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <PCD_EP_OutSetupPacket_int+0x88>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d90e      	bls.n	80051b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	461a      	mov	r2, r3
 80051b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f006 fc17 	bl	800b9ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <PCD_EP_OutSetupPacket_int+0x88>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d90c      	bls.n	80051e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d108      	bne.n	80051e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051d8:	461a      	mov	r2, r3
 80051da:	2101      	movs	r1, #1
 80051dc:	f004 f9aa 	bl	8009534 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	4f54300a 	.word	0x4f54300a

080051f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
 80051fc:	4613      	mov	r3, r2
 80051fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800520e:	883b      	ldrh	r3, [r7, #0]
 8005210:	0419      	lsls	r1, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	430a      	orrs	r2, r1
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
 800521c:	e028      	b.n	8005270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e00d      	b.n	800524e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	3340      	adds	r3, #64	; 0x40
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	3301      	adds	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	3b01      	subs	r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d3ec      	bcc.n	8005232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005258:	883b      	ldrh	r3, [r7, #0]
 800525a:	0418      	lsls	r0, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	3b01      	subs	r3, #1
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4302      	orrs	r2, r0
 8005268:	3340      	adds	r3, #64	; 0x40
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e267      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d075      	beq.n	80053c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052d6:	4b88      	ldr	r3, [pc, #544]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d00c      	beq.n	80052fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e2:	4b85      	ldr	r3, [pc, #532]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d112      	bne.n	8005314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ee:	4b82      	ldr	r3, [pc, #520]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4b7e      	ldr	r3, [pc, #504]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x108>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d157      	bne.n	80053c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e242      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x74>
 800531e:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a75      	ldr	r2, [pc, #468]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e01d      	b.n	8005368 <HAL_RCC_OscConfig+0xb0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x98>
 8005336:	4b70      	ldr	r3, [pc, #448]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6f      	ldr	r2, [pc, #444]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b6d      	ldr	r3, [pc, #436]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6c      	ldr	r2, [pc, #432]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xb0>
 8005350:	4b69      	ldr	r3, [pc, #420]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a68      	ldr	r2, [pc, #416]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b66      	ldr	r3, [pc, #408]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a65      	ldr	r2, [pc, #404]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fc fef4 	bl	800215c <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005378:	f7fc fef0 	bl	800215c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e207      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	4b5b      	ldr	r3, [pc, #364]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0xc0>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7fc fee0 	bl	800215c <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a0:	f7fc fedc 	bl	800215c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e1f3      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	4b51      	ldr	r3, [pc, #324]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0xe8>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d063      	beq.n	8005496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ce:	4b4a      	ldr	r3, [pc, #296]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053da:	4b47      	ldr	r3, [pc, #284]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d11c      	bne.n	8005420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e6:	4b44      	ldr	r3, [pc, #272]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d116      	bne.n	8005420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_RCC_OscConfig+0x152>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e1c7      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4937      	ldr	r1, [pc, #220]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	e03a      	b.n	8005496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005428:	4b34      	ldr	r3, [pc, #208]	; (80054fc <HAL_RCC_OscConfig+0x244>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fc fe95 	bl	800215c <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005436:	f7fc fe91 	bl	800215c <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1a8      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4925      	ldr	r1, [pc, #148]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
 8005468:	e015      	b.n	8005496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_RCC_OscConfig+0x244>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fc fe74 	bl	800215c <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005478:	f7fc fe70 	bl	800215c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e187      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d036      	beq.n	8005510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0x248>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fe54 	bl	800215c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fc fe50 	bl	800215c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e167      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCC_OscConfig+0x240>)
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x200>
 80054d6:	e01b      	b.n	8005510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_OscConfig+0x248>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054de:	f7fc fe3d 	bl	800215c <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e4:	e00e      	b.n	8005504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fc fe39 	bl	800215c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d907      	bls.n	8005504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e150      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
 80054f8:	40023800 	.word	0x40023800
 80054fc:	42470000 	.word	0x42470000
 8005500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005504:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ea      	bne.n	80054e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8097 	beq.w	800564c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005522:	4b81      	ldr	r3, [pc, #516]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	4b7d      	ldr	r3, [pc, #500]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	4a7c      	ldr	r2, [pc, #496]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553c:	6413      	str	r3, [r2, #64]	; 0x40
 800553e:	4b7a      	ldr	r3, [pc, #488]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554e:	4b77      	ldr	r3, [pc, #476]	; (800572c <HAL_RCC_OscConfig+0x474>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d118      	bne.n	800558c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555a:	4b74      	ldr	r3, [pc, #464]	; (800572c <HAL_RCC_OscConfig+0x474>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a73      	ldr	r2, [pc, #460]	; (800572c <HAL_RCC_OscConfig+0x474>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005566:	f7fc fdf9 	bl	800215c <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556e:	f7fc fdf5 	bl	800215c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e10c      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	4b6a      	ldr	r3, [pc, #424]	; (800572c <HAL_RCC_OscConfig+0x474>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d106      	bne.n	80055a2 <HAL_RCC_OscConfig+0x2ea>
 8005594:	4b64      	ldr	r3, [pc, #400]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a63      	ldr	r2, [pc, #396]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	e01c      	b.n	80055dc <HAL_RCC_OscConfig+0x324>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x30c>
 80055aa:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	4a5e      	ldr	r2, [pc, #376]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6713      	str	r3, [r2, #112]	; 0x70
 80055b6:	4b5c      	ldr	r3, [pc, #368]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a5b      	ldr	r2, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0x324>
 80055c4:	4b58      	ldr	r3, [pc, #352]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a57      	ldr	r2, [pc, #348]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	4b55      	ldr	r3, [pc, #340]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a54      	ldr	r2, [pc, #336]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fc fdba 	bl	800215c <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fc fdb6 	bl	800215c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0cb      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	4b49      	ldr	r3, [pc, #292]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0ee      	beq.n	80055ec <HAL_RCC_OscConfig+0x334>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005610:	f7fc fda4 	bl	800215c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005616:	e00a      	b.n	800562e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fc fda0 	bl	800215c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0b5      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562e:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ee      	bne.n	8005618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005640:	4b39      	ldr	r3, [pc, #228]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	4a38      	ldr	r2, [pc, #224]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a1 	beq.w	8005798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005656:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b08      	cmp	r3, #8
 8005660:	d05c      	beq.n	800571c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d141      	bne.n	80056ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566a:	4b31      	ldr	r3, [pc, #196]	; (8005730 <HAL_RCC_OscConfig+0x478>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005670:	f7fc fd74 	bl	800215c <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005678:	f7fc fd70 	bl	800215c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e087      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	3b01      	subs	r3, #1
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	491b      	ldr	r1, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x478>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fc fd49 	bl	800215c <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fc fd45 	bl	800215c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e05c      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCC_OscConfig+0x416>
 80056ec:	e054      	b.n	8005798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_RCC_OscConfig+0x478>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fd32 	bl	800215c <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fc fd2e 	bl	800215c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e045      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x470>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x444>
 800571a:	e03d      	b.n	8005798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d107      	bne.n	8005734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e038      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
 8005728:	40023800 	.word	0x40023800
 800572c:	40007000 	.word	0x40007000
 8005730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <HAL_RCC_OscConfig+0x4ec>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d028      	beq.n	8005794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d121      	bne.n	8005794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d11a      	bne.n	8005794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005764:	4013      	ands	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800576c:	4293      	cmp	r3, r2
 800576e:	d111      	bne.n	8005794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	3b01      	subs	r3, #1
 800577e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800

080057a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0cc      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057bc:	4b68      	ldr	r3, [pc, #416]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d90c      	bls.n	80057e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b65      	ldr	r3, [pc, #404]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	4b63      	ldr	r3, [pc, #396]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0b8      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d020      	beq.n	8005832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057fc:	4b59      	ldr	r3, [pc, #356]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4a58      	ldr	r2, [pc, #352]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005814:	4b53      	ldr	r3, [pc, #332]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4a52      	ldr	r2, [pc, #328]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800581e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005820:	4b50      	ldr	r3, [pc, #320]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	494d      	ldr	r1, [pc, #308]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d044      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d107      	bne.n	8005856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d119      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e07f      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d003      	beq.n	8005866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e06f      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e067      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005886:	4b37      	ldr	r3, [pc, #220]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f023 0203 	bic.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4934      	ldr	r1, [pc, #208]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	4313      	orrs	r3, r2
 8005896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005898:	f7fc fc60 	bl	800215c <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a0:	f7fc fc5c 	bl	800215c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e04f      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b6:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 020c 	and.w	r2, r3, #12
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d1eb      	bne.n	80058a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058c8:	4b25      	ldr	r3, [pc, #148]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d20c      	bcs.n	80058f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b20      	ldr	r3, [pc, #128]	; (8005960 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e032      	b.n	8005956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058fc:	4b19      	ldr	r3, [pc, #100]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	4916      	ldr	r1, [pc, #88]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	490e      	ldr	r1, [pc, #56]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800592e:	f000 f821 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005932:	4602      	mov	r2, r0
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	490a      	ldr	r1, [pc, #40]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 8005940:	5ccb      	ldrb	r3, [r1, r3]
 8005942:	fa22 f303 	lsr.w	r3, r2, r3
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <HAL_RCC_ClockConfig+0x1c8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fc fbc0 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023c00 	.word	0x40023c00
 8005964:	40023800 	.word	0x40023800
 8005968:	0800c028 	.word	0x0800c028
 800596c:	20000000 	.word	0x20000000
 8005970:	20000004 	.word	0x20000004

08005974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005978:	b090      	sub	sp, #64	; 0x40
 800597a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
 8005980:	2300      	movs	r3, #0
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005984:	2300      	movs	r3, #0
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800598c:	4b59      	ldr	r3, [pc, #356]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 030c 	and.w	r3, r3, #12
 8005994:	2b08      	cmp	r3, #8
 8005996:	d00d      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005998:	2b08      	cmp	r3, #8
 800599a:	f200 80a1 	bhi.w	8005ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0x34>
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_GetSysClockFreq+0x3a>
 80059a6:	e09b      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80059ac:	e09b      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <HAL_RCC_GetSysClockFreq+0x188>)
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059b2:	e098      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b4:	4b4f      	ldr	r3, [pc, #316]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059be:	4b4d      	ldr	r3, [pc, #308]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d028      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ca:	4b4a      	ldr	r3, [pc, #296]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	099b      	lsrs	r3, r3, #6
 80059d0:	2200      	movs	r2, #0
 80059d2:	623b      	str	r3, [r7, #32]
 80059d4:	627a      	str	r2, [r7, #36]	; 0x24
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059dc:	2100      	movs	r1, #0
 80059de:	4b47      	ldr	r3, [pc, #284]	; (8005afc <HAL_RCC_GetSysClockFreq+0x188>)
 80059e0:	fb03 f201 	mul.w	r2, r3, r1
 80059e4:	2300      	movs	r3, #0
 80059e6:	fb00 f303 	mul.w	r3, r0, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	4a43      	ldr	r2, [pc, #268]	; (8005afc <HAL_RCC_GetSysClockFreq+0x188>)
 80059ee:	fba0 1202 	umull	r1, r2, r0, r2
 80059f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f4:	460a      	mov	r2, r1
 80059f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	4413      	add	r3, r2
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	2200      	movs	r2, #0
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a0e:	f7fa fc2b 	bl	8000268 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4613      	mov	r3, r2
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1a:	e053      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	2200      	movs	r2, #0
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	617a      	str	r2, [r7, #20]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a2e:	f04f 0b00 	mov.w	fp, #0
 8005a32:	4652      	mov	r2, sl
 8005a34:	465b      	mov	r3, fp
 8005a36:	f04f 0000 	mov.w	r0, #0
 8005a3a:	f04f 0100 	mov.w	r1, #0
 8005a3e:	0159      	lsls	r1, r3, #5
 8005a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a44:	0150      	lsls	r0, r2, #5
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8005a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a66:	ebb2 0408 	subs.w	r4, r2, r8
 8005a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	00eb      	lsls	r3, r5, #3
 8005a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a7c:	00e2      	lsls	r2, r4, #3
 8005a7e:	4614      	mov	r4, r2
 8005a80:	461d      	mov	r5, r3
 8005a82:	eb14 030a 	adds.w	r3, r4, sl
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	eb45 030b 	adc.w	r3, r5, fp
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	028b      	lsls	r3, r1, #10
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	028a      	lsls	r2, r1, #10
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	60fa      	str	r2, [r7, #12]
 8005ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ab8:	f7fa fbd6 	bl	8000268 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3740      	adds	r7, #64	; 0x40
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	017d7840 	.word	0x017d7840

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000000 	.word	0x20000000

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800c038 	.word	0x0800c038

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800c038 	.word	0x0800c038

08005b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e07b      	b.n	8005c72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d108      	bne.n	8005b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8a:	d009      	beq.n	8005ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	61da      	str	r2, [r3, #28]
 8005b92:	e005      	b.n	8005ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc f81e 	bl	8001bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	ea42 0103 	orr.w	r1, r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	f003 0104 	and.w	r1, r3, #4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0210 	and.w	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e041      	b.n	8005d10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fff3 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f000 fbb1 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04e      	b.n	8005dce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d01d      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_TIM_Base_Start_IT+0xd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d111      	bne.n	8005dbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b06      	cmp	r3, #6
 8005da8:	d010      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40010400 	.word	0x40010400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40001800 	.word	0x40001800

08005df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e041      	b.n	8005e8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f839 	bl	8005e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f000 faf2 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d122      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d11b      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0202 	mvn.w	r2, #2
 8005ed6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa78 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005ef2:	e005      	b.n	8005f00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa6a 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa7b 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d122      	bne.n	8005f5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d11b      	bne.n	8005f5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f06f 0204 	mvn.w	r2, #4
 8005f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa4e 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005f46:	e005      	b.n	8005f54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa40 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa51 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d122      	bne.n	8005fae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d11b      	bne.n	8005fae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f06f 0208 	mvn.w	r2, #8
 8005f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2204      	movs	r2, #4
 8005f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa24 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005f9a:	e005      	b.n	8005fa8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa16 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa27 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d122      	bne.n	8006002 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d11b      	bne.n	8006002 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0210 	mvn.w	r2, #16
 8005fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9fa 	bl	80063e2 <HAL_TIM_IC_CaptureCallback>
 8005fee:	e005      	b.n	8005ffc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f9ec 	bl	80063ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9fd 	bl	80063f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10e      	bne.n	800602e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0201 	mvn.w	r2, #1
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fb fcc7 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d10e      	bne.n	800605a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d107      	bne.n	800605a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fda5 	bl	8006ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d10e      	bne.n	8006086 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d107      	bne.n	8006086 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f9c2 	bl	800640a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b20      	cmp	r3, #32
 8006092:	d10e      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0220 	mvn.w	r2, #32
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fd6f 	bl	8006b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0ae      	b.n	8006238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	f200 809f 	bhi.w	8006228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006125 	.word	0x08006125
 80060f4:	08006229 	.word	0x08006229
 80060f8:	08006229 	.word	0x08006229
 80060fc:	08006229 	.word	0x08006229
 8006100:	08006165 	.word	0x08006165
 8006104:	08006229 	.word	0x08006229
 8006108:	08006229 	.word	0x08006229
 800610c:	08006229 	.word	0x08006229
 8006110:	080061a7 	.word	0x080061a7
 8006114:	08006229 	.word	0x08006229
 8006118:	08006229 	.word	0x08006229
 800611c:	08006229 	.word	0x08006229
 8006120:	080061e7 	.word	0x080061e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fa18 	bl	8006560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0208 	orr.w	r2, r2, #8
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	619a      	str	r2, [r3, #24]
      break;
 8006162:	e064      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fa68 	bl	8006640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6999      	ldr	r1, [r3, #24]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	619a      	str	r2, [r3, #24]
      break;
 80061a4:	e043      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fabd 	bl	800672c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0204 	bic.w	r2, r2, #4
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	61da      	str	r2, [r3, #28]
      break;
 80061e4:	e023      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fb11 	bl	8006814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69d9      	ldr	r1, [r3, #28]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	021a      	lsls	r2, r3, #8
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	61da      	str	r2, [r3, #28]
      break;
 8006226:	e002      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIM_ConfigClockSource+0x1c>
 8006258:	2302      	movs	r3, #2
 800625a:	e0b4      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x186>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800627a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006294:	d03e      	beq.n	8006314 <HAL_TIM_ConfigClockSource+0xd4>
 8006296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629a:	f200 8087 	bhi.w	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a2:	f000 8086 	beq.w	80063b2 <HAL_TIM_ConfigClockSource+0x172>
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d87f      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b70      	cmp	r3, #112	; 0x70
 80062ae:	d01a      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0xa6>
 80062b0:	2b70      	cmp	r3, #112	; 0x70
 80062b2:	d87b      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b60      	cmp	r3, #96	; 0x60
 80062b6:	d050      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x11a>
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d877      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b50      	cmp	r3, #80	; 0x50
 80062be:	d03c      	beq.n	800633a <HAL_TIM_ConfigClockSource+0xfa>
 80062c0:	2b50      	cmp	r3, #80	; 0x50
 80062c2:	d873      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d058      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x13a>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d86f      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b30      	cmp	r3, #48	; 0x30
 80062ce:	d064      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d86b      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d060      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d867      	bhi.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d05c      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d05a      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	e062      	b.n	80063ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6899      	ldr	r1, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f000 fb5d 	bl	80069b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	609a      	str	r2, [r3, #8]
      break;
 8006312:	e04f      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	6899      	ldr	r1, [r3, #8]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f000 fb46 	bl	80069b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006336:	609a      	str	r2, [r3, #8]
      break;
 8006338:	e03c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6859      	ldr	r1, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	461a      	mov	r2, r3
 8006348:	f000 faba 	bl	80068c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2150      	movs	r1, #80	; 0x50
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fb13 	bl	800697e <TIM_ITRx_SetConfig>
      break;
 8006358:	e02c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6859      	ldr	r1, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	461a      	mov	r2, r3
 8006368:	f000 fad9 	bl	800691e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2160      	movs	r1, #96	; 0x60
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fb03 	bl	800697e <TIM_ITRx_SetConfig>
      break;
 8006378:	e01c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	461a      	mov	r2, r3
 8006388:	f000 fa9a 	bl	80068c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	4618      	mov	r0, r3
 8006394:	f000 faf3 	bl	800697e <TIM_ITRx_SetConfig>
      break;
 8006398:	e00c      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f000 faea 	bl	800697e <TIM_ITRx_SetConfig>
      break;
 80063aa:	e003      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      break;
 80063b0:	e000      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a40      	ldr	r2, [pc, #256]	; (8006534 <TIM_Base_SetConfig+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <TIM_Base_SetConfig+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d00f      	beq.n	8006460 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a3d      	ldr	r2, [pc, #244]	; (8006538 <TIM_Base_SetConfig+0x118>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00b      	beq.n	8006460 <TIM_Base_SetConfig+0x40>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a3c      	ldr	r2, [pc, #240]	; (800653c <TIM_Base_SetConfig+0x11c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d007      	beq.n	8006460 <TIM_Base_SetConfig+0x40>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a3b      	ldr	r2, [pc, #236]	; (8006540 <TIM_Base_SetConfig+0x120>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a3a      	ldr	r2, [pc, #232]	; (8006544 <TIM_Base_SetConfig+0x124>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d108      	bne.n	8006472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <TIM_Base_SetConfig+0x114>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d02b      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d027      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <TIM_Base_SetConfig+0x118>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d023      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a2b      	ldr	r2, [pc, #172]	; (800653c <TIM_Base_SetConfig+0x11c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01f      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <TIM_Base_SetConfig+0x120>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01b      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <TIM_Base_SetConfig+0x124>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d017      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <TIM_Base_SetConfig+0x128>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <TIM_Base_SetConfig+0x12c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a26      	ldr	r2, [pc, #152]	; (8006550 <TIM_Base_SetConfig+0x130>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a25      	ldr	r2, [pc, #148]	; (8006554 <TIM_Base_SetConfig+0x134>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a24      	ldr	r2, [pc, #144]	; (8006558 <TIM_Base_SetConfig+0x138>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a23      	ldr	r2, [pc, #140]	; (800655c <TIM_Base_SetConfig+0x13c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d108      	bne.n	80064e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <TIM_Base_SetConfig+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0xf8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <TIM_Base_SetConfig+0x124>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d103      	bne.n	8006520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	615a      	str	r2, [r3, #20]
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	40001800 	.word	0x40001800
 8006558:	40001c00 	.word	0x40001c00
 800655c:	40002000 	.word	0x40002000

08006560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a20      	ldr	r2, [pc, #128]	; (8006638 <TIM_OC1_SetConfig+0xd8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC1_SetConfig+0x64>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1f      	ldr	r2, [pc, #124]	; (800663c <TIM_OC1_SetConfig+0xdc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10c      	bne.n	80065de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0308 	bic.w	r3, r3, #8
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <TIM_OC1_SetConfig+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC1_SetConfig+0x8e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a14      	ldr	r2, [pc, #80]	; (800663c <TIM_OC1_SetConfig+0xdc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d111      	bne.n	8006612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0210 	bic.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0320 	bic.w	r3, r3, #32
 800668a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <TIM_OC2_SetConfig+0xe4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC2_SetConfig+0x68>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a21      	ldr	r2, [pc, #132]	; (8006728 <TIM_OC2_SetConfig+0xe8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10d      	bne.n	80066c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <TIM_OC2_SetConfig+0xe4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC2_SetConfig+0x94>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	; (8006728 <TIM_OC2_SetConfig+0xe8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d113      	bne.n	80066fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40010400 	.word	0x40010400

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a21      	ldr	r2, [pc, #132]	; (800680c <TIM_OC3_SetConfig+0xe0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC3_SetConfig+0x66>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <TIM_OC3_SetConfig+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10d      	bne.n	80067ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <TIM_OC3_SetConfig+0xe0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC3_SetConfig+0x92>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <TIM_OC3_SetConfig+0xe4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d113      	bne.n	80067e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800685e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	031b      	lsls	r3, r3, #12
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a12      	ldr	r2, [pc, #72]	; (80068b8 <TIM_OC4_SetConfig+0xa4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC4_SetConfig+0x68>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a11      	ldr	r2, [pc, #68]	; (80068bc <TIM_OC4_SetConfig+0xa8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d109      	bne.n	8006890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	019b      	lsls	r3, r3, #6
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 030a 	bic.w	r3, r3, #10
 80068fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691e:	b480      	push	{r7}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0210 	bic.w	r2, r3, #16
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800695a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	f043 0307 	orr.w	r3, r3, #7
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	021a      	lsls	r2, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4313      	orrs	r3, r2
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e05a      	b.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d022      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d01d      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d018      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1a      	ldr	r2, [pc, #104]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00e      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d009      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10c      	bne.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40001800 	.word	0x40001800

08006aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e03d      	b.n	8006b84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e03f      	b.n	8006c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fb f982 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2224      	movs	r2, #36	; 0x24
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fe69 	bl	80078d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d11d      	bne.n	8006ca8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UART_Receive_DMA+0x26>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e016      	b.n	8006caa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Receive_DMA+0x38>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e00f      	b.n	8006caa <HAL_UART_Receive_DMA+0x58>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fbb8 	bl	8007414 <UART_Start_Receive_DMA>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	e000      	b.n	8006caa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b0ba      	sub	sp, #232	; 0xe8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10f      	bne.n	8006d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_UART_IRQHandler+0x66>
 8006d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fd23 	bl	800775e <UART_Receive_IT>
      return;
 8006d18:	e256      	b.n	80071c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80de 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x22c>
 8006d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80d1 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <HAL_UART_IRQHandler+0xae>
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f043 0201 	orr.w	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <HAL_UART_IRQHandler+0xd2>
 8006d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f043 0202 	orr.w	r2, r3, #2
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_UART_IRQHandler+0xf6>
 8006d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <HAL_UART_IRQHandler+0x126>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0208 	orr.w	r2, r3, #8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 81ed 	beq.w	80071be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_UART_IRQHandler+0x14e>
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fcae 	bl	800775e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <HAL_UART_IRQHandler+0x17a>
 8006e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d04f      	beq.n	8006ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fbb6 	bl	80075a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d141      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3314      	adds	r3, #20
 8006e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d9      	bne.n	8006e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	4a7d      	ldr	r2, [pc, #500]	; (8007090 <HAL_UART_IRQHandler+0x3dc>)
 8006e9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fb fdc5 	bl	8002a32 <HAL_DMA_Abort_IT>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d016      	beq.n	8006edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebc:	e00e      	b.n	8006edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f99a 	bl	80071f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec4:	e00a      	b.n	8006edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f996 	bl	80071f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	e006      	b.n	8006edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f992 	bl	80071f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006eda:	e170      	b.n	80071be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	bf00      	nop
    return;
 8006ede:	e16e      	b.n	80071be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 814a 	bne.w	800717e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8143 	beq.w	800717e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 813c 	beq.w	800717e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	f040 80b4 	bne.w	8007094 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8140 	beq.w	80071c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	f080 8139 	bcs.w	80071c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f62:	f000 8088 	beq.w	8007076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1d9      	bne.n	8006f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3314      	adds	r3, #20
 8006fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e1      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007012:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007018:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e3      	bne.n	8006fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007058:	65ba      	str	r2, [r7, #88]	; 0x58
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800705e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e3      	bne.n	8007034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	4618      	mov	r0, r3
 8007072:	f7fb fc6e 	bl	8002952 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800707e:	b29b      	uxth	r3, r3
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	b29b      	uxth	r3, r3
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8c0 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800708c:	e099      	b.n	80071c2 <HAL_UART_IRQHandler+0x50e>
 800708e:	bf00      	nop
 8007090:	08007667 	.word	0x08007667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800709c:	b29b      	uxth	r3, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 808b 	beq.w	80071c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8086 	beq.w	80071c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070de:	647a      	str	r2, [r7, #68]	; 0x44
 80070e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e3      	bne.n	80070ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3314      	adds	r3, #20
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	623b      	str	r3, [r7, #32]
   return(result);
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3314      	adds	r3, #20
 8007112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007116:	633a      	str	r2, [r7, #48]	; 0x30
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800711c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e3      	bne.n	80070f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	60fb      	str	r3, [r7, #12]
   return(result);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0310 	bic.w	r3, r3, #16
 800714e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	330c      	adds	r3, #12
 8007158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800715c:	61fa      	str	r2, [r7, #28]
 800715e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	69b9      	ldr	r1, [r7, #24]
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	617b      	str	r3, [r7, #20]
   return(result);
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e3      	bne.n	8007138 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f848 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800717c:	e023      	b.n	80071c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_UART_IRQHandler+0x4ea>
 800718a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa79 	bl	800768e <UART_Transmit_IT>
    return;
 800719c:	e014      	b.n	80071c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00e      	beq.n	80071c8 <HAL_UART_IRQHandler+0x514>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d008      	beq.n	80071c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fab9 	bl	800772e <UART_EndTransmit_IT>
    return;
 80071bc:	e004      	b.n	80071c8 <HAL_UART_IRQHandler+0x514>
    return;
 80071be:	bf00      	nop
 80071c0:	e002      	b.n	80071c8 <HAL_UART_IRQHandler+0x514>
      return;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <HAL_UART_IRQHandler+0x514>
      return;
 80071c6:	bf00      	nop
  }
}
 80071c8:	37e8      	adds	r7, #232	; 0xe8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b09c      	sub	sp, #112	; 0x70
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d172      	bne.n	8007326 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007242:	2200      	movs	r2, #0
 8007244:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725c:	66bb      	str	r3, [r7, #104]	; 0x68
 800725e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007266:	65ba      	str	r2, [r7, #88]	; 0x58
 8007268:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800726c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	667b      	str	r3, [r7, #100]	; 0x64
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3314      	adds	r3, #20
 8007298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800729a:	647a      	str	r2, [r7, #68]	; 0x44
 800729c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	623b      	str	r3, [r7, #32]
   return(result);
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	663b      	str	r3, [r7, #96]	; 0x60
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3314      	adds	r3, #20
 80072cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ce:	633a      	str	r2, [r7, #48]	; 0x30
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d119      	bne.n	8007326 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	60fb      	str	r3, [r7, #12]
   return(result);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f023 0310 	bic.w	r3, r3, #16
 8007308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007312:	61fa      	str	r2, [r7, #28]
 8007314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	69b9      	ldr	r1, [r7, #24]
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	617b      	str	r3, [r7, #20]
   return(result);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e5      	bne.n	80072f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	2b01      	cmp	r3, #1
 800732c:	d106      	bne.n	800733c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007332:	4619      	mov	r1, r3
 8007334:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007336:	f7ff ff69 	bl	800720c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800733a:	e002      	b.n	8007342 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800733c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800733e:	f7fa fb2b 	bl	8001998 <HAL_UART_RxCpltCallback>
}
 8007342:	bf00      	nop
 8007344:	3770      	adds	r7, #112	; 0x70
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	d108      	bne.n	8007372 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	b29b      	uxth	r3, r3
 8007368:	4619      	mov	r1, r3
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff ff4e 	bl	800720c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007370:	e002      	b.n	8007378 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff ff36 	bl	80071e4 <HAL_UART_RxHalfCpltCallback>
}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b21      	cmp	r3, #33	; 0x21
 80073b2:	d108      	bne.n	80073c6 <UART_DMAError+0x46>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f000 f8c5 	bl	8007550 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d0:	2b40      	cmp	r3, #64	; 0x40
 80073d2:	bf0c      	ite	eq
 80073d4:	2301      	moveq	r3, #1
 80073d6:	2300      	movne	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	d108      	bne.n	80073fa <UART_DMAError+0x7a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f000 f8d3 	bl	80075a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f043 0210 	orr.w	r2, r3, #16
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007406:	68b8      	ldr	r0, [r7, #8]
 8007408:	f7ff fef6 	bl	80071f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b098      	sub	sp, #96	; 0x60
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2222      	movs	r2, #34	; 0x22
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	4a40      	ldr	r2, [pc, #256]	; (8007544 <UART_Start_Receive_DMA+0x130>)
 8007442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <UART_Start_Receive_DMA+0x134>)
 800744a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	4a3e      	ldr	r2, [pc, #248]	; (800754c <UART_Start_Receive_DMA+0x138>)
 8007452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	2200      	movs	r2, #0
 800745a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800745c:	f107 0308 	add.w	r3, r7, #8
 8007460:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	f7fb fa15 	bl	80028a2 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d019      	beq.n	80074d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80074c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80074cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	657b      	str	r3, [r7, #84]	; 0x54
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	617b      	str	r3, [r7, #20]
   return(result);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751c:	653b      	str	r3, [r7, #80]	; 0x50
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3314      	adds	r3, #20
 8007524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007526:	627a      	str	r2, [r7, #36]	; 0x24
 8007528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6a39      	ldr	r1, [r7, #32]
 800752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	61fb      	str	r3, [r7, #28]
   return(result);
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3760      	adds	r7, #96	; 0x60
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	08007225 	.word	0x08007225
 8007548:	0800734b 	.word	0x0800734b
 800754c:	08007381 	.word	0x08007381

08007550 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60bb      	str	r3, [r7, #8]
   return(result);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	61ba      	str	r2, [r7, #24]
 800757a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007594:	bf00      	nop
 8007596:	3724      	adds	r7, #36	; 0x24
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b095      	sub	sp, #84	; 0x54
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075c8:	643a      	str	r2, [r7, #64]	; 0x40
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e5      	bne.n	80075a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3314      	adds	r3, #20
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e5      	bne.n	80075dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	2b01      	cmp	r3, #1
 8007616:	d119      	bne.n	800764c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	60bb      	str	r3, [r7, #8]
   return(result);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f023 0310 	bic.w	r3, r3, #16
 800762e:	647b      	str	r3, [r7, #68]	; 0x44
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	330c      	adds	r3, #12
 8007636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007638:	61ba      	str	r2, [r7, #24]
 800763a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6979      	ldr	r1, [r7, #20]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	613b      	str	r3, [r7, #16]
   return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e5      	bne.n	8007618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800765a:	bf00      	nop
 800765c:	3754      	adds	r7, #84	; 0x54
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7ff fdb9 	bl	80071f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b21      	cmp	r3, #33	; 0x21
 80076a0:	d13e      	bne.n	8007720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076aa:	d114      	bne.n	80076d6 <UART_Transmit_IT+0x48>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d110      	bne.n	80076d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	621a      	str	r2, [r3, #32]
 80076d4:	e008      	b.n	80076e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	1c59      	adds	r1, r3, #1
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6211      	str	r1, [r2, #32]
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4619      	mov	r1, r3
 80076f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10f      	bne.n	800771c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800770a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	e000      	b.n	8007722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007720:	2302      	movs	r3, #2
  }
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff fd3e 	bl	80071d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b08c      	sub	sp, #48	; 0x30
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b22      	cmp	r3, #34	; 0x22
 8007770:	f040 80ab 	bne.w	80078ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777c:	d117      	bne.n	80077ae <UART_Receive_IT+0x50>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d113      	bne.n	80077ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	b29a      	uxth	r2, r3
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28
 80077ac:	e026      	b.n	80077fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d007      	beq.n	80077d2 <UART_Receive_IT+0x74>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <UART_Receive_IT+0x82>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e008      	b.n	80077f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	b29b      	uxth	r3, r3
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	4619      	mov	r1, r3
 800780a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800780c:	2b00      	cmp	r3, #0
 800780e:	d15a      	bne.n	80078c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0220 	bic.w	r2, r2, #32
 800781e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800782e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695a      	ldr	r2, [r3, #20]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0201 	bic.w	r2, r2, #1
 800783e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	2b01      	cmp	r3, #1
 800784e:	d135      	bne.n	80078bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	613b      	str	r3, [r7, #16]
   return(result);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f023 0310 	bic.w	r3, r3, #16
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	623a      	str	r2, [r7, #32]
 8007878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	69f9      	ldr	r1, [r7, #28]
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	61bb      	str	r3, [r7, #24]
   return(result);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b10      	cmp	r3, #16
 8007896:	d10a      	bne.n	80078ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fca9 	bl	800720c <HAL_UARTEx_RxEventCallback>
 80078ba:	e002      	b.n	80078c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fa f86b 	bl	8001998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e002      	b.n	80078cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3730      	adds	r7, #48	; 0x30
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d8:	b0c0      	sub	sp, #256	; 0x100
 80078da:	af00      	add	r7, sp, #0
 80078dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	68d9      	ldr	r1, [r3, #12]
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	ea40 0301 	orr.w	r3, r0, r1
 80078fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	431a      	orrs	r2, r3
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	431a      	orrs	r2, r3
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800792c:	f021 010c 	bic.w	r1, r1, #12
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800793a:	430b      	orrs	r3, r1
 800793c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794e:	6999      	ldr	r1, [r3, #24]
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	ea40 0301 	orr.w	r3, r0, r1
 800795a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b8f      	ldr	r3, [pc, #572]	; (8007ba0 <UART_SetConfig+0x2cc>)
 8007964:	429a      	cmp	r2, r3
 8007966:	d005      	beq.n	8007974 <UART_SetConfig+0xa0>
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b8d      	ldr	r3, [pc, #564]	; (8007ba4 <UART_SetConfig+0x2d0>)
 8007970:	429a      	cmp	r2, r3
 8007972:	d104      	bne.n	800797e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007974:	f7fe f8e4 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8007978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800797c:	e003      	b.n	8007986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800797e:	f7fe f8cb 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8007982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007990:	f040 810c 	bne.w	8007bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007998:	2200      	movs	r2, #0
 800799a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800799e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079a6:	4622      	mov	r2, r4
 80079a8:	462b      	mov	r3, r5
 80079aa:	1891      	adds	r1, r2, r2
 80079ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80079ae:	415b      	adcs	r3, r3
 80079b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079b6:	4621      	mov	r1, r4
 80079b8:	eb12 0801 	adds.w	r8, r2, r1
 80079bc:	4629      	mov	r1, r5
 80079be:	eb43 0901 	adc.w	r9, r3, r1
 80079c2:	f04f 0200 	mov.w	r2, #0
 80079c6:	f04f 0300 	mov.w	r3, #0
 80079ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079d6:	4690      	mov	r8, r2
 80079d8:	4699      	mov	r9, r3
 80079da:	4623      	mov	r3, r4
 80079dc:	eb18 0303 	adds.w	r3, r8, r3
 80079e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079e4:	462b      	mov	r3, r5
 80079e6:	eb49 0303 	adc.w	r3, r9, r3
 80079ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a02:	460b      	mov	r3, r1
 8007a04:	18db      	adds	r3, r3, r3
 8007a06:	653b      	str	r3, [r7, #80]	; 0x50
 8007a08:	4613      	mov	r3, r2
 8007a0a:	eb42 0303 	adc.w	r3, r2, r3
 8007a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a18:	f7f8 fc26 	bl	8000268 <__aeabi_uldivmod>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4b61      	ldr	r3, [pc, #388]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007a22:	fba3 2302 	umull	r2, r3, r3, r2
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	011c      	lsls	r4, r3, #4
 8007a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	464b      	mov	r3, r9
 8007a40:	1891      	adds	r1, r2, r2
 8007a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a44:	415b      	adcs	r3, r3
 8007a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a52:	4649      	mov	r1, r9
 8007a54:	eb43 0b01 	adc.w	fp, r3, r1
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a6c:	4692      	mov	sl, r2
 8007a6e:	469b      	mov	fp, r3
 8007a70:	4643      	mov	r3, r8
 8007a72:	eb1a 0303 	adds.w	r3, sl, r3
 8007a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	18db      	adds	r3, r3, r3
 8007a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	eb42 0303 	adc.w	r3, r2, r3
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007aae:	f7f8 fbdb 	bl	8000268 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4b3b      	ldr	r3, [pc, #236]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007aba:	fba3 2301 	umull	r2, r3, r3, r1
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	2264      	movs	r2, #100	; 0x64
 8007ac2:	fb02 f303 	mul.w	r3, r2, r3
 8007ac6:	1acb      	subs	r3, r1, r3
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ace:	4b36      	ldr	r3, [pc, #216]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad4:	095b      	lsrs	r3, r3, #5
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007adc:	441c      	add	r4, r3
 8007ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	1891      	adds	r1, r2, r2
 8007af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007af8:	415b      	adcs	r3, r3
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b00:	4641      	mov	r1, r8
 8007b02:	1851      	adds	r1, r2, r1
 8007b04:	6339      	str	r1, [r7, #48]	; 0x30
 8007b06:	4649      	mov	r1, r9
 8007b08:	414b      	adcs	r3, r1
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b18:	4659      	mov	r1, fp
 8007b1a:	00cb      	lsls	r3, r1, #3
 8007b1c:	4651      	mov	r1, sl
 8007b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b22:	4651      	mov	r1, sl
 8007b24:	00ca      	lsls	r2, r1, #3
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b34:	464b      	mov	r3, r9
 8007b36:	460a      	mov	r2, r1
 8007b38:	eb42 0303 	adc.w	r3, r2, r3
 8007b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b54:	460b      	mov	r3, r1
 8007b56:	18db      	adds	r3, r3, r3
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	eb42 0303 	adc.w	r3, r2, r3
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b6a:	f7f8 fb7d 	bl	8000268 <__aeabi_uldivmod>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007b74:	fba3 1302 	umull	r1, r3, r3, r2
 8007b78:	095b      	lsrs	r3, r3, #5
 8007b7a:	2164      	movs	r1, #100	; 0x64
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	3332      	adds	r3, #50	; 0x32
 8007b86:	4a08      	ldr	r2, [pc, #32]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	f003 0207 	and.w	r2, r3, #7
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4422      	add	r2, r4
 8007b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b9c:	e105      	b.n	8007daa <UART_SetConfig+0x4d6>
 8007b9e:	bf00      	nop
 8007ba0:	40011000 	.word	0x40011000
 8007ba4:	40011400 	.word	0x40011400
 8007ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	1891      	adds	r1, r2, r2
 8007bc4:	6239      	str	r1, [r7, #32]
 8007bc6:	415b      	adcs	r3, r3
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bce:	4641      	mov	r1, r8
 8007bd0:	1854      	adds	r4, r2, r1
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	eb43 0501 	adc.w	r5, r3, r1
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	00eb      	lsls	r3, r5, #3
 8007be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007be6:	00e2      	lsls	r2, r4, #3
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	4643      	mov	r3, r8
 8007bee:	18e3      	adds	r3, r4, r3
 8007bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	eb45 0303 	adc.w	r3, r5, r3
 8007bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	008b      	lsls	r3, r1, #2
 8007c1e:	4621      	mov	r1, r4
 8007c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c24:	4621      	mov	r1, r4
 8007c26:	008a      	lsls	r2, r1, #2
 8007c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c2c:	f7f8 fb1c 	bl	8000268 <__aeabi_uldivmod>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4b60      	ldr	r3, [pc, #384]	; (8007db8 <UART_SetConfig+0x4e4>)
 8007c36:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	011c      	lsls	r4, r3, #4
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	61b9      	str	r1, [r7, #24]
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c60:	4641      	mov	r1, r8
 8007c62:	1851      	adds	r1, r2, r1
 8007c64:	6139      	str	r1, [r7, #16]
 8007c66:	4649      	mov	r1, r9
 8007c68:	414b      	adcs	r3, r1
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c78:	4659      	mov	r1, fp
 8007c7a:	00cb      	lsls	r3, r1, #3
 8007c7c:	4651      	mov	r1, sl
 8007c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c82:	4651      	mov	r1, sl
 8007c84:	00ca      	lsls	r2, r1, #3
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	189b      	adds	r3, r3, r2
 8007c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c94:	464b      	mov	r3, r9
 8007c96:	460a      	mov	r2, r1
 8007c98:	eb42 0303 	adc.w	r3, r2, r3
 8007c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007cb8:	4649      	mov	r1, r9
 8007cba:	008b      	lsls	r3, r1, #2
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	008a      	lsls	r2, r1, #2
 8007cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cca:	f7f8 facd 	bl	8000268 <__aeabi_uldivmod>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <UART_SetConfig+0x4e4>)
 8007cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	2164      	movs	r1, #100	; 0x64
 8007cdc:	fb01 f303 	mul.w	r3, r1, r3
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	3332      	adds	r3, #50	; 0x32
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <UART_SetConfig+0x4e4>)
 8007ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cf2:	441c      	add	r4, r3
 8007cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8007cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d02:	4642      	mov	r2, r8
 8007d04:	464b      	mov	r3, r9
 8007d06:	1891      	adds	r1, r2, r2
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	415b      	adcs	r3, r3
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d12:	4641      	mov	r1, r8
 8007d14:	1851      	adds	r1, r2, r1
 8007d16:	6039      	str	r1, [r7, #0]
 8007d18:	4649      	mov	r1, r9
 8007d1a:	414b      	adcs	r3, r1
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	00cb      	lsls	r3, r1, #3
 8007d2e:	4651      	mov	r1, sl
 8007d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d34:	4651      	mov	r1, sl
 8007d36:	00ca      	lsls	r2, r1, #3
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	4642      	mov	r2, r8
 8007d40:	189b      	adds	r3, r3, r2
 8007d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d44:	464b      	mov	r3, r9
 8007d46:	460a      	mov	r2, r1
 8007d48:	eb42 0303 	adc.w	r3, r2, r3
 8007d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	663b      	str	r3, [r7, #96]	; 0x60
 8007d58:	667a      	str	r2, [r7, #100]	; 0x64
 8007d5a:	f04f 0200 	mov.w	r2, #0
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d66:	4649      	mov	r1, r9
 8007d68:	008b      	lsls	r3, r1, #2
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d70:	4641      	mov	r1, r8
 8007d72:	008a      	lsls	r2, r1, #2
 8007d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d78:	f7f8 fa76 	bl	8000268 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <UART_SetConfig+0x4e4>)
 8007d82:	fba3 1302 	umull	r1, r3, r3, r2
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	2164      	movs	r1, #100	; 0x64
 8007d8a:	fb01 f303 	mul.w	r3, r1, r3
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	3332      	adds	r3, #50	; 0x32
 8007d94:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <UART_SetConfig+0x4e4>)
 8007d96:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9a:	095b      	lsrs	r3, r3, #5
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4422      	add	r2, r4
 8007da8:	609a      	str	r2, [r3, #8]
}
 8007daa:	bf00      	nop
 8007dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007db0:	46bd      	mov	sp, r7
 8007db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db6:	bf00      	nop
 8007db8:	51eb851f 	.word	0x51eb851f

08007dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	f107 001c 	add.w	r0, r7, #28
 8007dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d122      	bne.n	8007e1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d105      	bne.n	8007e0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fbee 	bl	80095f0 <USB_CoreReset>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e01a      	b.n	8007e50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fbe2 	bl	80095f0 <USB_CoreReset>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
 8007e42:	e005      	b.n	8007e50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d10b      	bne.n	8007e6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f043 0206 	orr.w	r2, r3, #6
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f043 0220 	orr.w	r2, r3, #32
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e7a:	b004      	add	sp, #16
 8007e7c:	4770      	bx	lr
	...

08007e80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d165      	bne.n	8007f60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4a41      	ldr	r2, [pc, #260]	; (8007f9c <USB_SetTurnaroundTime+0x11c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d906      	bls.n	8007eaa <USB_SetTurnaroundTime+0x2a>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a40      	ldr	r2, [pc, #256]	; (8007fa0 <USB_SetTurnaroundTime+0x120>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d202      	bcs.n	8007eaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ea4:	230f      	movs	r3, #15
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	e062      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4a3c      	ldr	r2, [pc, #240]	; (8007fa0 <USB_SetTurnaroundTime+0x120>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d306      	bcc.n	8007ec0 <USB_SetTurnaroundTime+0x40>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4a3b      	ldr	r2, [pc, #236]	; (8007fa4 <USB_SetTurnaroundTime+0x124>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d202      	bcs.n	8007ec0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007eba:	230e      	movs	r3, #14
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	e057      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4a38      	ldr	r2, [pc, #224]	; (8007fa4 <USB_SetTurnaroundTime+0x124>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d306      	bcc.n	8007ed6 <USB_SetTurnaroundTime+0x56>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4a37      	ldr	r2, [pc, #220]	; (8007fa8 <USB_SetTurnaroundTime+0x128>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d202      	bcs.n	8007ed6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ed0:	230d      	movs	r3, #13
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e04c      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4a33      	ldr	r2, [pc, #204]	; (8007fa8 <USB_SetTurnaroundTime+0x128>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d306      	bcc.n	8007eec <USB_SetTurnaroundTime+0x6c>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	4a32      	ldr	r2, [pc, #200]	; (8007fac <USB_SetTurnaroundTime+0x12c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d802      	bhi.n	8007eec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e041      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4a2f      	ldr	r2, [pc, #188]	; (8007fac <USB_SetTurnaroundTime+0x12c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d906      	bls.n	8007f02 <USB_SetTurnaroundTime+0x82>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4a2e      	ldr	r2, [pc, #184]	; (8007fb0 <USB_SetTurnaroundTime+0x130>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d802      	bhi.n	8007f02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007efc:	230b      	movs	r3, #11
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	e036      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4a2a      	ldr	r2, [pc, #168]	; (8007fb0 <USB_SetTurnaroundTime+0x130>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d906      	bls.n	8007f18 <USB_SetTurnaroundTime+0x98>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4a29      	ldr	r2, [pc, #164]	; (8007fb4 <USB_SetTurnaroundTime+0x134>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d802      	bhi.n	8007f18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f12:	230a      	movs	r3, #10
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e02b      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <USB_SetTurnaroundTime+0x134>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d906      	bls.n	8007f2e <USB_SetTurnaroundTime+0xae>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4a25      	ldr	r2, [pc, #148]	; (8007fb8 <USB_SetTurnaroundTime+0x138>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d202      	bcs.n	8007f2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f28:	2309      	movs	r3, #9
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e020      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <USB_SetTurnaroundTime+0x138>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d306      	bcc.n	8007f44 <USB_SetTurnaroundTime+0xc4>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <USB_SetTurnaroundTime+0x13c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d802      	bhi.n	8007f44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f3e:	2308      	movs	r3, #8
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e015      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a1d      	ldr	r2, [pc, #116]	; (8007fbc <USB_SetTurnaroundTime+0x13c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d906      	bls.n	8007f5a <USB_SetTurnaroundTime+0xda>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4a1c      	ldr	r2, [pc, #112]	; (8007fc0 <USB_SetTurnaroundTime+0x140>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d202      	bcs.n	8007f5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f54:	2307      	movs	r3, #7
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e00a      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f5a:	2306      	movs	r3, #6
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	e007      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f66:	2309      	movs	r3, #9
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	e001      	b.n	8007f70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f6c:	2309      	movs	r3, #9
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	00d8acbf 	.word	0x00d8acbf
 8007fa0:	00e4e1c0 	.word	0x00e4e1c0
 8007fa4:	00f42400 	.word	0x00f42400
 8007fa8:	01067380 	.word	0x01067380
 8007fac:	011a499f 	.word	0x011a499f
 8007fb0:	01312cff 	.word	0x01312cff
 8007fb4:	014ca43f 	.word	0x014ca43f
 8007fb8:	016e3600 	.word	0x016e3600
 8007fbc:	01a6ab1f 	.word	0x01a6ab1f
 8007fc0:	01e84800 	.word	0x01e84800

08007fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d115      	bne.n	8008056 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008036:	2001      	movs	r0, #1
 8008038:	f7fa f89c 	bl	8002174 <HAL_Delay>
      ms++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fa45 	bl	80094d2 <USB_GetMode>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d01e      	beq.n	800808c <USB_SetCurrentMode+0x84>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b31      	cmp	r3, #49	; 0x31
 8008052:	d9f0      	bls.n	8008036 <USB_SetCurrentMode+0x2e>
 8008054:	e01a      	b.n	800808c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d115      	bne.n	8008088 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008068:	2001      	movs	r0, #1
 800806a:	f7fa f883 	bl	8002174 <HAL_Delay>
      ms++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3301      	adds	r3, #1
 8008072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 fa2c 	bl	80094d2 <USB_GetMode>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <USB_SetCurrentMode+0x84>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b31      	cmp	r3, #49	; 0x31
 8008084:	d9f0      	bls.n	8008068 <USB_SetCurrentMode+0x60>
 8008086:	e001      	b.n	800808c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e005      	b.n	8008098 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b32      	cmp	r3, #50	; 0x32
 8008090:	d101      	bne.n	8008096 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a0:	b084      	sub	sp, #16
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	e009      	b.n	80080d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3340      	adds	r3, #64	; 0x40
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b0e      	cmp	r3, #14
 80080d8:	d9f2      	bls.n	80080c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11c      	bne.n	800811a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ee:	f043 0302 	orr.w	r3, r3, #2
 80080f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
 8008118:	e00b      	b.n	8008132 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008138:	461a      	mov	r2, r3
 800813a:	2300      	movs	r3, #0
 800813c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008144:	4619      	mov	r1, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814c:	461a      	mov	r2, r3
 800814e:	680b      	ldr	r3, [r1, #0]
 8008150:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10c      	bne.n	8008172 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800815e:	2100      	movs	r1, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f965 	bl	8008430 <USB_SetDevSpeed>
 8008166:	e008      	b.n	800817a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008168:	2101      	movs	r1, #1
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f960 	bl	8008430 <USB_SetDevSpeed>
 8008170:	e003      	b.n	800817a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008172:	2103      	movs	r1, #3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f95b 	bl	8008430 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800817a:	2110      	movs	r1, #16
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f8f3 	bl	8008368 <USB_FlushTxFifo>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f91f 	bl	80083d0 <USB_FlushRxFifo>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a2:	461a      	mov	r2, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ae:	461a      	mov	r2, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	461a      	mov	r2, r3
 80081bc:	2300      	movs	r3, #0
 80081be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	e043      	b.n	800824e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081dc:	d118      	bne.n	8008210 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	461a      	mov	r2, r3
 80081f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	e013      	b.n	8008222 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	461a      	mov	r2, r3
 8008208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	e008      	b.n	8008222 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	461a      	mov	r2, r3
 800821e:	2300      	movs	r3, #0
 8008220:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822e:	461a      	mov	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008240:	461a      	mov	r2, r3
 8008242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	429a      	cmp	r2, r3
 8008254:	d3b7      	bcc.n	80081c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	e043      	b.n	80082e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800826e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008272:	d118      	bne.n	80082a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	461a      	mov	r2, r3
 8008288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e013      	b.n	80082b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	461a      	mov	r2, r3
 800829e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	e008      	b.n	80082b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	461a      	mov	r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	461a      	mov	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	461a      	mov	r2, r3
 80082d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3301      	adds	r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d3b7      	bcc.n	800825c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800830c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f043 0210 	orr.w	r2, r3, #16
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <USB_DevInit+0x2c4>)
 8008326:	4313      	orrs	r3, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f043 0208 	orr.w	r2, r3, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d107      	bne.n	8008354 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800834c:	f043 0304 	orr.w	r3, r3, #4
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008360:	b004      	add	sp, #16
 8008362:	4770      	bx	lr
 8008364:	803c3800 	.word	0x803c3800

08008368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3301      	adds	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a13      	ldr	r2, [pc, #76]	; (80083cc <USB_FlushTxFifo+0x64>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d901      	bls.n	8008388 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e01b      	b.n	80083c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	daf2      	bge.n	8008376 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	019b      	lsls	r3, r3, #6
 8008398:	f043 0220 	orr.w	r2, r3, #32
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3301      	adds	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4a08      	ldr	r2, [pc, #32]	; (80083cc <USB_FlushTxFifo+0x64>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e006      	b.n	80083c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d0f0      	beq.n	80083a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	00030d40 	.word	0x00030d40

080083d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4a11      	ldr	r2, [pc, #68]	; (800842c <USB_FlushRxFifo+0x5c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d901      	bls.n	80083ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e018      	b.n	8008420 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	daf2      	bge.n	80083dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2210      	movs	r2, #16
 80083fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4a08      	ldr	r2, [pc, #32]	; (800842c <USB_FlushRxFifo+0x5c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d901      	bls.n	8008412 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e006      	b.n	8008420 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b10      	cmp	r3, #16
 800841c:	d0f0      	beq.n	8008400 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	00030d40 	.word	0x00030d40

08008430 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008450:	4313      	orrs	r3, r2
 8008452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0306 	and.w	r3, r3, #6
 800847a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008482:	2300      	movs	r3, #0
 8008484:	75fb      	strb	r3, [r7, #23]
 8008486:	e00a      	b.n	800849e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d002      	beq.n	8008494 <USB_GetDevSpeed+0x32>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b06      	cmp	r3, #6
 8008492:	d102      	bne.n	800849a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008494:	2302      	movs	r3, #2
 8008496:	75fb      	strb	r3, [r7, #23]
 8008498:	e001      	b.n	800849e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800849a:	230f      	movs	r3, #15
 800849c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d13a      	bne.n	800853e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	2101      	movs	r1, #1
 80084da:	fa01 f303 	lsl.w	r3, r1, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	68f9      	ldr	r1, [r7, #12]
 80084e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e6:	4313      	orrs	r3, r2
 80084e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d155      	bne.n	80085ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	791b      	ldrb	r3, [r3, #4]
 800851a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800851c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008524:	4313      	orrs	r3, r2
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	e036      	b.n	80085ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008544:	69da      	ldr	r2, [r3, #28]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	2101      	movs	r1, #1
 8008550:	fa01 f303 	lsl.w	r3, r1, r3
 8008554:	041b      	lsls	r3, r3, #16
 8008556:	68f9      	ldr	r1, [r7, #12]
 8008558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800855c:	4313      	orrs	r3, r2
 800855e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d11a      	bne.n	80085ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	791b      	ldrb	r3, [r3, #4]
 8008590:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008592:	430b      	orrs	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d161      	bne.n	800869c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ee:	d11f      	bne.n	8008630 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800860e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	440a      	add	r2, r1
 8008626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	b29b      	uxth	r3, r3
 8008648:	43db      	mvns	r3, r3
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008650:	4013      	ands	r3, r2
 8008652:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	2101      	movs	r1, #1
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	b29b      	uxth	r3, r3
 800866c:	43db      	mvns	r3, r3
 800866e:	68f9      	ldr	r1, [r7, #12]
 8008670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008674:	4013      	ands	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	0159      	lsls	r1, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	440b      	add	r3, r1
 800868e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008692:	4619      	mov	r1, r3
 8008694:	4b35      	ldr	r3, [pc, #212]	; (800876c <USB_DeactivateEndpoint+0x1b0>)
 8008696:	4013      	ands	r3, r2
 8008698:	600b      	str	r3, [r1, #0]
 800869a:	e060      	b.n	800875e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b2:	d11f      	bne.n	80086f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f003 030f 	and.w	r3, r3, #15
 8008704:	2101      	movs	r1, #1
 8008706:	fa01 f303 	lsl.w	r3, r1, r3
 800870a:	041b      	lsls	r3, r3, #16
 800870c:	43db      	mvns	r3, r3
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008714:	4013      	ands	r3, r2
 8008716:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871e:	69da      	ldr	r2, [r3, #28]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	2101      	movs	r1, #1
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	43db      	mvns	r3, r3
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008738:	4013      	ands	r3, r2
 800873a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	0159      	lsls	r1, r3, #5
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	440b      	add	r3, r1
 8008752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008756:	4619      	mov	r1, r3
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <USB_DeactivateEndpoint+0x1b4>)
 800875a:	4013      	ands	r3, r2
 800875c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	ec337800 	.word	0xec337800
 8008770:	eff37800 	.word	0xeff37800

08008774 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b01      	cmp	r3, #1
 8008792:	f040 815c 	bne.w	8008a4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d132      	bne.n	8008804 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fc:	0cdb      	lsrs	r3, r3, #19
 80087fe:	04db      	lsls	r3, r3, #19
 8008800:	6113      	str	r3, [r2, #16]
 8008802:	e074      	b.n	80088ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881e:	0cdb      	lsrs	r3, r3, #19
 8008820:	04db      	lsls	r3, r3, #19
 8008822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6999      	ldr	r1, [r3, #24]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	440b      	add	r3, r1
 8008860:	1e59      	subs	r1, r3, #1
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	fbb1 f3f3 	udiv	r3, r1, r3
 800886a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800886c:	4b9d      	ldr	r3, [pc, #628]	; (8008ae4 <USB_EPStartXfer+0x370>)
 800886e:	400b      	ands	r3, r1
 8008870:	69b9      	ldr	r1, [r7, #24]
 8008872:	0148      	lsls	r0, r1, #5
 8008874:	69f9      	ldr	r1, [r7, #28]
 8008876:	4401      	add	r1, r0
 8008878:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800887c:	4313      	orrs	r3, r2
 800887e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008896:	69b9      	ldr	r1, [r7, #24]
 8008898:	0148      	lsls	r0, r1, #5
 800889a:	69f9      	ldr	r1, [r7, #28]
 800889c:	4401      	add	r1, r0
 800889e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088a2:	4313      	orrs	r3, r2
 80088a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	791b      	ldrb	r3, [r3, #4]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d11f      	bne.n	80088ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d14b      	bne.n	800898c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	461a      	mov	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	791b      	ldrb	r3, [r3, #4]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d128      	bne.n	800896a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008924:	2b00      	cmp	r3, #0
 8008926:	d110      	bne.n	800894a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	440a      	add	r2, r1
 800893e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	e00f      	b.n	800896a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008968:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	440a      	add	r2, r1
 8008980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e133      	b.n	8008bf4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d015      	beq.n	80089e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 811b 	beq.w	8008bf4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	2101      	movs	r1, #1
 80089d0:	fa01 f303 	lsl.w	r3, r1, r3
 80089d4:	69f9      	ldr	r1, [r7, #28]
 80089d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089da:	4313      	orrs	r3, r2
 80089dc:	634b      	str	r3, [r1, #52]	; 0x34
 80089de:	e109      	b.n	8008bf4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d110      	bne.n	8008a12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	0151      	lsls	r1, r2, #5
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	440a      	add	r2, r1
 8008a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e00f      	b.n	8008a32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6919      	ldr	r1, [r3, #16]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	b298      	uxth	r0, r3
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fade 	bl	8009008 <USB_WritePacket>
 8008a4c:	e0d2      	b.n	8008bf4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a68:	0cdb      	lsrs	r3, r3, #19
 8008a6a:	04db      	lsls	r3, r3, #19
 8008a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	0151      	lsls	r1, r2, #5
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	440a      	add	r2, r1
 8008a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d126      	bne.n	8008ae8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	0148      	lsls	r0, r1, #5
 8008ab4:	69f9      	ldr	r1, [r7, #28]
 8008ab6:	4401      	add	r1, r0
 8008ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008abc:	4313      	orrs	r3, r2
 8008abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	0151      	lsls	r1, r2, #5
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	440a      	add	r2, r1
 8008ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ade:	6113      	str	r3, [r2, #16]
 8008ae0:	e03a      	b.n	8008b58 <USB_EPStartXfer+0x3e4>
 8008ae2:	bf00      	nop
 8008ae4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	699a      	ldr	r2, [r3, #24]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	1e5a      	subs	r2, r3, #1
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	8afa      	ldrh	r2, [r7, #22]
 8008b04:	fb03 f202 	mul.w	r2, r3, r2
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	8afb      	ldrh	r3, [r7, #22]
 8008b1c:	04d9      	lsls	r1, r3, #19
 8008b1e:	4b38      	ldr	r3, [pc, #224]	; (8008c00 <USB_EPStartXfer+0x48c>)
 8008b20:	400b      	ands	r3, r1
 8008b22:	69b9      	ldr	r1, [r7, #24]
 8008b24:	0148      	lsls	r0, r1, #5
 8008b26:	69f9      	ldr	r1, [r7, #28]
 8008b28:	4401      	add	r1, r0
 8008b2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b48:	69b9      	ldr	r1, [r7, #24]
 8008b4a:	0148      	lsls	r0, r1, #5
 8008b4c:	69f9      	ldr	r1, [r7, #28]
 8008b4e:	4401      	add	r1, r0
 8008b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b54:	4313      	orrs	r3, r2
 8008b56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10d      	bne.n	8008b7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6919      	ldr	r1, [r3, #16]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	460a      	mov	r2, r1
 8008b78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d128      	bne.n	8008bd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d110      	bne.n	8008bb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	0151      	lsls	r1, r2, #5
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	440a      	add	r2, r1
 8008ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	e00f      	b.n	8008bd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	1ff80000 	.word	0x1ff80000

08008c04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	f040 80ce 	bne.w	8008dc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d132      	bne.n	8008c94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8c:	0cdb      	lsrs	r3, r3, #19
 8008c8e:	04db      	lsls	r3, r3, #19
 8008c90:	6113      	str	r3, [r2, #16]
 8008c92:	e04e      	b.n	8008d32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cae:	0cdb      	lsrs	r3, r3, #19
 8008cb0:	04db      	lsls	r3, r3, #19
 8008cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	0151      	lsls	r1, r2, #5
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	440a      	add	r2, r1
 8008cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d22:	6939      	ldr	r1, [r7, #16]
 8008d24:	0148      	lsls	r0, r1, #5
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	4401      	add	r1, r0
 8008d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d11e      	bne.n	8008d76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	e097      	b.n	8008ea6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	0151      	lsls	r1, r2, #5
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	440a      	add	r2, r1
 8008d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8083 	beq.w	8008ea6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	2101      	movs	r1, #1
 8008db2:	fa01 f303 	lsl.w	r3, r1, r3
 8008db6:	6979      	ldr	r1, [r7, #20]
 8008db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	634b      	str	r3, [r1, #52]	; 0x34
 8008dc0:	e071      	b.n	8008ea6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ddc:	0cdb      	lsrs	r3, r3, #19
 8008dde:	04db      	lsls	r3, r3, #19
 8008de0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	0151      	lsls	r1, r2, #5
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	440a      	add	r2, r1
 8008e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e54:	6939      	ldr	r1, [r7, #16]
 8008e56:	0148      	lsls	r0, r1, #5
 8008e58:	6979      	ldr	r1, [r7, #20]
 8008e5a:	4401      	add	r1, r0
 8008e5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e60:	4313      	orrs	r3, r2
 8008e62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d10d      	bne.n	8008e86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6919      	ldr	r1, [r3, #16]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	460a      	mov	r2, r1
 8008e84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ea4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d14a      	bne.n	8008f68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eea:	f040 8086 	bne.w	8008ffa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	0151      	lsls	r1, r2, #5
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	440a      	add	r2, r1
 8008f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d902      	bls.n	8008f4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4a:	e056      	b.n	8008ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f64:	d0e7      	beq.n	8008f36 <USB_EPStopXfer+0x82>
 8008f66:	e048      	b.n	8008ffa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f80:	d13b      	bne.n	8008ffa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	7812      	ldrb	r2, [r2, #0]
 8008f96:	0151      	lsls	r1, r2, #5
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d902      	bls.n	8008fe0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fde:	e00c      	b.n	8008ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff8:	d0e7      	beq.n	8008fca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009008:	b480      	push	{r7}
 800900a:	b089      	sub	sp, #36	; 0x24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	4611      	mov	r1, r2
 8009014:	461a      	mov	r2, r3
 8009016:	460b      	mov	r3, r1
 8009018:	71fb      	strb	r3, [r7, #7]
 800901a:	4613      	mov	r3, r2
 800901c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d123      	bne.n	8009076 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800902e:	88bb      	ldrh	r3, [r7, #4]
 8009030:	3303      	adds	r3, #3
 8009032:	089b      	lsrs	r3, r3, #2
 8009034:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009036:	2300      	movs	r3, #0
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e018      	b.n	800906e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	031a      	lsls	r2, r3, #12
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	4413      	add	r3, r2
 8009044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009048:	461a      	mov	r2, r3
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3301      	adds	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3301      	adds	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	3301      	adds	r3, #1
 8009060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3301      	adds	r3, #1
 8009066:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	3301      	adds	r3, #1
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	429a      	cmp	r2, r3
 8009074:	d3e2      	bcc.n	800903c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3724      	adds	r7, #36	; 0x24
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009084:	b480      	push	{r7}
 8009086:	b08b      	sub	sp, #44	; 0x2c
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	089b      	lsrs	r3, r3, #2
 800909e:	b29b      	uxth	r3, r3
 80090a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090aa:	2300      	movs	r3, #0
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	e014      	b.n	80090da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	3301      	adds	r3, #1
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	3301      	adds	r3, #1
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	3301      	adds	r3, #1
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	3301      	adds	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	3301      	adds	r3, #1
 80090d8:	623b      	str	r3, [r7, #32]
 80090da:	6a3a      	ldr	r2, [r7, #32]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d3e6      	bcc.n	80090b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090e2:	8bfb      	ldrh	r3, [r7, #30]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01e      	beq.n	8009126 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f2:	461a      	mov	r2, r3
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	b2da      	uxtb	r2, r3
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	701a      	strb	r2, [r3, #0]
      i++;
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	3301      	adds	r3, #1
 8009112:	623b      	str	r3, [r7, #32]
      pDest++;
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	3301      	adds	r3, #1
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800911a:	8bfb      	ldrh	r3, [r7, #30]
 800911c:	3b01      	subs	r3, #1
 800911e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009120:	8bfb      	ldrh	r3, [r7, #30]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1ea      	bne.n	80090fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009128:	4618      	mov	r0, r3
 800912a:	372c      	adds	r7, #44	; 0x2c
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d12c      	bne.n	80091aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	db12      	blt.n	8009188 <USB_EPSetStall+0x54>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00f      	beq.n	8009188 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009186:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	440a      	add	r2, r1
 800919e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	e02b      	b.n	8009202 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	db12      	blt.n	80091e2 <USB_EPSetStall+0xae>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00f      	beq.n	80091e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009200:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d128      	bne.n	800927e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800924a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	791b      	ldrb	r3, [r3, #4]
 8009250:	2b03      	cmp	r3, #3
 8009252:	d003      	beq.n	800925c <USB_EPClearStall+0x4c>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d138      	bne.n	80092ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	0151      	lsls	r1, r2, #5
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	440a      	add	r2, r1
 8009272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	e027      	b.n	80092ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800929c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	791b      	ldrb	r3, [r3, #4]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d003      	beq.n	80092ae <USB_EPClearStall+0x9e>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d10f      	bne.n	80092ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009316:	4313      	orrs	r3, r2
 8009318:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009356:	f023 0302 	bic.w	r3, r3, #2
 800935a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4013      	ands	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093c4:	68fb      	ldr	r3, [r7, #12]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	4013      	ands	r3, r2
 80093f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	0c1b      	lsrs	r3, r3, #16
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4013      	ands	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	b29b      	uxth	r3, r3
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	4013      	ands	r3, r2
 8009466:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009468:	68bb      	ldr	r3, [r7, #8]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009476:	b480      	push	{r7}
 8009478:	b087      	sub	sp, #28
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	fa22 f303 	lsr.w	r3, r2, r3
 80094a6:	01db      	lsls	r3, r3, #7
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4013      	ands	r3, r2
 80094c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094c4:	68bb      	ldr	r3, [r7, #8]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f003 0301 	and.w	r3, r3, #1
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009508:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	460b      	mov	r3, r1
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	333c      	adds	r3, #60	; 0x3c
 800954a:	3304      	adds	r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	4a26      	ldr	r2, [pc, #152]	; (80095ec <USB_EP0_OutStart+0xb8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d90a      	bls.n	800956e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009568:	d101      	bne.n	800956e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	e037      	b.n	80095de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	2300      	movs	r3, #0
 8009578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800958c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800959c:	f043 0318 	orr.w	r3, r3, #24
 80095a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d10f      	bne.n	80095dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	4f54300a 	.word	0x4f54300a

080095f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4a13      	ldr	r2, [pc, #76]	; (8009654 <USB_CoreReset+0x64>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d901      	bls.n	800960e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e01b      	b.n	8009646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	daf2      	bge.n	80095fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f043 0201 	orr.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4a09      	ldr	r2, [pc, #36]	; (8009654 <USB_CoreReset+0x64>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d901      	bls.n	8009638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e006      	b.n	8009646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d0f0      	beq.n	8009626 <USB_CoreReset+0x36>

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	00030d40 	.word	0x00030d40

08009658 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009664:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009668:	f002 fc3c 	bl	800bee4 <USBD_static_malloc>
 800966c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32b0      	adds	r2, #176	; 0xb0
 800967e:	2100      	movs	r1, #0
 8009680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009684:	2302      	movs	r3, #2
 8009686:	e0d4      	b.n	8009832 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009688:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800968c:	2100      	movs	r1, #0
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f002 fc90 	bl	800bfb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	32b0      	adds	r2, #176	; 0xb0
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	32b0      	adds	r2, #176	; 0xb0
 80096ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c1b      	ldrb	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d138      	bne.n	8009732 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096c0:	4b5e      	ldr	r3, [pc, #376]	; (800983c <USBD_CDC_Init+0x1e4>)
 80096c2:	7819      	ldrb	r1, [r3, #0]
 80096c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c8:	2202      	movs	r2, #2
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f002 fae7 	bl	800bc9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096d0:	4b5a      	ldr	r3, [pc, #360]	; (800983c <USBD_CDC_Init+0x1e4>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	3324      	adds	r3, #36	; 0x24
 80096e6:	2201      	movs	r2, #1
 80096e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096ea:	4b55      	ldr	r3, [pc, #340]	; (8009840 <USBD_CDC_Init+0x1e8>)
 80096ec:	7819      	ldrb	r1, [r3, #0]
 80096ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f2:	2202      	movs	r2, #2
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f002 fad2 	bl	800bc9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096fa:	4b51      	ldr	r3, [pc, #324]	; (8009840 <USBD_CDC_Init+0x1e8>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 020f 	and.w	r2, r3, #15
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009712:	2201      	movs	r2, #1
 8009714:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009716:	4b4b      	ldr	r3, [pc, #300]	; (8009844 <USBD_CDC_Init+0x1ec>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	f003 020f 	and.w	r2, r3, #15
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	3326      	adds	r3, #38	; 0x26
 800972c:	2210      	movs	r2, #16
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	e035      	b.n	800979e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009732:	4b42      	ldr	r3, [pc, #264]	; (800983c <USBD_CDC_Init+0x1e4>)
 8009734:	7819      	ldrb	r1, [r3, #0]
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	2202      	movs	r2, #2
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f002 faaf 	bl	800bc9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009740:	4b3e      	ldr	r3, [pc, #248]	; (800983c <USBD_CDC_Init+0x1e4>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 020f 	and.w	r2, r3, #15
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	3324      	adds	r3, #36	; 0x24
 8009756:	2201      	movs	r2, #1
 8009758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800975a:	4b39      	ldr	r3, [pc, #228]	; (8009840 <USBD_CDC_Init+0x1e8>)
 800975c:	7819      	ldrb	r1, [r3, #0]
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	2202      	movs	r2, #2
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f002 fa9b 	bl	800bc9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009768:	4b35      	ldr	r3, [pc, #212]	; (8009840 <USBD_CDC_Init+0x1e8>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f003 020f 	and.w	r2, r3, #15
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	440b      	add	r3, r1
 800977c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009780:	2201      	movs	r2, #1
 8009782:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009784:	4b2f      	ldr	r3, [pc, #188]	; (8009844 <USBD_CDC_Init+0x1ec>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	3326      	adds	r3, #38	; 0x26
 800979a:	2210      	movs	r2, #16
 800979c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800979e:	4b29      	ldr	r3, [pc, #164]	; (8009844 <USBD_CDC_Init+0x1ec>)
 80097a0:	7819      	ldrb	r1, [r3, #0]
 80097a2:	2308      	movs	r3, #8
 80097a4:	2203      	movs	r2, #3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f002 fa79 	bl	800bc9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097ac:	4b25      	ldr	r3, [pc, #148]	; (8009844 <USBD_CDC_Init+0x1ec>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 020f 	and.w	r2, r3, #15
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	440b      	add	r3, r1
 80097c0:	3324      	adds	r3, #36	; 0x24
 80097c2:	2201      	movs	r2, #1
 80097c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	33b0      	adds	r3, #176	; 0xb0
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80097fc:	2302      	movs	r3, #2
 80097fe:	e018      	b.n	8009832 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	7c1b      	ldrb	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <USBD_CDC_Init+0x1e8>)
 800980a:	7819      	ldrb	r1, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f002 fb30 	bl	800be7c <USBD_LL_PrepareReceive>
 800981c:	e008      	b.n	8009830 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800981e:	4b08      	ldr	r3, [pc, #32]	; (8009840 <USBD_CDC_Init+0x1e8>)
 8009820:	7819      	ldrb	r1, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f002 fb26 	bl	800be7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000093 	.word	0x20000093
 8009840:	20000094 	.word	0x20000094
 8009844:	20000095 	.word	0x20000095

08009848 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009854:	4b3a      	ldr	r3, [pc, #232]	; (8009940 <USBD_CDC_DeInit+0xf8>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 fa45 	bl	800bcea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009860:	4b37      	ldr	r3, [pc, #220]	; (8009940 <USBD_CDC_DeInit+0xf8>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	3324      	adds	r3, #36	; 0x24
 8009876:	2200      	movs	r2, #0
 8009878:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800987a:	4b32      	ldr	r3, [pc, #200]	; (8009944 <USBD_CDC_DeInit+0xfc>)
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f002 fa32 	bl	800bcea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009886:	4b2f      	ldr	r3, [pc, #188]	; (8009944 <USBD_CDC_DeInit+0xfc>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	f003 020f 	and.w	r2, r3, #15
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800989e:	2200      	movs	r2, #0
 80098a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098a2:	4b29      	ldr	r3, [pc, #164]	; (8009948 <USBD_CDC_DeInit+0x100>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f002 fa1e 	bl	800bcea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098ae:	4b26      	ldr	r3, [pc, #152]	; (8009948 <USBD_CDC_DeInit+0x100>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	f003 020f 	and.w	r2, r3, #15
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	3324      	adds	r3, #36	; 0x24
 80098c4:	2200      	movs	r2, #0
 80098c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098c8:	4b1f      	ldr	r3, [pc, #124]	; (8009948 <USBD_CDC_DeInit+0x100>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 020f 	and.w	r2, r3, #15
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3326      	adds	r3, #38	; 0x26
 80098de:	2200      	movs	r2, #0
 80098e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	32b0      	adds	r2, #176	; 0xb0
 80098ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01f      	beq.n	8009934 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	33b0      	adds	r3, #176	; 0xb0
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	32b0      	adds	r2, #176	; 0xb0
 8009912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009916:	4618      	mov	r0, r3
 8009918:	f002 faf2 	bl	800bf00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	32b0      	adds	r2, #176	; 0xb0
 8009926:	2100      	movs	r1, #0
 8009928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000093 	.word	0x20000093
 8009944:	20000094 	.word	0x20000094
 8009948:	20000095 	.word	0x20000095

0800994c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32b0      	adds	r2, #176	; 0xb0
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009978:	2303      	movs	r3, #3
 800997a:	e0bf      	b.n	8009afc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009984:	2b00      	cmp	r3, #0
 8009986:	d050      	beq.n	8009a2a <USBD_CDC_Setup+0xde>
 8009988:	2b20      	cmp	r3, #32
 800998a:	f040 80af 	bne.w	8009aec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	88db      	ldrh	r3, [r3, #6]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d03a      	beq.n	8009a0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b25b      	sxtb	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	da1b      	bge.n	80099d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	33b0      	adds	r3, #176	; 0xb0
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	88d2      	ldrh	r2, [r2, #6]
 80099bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b07      	cmp	r3, #7
 80099c4:	bf28      	it	cs
 80099c6:	2307      	movcs	r3, #7
 80099c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	89fa      	ldrh	r2, [r7, #14]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fd43 	bl	800b45c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099d6:	e090      	b.n	8009afa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	785a      	ldrb	r2, [r3, #1]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	88db      	ldrh	r3, [r3, #6]
 80099e6:	2b3f      	cmp	r3, #63	; 0x3f
 80099e8:	d803      	bhi.n	80099f2 <USBD_CDC_Setup+0xa6>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	88db      	ldrh	r3, [r3, #6]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	e000      	b.n	80099f4 <USBD_CDC_Setup+0xa8>
 80099f2:	2240      	movs	r2, #64	; 0x40
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099fa:	6939      	ldr	r1, [r7, #16]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a02:	461a      	mov	r2, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 fd55 	bl	800b4b4 <USBD_CtlPrepareRx>
      break;
 8009a0a:	e076      	b.n	8009afa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	33b0      	adds	r3, #176	; 0xb0
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	7850      	ldrb	r0, [r2, #1]
 8009a22:	2200      	movs	r2, #0
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	4798      	blx	r3
      break;
 8009a28:	e067      	b.n	8009afa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	2b0b      	cmp	r3, #11
 8009a30:	d851      	bhi.n	8009ad6 <USBD_CDC_Setup+0x18a>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBD_CDC_Setup+0xec>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a69 	.word	0x08009a69
 8009a3c:	08009ae5 	.word	0x08009ae5
 8009a40:	08009ad7 	.word	0x08009ad7
 8009a44:	08009ad7 	.word	0x08009ad7
 8009a48:	08009ad7 	.word	0x08009ad7
 8009a4c:	08009ad7 	.word	0x08009ad7
 8009a50:	08009ad7 	.word	0x08009ad7
 8009a54:	08009ad7 	.word	0x08009ad7
 8009a58:	08009ad7 	.word	0x08009ad7
 8009a5c:	08009ad7 	.word	0x08009ad7
 8009a60:	08009a93 	.word	0x08009a93
 8009a64:	08009abd 	.word	0x08009abd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d107      	bne.n	8009a84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a74:	f107 030a 	add.w	r3, r7, #10
 8009a78:	2202      	movs	r2, #2
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 fced 	bl	800b45c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a82:	e032      	b.n	8009aea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fc77 	bl	800b37a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8009a90:	e02b      	b.n	8009aea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d107      	bne.n	8009aae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a9e:	f107 030d 	add.w	r3, r7, #13
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 fcd8 	bl	800b45c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009aac:	e01d      	b.n	8009aea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fc62 	bl	800b37a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aba:	e016      	b.n	8009aea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d00f      	beq.n	8009ae8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 fc55 	bl	800b37a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ad4:	e008      	b.n	8009ae8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fc4e 	bl	800b37a <USBD_CtlError>
          ret = USBD_FAIL;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae2:	e002      	b.n	8009aea <USBD_CDC_Setup+0x19e>
          break;
 8009ae4:	bf00      	nop
 8009ae6:	e008      	b.n	8009afa <USBD_CDC_Setup+0x1ae>
          break;
 8009ae8:	bf00      	nop
      }
      break;
 8009aea:	e006      	b.n	8009afa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fc43 	bl	800b37a <USBD_CtlError>
      ret = USBD_FAIL;
 8009af4:	2303      	movs	r3, #3
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	32b0      	adds	r2, #176	; 0xb0
 8009b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e065      	b.n	8009bfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	32b0      	adds	r2, #176	; 0xb0
 8009b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	f003 020f 	and.w	r2, r3, #15
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	440b      	add	r3, r1
 8009b50:	3318      	adds	r3, #24
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d02f      	beq.n	8009bb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	f003 020f 	and.w	r2, r3, #15
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	3318      	adds	r3, #24
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	f003 010f 	and.w	r1, r3, #15
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	460b      	mov	r3, r1
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	440b      	add	r3, r1
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4403      	add	r3, r0
 8009b80:	3348      	adds	r3, #72	; 0x48
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b88:	fb01 f303 	mul.w	r3, r1, r3
 8009b8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d112      	bne.n	8009bb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3318      	adds	r3, #24
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009baa:	78f9      	ldrb	r1, [r7, #3]
 8009bac:	2300      	movs	r3, #0
 8009bae:	2200      	movs	r2, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f002 f942 	bl	800be3a <USBD_LL_Transmit>
 8009bb6:	e01f      	b.n	8009bf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	33b0      	adds	r3, #176	; 0xb0
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d010      	beq.n	8009bf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	33b0      	adds	r3, #176	; 0xb0
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	32b0      	adds	r2, #176	; 0xb0
 8009c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	32b0      	adds	r2, #176	; 0xb0
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e01a      	b.n	8009c6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f002 f940 	bl	800bebe <USBD_LL_GetRxDataSize>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	33b0      	adds	r3, #176	; 0xb0
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c64:	4611      	mov	r1, r2
 8009c66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	32b0      	adds	r2, #176	; 0xb0
 8009c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e025      	b.n	8009ce0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	33b0      	adds	r3, #176	; 0xb0
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01a      	beq.n	8009cde <USBD_CDC_EP0_RxReady+0x6c>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cae:	2bff      	cmp	r3, #255	; 0xff
 8009cb0:	d015      	beq.n	8009cde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	33b0      	adds	r3, #176	; 0xb0
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	22ff      	movs	r2, #255	; 0xff
 8009cda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cf0:	2182      	movs	r1, #130	; 0x82
 8009cf2:	4818      	ldr	r0, [pc, #96]	; (8009d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cf4:	f000 fd09 	bl	800a70a <USBD_GetEpDesc>
 8009cf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4815      	ldr	r0, [pc, #84]	; (8009d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cfe:	f000 fd04 	bl	800a70a <USBD_GetEpDesc>
 8009d02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d04:	2181      	movs	r1, #129	; 0x81
 8009d06:	4813      	ldr	r0, [pc, #76]	; (8009d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d08:	f000 fcff 	bl	800a70a <USBD_GetEpDesc>
 8009d0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2210      	movs	r2, #16
 8009d18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d006      	beq.n	8009d2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d28:	711a      	strb	r2, [r3, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d3c:	711a      	strb	r2, [r3, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2243      	movs	r2, #67	; 0x43
 8009d46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000050 	.word	0x20000050

08009d58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d60:	2182      	movs	r1, #130	; 0x82
 8009d62:	4818      	ldr	r0, [pc, #96]	; (8009dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d64:	f000 fcd1 	bl	800a70a <USBD_GetEpDesc>
 8009d68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4815      	ldr	r0, [pc, #84]	; (8009dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d6e:	f000 fccc 	bl	800a70a <USBD_GetEpDesc>
 8009d72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d74:	2181      	movs	r1, #129	; 0x81
 8009d76:	4813      	ldr	r0, [pc, #76]	; (8009dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d78:	f000 fcc7 	bl	800a70a <USBD_GetEpDesc>
 8009d7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2210      	movs	r2, #16
 8009d88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2200      	movs	r2, #0
 8009d94:	711a      	strb	r2, [r3, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f042 0202 	orr.w	r2, r2, #2
 8009d9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	711a      	strb	r2, [r3, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f042 0202 	orr.w	r2, r2, #2
 8009db0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2243      	movs	r2, #67	; 0x43
 8009db6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000050 	.word	0x20000050

08009dc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009dd0:	2182      	movs	r1, #130	; 0x82
 8009dd2:	4818      	ldr	r0, [pc, #96]	; (8009e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dd4:	f000 fc99 	bl	800a70a <USBD_GetEpDesc>
 8009dd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4815      	ldr	r0, [pc, #84]	; (8009e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dde:	f000 fc94 	bl	800a70a <USBD_GetEpDesc>
 8009de2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009de4:	2181      	movs	r1, #129	; 0x81
 8009de6:	4813      	ldr	r0, [pc, #76]	; (8009e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009de8:	f000 fc8f 	bl	800a70a <USBD_GetEpDesc>
 8009dec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2210      	movs	r2, #16
 8009df8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e08:	711a      	strb	r2, [r3, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e1c:	711a      	strb	r2, [r3, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2243      	movs	r2, #67	; 0x43
 8009e26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000050 	.word	0x20000050

08009e38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	220a      	movs	r2, #10
 8009e44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e46:	4b03      	ldr	r3, [pc, #12]	; (8009e54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	2000000c 	.word	0x2000000c

08009e58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e009      	b.n	8009e80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	33b0      	adds	r3, #176	; 0xb0
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	32b0      	adds	r2, #176	; 0xb0
 8009ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e008      	b.n	8009ec4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	32b0      	adds	r2, #176	; 0xb0
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e004      	b.n	8009efe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	32b0      	adds	r2, #176	; 0xb0
 8009f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32b0      	adds	r2, #176	; 0xb0
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e018      	b.n	8009f6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7c1b      	ldrb	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f42:	4b0c      	ldr	r3, [pc, #48]	; (8009f74 <USBD_CDC_ReceivePacket+0x68>)
 8009f44:	7819      	ldrb	r1, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 ff93 	bl	800be7c <USBD_LL_PrepareReceive>
 8009f56:	e008      	b.n	8009f6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <USBD_CDC_ReceivePacket+0x68>)
 8009f5a:	7819      	ldrb	r1, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 ff89 	bl	800be7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000094 	.word	0x20000094

08009f78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e01f      	b.n	8009fd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	79fa      	ldrb	r2, [r7, #7]
 8009fc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f001 fe03 	bl	800bbd0 <USBD_LL_Init>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e025      	b.n	800a03c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	32ae      	adds	r2, #174	; 0xae
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00f      	beq.n	800a02c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	32ae      	adds	r2, #174	; 0xae
 800a016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	f107 020e 	add.w	r2, r7, #14
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	4602      	mov	r2, r0
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f001 fe0b 	bl	800bc68 <USBD_LL_Start>
 800a052:	4603      	mov	r3, r0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d009      	beq.n	800a0a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	4611      	mov	r1, r2
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	4798      	blx	r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f908 	bl	800b306 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a112:	f003 031f 	and.w	r3, r3, #31
 800a116:	2b02      	cmp	r3, #2
 800a118:	d01a      	beq.n	800a150 <USBD_LL_SetupStage+0x72>
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d822      	bhi.n	800a164 <USBD_LL_SetupStage+0x86>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <USBD_LL_SetupStage+0x4a>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d00a      	beq.n	800a13c <USBD_LL_SetupStage+0x5e>
 800a126:	e01d      	b.n	800a164 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fb5f 	bl	800a7f4 <USBD_StdDevReq>
 800a136:	4603      	mov	r3, r0
 800a138:	73fb      	strb	r3, [r7, #15]
      break;
 800a13a:	e020      	b.n	800a17e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fbc7 	bl	800a8d8 <USBD_StdItfReq>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]
      break;
 800a14e:	e016      	b.n	800a17e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fc29 	bl	800a9b0 <USBD_StdEPReq>
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]
      break;
 800a162:	e00c      	b.n	800a17e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a16a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 fdd8 	bl	800bd28 <USBD_LL_StallEP>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]
      break;
 800a17c:	bf00      	nop
  }

  return ret;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	460b      	mov	r3, r1
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d16e      	bne.n	800a27e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	f040 8098 	bne.w	800a2e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d913      	bls.n	800a1e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	1ad2      	subs	r2, r2, r3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	bf28      	it	cs
 800a1da:	4613      	movcs	r3, r2
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f001 f984 	bl	800b4ee <USBD_CtlContinueRx>
 800a1e6:	e07d      	b.n	800a2e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1ee:	f003 031f 	and.w	r3, r3, #31
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d014      	beq.n	800a220 <USBD_LL_DataOutStage+0x98>
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d81d      	bhi.n	800a236 <USBD_LL_DataOutStage+0xae>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <USBD_LL_DataOutStage+0x7c>
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d003      	beq.n	800a20a <USBD_LL_DataOutStage+0x82>
 800a202:	e018      	b.n	800a236 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	75bb      	strb	r3, [r7, #22]
            break;
 800a208:	e018      	b.n	800a23c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 fa5e 	bl	800a6d6 <USBD_CoreFindIF>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75bb      	strb	r3, [r7, #22]
            break;
 800a21e:	e00d      	b.n	800a23c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a226:	b2db      	uxtb	r3, r3
 800a228:	4619      	mov	r1, r3
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 fa60 	bl	800a6f0 <USBD_CoreFindEP>
 800a230:	4603      	mov	r3, r0
 800a232:	75bb      	strb	r3, [r7, #22]
            break;
 800a234:	e002      	b.n	800a23c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	75bb      	strb	r3, [r7, #22]
            break;
 800a23a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a23c:	7dbb      	ldrb	r3, [r7, #22]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d119      	bne.n	800a276 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d113      	bne.n	800a276 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a24e:	7dba      	ldrb	r2, [r7, #22]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	32ae      	adds	r2, #174	; 0xae
 800a254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00b      	beq.n	800a276 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a25e:	7dba      	ldrb	r2, [r7, #22]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a266:	7dba      	ldrb	r2, [r7, #22]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	32ae      	adds	r2, #174	; 0xae
 800a26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f001 f94a 	bl	800b510 <USBD_CtlSendStatus>
 800a27c:	e032      	b.n	800a2e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a284:	b2db      	uxtb	r3, r3
 800a286:	4619      	mov	r1, r3
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fa31 	bl	800a6f0 <USBD_CoreFindEP>
 800a28e:	4603      	mov	r3, r0
 800a290:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a292:	7dbb      	ldrb	r3, [r7, #22]
 800a294:	2bff      	cmp	r3, #255	; 0xff
 800a296:	d025      	beq.n	800a2e4 <USBD_LL_DataOutStage+0x15c>
 800a298:	7dbb      	ldrb	r3, [r7, #22]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d122      	bne.n	800a2e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d117      	bne.n	800a2da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2aa:	7dba      	ldrb	r2, [r7, #22]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	32ae      	adds	r2, #174	; 0xae
 800a2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00f      	beq.n	800a2da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2ba:	7dba      	ldrb	r2, [r7, #22]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2c2:	7dba      	ldrb	r2, [r7, #22]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	32ae      	adds	r2, #174	; 0xae
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	7afa      	ldrb	r2, [r7, #11]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	e000      	b.n	800a2e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b086      	sub	sp, #24
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2fc:	7afb      	ldrb	r3, [r7, #11]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d16f      	bne.n	800a3e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3314      	adds	r3, #20
 800a306:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d15a      	bne.n	800a3c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d914      	bls.n	800a348 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	461a      	mov	r2, r3
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f001 f8ac 	bl	800b492 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a33a:	2300      	movs	r3, #0
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f001 fd9b 	bl	800be7c <USBD_LL_PrepareReceive>
 800a346:	e03f      	b.n	800a3c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d11c      	bne.n	800a38e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d316      	bcc.n	800a38e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d20f      	bcs.n	800a38e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a36e:	2200      	movs	r2, #0
 800a370:	2100      	movs	r1, #0
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f001 f88d 	bl	800b492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a380:	2300      	movs	r3, #0
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 fd78 	bl	800be7c <USBD_LL_PrepareReceive>
 800a38c:	e01c      	b.n	800a3c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b03      	cmp	r3, #3
 800a398:	d10f      	bne.n	800a3ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d009      	beq.n	800a3ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ba:	2180      	movs	r1, #128	; 0x80
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f001 fcb3 	bl	800bd28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f001 f8b7 	bl	800b536 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d03a      	beq.n	800a448 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff fe42 	bl	800a05c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3e0:	e032      	b.n	800a448 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f97f 	bl	800a6f0 <USBD_CoreFindEP>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	2bff      	cmp	r3, #255	; 0xff
 800a3fa:	d025      	beq.n	800a448 <USBD_LL_DataInStage+0x15a>
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d122      	bne.n	800a448 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d11c      	bne.n	800a448 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a40e:	7dfa      	ldrb	r2, [r7, #23]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	32ae      	adds	r2, #174	; 0xae
 800a414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d014      	beq.n	800a448 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a41e:	7dfa      	ldrb	r2, [r7, #23]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a426:	7dfa      	ldrb	r2, [r7, #23]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	32ae      	adds	r2, #174	; 0xae
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	7afa      	ldrb	r2, [r7, #11]
 800a434:	4611      	mov	r1, r2
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	4798      	blx	r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a43e:	7dbb      	ldrb	r3, [r7, #22]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a444:	7dbb      	ldrb	r3, [r7, #22]
 800a446:	e000      	b.n	800a44a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d014      	beq.n	800a4b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00e      	beq.n	800a4b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6852      	ldr	r2, [r2, #4]
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 fbed 	bl	800bc9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2240      	movs	r2, #64	; 0x40
 800a4d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4d4:	2340      	movs	r3, #64	; 0x40
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2180      	movs	r1, #128	; 0x80
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fbdf 	bl	800bc9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2240      	movs	r2, #64	; 0x40
 800a4ea:	621a      	str	r2, [r3, #32]

  return ret;
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a524:	b2da      	uxtb	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2204      	movs	r2, #4
 800a530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b04      	cmp	r3, #4
 800a554:	d106      	bne.n	800a564 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b03      	cmp	r3, #3
 800a584:	d110      	bne.n	800a5a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	32ae      	adds	r2, #174	; 0xae
 800a5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e01c      	b.n	800a60e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d115      	bne.n	800a60c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	32ae      	adds	r2, #174	; 0xae
 800a5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	32ae      	adds	r2, #174	; 0xae
 800a5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	78fa      	ldrb	r2, [r7, #3]
 800a606:	4611      	mov	r1, r2
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	32ae      	adds	r2, #174	; 0xae
 800a62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a634:	2303      	movs	r3, #3
 800a636:	e01c      	b.n	800a672 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b03      	cmp	r3, #3
 800a642:	d115      	bne.n	800a670 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32ae      	adds	r2, #174	; 0xae
 800a64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00b      	beq.n	800a670 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32ae      	adds	r2, #174	; 0xae
 800a662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	4611      	mov	r1, r2
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00e      	beq.n	800a6cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6852      	ldr	r2, [r2, #4]
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	4611      	mov	r1, r2
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b086      	sub	sp, #24
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	885b      	ldrh	r3, [r3, #2]
 800a726:	b29a      	uxth	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	429a      	cmp	r2, r3
 800a730:	d920      	bls.n	800a774 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a73a:	e013      	b.n	800a764 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a73c:	f107 030a 	add.w	r3, r7, #10
 800a740:	4619      	mov	r1, r3
 800a742:	6978      	ldr	r0, [r7, #20]
 800a744:	f000 f81b 	bl	800a77e <USBD_GetNextDesc>
 800a748:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d108      	bne.n	800a764 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	789b      	ldrb	r3, [r3, #2]
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d008      	beq.n	800a772 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a760:	2300      	movs	r3, #0
 800a762:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	885b      	ldrh	r3, [r3, #2]
 800a768:	b29a      	uxth	r2, r3
 800a76a:	897b      	ldrh	r3, [r7, #10]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d8e5      	bhi.n	800a73c <USBD_GetEpDesc+0x32>
 800a770:	e000      	b.n	800a774 <USBD_GetEpDesc+0x6a>
          break;
 800a772:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a774:	693b      	ldr	r3, [r7, #16]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	881a      	ldrh	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4413      	add	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7d6:	8a3b      	ldrh	r3, [r7, #16]
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	b21a      	sxth	r2, r3
 800a7dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b21b      	sxth	r3, r3
 800a7e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	371c      	adds	r7, #28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d005      	beq.n	800a81a <USBD_StdDevReq+0x26>
 800a80e:	2b40      	cmp	r3, #64	; 0x40
 800a810:	d857      	bhi.n	800a8c2 <USBD_StdDevReq+0xce>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00f      	beq.n	800a836 <USBD_StdDevReq+0x42>
 800a816:	2b20      	cmp	r3, #32
 800a818:	d153      	bne.n	800a8c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	32ae      	adds	r2, #174	; 0xae
 800a824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
      break;
 800a834:	e04a      	b.n	800a8cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	d83b      	bhi.n	800a8b6 <USBD_StdDevReq+0xc2>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBD_StdDevReq+0x50>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a899 	.word	0x0800a899
 800a848:	0800a8ad 	.word	0x0800a8ad
 800a84c:	0800a8b7 	.word	0x0800a8b7
 800a850:	0800a8a3 	.word	0x0800a8a3
 800a854:	0800a8b7 	.word	0x0800a8b7
 800a858:	0800a877 	.word	0x0800a877
 800a85c:	0800a86d 	.word	0x0800a86d
 800a860:	0800a8b7 	.word	0x0800a8b7
 800a864:	0800a88f 	.word	0x0800a88f
 800a868:	0800a881 	.word	0x0800a881
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fa3c 	bl	800acec <USBD_GetDescriptor>
          break;
 800a874:	e024      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fba1 	bl	800afc0 <USBD_SetAddress>
          break;
 800a87e:	e01f      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fbe0 	bl	800b048 <USBD_SetConfig>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
          break;
 800a88c:	e018      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fc83 	bl	800b19c <USBD_GetConfig>
          break;
 800a896:	e013      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fcb4 	bl	800b208 <USBD_GetStatus>
          break;
 800a8a0:	e00e      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fce3 	bl	800b270 <USBD_SetFeature>
          break;
 800a8aa:	e009      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fd07 	bl	800b2c2 <USBD_ClrFeature>
          break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fd5e 	bl	800b37a <USBD_CtlError>
          break;
 800a8be:	bf00      	nop
      }
      break;
 800a8c0:	e004      	b.n	800a8cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fd58 	bl	800b37a <USBD_CtlError>
      break;
 800a8ca:	bf00      	nop
  }

  return ret;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop

0800a8d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d005      	beq.n	800a8fe <USBD_StdItfReq+0x26>
 800a8f2:	2b40      	cmp	r3, #64	; 0x40
 800a8f4:	d852      	bhi.n	800a99c <USBD_StdItfReq+0xc4>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <USBD_StdItfReq+0x26>
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d14e      	bne.n	800a99c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a904:	b2db      	uxtb	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d840      	bhi.n	800a98e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	889b      	ldrh	r3, [r3, #4]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b01      	cmp	r3, #1
 800a914:	d836      	bhi.n	800a984 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	889b      	ldrh	r3, [r3, #4]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7ff fed9 	bl	800a6d6 <USBD_CoreFindIF>
 800a924:	4603      	mov	r3, r0
 800a926:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2bff      	cmp	r3, #255	; 0xff
 800a92c:	d01d      	beq.n	800a96a <USBD_StdItfReq+0x92>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d11a      	bne.n	800a96a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a934:	7bba      	ldrb	r2, [r7, #14]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	32ae      	adds	r2, #174	; 0xae
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00f      	beq.n	800a964 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a944:	7bba      	ldrb	r2, [r7, #14]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a94c:	7bba      	ldrb	r2, [r7, #14]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	32ae      	adds	r2, #174	; 0xae
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a962:	e004      	b.n	800a96e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a964:	2303      	movs	r3, #3
 800a966:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a968:	e001      	b.n	800a96e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a96a:	2303      	movs	r3, #3
 800a96c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	88db      	ldrh	r3, [r3, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d110      	bne.n	800a998 <USBD_StdItfReq+0xc0>
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10d      	bne.n	800a998 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fdc7 	bl	800b510 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a982:	e009      	b.n	800a998 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fcf7 	bl	800b37a <USBD_CtlError>
          break;
 800a98c:	e004      	b.n	800a998 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fcf2 	bl	800b37a <USBD_CtlError>
          break;
 800a996:	e000      	b.n	800a99a <USBD_StdItfReq+0xc2>
          break;
 800a998:	bf00      	nop
      }
      break;
 800a99a:	e004      	b.n	800a9a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fceb 	bl	800b37a <USBD_CtlError>
      break;
 800a9a4:	bf00      	nop
  }

  return ret;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	889b      	ldrh	r3, [r3, #4]
 800a9c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d007      	beq.n	800a9e0 <USBD_StdEPReq+0x30>
 800a9d0:	2b40      	cmp	r3, #64	; 0x40
 800a9d2:	f200 817f 	bhi.w	800acd4 <USBD_StdEPReq+0x324>
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02a      	beq.n	800aa30 <USBD_StdEPReq+0x80>
 800a9da:	2b20      	cmp	r3, #32
 800a9dc:	f040 817a 	bne.w	800acd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fe83 	bl	800a6f0 <USBD_CoreFindEP>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9ee:	7b7b      	ldrb	r3, [r7, #13]
 800a9f0:	2bff      	cmp	r3, #255	; 0xff
 800a9f2:	f000 8174 	beq.w	800acde <USBD_StdEPReq+0x32e>
 800a9f6:	7b7b      	ldrb	r3, [r7, #13]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 8170 	bne.w	800acde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9fe:	7b7a      	ldrb	r2, [r7, #13]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa06:	7b7a      	ldrb	r2, [r7, #13]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	32ae      	adds	r2, #174	; 0xae
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 8163 	beq.w	800acde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa18:	7b7a      	ldrb	r2, [r7, #13]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	32ae      	adds	r2, #174	; 0xae
 800aa1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa2e:	e156      	b.n	800acde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d008      	beq.n	800aa4a <USBD_StdEPReq+0x9a>
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	f300 8145 	bgt.w	800acc8 <USBD_StdEPReq+0x318>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 809b 	beq.w	800ab7a <USBD_StdEPReq+0x1ca>
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d03c      	beq.n	800aac2 <USBD_StdEPReq+0x112>
 800aa48:	e13e      	b.n	800acc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d002      	beq.n	800aa5c <USBD_StdEPReq+0xac>
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d016      	beq.n	800aa88 <USBD_StdEPReq+0xd8>
 800aa5a:	e02c      	b.n	800aab6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00d      	beq.n	800aa7e <USBD_StdEPReq+0xce>
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d00a      	beq.n	800aa7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 f95b 	bl	800bd28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa72:	2180      	movs	r1, #128	; 0x80
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 f957 	bl	800bd28 <USBD_LL_StallEP>
 800aa7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa7c:	e020      	b.n	800aac0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fc7a 	bl	800b37a <USBD_CtlError>
              break;
 800aa86:	e01b      	b.n	800aac0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	885b      	ldrh	r3, [r3, #2]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10e      	bne.n	800aaae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USBD_StdEPReq+0xfe>
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b80      	cmp	r3, #128	; 0x80
 800aa9a:	d008      	beq.n	800aaae <USBD_StdEPReq+0xfe>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	88db      	ldrh	r3, [r3, #6]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d104      	bne.n	800aaae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f001 f93d 	bl	800bd28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fd2e 	bl	800b510 <USBD_CtlSendStatus>

              break;
 800aab4:	e004      	b.n	800aac0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc5e 	bl	800b37a <USBD_CtlError>
              break;
 800aabe:	bf00      	nop
          }
          break;
 800aac0:	e107      	b.n	800acd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d002      	beq.n	800aad4 <USBD_StdEPReq+0x124>
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d016      	beq.n	800ab00 <USBD_StdEPReq+0x150>
 800aad2:	e04b      	b.n	800ab6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00d      	beq.n	800aaf6 <USBD_StdEPReq+0x146>
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b80      	cmp	r3, #128	; 0x80
 800aade:	d00a      	beq.n	800aaf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f91f 	bl	800bd28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaea:	2180      	movs	r1, #128	; 0x80
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 f91b 	bl	800bd28 <USBD_LL_StallEP>
 800aaf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf4:	e040      	b.n	800ab78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc3e 	bl	800b37a <USBD_CtlError>
              break;
 800aafe:	e03b      	b.n	800ab78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	885b      	ldrh	r3, [r3, #2]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d136      	bne.n	800ab76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f925 	bl	800bd66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fcf7 	bl	800b510 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fde2 	bl	800a6f0 <USBD_CoreFindEP>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab30:	7b7b      	ldrb	r3, [r7, #13]
 800ab32:	2bff      	cmp	r3, #255	; 0xff
 800ab34:	d01f      	beq.n	800ab76 <USBD_StdEPReq+0x1c6>
 800ab36:	7b7b      	ldrb	r3, [r7, #13]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d11c      	bne.n	800ab76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab3c:	7b7a      	ldrb	r2, [r7, #13]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab44:	7b7a      	ldrb	r2, [r7, #13]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	; 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d010      	beq.n	800ab76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab54:	7b7a      	ldrb	r2, [r7, #13]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	32ae      	adds	r2, #174	; 0xae
 800ab5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab6a:	e004      	b.n	800ab76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fc03 	bl	800b37a <USBD_CtlError>
              break;
 800ab74:	e000      	b.n	800ab78 <USBD_StdEPReq+0x1c8>
              break;
 800ab76:	bf00      	nop
          }
          break;
 800ab78:	e0ab      	b.n	800acd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d002      	beq.n	800ab8c <USBD_StdEPReq+0x1dc>
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d032      	beq.n	800abf0 <USBD_StdEPReq+0x240>
 800ab8a:	e097      	b.n	800acbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d007      	beq.n	800aba2 <USBD_StdEPReq+0x1f2>
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b80      	cmp	r3, #128	; 0x80
 800ab96:	d004      	beq.n	800aba2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fbed 	bl	800b37a <USBD_CtlError>
                break;
 800aba0:	e091      	b.n	800acc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da0b      	bge.n	800abc2 <USBD_StdEPReq+0x212>
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	3310      	adds	r3, #16
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	4413      	add	r3, r2
 800abbe:	3304      	adds	r3, #4
 800abc0:	e00b      	b.n	800abda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	4413      	add	r3, r2
 800abd8:	3304      	adds	r3, #4
 800abda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2202      	movs	r2, #2
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fc37 	bl	800b45c <USBD_CtlSendData>
              break;
 800abee:	e06a      	b.n	800acc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da11      	bge.n	800ac1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	f003 020f 	and.w	r2, r3, #15
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	3324      	adds	r3, #36	; 0x24
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d117      	bne.n	800ac42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fbb0 	bl	800b37a <USBD_CtlError>
                  break;
 800ac1a:	e054      	b.n	800acc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	f003 020f 	and.w	r2, r3, #15
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac32:	881b      	ldrh	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d104      	bne.n	800ac42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fb9d 	bl	800b37a <USBD_CtlError>
                  break;
 800ac40:	e041      	b.n	800acc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	da0b      	bge.n	800ac62 <USBD_StdEPReq+0x2b2>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	3310      	adds	r3, #16
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3304      	adds	r3, #4
 800ac60:	e00b      	b.n	800ac7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	4413      	add	r3, r2
 800ac78:	3304      	adds	r3, #4
 800ac7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <USBD_StdEPReq+0x2d8>
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b80      	cmp	r3, #128	; 0x80
 800ac86:	d103      	bne.n	800ac90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e00e      	b.n	800acae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 f885 	bl	800bda4 <USBD_LL_IsStallEP>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e002      	b.n	800acae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2202      	movs	r2, #2
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fbd1 	bl	800b45c <USBD_CtlSendData>
              break;
 800acba:	e004      	b.n	800acc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fb5b 	bl	800b37a <USBD_CtlError>
              break;
 800acc4:	bf00      	nop
          }
          break;
 800acc6:	e004      	b.n	800acd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fb55 	bl	800b37a <USBD_CtlError>
          break;
 800acd0:	bf00      	nop
      }
      break;
 800acd2:	e005      	b.n	800ace0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fb4f 	bl	800b37a <USBD_CtlError>
      break;
 800acdc:	e000      	b.n	800ace0 <USBD_StdEPReq+0x330>
      break;
 800acde:	bf00      	nop
  }

  return ret;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	885b      	ldrh	r3, [r3, #2]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b06      	cmp	r3, #6
 800ad0e:	f200 8128 	bhi.w	800af62 <USBD_GetDescriptor+0x276>
 800ad12:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <USBD_GetDescriptor+0x2c>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad35 	.word	0x0800ad35
 800ad1c:	0800ad4d 	.word	0x0800ad4d
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800af63 	.word	0x0800af63
 800ad28:	0800af63 	.word	0x0800af63
 800ad2c:	0800af03 	.word	0x0800af03
 800ad30:	0800af2f 	.word	0x0800af2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	7c12      	ldrb	r2, [r2, #16]
 800ad40:	f107 0108 	add.w	r1, r7, #8
 800ad44:	4610      	mov	r0, r2
 800ad46:	4798      	blx	r3
 800ad48:	60f8      	str	r0, [r7, #12]
      break;
 800ad4a:	e112      	b.n	800af72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7c1b      	ldrb	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10d      	bne.n	800ad70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5c:	f107 0208 	add.w	r2, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad6e:	e100      	b.n	800af72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	f107 0208 	add.w	r2, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	2202      	movs	r2, #2
 800ad88:	701a      	strb	r2, [r3, #0]
      break;
 800ad8a:	e0f2      	b.n	800af72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	885b      	ldrh	r3, [r3, #2]
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	f200 80ac 	bhi.w	800aef0 <USBD_GetDescriptor+0x204>
 800ad98:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <USBD_GetDescriptor+0xb4>)
 800ad9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9e:	bf00      	nop
 800ada0:	0800adb9 	.word	0x0800adb9
 800ada4:	0800aded 	.word	0x0800aded
 800ada8:	0800ae21 	.word	0x0800ae21
 800adac:	0800ae55 	.word	0x0800ae55
 800adb0:	0800ae89 	.word	0x0800ae89
 800adb4:	0800aebd 	.word	0x0800aebd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e091      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 facb 	bl	800b37a <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e089      	b.n	800af00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e077      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fab1 	bl	800b37a <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e06f      	b.n	800af00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae42:	e05d      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa97 	bl	800b37a <USBD_CtlError>
            err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
          break;
 800ae52:	e055      	b.n	800af00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00b      	beq.n	800ae78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	7c12      	ldrb	r2, [r2, #16]
 800ae6c:	f107 0108 	add.w	r1, r7, #8
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
 800ae74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae76:	e043      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa7d 	bl	800b37a <USBD_CtlError>
            err++;
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	3301      	adds	r3, #1
 800ae84:	72fb      	strb	r3, [r7, #11]
          break;
 800ae86:	e03b      	b.n	800af00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeaa:	e029      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa63 	bl	800b37a <USBD_CtlError>
            err++;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeba:	e021      	b.n	800af00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00b      	beq.n	800aee0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	7c12      	ldrb	r2, [r2, #16]
 800aed4:	f107 0108 	add.w	r1, r7, #8
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aede:	e00f      	b.n	800af00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fa49 	bl	800b37a <USBD_CtlError>
            err++;
 800aee8:	7afb      	ldrb	r3, [r7, #11]
 800aeea:	3301      	adds	r3, #1
 800aeec:	72fb      	strb	r3, [r7, #11]
          break;
 800aeee:	e007      	b.n	800af00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fa41 	bl	800b37a <USBD_CtlError>
          err++;
 800aef8:	7afb      	ldrb	r3, [r7, #11]
 800aefa:	3301      	adds	r3, #1
 800aefc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aefe:	bf00      	nop
      }
      break;
 800af00:	e037      	b.n	800af72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7c1b      	ldrb	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d109      	bne.n	800af1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af12:	f107 0208 	add.w	r2, r7, #8
 800af16:	4610      	mov	r0, r2
 800af18:	4798      	blx	r3
 800af1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af1c:	e029      	b.n	800af72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa2a 	bl	800b37a <USBD_CtlError>
        err++;
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	3301      	adds	r3, #1
 800af2a:	72fb      	strb	r3, [r7, #11]
      break;
 800af2c:	e021      	b.n	800af72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7c1b      	ldrb	r3, [r3, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10d      	bne.n	800af52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	f107 0208 	add.w	r2, r7, #8
 800af42:	4610      	mov	r0, r2
 800af44:	4798      	blx	r3
 800af46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3301      	adds	r3, #1
 800af4c:	2207      	movs	r2, #7
 800af4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af50:	e00f      	b.n	800af72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa10 	bl	800b37a <USBD_CtlError>
        err++;
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	3301      	adds	r3, #1
 800af5e:	72fb      	strb	r3, [r7, #11]
      break;
 800af60:	e007      	b.n	800af72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fa08 	bl	800b37a <USBD_CtlError>
      err++;
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	3301      	adds	r3, #1
 800af6e:	72fb      	strb	r3, [r7, #11]
      break;
 800af70:	bf00      	nop
  }

  if (err != 0U)
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d11e      	bne.n	800afb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	88db      	ldrh	r3, [r3, #6]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d016      	beq.n	800afae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af80:	893b      	ldrh	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00e      	beq.n	800afa4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	88da      	ldrh	r2, [r3, #6]
 800af8a:	893b      	ldrh	r3, [r7, #8]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bf28      	it	cs
 800af90:	4613      	movcs	r3, r2
 800af92:	b29b      	uxth	r3, r3
 800af94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af96:	893b      	ldrh	r3, [r7, #8]
 800af98:	461a      	mov	r2, r3
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa5d 	bl	800b45c <USBD_CtlSendData>
 800afa2:	e009      	b.n	800afb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f9e7 	bl	800b37a <USBD_CtlError>
 800afac:	e004      	b.n	800afb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 faae 	bl	800b510 <USBD_CtlSendStatus>
 800afb4:	e000      	b.n	800afb8 <USBD_GetDescriptor+0x2cc>
    return;
 800afb6:	bf00      	nop
  }
}
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop

0800afc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	889b      	ldrh	r3, [r3, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d131      	bne.n	800b036 <USBD_SetAddress+0x76>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	88db      	ldrh	r3, [r3, #6]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d12d      	bne.n	800b036 <USBD_SetAddress+0x76>
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	885b      	ldrh	r3, [r3, #2]
 800afde:	2b7f      	cmp	r3, #127	; 0x7f
 800afe0:	d829      	bhi.n	800b036 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	885b      	ldrh	r3, [r3, #2]
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d104      	bne.n	800b004 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f9bc 	bl	800b37a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b002:	e01d      	b.n	800b040 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	7bfa      	ldrb	r2, [r7, #15]
 800b008:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fef3 	bl	800bdfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa7a 	bl	800b510 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02a:	e009      	b.n	800b040 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b034:	e004      	b.n	800b040 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f99e 	bl	800b37a <USBD_CtlError>
  }
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	885b      	ldrh	r3, [r3, #2]
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	4b4e      	ldr	r3, [pc, #312]	; (800b198 <USBD_SetConfig+0x150>)
 800b05e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b060:	4b4d      	ldr	r3, [pc, #308]	; (800b198 <USBD_SetConfig+0x150>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d905      	bls.n	800b074 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f985 	bl	800b37a <USBD_CtlError>
    return USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	e08c      	b.n	800b18e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d002      	beq.n	800b086 <USBD_SetConfig+0x3e>
 800b080:	2b03      	cmp	r3, #3
 800b082:	d029      	beq.n	800b0d8 <USBD_SetConfig+0x90>
 800b084:	e075      	b.n	800b172 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b086:	4b44      	ldr	r3, [pc, #272]	; (800b198 <USBD_SetConfig+0x150>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d020      	beq.n	800b0d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b08e:	4b42      	ldr	r3, [pc, #264]	; (800b198 <USBD_SetConfig+0x150>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b098:	4b3f      	ldr	r3, [pc, #252]	; (800b198 <USBD_SetConfig+0x150>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7fe ffe7 	bl	800a072 <USBD_SetClassConfig>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f962 	bl	800b37a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0be:	e065      	b.n	800b18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fa25 	bl	800b510 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b0ce:	e05d      	b.n	800b18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fa1d 	bl	800b510 <USBD_CtlSendStatus>
      break;
 800b0d6:	e059      	b.n	800b18c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0d8:	4b2f      	ldr	r3, [pc, #188]	; (800b198 <USBD_SetConfig+0x150>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d112      	bne.n	800b106 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0e8:	4b2b      	ldr	r3, [pc, #172]	; (800b198 <USBD_SetConfig+0x150>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0f2:	4b29      	ldr	r3, [pc, #164]	; (800b198 <USBD_SetConfig+0x150>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7fe ffd6 	bl	800a0aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa06 	bl	800b510 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b104:	e042      	b.n	800b18c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b106:	4b24      	ldr	r3, [pc, #144]	; (800b198 <USBD_SetConfig+0x150>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	429a      	cmp	r2, r3
 800b112:	d02a      	beq.n	800b16a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7fe ffc4 	bl	800a0aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b122:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <USBD_SetConfig+0x150>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b12c:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <USBD_SetConfig+0x150>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7fe ff9d 	bl	800a072 <USBD_SetClassConfig>
 800b138:	4603      	mov	r3, r0
 800b13a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00f      	beq.n	800b162 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f918 	bl	800b37a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7fe ffa9 	bl	800a0aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b160:	e014      	b.n	800b18c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f9d4 	bl	800b510 <USBD_CtlSendStatus>
      break;
 800b168:	e010      	b.n	800b18c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9d0 	bl	800b510 <USBD_CtlSendStatus>
      break;
 800b170:	e00c      	b.n	800b18c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f900 	bl	800b37a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b17a:	4b07      	ldr	r3, [pc, #28]	; (800b198 <USBD_SetConfig+0x150>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7fe ff92 	bl	800a0aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b186:	2303      	movs	r3, #3
 800b188:	73fb      	strb	r3, [r7, #15]
      break;
 800b18a:	bf00      	nop
  }

  return ret;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	200003e4 	.word	0x200003e4

0800b19c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d004      	beq.n	800b1b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f8e2 	bl	800b37a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1b6:	e023      	b.n	800b200 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	dc02      	bgt.n	800b1ca <USBD_GetConfig+0x2e>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dc03      	bgt.n	800b1d0 <USBD_GetConfig+0x34>
 800b1c8:	e015      	b.n	800b1f6 <USBD_GetConfig+0x5a>
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d00b      	beq.n	800b1e6 <USBD_GetConfig+0x4a>
 800b1ce:	e012      	b.n	800b1f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f93c 	bl	800b45c <USBD_CtlSendData>
        break;
 800b1e4:	e00c      	b.n	800b200 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f934 	bl	800b45c <USBD_CtlSendData>
        break;
 800b1f4:	e004      	b.n	800b200 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f8be 	bl	800b37a <USBD_CtlError>
        break;
 800b1fe:	bf00      	nop
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	3b01      	subs	r3, #1
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d81e      	bhi.n	800b25e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	88db      	ldrh	r3, [r3, #6]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d004      	beq.n	800b232 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8a5 	bl	800b37a <USBD_CtlError>
        break;
 800b230:	e01a      	b.n	800b268 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f043 0202 	orr.w	r2, r3, #2
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	330c      	adds	r3, #12
 800b252:	2202      	movs	r2, #2
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f900 	bl	800b45c <USBD_CtlSendData>
      break;
 800b25c:	e004      	b.n	800b268 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f88a 	bl	800b37a <USBD_CtlError>
      break;
 800b266:	bf00      	nop
  }
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	885b      	ldrh	r3, [r3, #2]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d107      	bne.n	800b292 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f940 	bl	800b510 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b290:	e013      	b.n	800b2ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	885b      	ldrh	r3, [r3, #2]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d10b      	bne.n	800b2b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	889b      	ldrh	r3, [r3, #4]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f930 	bl	800b510 <USBD_CtlSendStatus>
}
 800b2b0:	e003      	b.n	800b2ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f860 	bl	800b37a <USBD_CtlError>
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d80b      	bhi.n	800b2f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10c      	bne.n	800b2fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f910 	bl	800b510 <USBD_CtlSendStatus>
      }
      break;
 800b2f0:	e004      	b.n	800b2fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f840 	bl	800b37a <USBD_CtlError>
      break;
 800b2fa:	e000      	b.n	800b2fe <USBD_ClrFeature+0x3c>
      break;
 800b2fc:	bf00      	nop
  }
}
 800b2fe:	bf00      	nop
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	781a      	ldrb	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3301      	adds	r3, #1
 800b320:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff fa41 	bl	800a7b8 <SWAPBYTE>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3301      	adds	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7ff fa34 	bl	800a7b8 <SWAPBYTE>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3301      	adds	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff fa27 	bl	800a7b8 <SWAPBYTE>
 800b36a:	4603      	mov	r3, r0
 800b36c:	461a      	mov	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	80da      	strh	r2, [r3, #6]
}
 800b372:	bf00      	nop
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b384:	2180      	movs	r1, #128	; 0x80
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fcce 	bl	800bd28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b38c:	2100      	movs	r1, #0
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fcca 	bl	800bd28 <USBD_LL_StallEP>
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d036      	beq.n	800b420 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3b6:	6938      	ldr	r0, [r7, #16]
 800b3b8:	f000 f836 	bl	800b428 <USBD_GetLen>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7812      	ldrb	r2, [r2, #0]
 800b3d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	2203      	movs	r2, #3
 800b3e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3ec:	e013      	b.n	800b416 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	7812      	ldrb	r2, [r2, #0]
 800b3f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	613b      	str	r3, [r7, #16]
    idx++;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	3301      	adds	r3, #1
 800b404:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	2200      	movs	r2, #0
 800b40e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	3301      	adds	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e7      	bne.n	800b3ee <USBD_GetString+0x52>
 800b41e:	e000      	b.n	800b422 <USBD_GetString+0x86>
    return;
 800b420:	bf00      	nop
  }
}
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b438:	e005      	b.n	800b446 <USBD_GetLen+0x1e>
  {
    len++;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	3301      	adds	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	3301      	adds	r3, #1
 800b444:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1f5      	bne.n	800b43a <USBD_GetLen+0x12>
  }

  return len;
 800b44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	2100      	movs	r1, #0
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 fcd9 	bl	800be3a <USBD_LL_Transmit>

  return USBD_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	60b9      	str	r1, [r7, #8]
 800b49c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fcc8 	bl	800be3a <USBD_LL_Transmit>

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 fccc 	bl	800be7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fcbb 	bl	800be7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2204      	movs	r2, #4
 800b51c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b520:	2300      	movs	r3, #0
 800b522:	2200      	movs	r2, #0
 800b524:	2100      	movs	r1, #0
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fc87 	bl	800be3a <USBD_LL_Transmit>

  return USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2205      	movs	r2, #5
 800b542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b546:	2300      	movs	r3, #0
 800b548:	2200      	movs	r2, #0
 800b54a:	2100      	movs	r1, #0
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fc95 	bl	800be7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b560:	2200      	movs	r2, #0
 800b562:	4912      	ldr	r1, [pc, #72]	; (800b5ac <MX_USB_DEVICE_Init+0x50>)
 800b564:	4812      	ldr	r0, [pc, #72]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b566:	f7fe fd07 	bl	8009f78 <USBD_Init>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b570:	f7f6 fa68 	bl	8001a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b574:	490f      	ldr	r1, [pc, #60]	; (800b5b4 <MX_USB_DEVICE_Init+0x58>)
 800b576:	480e      	ldr	r0, [pc, #56]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b578:	f7fe fd2e 	bl	8009fd8 <USBD_RegisterClass>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b582:	f7f6 fa5f 	bl	8001a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b586:	490c      	ldr	r1, [pc, #48]	; (800b5b8 <MX_USB_DEVICE_Init+0x5c>)
 800b588:	4809      	ldr	r0, [pc, #36]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b58a:	f7fe fc65 	bl	8009e58 <USBD_CDC_RegisterInterface>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b594:	f7f6 fa56 	bl	8001a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b598:	4805      	ldr	r0, [pc, #20]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b59a:	f7fe fd53 	bl	800a044 <USBD_Start>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5a4:	f7f6 fa4e 	bl	8001a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5a8:	bf00      	nop
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	200000b4 	.word	0x200000b4
 800b5b0:	200003e8 	.word	0x200003e8
 800b5b4:	20000018 	.word	0x20000018
 800b5b8:	200000a0 	.word	0x200000a0

0800b5bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4905      	ldr	r1, [pc, #20]	; (800b5d8 <CDC_Init_FS+0x1c>)
 800b5c4:	4805      	ldr	r0, [pc, #20]	; (800b5dc <CDC_Init_FS+0x20>)
 800b5c6:	f7fe fc61 	bl	8009e8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5ca:	4905      	ldr	r1, [pc, #20]	; (800b5e0 <CDC_Init_FS+0x24>)
 800b5cc:	4803      	ldr	r0, [pc, #12]	; (800b5dc <CDC_Init_FS+0x20>)
 800b5ce:	f7fe fc7f 	bl	8009ed0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000ec4 	.word	0x20000ec4
 800b5dc:	200003e8 	.word	0x200003e8
 800b5e0:	200006c4 	.word	0x200006c4

0800b5e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6039      	str	r1, [r7, #0]
 800b5fe:	71fb      	strb	r3, [r7, #7]
 800b600:	4613      	mov	r3, r2
 800b602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b23      	cmp	r3, #35	; 0x23
 800b608:	d85c      	bhi.n	800b6c4 <CDC_Control_FS+0xd0>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <CDC_Control_FS+0x1c>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b6c5 	.word	0x0800b6c5
 800b614:	0800b6c5 	.word	0x0800b6c5
 800b618:	0800b6c5 	.word	0x0800b6c5
 800b61c:	0800b6c5 	.word	0x0800b6c5
 800b620:	0800b6c5 	.word	0x0800b6c5
 800b624:	0800b6c5 	.word	0x0800b6c5
 800b628:	0800b6c5 	.word	0x0800b6c5
 800b62c:	0800b6c5 	.word	0x0800b6c5
 800b630:	0800b6c5 	.word	0x0800b6c5
 800b634:	0800b6c5 	.word	0x0800b6c5
 800b638:	0800b6c5 	.word	0x0800b6c5
 800b63c:	0800b6c5 	.word	0x0800b6c5
 800b640:	0800b6c5 	.word	0x0800b6c5
 800b644:	0800b6c5 	.word	0x0800b6c5
 800b648:	0800b6c5 	.word	0x0800b6c5
 800b64c:	0800b6c5 	.word	0x0800b6c5
 800b650:	0800b6c5 	.word	0x0800b6c5
 800b654:	0800b6c5 	.word	0x0800b6c5
 800b658:	0800b6c5 	.word	0x0800b6c5
 800b65c:	0800b6c5 	.word	0x0800b6c5
 800b660:	0800b6c5 	.word	0x0800b6c5
 800b664:	0800b6c5 	.word	0x0800b6c5
 800b668:	0800b6c5 	.word	0x0800b6c5
 800b66c:	0800b6c5 	.word	0x0800b6c5
 800b670:	0800b6c5 	.word	0x0800b6c5
 800b674:	0800b6c5 	.word	0x0800b6c5
 800b678:	0800b6c5 	.word	0x0800b6c5
 800b67c:	0800b6c5 	.word	0x0800b6c5
 800b680:	0800b6c5 	.word	0x0800b6c5
 800b684:	0800b6c5 	.word	0x0800b6c5
 800b688:	0800b6c5 	.word	0x0800b6c5
 800b68c:	0800b6c5 	.word	0x0800b6c5
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6b3 	.word	0x0800b6b3
 800b698:	0800b6c5 	.word	0x0800b6c5
 800b69c:	0800b6c5 	.word	0x0800b6c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <CDC_Control_FS+0xe0>)
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	6810      	ldr	r0, [r2, #0]
 800b6a6:	6018      	str	r0, [r3, #0]
 800b6a8:	8891      	ldrh	r1, [r2, #4]
 800b6aa:	7992      	ldrb	r2, [r2, #6]
 800b6ac:	8099      	strh	r1, [r3, #4]
 800b6ae:	719a      	strb	r2, [r3, #6]
    break;
 800b6b0:	e009      	b.n	800b6c6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	4a07      	ldr	r2, [pc, #28]	; (800b6d4 <CDC_Control_FS+0xe0>)
 800b6b6:	6810      	ldr	r0, [r2, #0]
 800b6b8:	6018      	str	r0, [r3, #0]
 800b6ba:	8891      	ldrh	r1, [r2, #4]
 800b6bc:	7992      	ldrb	r2, [r2, #6]
 800b6be:	8099      	strh	r1, [r3, #4]
 800b6c0:	719a      	strb	r2, [r3, #6]
    break;
 800b6c2:	e000      	b.n	800b6c6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6c4:	bf00      	nop
  }

  return (USBD_OK);
 800b6c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	20000098 	.word	0x20000098

0800b6d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	4805      	ldr	r0, [pc, #20]	; (800b6fc <CDC_Receive_FS+0x24>)
 800b6e6:	f7fe fbf3 	bl	8009ed0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6ea:	4804      	ldr	r0, [pc, #16]	; (800b6fc <CDC_Receive_FS+0x24>)
 800b6ec:	f7fe fc0e 	bl	8009f0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200003e8 	.word	0x200003e8

0800b700 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	6039      	str	r1, [r7, #0]
 800b72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2212      	movs	r2, #18
 800b734:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b736:	4b03      	ldr	r3, [pc, #12]	; (800b744 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	200000d0 	.word	0x200000d0

0800b748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	6039      	str	r1, [r7, #0]
 800b752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2204      	movs	r2, #4
 800b758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b75a:	4b03      	ldr	r3, [pc, #12]	; (800b768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	200000e4 	.word	0x200000e4

0800b76c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	6039      	str	r1, [r7, #0]
 800b776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d105      	bne.n	800b78a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	4907      	ldr	r1, [pc, #28]	; (800b7a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b782:	4808      	ldr	r0, [pc, #32]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b784:	f7ff fe0a 	bl	800b39c <USBD_GetString>
 800b788:	e004      	b.n	800b794 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	4904      	ldr	r1, [pc, #16]	; (800b7a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b78e:	4805      	ldr	r0, [pc, #20]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b790:	f7ff fe04 	bl	800b39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b794:	4b02      	ldr	r3, [pc, #8]	; (800b7a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	200016c4 	.word	0x200016c4
 800b7a4:	0800bfdc 	.word	0x0800bfdc

0800b7a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	4904      	ldr	r1, [pc, #16]	; (800b7c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b7b8:	4804      	ldr	r0, [pc, #16]	; (800b7cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b7ba:	f7ff fdef 	bl	800b39c <USBD_GetString>
  return USBD_StrDesc;
 800b7be:	4b02      	ldr	r3, [pc, #8]	; (800b7c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	200016c4 	.word	0x200016c4
 800b7cc:	0800bff4 	.word	0x0800bff4

0800b7d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	6039      	str	r1, [r7, #0]
 800b7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	221a      	movs	r2, #26
 800b7e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7e2:	f000 f843 	bl	800b86c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7e6:	4b02      	ldr	r3, [pc, #8]	; (800b7f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200000e8 	.word	0x200000e8

0800b7f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	6039      	str	r1, [r7, #0]
 800b7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d105      	bne.n	800b812 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	4907      	ldr	r1, [pc, #28]	; (800b828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b80a:	4808      	ldr	r0, [pc, #32]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b80c:	f7ff fdc6 	bl	800b39c <USBD_GetString>
 800b810:	e004      	b.n	800b81c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	4904      	ldr	r1, [pc, #16]	; (800b828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b816:	4805      	ldr	r0, [pc, #20]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b818:	f7ff fdc0 	bl	800b39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b81c:	4b02      	ldr	r3, [pc, #8]	; (800b828 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200016c4 	.word	0x200016c4
 800b82c:	0800c008 	.word	0x0800c008

0800b830 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	6039      	str	r1, [r7, #0]
 800b83a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d105      	bne.n	800b84e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	4907      	ldr	r1, [pc, #28]	; (800b864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b846:	4808      	ldr	r0, [pc, #32]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b848:	f7ff fda8 	bl	800b39c <USBD_GetString>
 800b84c:	e004      	b.n	800b858 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	4904      	ldr	r1, [pc, #16]	; (800b864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b852:	4805      	ldr	r0, [pc, #20]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b854:	f7ff fda2 	bl	800b39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	200016c4 	.word	0x200016c4
 800b868:	0800c014 	.word	0x0800c014

0800b86c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b872:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <Get_SerialNum+0x44>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b878:	4b0e      	ldr	r3, [pc, #56]	; (800b8b4 <Get_SerialNum+0x48>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b87e:	4b0e      	ldr	r3, [pc, #56]	; (800b8b8 <Get_SerialNum+0x4c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d009      	beq.n	800b8a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b892:	2208      	movs	r2, #8
 800b894:	4909      	ldr	r1, [pc, #36]	; (800b8bc <Get_SerialNum+0x50>)
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f814 	bl	800b8c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b89c:	2204      	movs	r2, #4
 800b89e:	4908      	ldr	r1, [pc, #32]	; (800b8c0 <Get_SerialNum+0x54>)
 800b8a0:	68b8      	ldr	r0, [r7, #8]
 800b8a2:	f000 f80f 	bl	800b8c4 <IntToUnicode>
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	1fff7a10 	.word	0x1fff7a10
 800b8b4:	1fff7a14 	.word	0x1fff7a14
 800b8b8:	1fff7a18 	.word	0x1fff7a18
 800b8bc:	200000ea 	.word	0x200000ea
 800b8c0:	200000fa 	.word	0x200000fa

0800b8c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	e027      	b.n	800b92c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	0f1b      	lsrs	r3, r3, #28
 800b8e0:	2b09      	cmp	r3, #9
 800b8e2:	d80b      	bhi.n	800b8fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	0f1b      	lsrs	r3, r3, #28
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	440b      	add	r3, r1
 800b8f4:	3230      	adds	r2, #48	; 0x30
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	e00a      	b.n	800b912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	0f1b      	lsrs	r3, r3, #28
 800b900:	b2da      	uxtb	r2, r3
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4619      	mov	r1, r3
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	440b      	add	r3, r1
 800b90c:	3237      	adds	r2, #55	; 0x37
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	011b      	lsls	r3, r3, #4
 800b916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	3301      	adds	r3, #1
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	2200      	movs	r2, #0
 800b924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	3301      	adds	r3, #1
 800b92a:	75fb      	strb	r3, [r7, #23]
 800b92c:	7dfa      	ldrb	r2, [r7, #23]
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	429a      	cmp	r2, r3
 800b932:	d3d3      	bcc.n	800b8dc <IntToUnicode+0x18>
  }
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
	...

0800b944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	; 0x28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b94c:	f107 0314 	add.w	r3, r7, #20
 800b950:	2200      	movs	r2, #0
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	605a      	str	r2, [r3, #4]
 800b956:	609a      	str	r2, [r3, #8]
 800b958:	60da      	str	r2, [r3, #12]
 800b95a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b964:	d13a      	bne.n	800b9dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b966:	2300      	movs	r3, #0
 800b968:	613b      	str	r3, [r7, #16]
 800b96a:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96e:	4a1d      	ldr	r2, [pc, #116]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b970:	f043 0301 	orr.w	r3, r3, #1
 800b974:	6313      	str	r3, [r2, #48]	; 0x30
 800b976:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b988:	2302      	movs	r3, #2
 800b98a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b990:	2303      	movs	r3, #3
 800b992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b994:	230a      	movs	r3, #10
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b998:	f107 0314 	add.w	r3, r7, #20
 800b99c:	4619      	mov	r1, r3
 800b99e:	4812      	ldr	r0, [pc, #72]	; (800b9e8 <HAL_PCD_MspInit+0xa4>)
 800b9a0:	f7f7 f898 	bl	8002ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b9a4:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a8:	4a0e      	ldr	r2, [pc, #56]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ae:	6353      	str	r3, [r2, #52]	; 0x34
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	4b0b      	ldr	r3, [pc, #44]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b8:	4a0a      	ldr	r2, [pc, #40]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b9ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b9be:	6453      	str	r3, [r2, #68]	; 0x44
 800b9c0:	4b08      	ldr	r3, [pc, #32]	; (800b9e4 <HAL_PCD_MspInit+0xa0>)
 800b9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2103      	movs	r1, #3
 800b9d0:	2043      	movs	r0, #67	; 0x43
 800b9d2:	f7f6 ff30 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9d6:	2043      	movs	r0, #67	; 0x43
 800b9d8:	f7f6 ff49 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9dc:	bf00      	nop
 800b9de:	3728      	adds	r7, #40	; 0x28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	40023800 	.word	0x40023800
 800b9e8:	40020000 	.word	0x40020000

0800b9ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ba00:	4619      	mov	r1, r3
 800ba02:	4610      	mov	r0, r2
 800ba04:	f7fe fb6b 	bl	800a0de <USBD_LL_SetupStage>
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	6879      	ldr	r1, [r7, #4]
 800ba26:	4613      	mov	r3, r2
 800ba28:	00db      	lsls	r3, r3, #3
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	440b      	add	r3, r1
 800ba30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	78fb      	ldrb	r3, [r7, #3]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	f7fe fba5 	bl	800a188 <USBD_LL_DataOutStage>
}
 800ba3e:	bf00      	nop
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	6879      	ldr	r1, [r7, #4]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	440b      	add	r3, r1
 800ba66:	334c      	adds	r3, #76	; 0x4c
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	f7fe fc3e 	bl	800a2ee <USBD_LL_DataInStage>
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fd72 	bl	800a572 <USBD_LL_SOF>
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
 800baae:	e008      	b.n	800bac2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d102      	bne.n	800babe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bab8:	2301      	movs	r3, #1
 800baba:	73fb      	strb	r3, [r7, #15]
 800babc:	e001      	b.n	800bac2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800babe:	f7f5 ffc1 	bl	8001a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bac8:	7bfa      	ldrb	r2, [r7, #15]
 800baca:	4611      	mov	r1, r2
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fd12 	bl	800a4f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe fcba 	bl	800a452 <USBD_LL_Reset>
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fd0d 	bl	800a516 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	6812      	ldr	r2, [r2, #0]
 800bb0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb0e:	f043 0301 	orr.w	r3, r3, #1
 800bb12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a1b      	ldr	r3, [r3, #32]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d005      	beq.n	800bb28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb1c:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <HAL_PCD_SuspendCallback+0x48>)
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	4a03      	ldr	r2, [pc, #12]	; (800bb30 <HAL_PCD_SuspendCallback+0x48>)
 800bb22:	f043 0306 	orr.w	r3, r3, #6
 800bb26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	e000ed00 	.word	0xe000ed00

0800bb34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fcfd 	bl	800a542 <USBD_LL_Resume>
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb62:	78fa      	ldrb	r2, [r7, #3]
 800bb64:	4611      	mov	r1, r2
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe fd55 	bl	800a616 <USBD_LL_IsoOUTIncomplete>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fd11 	bl	800a5b2 <USBD_LL_IsoINIncomplete>
}
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fd67 	bl	800a67a <USBD_LL_DevConnected>
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fd64 	bl	800a690 <USBD_LL_DevDisconnected>
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d13c      	bne.n	800bc5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bbe0:	4a20      	ldr	r2, [pc, #128]	; (800bc64 <USBD_LL_Init+0x94>)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a1e      	ldr	r2, [pc, #120]	; (800bc64 <USBD_LL_Init+0x94>)
 800bbec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbf0:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <USBD_LL_Init+0x94>)
 800bbf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bbf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bbf8:	4b1a      	ldr	r3, [pc, #104]	; (800bc64 <USBD_LL_Init+0x94>)
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bbfe:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc00:	2202      	movs	r2, #2
 800bc02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc04:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc0a:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc10:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc16:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bc1c:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bc22:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc2e:	480d      	ldr	r0, [pc, #52]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc30:	f7f8 f8c5 	bl	8003dbe <HAL_PCD_Init>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bc3a:	f7f5 ff03 	bl	8001a44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bc3e:	2180      	movs	r1, #128	; 0x80
 800bc40:	4808      	ldr	r0, [pc, #32]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc42:	f7f9 fb1c 	bl	800527e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bc46:	2240      	movs	r2, #64	; 0x40
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4806      	ldr	r0, [pc, #24]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc4c:	f7f9 fad0 	bl	80051f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bc50:	2280      	movs	r2, #128	; 0x80
 800bc52:	2101      	movs	r1, #1
 800bc54:	4803      	ldr	r0, [pc, #12]	; (800bc64 <USBD_LL_Init+0x94>)
 800bc56:	f7f9 facb 	bl	80051f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	200018c4 	.word	0x200018c4

0800bc68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f8 f9ba 	bl	8003ff8 <HAL_PCD_Start>
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f942 	bl	800bf14 <USBD_Get_USB_Status>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	461a      	mov	r2, r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	70fb      	strb	r3, [r7, #3]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70bb      	strb	r3, [r7, #2]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcc6:	78bb      	ldrb	r3, [r7, #2]
 800bcc8:	883a      	ldrh	r2, [r7, #0]
 800bcca:	78f9      	ldrb	r1, [r7, #3]
 800bccc:	f7f8 fe8b 	bl	80049e6 <HAL_PCD_EP_Open>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 f91c 	bl	800bf14 <USBD_Get_USB_Status>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd04:	78fa      	ldrb	r2, [r7, #3]
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7f8 fed4 	bl	8004ab6 <HAL_PCD_EP_Close>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 f8fd 	bl	800bf14 <USBD_Get_USB_Status>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd42:	78fa      	ldrb	r2, [r7, #3]
 800bd44:	4611      	mov	r1, r2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f8 ffac 	bl	8004ca4 <HAL_PCD_EP_SetStall>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 f8de 	bl	800bf14 <USBD_Get_USB_Status>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	4611      	mov	r1, r2
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7f8 fff1 	bl	8004d6c <HAL_PCD_EP_ClrStall>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 f8bf 	bl	800bf14 <USBD_Get_USB_Status>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da0b      	bge.n	800bdd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdc0:	78fb      	ldrb	r3, [r7, #3]
 800bdc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	440b      	add	r3, r1
 800bdd2:	333e      	adds	r3, #62	; 0x3e
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	e00b      	b.n	800bdf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	4613      	mov	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bdee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be16:	78fa      	ldrb	r2, [r7, #3]
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f8 fdbe 	bl	800499c <HAL_PCD_SetAddress>
 800be20:	4603      	mov	r3, r0
 800be22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f874 	bl	800bf14 <USBD_Get_USB_Status>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be30:	7bbb      	ldrb	r3, [r7, #14]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b086      	sub	sp, #24
 800be3e:	af00      	add	r7, sp, #0
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
 800be46:	460b      	mov	r3, r1
 800be48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be58:	7af9      	ldrb	r1, [r7, #11]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f7f8 fed7 	bl	8004c10 <HAL_PCD_EP_Transmit>
 800be62:	4603      	mov	r3, r0
 800be64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f853 	bl	800bf14 <USBD_Get_USB_Status>
 800be6e:	4603      	mov	r3, r0
 800be70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be72:	7dbb      	ldrb	r3, [r7, #22]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	460b      	mov	r3, r1
 800be8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be9a:	7af9      	ldrb	r1, [r7, #11]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	f7f8 fe53 	bl	8004b4a <HAL_PCD_EP_Receive>
 800bea4:	4603      	mov	r3, r0
 800bea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f832 	bl	800bf14 <USBD_Get_USB_Status>
 800beb0:	4603      	mov	r3, r0
 800beb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800beb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f8 fe83 	bl	8004be0 <HAL_PCD_EP_GetRxCount>
 800beda:	4603      	mov	r3, r0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800beec:	4b03      	ldr	r3, [pc, #12]	; (800befc <USBD_static_malloc+0x18>)
}
 800beee:	4618      	mov	r0, r3
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20001dd0 	.word	0x20001dd0

0800bf00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]

}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d817      	bhi.n	800bf58 <USBD_Get_USB_Status+0x44>
 800bf28:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <USBD_Get_USB_Status+0x1c>)
 800bf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2e:	bf00      	nop
 800bf30:	0800bf41 	.word	0x0800bf41
 800bf34:	0800bf47 	.word	0x0800bf47
 800bf38:	0800bf4d 	.word	0x0800bf4d
 800bf3c:	0800bf53 	.word	0x0800bf53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
    break;
 800bf44:	e00b      	b.n	800bf5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf46:	2303      	movs	r3, #3
 800bf48:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4a:	e008      	b.n	800bf5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf50:	e005      	b.n	800bf5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	73fb      	strb	r3, [r7, #15]
    break;
 800bf56:	e002      	b.n	800bf5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf5c:	bf00      	nop
  }
  return usb_status;
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <__libc_init_array>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	4d0d      	ldr	r5, [pc, #52]	; (800bfa4 <__libc_init_array+0x38>)
 800bf70:	4c0d      	ldr	r4, [pc, #52]	; (800bfa8 <__libc_init_array+0x3c>)
 800bf72:	1b64      	subs	r4, r4, r5
 800bf74:	10a4      	asrs	r4, r4, #2
 800bf76:	2600      	movs	r6, #0
 800bf78:	42a6      	cmp	r6, r4
 800bf7a:	d109      	bne.n	800bf90 <__libc_init_array+0x24>
 800bf7c:	4d0b      	ldr	r5, [pc, #44]	; (800bfac <__libc_init_array+0x40>)
 800bf7e:	4c0c      	ldr	r4, [pc, #48]	; (800bfb0 <__libc_init_array+0x44>)
 800bf80:	f000 f820 	bl	800bfc4 <_init>
 800bf84:	1b64      	subs	r4, r4, r5
 800bf86:	10a4      	asrs	r4, r4, #2
 800bf88:	2600      	movs	r6, #0
 800bf8a:	42a6      	cmp	r6, r4
 800bf8c:	d105      	bne.n	800bf9a <__libc_init_array+0x2e>
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}
 800bf90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf94:	4798      	blx	r3
 800bf96:	3601      	adds	r6, #1
 800bf98:	e7ee      	b.n	800bf78 <__libc_init_array+0xc>
 800bf9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9e:	4798      	blx	r3
 800bfa0:	3601      	adds	r6, #1
 800bfa2:	e7f2      	b.n	800bf8a <__libc_init_array+0x1e>
 800bfa4:	0800c048 	.word	0x0800c048
 800bfa8:	0800c048 	.word	0x0800c048
 800bfac:	0800c048 	.word	0x0800c048
 800bfb0:	0800c04c 	.word	0x0800c04c

0800bfb4 <memset>:
 800bfb4:	4402      	add	r2, r0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d100      	bne.n	800bfbe <memset+0xa>
 800bfbc:	4770      	bx	lr
 800bfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bfc2:	e7f9      	b.n	800bfb8 <memset+0x4>

0800bfc4 <_init>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	bf00      	nop
 800bfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfca:	bc08      	pop	{r3}
 800bfcc:	469e      	mov	lr, r3
 800bfce:	4770      	bx	lr

0800bfd0 <_fini>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	bf00      	nop
 800bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd6:	bc08      	pop	{r3}
 800bfd8:	469e      	mov	lr, r3
 800bfda:	4770      	bx	lr
