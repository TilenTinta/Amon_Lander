
Amon_board_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080135d8  080135d8  000235d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b24  08013b24  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013b24  08013b24  00023b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b2c  08013b2c  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b2c  08013b2c  00023b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b30  08013b30  00023b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08013b34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302f0  2**0
                  CONTENTS
 10 .bss          0000221c  200002f0  200002f0  000302f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000250c  2000250c  000302f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024daf  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c98  00000000  00000000  000550cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e18  00000000  00000000  00059d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c18  00000000  00000000  0005bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ab8  00000000  00000000  0005d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002881a  00000000  00000000  00086250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f9e  00000000  00000000  000aea6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00188a08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093a8  00000000  00000000  00188a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135c0 	.word	0x080135c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	080135c0 	.word	0x080135c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8000f5c:	f107 030e 	add.w	r3, r7, #14
 8000f60:	461a      	mov	r2, r3
 8000f62:	21d0      	movs	r1, #208	; 0xd0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f9a7 	bl	80012b8 <BME280_ReadRegister>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 8000f74:	2301      	movs	r3, #1
 8000f76:	e005      	b.n	8000f84 <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	2b76      	cmp	r3, #118	; 0x76
 8000f7c:	d101      	bne.n	8000f82 <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e000      	b.n	8000f84 <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 8000f82:	2300      	movs	r3, #0
		}
	}
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->dig_H2 = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->dig_H3 = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->dig_H4 = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->dig_H5 = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->dig_H6 = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dev->dig_P1 = 0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->dig_P6 = 0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->dig_P7 = 0;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	84da      	strh	r2, [r3, #38]	; 0x26
	dev->dig_P8 = 0;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	851a      	strh	r2, [r3, #40]	; 0x28
	dev->dig_P9 = 0;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	855a      	strh	r2, [r3, #42]	; 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 800102a:	22b6      	movs	r2, #182	; 0xb6
 800102c:	21e0      	movs	r1, #224	; 0xe0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f97a 	bl	8001328 <BME280_WriteRegister>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <BME280_Reset+0xb6>
	{
		return 1;	// NOK
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <BME280_Reset+0xb8>
	}
	else
	{
		return 0; // OK
 8001042:	2300      	movs	r3, #0
	}
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	// Humidity; Set value: 011 = oversampling x4
	static const uint8_t ctrl_humData = 0x03;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BME280_Init+0x70>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	21f2      	movs	r1, #242	; 0xf2
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f95f 	bl	8001328 <BME280_WriteRegister>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 8001074:	2301      	movs	r3, #1
 8001076:	e01c      	b.n	80010b2 <BME280_Init+0x66>
	}

	// Temp, Press, Mode; Set value: 01101111 = oversampling x4, oversampling x4, normal mode
	static const uint8_t scrl_meadData = 0x6F;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <BME280_Init+0x74>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	21f4      	movs	r1, #244	; 0xf4
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f951 	bl	8001328 <BME280_WriteRegister>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <BME280_Init+0x48>
	{
		return 1;	// NOK
 8001090:	2301      	movs	r3, #1
 8001092:	e00e      	b.n	80010b2 <BME280_Init+0x66>
	}

	// Standbay, time IIR filter, 3-wire SPI, Mode; Set value: 0000010 = standbay 0.5ms, IIR 2, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <BME280_Init+0x78>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	21f5      	movs	r1, #245	; 0xf5
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f943 	bl	8001328 <BME280_WriteRegister>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <BME280_Init+0x64>
	{
		return 1;	// NOK
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 80010b0:	2300      	movs	r3, #0
	}
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08013656 	.word	0x08013656
 80010c0:	08013657 	.word	0x08013657
 80010c4:	08013658 	.word	0x08013658

080010c8 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	751a      	strb	r2, [r3, #20]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 80010ee:	f107 0214 	add.w	r2, r7, #20
 80010f2:	2319      	movs	r3, #25
 80010f4:	2188      	movs	r1, #136	; 0x88
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8f8 	bl	80012ec <BME280_ReadRegisters>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <BME280_ReadCalibData+0x46>
	{
		return 1;	// NOK
 800110a:	2301      	movs	r3, #1
 800110c:	e0d0      	b.n	80012b0 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	7dbb      	ldrb	r3, [r7, #22]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 8001138:	7e7b      	ldrb	r3, [r7, #25]
 800113a:	b29b      	uxth	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	7e3b      	ldrb	r3, [r7, #24]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21a      	sxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	b29b      	uxth	r3, r3
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b29a      	uxth	r2, r3
 8001156:	7ebb      	ldrb	r3, [r7, #26]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 8001162:	7f7b      	ldrb	r3, [r7, #29]
 8001164:	b29b      	uxth	r3, r3
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b29a      	uxth	r2, r3
 800116a:	7f3b      	ldrb	r3, [r7, #28]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	b29b      	uxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b29a      	uxth	r2, r3
 8001180:	7fbb      	ldrb	r3, [r7, #30]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	b21a      	sxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 800118e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001192:	b29b      	uxth	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b29a      	uxth	r2, r3
 8001198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80011a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21a      	sxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80011c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 80011f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001204:	b29b      	uxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 8001210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001214:	b29b      	uxth	r3, r3
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b29a      	uxth	r2, r3
 800121a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800121e:	b29b      	uxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b29b      	uxth	r3, r3
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 800122a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	2307      	movs	r3, #7
 800123a:	21e1      	movs	r1, #225	; 0xe1
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f855 	bl	80012ec <BME280_ReadRegisters>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8001248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <BME280_ReadCalibData+0x18c>
	{
		return 1;	// NOK
 8001250:	2301      	movs	r3, #1
 8001252:	e02d      	b.n	80012b0 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 8001266:	7bba      	ldrb	r2, [r7, #14]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	b29b      	uxth	r3, r3
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	b29b      	uxth	r3, r3
 8001276:	b21a      	sxth	r2, r3
 8001278:	7c3b      	ldrb	r3, [r7, #16]
 800127a:	b21b      	sxth	r3, r3
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 800128a:	7c7b      	ldrb	r3, [r7, #17]
 800128c:	b29b      	uxth	r3, r3
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	b29b      	uxth	r3, r3
 8001292:	b21a      	sxth	r2, r3
 8001294:	7c3b      	ldrb	r3, [r7, #16]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21a      	sxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 80012a4:	7cbb      	ldrb	r3, [r7, #18]
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <BME280_ReadRegister>:
	return 0; // OK
}


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af04      	add	r7, sp, #16
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	460b      	mov	r3, r1
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	21ec      	movs	r1, #236	; 0xec
 80012de:	f004 fecd 	bl	800607c <HAL_I2C_Mem_Read>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	72fb      	strb	r3, [r7, #11]
 80012fc:	4613      	mov	r3, r2
 80012fe:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	b29a      	uxth	r2, r3
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	b29b      	uxth	r3, r3
 800130c:	2164      	movs	r1, #100	; 0x64
 800130e:	9102      	str	r1, [sp, #8]
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	21ec      	movs	r1, #236	; 0xec
 800131a:	f004 feaf 	bl	800607c <HAL_I2C_Mem_Read>
 800131e:	4603      	mov	r3, r0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af04      	add	r7, sp, #16
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	b29a      	uxth	r2, r3
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	1cbb      	adds	r3, r7, #2
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	21ec      	movs	r1, #236	; 0xec
 8001350:	f004 fd9a 	bl	8005e88 <HAL_I2C_Mem_Write>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <MPU6050_ReadDeviceID>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t data);						// Write register to device

uint16_t MPU6050_ReadBytesInFIFO(MPU6050 *dev);															// Read number of bytes available to read in FIFO register


uint8_t MPU6050_ReadDeviceID(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t regData;

	status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
 800136e:	f107 030e 	add.w	r3, r7, #14
 8001372:	461a      	mov	r2, r3
 8001374:	2175      	movs	r1, #117	; 0x75
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fef8 	bl	800216c <MPU6050_ReadRegister>
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK){
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MPU6050_ReadDeviceID+0x2c>
		return 1;	// NOK
 8001386:	2301      	movs	r3, #1
 8001388:	e005      	b.n	8001396 <MPU6050_ReadDeviceID+0x38>
	}
	else
	{
		if (regData != 0x68)
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	2b68      	cmp	r3, #104	; 0x68
 800138e:	d001      	beq.n	8001394 <MPU6050_ReadDeviceID+0x36>
		{
			return 2; // NOK
 8001390:	2302      	movs	r3, #2
 8001392:	e000      	b.n	8001396 <MPU6050_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 8001394:	2300      	movs	r3, #0
		}
	}
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <MPU6050_Reset>:


uint8_t MPU6050_Reset(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x80); // reset device
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	216b      	movs	r1, #107	; 0x6b
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 ff11 	bl	80021da <MPU6050_WriteRegister>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MPU6050_Reset+0x28>
	{
		return 1;	// NOK
 80013c2:	2301      	movs	r3, #1
 80013c4:	e042      	b.n	800144c <MPU6050_Reset+0xae>
	}

	HAL_Delay(10);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f003 f91a 	bl	8004600 <HAL_Delay>

	status = MPU6050_WriteRegister(dev, SIGNAL_PATH_RESET, 0x07); // reset all three sensors
 80013cc:	2207      	movs	r2, #7
 80013ce:	2168      	movs	r1, #104	; 0x68
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 ff02 	bl	80021da <MPU6050_WriteRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MPU6050_Reset+0x46>
	{
		return 1;	// NOK
 80013e0:	2301      	movs	r3, #1
 80013e2:	e033      	b.n	800144c <MPU6050_Reset+0xae>
	}

	dev->GYRO_X = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
	dev->GYRO_Y = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
	dev->GYRO_Z = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
	dev->ACCEL_X = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
	dev->ACCEL_Y = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	dev->ACCEL_Z = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
	dev->Temp_C = 0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	839a      	strh	r2, [r3, #28]
	dev->FT_XA = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
	dev->FT_YA = 0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
	dev->FT_ZA = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
	dev->FT_XG = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
	dev->FT_YG = 0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
	dev->FT_ZG = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28

	return 0; // OK
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <MPU6050_Init>:


uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	//  Disable i2c master mode
	status = MPU6050_WriteRegister(dev, I2C_MST_CTRL, 0x00);
 8001464:	2200      	movs	r2, #0
 8001466:	2124      	movs	r1, #36	; 0x24
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 feb6 	bl	80021da <MPU6050_WriteRegister>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MPU6050_Init+0x28>
 8001478:	2301      	movs	r3, #1
 800147a:	e054      	b.n	8001526 <MPU6050_Init+0xd2>

	//  PLL with X axis gyroscope reference
	status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x01);
 800147c:	2201      	movs	r2, #1
 800147e:	216b      	movs	r1, #107	; 0x6b
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 feaa 	bl	80021da <MPU6050_WriteRegister>
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MPU6050_Init+0x40>
 8001490:	2301      	movs	r3, #1
 8001492:	e048      	b.n	8001526 <MPU6050_Init+0xd2>

	// set low-pass filter
	status = MPU6050_WriteRegister(dev, CONFIG_MPU6050, 0x01);
 8001494:	2201      	movs	r2, #1
 8001496:	211a      	movs	r1, #26
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fe9e 	bl	80021da <MPU6050_WriteRegister>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MPU6050_Init+0x58>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e03c      	b.n	8001526 <MPU6050_Init+0xd2>

	// set range of gyro (+-250deg/s)
	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
 80014ac:	2200      	movs	r2, #0
 80014ae:	211b      	movs	r1, #27
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fe92 	bl	80021da <MPU6050_WriteRegister>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MPU6050_Init+0x70>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e030      	b.n	8001526 <MPU6050_Init+0xd2>

	// set range of accel (+-8g)
	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10);
 80014c4:	2210      	movs	r2, #16
 80014c6:	211c      	movs	r1, #28
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fe86 	bl	80021da <MPU6050_WriteRegister>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MPU6050_Init+0x88>
 80014d8:	2301      	movs	r3, #1
 80014da:	e024      	b.n	8001526 <MPU6050_Init+0xd2>

	// enable FIFO register
	status = MPU6050_WriteRegister(dev, USER_CTRL, 0x40);
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	216a      	movs	r1, #106	; 0x6a
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fe7a 	bl	80021da <MPU6050_WriteRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MPU6050_Init+0xa0>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e018      	b.n	8001526 <MPU6050_Init+0xd2>

	// Sample rate divider: 1kHz
	status = MPU6050_WriteRegister(dev, SMPRT_DIV, 0x01);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2119      	movs	r1, #25
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fe6e 	bl	80021da <MPU6050_WriteRegister>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MPU6050_Init+0xb8>
 8001508:	2301      	movs	r3, #1
 800150a:	e00c      	b.n	8001526 <MPU6050_Init+0xd2>

	// turn on all needed fifo enable bits to write in fifo register
	status = MPU6050_WriteRegister(dev, FIFO_EN, 0xf8);
 800150c:	22f8      	movs	r2, #248	; 0xf8
 800150e:	2123      	movs	r1, #35	; 0x23
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fe62 	bl	80021da <MPU6050_WriteRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MPU6050_Init+0xd0>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <MPU6050_Init+0xd2>

	return 0; // OK
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <MPU6050_ReadFactoryTrim>:


uint8_t MPU6050_ReadFactoryTrim(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t FTData[4];

	status = MPU6050_ReadRegisters(dev, SELF_TEST_X, FTData, 4);
 8001540:	f107 0208 	add.w	r2, r7, #8
 8001544:	2304      	movs	r3, #4
 8001546:	210d      	movs	r1, #13
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fe29 	bl	80021a0 <MPU6050_ReadRegisters>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MPU6050_ReadFactoryTrim+0x2c>
	{
		return 1;	// NOK
 8001558:	2301      	movs	r3, #1
 800155a:	e151      	b.n	8001800 <MPU6050_ReadFactoryTrim+0x2d0>
	}

	// Gyro X
	uint8_t val = (FTData[0] & 0x01F);
 800155c:	7a3b      	ldrb	r3, [r7, #8]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <MPU6050_ReadFactoryTrim+0x76>
	{
		dev->FT_XG = 25 * 131 * pow(1.046, (val - 1));
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	3b01      	subs	r3, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffd8 	bl	8000524 <__aeabi_i2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	ec43 2b11 	vmov	d1, r2, r3
 800157c:	ed9f 0ba2 	vldr	d0, [pc, #648]	; 8001808 <MPU6050_ReadFactoryTrim+0x2d8>
 8001580:	f00e fb2c 	bl	800fbdc <pow>
 8001584:	ec51 0b10 	vmov	r0, r1, d0
 8001588:	a3a8      	add	r3, pc, #672	; (adr r3, 800182c <MPU6050_ReadFactoryTrim+0x2fc>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f833 	bl	80005f8 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fb05 	bl	8000ba8 <__aeabi_d2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	621a      	str	r2, [r3, #32]
 80015a4:	e003      	b.n	80015ae <MPU6050_ReadFactoryTrim+0x7e>
	}
	else
	{
		dev->FT_XG = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
	}

	// Gyro Y
	val = (FTData[1] & 0x01F);
 80015ae:	7a7b      	ldrb	r3, [r7, #9]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01d      	beq.n	80015f8 <MPU6050_ReadFactoryTrim+0xc8>
	{
		dev->FT_YG = -1 * 25 * 131 * pow(1.046, (val - 1));
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_i2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	ec43 2b11 	vmov	d1, r2, r3
 80015ce:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8001808 <MPU6050_ReadFactoryTrim+0x2d8>
 80015d2:	f00e fb03 	bl	800fbdc <pow>
 80015d6:	ec51 0b10 	vmov	r0, r1, d0
 80015da:	a396      	add	r3, pc, #600	; (adr r3, 8001834 <MPU6050_ReadFactoryTrim+0x304>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fadc 	bl	8000ba8 <__aeabi_d2f>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
 80015f6:	e003      	b.n	8001600 <MPU6050_ReadFactoryTrim+0xd0>
	}
	else
	{
		dev->FT_YG = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// Gyro Z
	val = (FTData[2] & 0x01F);
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01d      	beq.n	800164a <MPU6050_ReadFactoryTrim+0x11a>
	{
		dev->FT_ZG = 25 * 131 * pow(1.046, (val - 1));
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	3b01      	subs	r3, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff86 	bl	8000524 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	ec43 2b11 	vmov	d1, r2, r3
 8001620:	ed9f 0b79 	vldr	d0, [pc, #484]	; 8001808 <MPU6050_ReadFactoryTrim+0x2d8>
 8001624:	f00e fada 	bl	800fbdc <pow>
 8001628:	ec51 0b10 	vmov	r0, r1, d0
 800162c:	a37f      	add	r3, pc, #508	; (adr r3, 800182c <MPU6050_ReadFactoryTrim+0x2fc>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fab3 	bl	8000ba8 <__aeabi_d2f>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
 8001648:	e003      	b.n	8001652 <MPU6050_ReadFactoryTrim+0x122>
	}
	else
	{
		dev->FT_ZG = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Accel X
	uint8_t valMSB = (FTData[0] & 0xE0) >> 5;
 8001652:	7a3b      	ldrb	r3, [r7, #8]
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	737b      	strb	r3, [r7, #13]
	uint8_t valLSB = (FTData[3] & 0x30) >> 4;
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	111b      	asrs	r3, r3, #4
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 8001664:	7b7b      	ldrb	r3, [r7, #13]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	b25a      	sxtb	r2, r3
 800166a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02f      	beq.n	80016da <MPU6050_ReadFactoryTrim+0x1aa>
	{
		dev->FT_XA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	3b01      	subs	r3, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff50 	bl	8000524 <__aeabi_i2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b67      	ldr	r3, [pc, #412]	; (8001828 <MPU6050_ReadFactoryTrim+0x2f8>)
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b17 	vmov	d7, r2, r3
 8001696:	eeb0 1a47 	vmov.f32	s2, s14
 800169a:	eef0 1a67 	vmov.f32	s3, s15
 800169e:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001810 <MPU6050_ReadFactoryTrim+0x2e0>
 80016a2:	f00e fa9b 	bl	800fbdc <pow>
 80016a6:	ec51 0b10 	vmov	r0, r1, d0
 80016aa:	a35b      	add	r3, pc, #364	; (adr r3, 8001818 <MPU6050_ReadFactoryTrim+0x2e8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff f8cc 	bl	800084c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	a358      	add	r3, pc, #352	; (adr r3, 8001820 <MPU6050_ReadFactoryTrim+0x2f0>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff99 	bl	80005f8 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff fa6b 	bl	8000ba8 <__aeabi_d2f>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016d8:	e003      	b.n	80016e2 <MPU6050_ReadFactoryTrim+0x1b2>
	}
	else
	{
		dev->FT_XA = 0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// Accel Y
	valMSB = (FTData[1] & 0xE0) >> 5;
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	737b      	strb	r3, [r7, #13]
	valLSB = (FTData[3] & 0x0C) >> 2;
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	109b      	asrs	r3, r3, #2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d02f      	beq.n	800176a <MPU6050_ReadFactoryTrim+0x23a>
	{
		dev->FT_YA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3b01      	subs	r3, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <MPU6050_ReadFactoryTrim+0x2f8>)
 800171a:	f7ff f897 	bl	800084c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	ec43 2b17 	vmov	d7, r2, r3
 8001726:	eeb0 1a47 	vmov.f32	s2, s14
 800172a:	eef0 1a67 	vmov.f32	s3, s15
 800172e:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001810 <MPU6050_ReadFactoryTrim+0x2e0>
 8001732:	f00e fa53 	bl	800fbdc <pow>
 8001736:	ec51 0b10 	vmov	r0, r1, d0
 800173a:	a337      	add	r3, pc, #220	; (adr r3, 8001818 <MPU6050_ReadFactoryTrim+0x2e8>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7ff f884 	bl	800084c <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	a334      	add	r3, pc, #208	; (adr r3, 8001820 <MPU6050_ReadFactoryTrim+0x2f0>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff51 	bl	80005f8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fa23 	bl	8000ba8 <__aeabi_d2f>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
 8001768:	e003      	b.n	8001772 <MPU6050_ReadFactoryTrim+0x242>
	}
	else
	{
		dev->FT_YA = 0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
	}

	// Accel Z
	valMSB = (FTData[2] & 0xE0) >> 5;
 8001772:	7abb      	ldrb	r3, [r7, #10]
 8001774:	095b      	lsrs	r3, r3, #5
 8001776:	737b      	strb	r3, [r7, #13]
	valLSB = (FTData[3] & 0x03);
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	b25a      	sxtb	r2, r3
 8001786:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02f      	beq.n	80017f6 <MPU6050_ReadFactoryTrim+0x2c6>
	{
		dev->FT_ZA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	3b01      	subs	r3, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fec2 	bl	8000524 <__aeabi_i2d>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MPU6050_ReadFactoryTrim+0x2f8>)
 80017a6:	f7ff f851 	bl	800084c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	ec43 2b17 	vmov	d7, r2, r3
 80017b2:	eeb0 1a47 	vmov.f32	s2, s14
 80017b6:	eef0 1a67 	vmov.f32	s3, s15
 80017ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001810 <MPU6050_ReadFactoryTrim+0x2e0>
 80017be:	f00e fa0d 	bl	800fbdc <pow>
 80017c2:	ec51 0b10 	vmov	r0, r1, d0
 80017c6:	a314      	add	r3, pc, #80	; (adr r3, 8001818 <MPU6050_ReadFactoryTrim+0x2e8>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f83e 	bl	800084c <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	a311      	add	r3, pc, #68	; (adr r3, 8001820 <MPU6050_ReadFactoryTrim+0x2f0>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff0b 	bl	80005f8 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9dd 	bl	8000ba8 <__aeabi_d2f>
 80017ee:	4602      	mov	r2, r0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
 80017f4:	e003      	b.n	80017fe <MPU6050_ReadFactoryTrim+0x2ce>
	}
	else
	{
		dev->FT_ZA = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	return 0; // OK
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	7ef9db23 	.word	0x7ef9db23
 800180c:	3ff0bc6a 	.word	0x3ff0bc6a
 8001810:	d70a3d71 	.word	0xd70a3d71
 8001814:	3fed70a3 	.word	0x3fed70a3
 8001818:	5c28f5c3 	.word	0x5c28f5c3
 800181c:	3fd5c28f 	.word	0x3fd5c28f
 8001820:	5c28f5c3 	.word	0x5c28f5c3
 8001824:	4095c28f 	.word	0x4095c28f
 8001828:	403e0000 	.word	0x403e0000
 800182c:	00000000 	.word	0x00000000
 8001830:	40a99600 	.word	0x40a99600
 8001834:	00000000 	.word	0x00000000
 8001838:	c0a99600 	.word	0xc0a99600
 800183c:	00000000 	.word	0x00000000

08001840 <MPU6050_RawToDeg>:


void MPU6050_RawToDeg(MPU6050 *dev, AMON_Drone *drone){
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]

	/* Axis orientation on drone are: X+ points down, Z+ points out of sensor and Y+ points right if you watch drone from the board side */
	float pitch = 0;
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
	float roll = 0;
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]

	/* Calculate drone pitch */
	pitch = atan(-dev->ACCEL_Z / sqrtf(pow(dev->ACCEL_Y,2) + pow(-dev->ACCEL_X,2))) * (float)(1.0f / (3.14f / 180.0f));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001860:	eeb1 8a67 	vneg.f32	s16, s15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001ab8 <MPU6050_RawToDeg+0x278>
 8001876:	ec43 2b10 	vmov	d0, r2, r3
 800187a:	f00e f9af 	bl	800fbdc <pow>
 800187e:	ec55 4b10 	vmov	r4, r5, d0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a01 	vldr	s15, [r3, #4]
 8001888:	eef1 7a67 	vneg.f32	s15, s15
 800188c:	ee17 3a90 	vmov	r3, s15
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe59 	bl	8000548 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001ab8 <MPU6050_RawToDeg+0x278>
 800189e:	ec43 2b10 	vmov	d0, r2, r3
 80018a2:	f00e f99b 	bl	800fbdc <pow>
 80018a6:	ec53 2b10 	vmov	r2, r3, d0
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fced 	bl	800028c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f975 	bl	8000ba8 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	ee00 3a10 	vmov	s0, r3
 80018c4:	f00e f9fa 	bl	800fcbc <sqrtf>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80018d0:	ee17 0a10 	vmov	r0, s14
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b10 	vmov	d0, r2, r3
 80018e0:	f00d ffd2 	bl	800f888 <atan>
 80018e4:	ec51 0b10 	vmov	r0, r1, d0
 80018e8:	a375      	add	r3, pc, #468	; (adr r3, 8001ac0 <MPU6050_RawToDeg+0x280>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe83 	bl	80005f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f955 	bl	8000ba8 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]

	/* Calculate drone Roll */
	roll = atan(-dev->ACCEL_Y / sqrtf(pow(dev->ACCEL_Z,2) + pow(-dev->ACCEL_X,2))) * (float)(1.0f / (3.14f / 180.0f));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	edd3 7a02 	vldr	s15, [r3, #8]
 8001908:	eeb1 8a67 	vneg.f32	s16, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001ab8 <MPU6050_RawToDeg+0x278>
 800191e:	ec43 2b10 	vmov	d0, r2, r3
 8001922:	f00e f95b 	bl	800fbdc <pow>
 8001926:	ec55 4b10 	vmov	r4, r5, d0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001930:	eef1 7a67 	vneg.f32	s15, s15
 8001934:	ee17 3a90 	vmov	r3, s15
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe05 	bl	8000548 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001ab8 <MPU6050_RawToDeg+0x278>
 8001946:	ec43 2b10 	vmov	d0, r2, r3
 800194a:	f00e f947 	bl	800fbdc <pow>
 800194e:	ec53 2b10 	vmov	r2, r3, d0
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fc99 	bl	800028c <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f921 	bl	8000ba8 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	ee00 3a10 	vmov	s0, r3
 800196c:	f00e f9a6 	bl	800fcbc <sqrtf>
 8001970:	eef0 7a40 	vmov.f32	s15, s0
 8001974:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001978:	ee17 0a10 	vmov	r0, s14
 800197c:	f7fe fde4 	bl	8000548 <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b10 	vmov	d0, r2, r3
 8001988:	f00d ff7e 	bl	800f888 <atan>
 800198c:	ec51 0b10 	vmov	r0, r1, d0
 8001990:	a34b      	add	r3, pc, #300	; (adr r3, 8001ac0 <MPU6050_RawToDeg+0x280>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe2f 	bl	80005f8 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f901 	bl	8000ba8 <__aeabi_d2f>
 80019a6:	4603      	mov	r3, r0
 80019a8:	60bb      	str	r3, [r7, #8]

	/* Complementary Filter */
	drone->Pitch = ALPHA * (drone->PitchOld + dev->ACCEL_Y * 0.005) + (1 - ALPHA) * pitch;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	a341      	add	r3, pc, #260	; (adr r3, 8001ac8 <MPU6050_RawToDeg+0x288>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe16 	bl	80005f8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc5a 	bl	800028c <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	a33b      	add	r3, pc, #236	; (adr r3, 8001ad0 <MPU6050_RawToDeg+0x290>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe07 	bl	80005f8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	a337      	add	r3, pc, #220	; (adr r3, 8001ad8 <MPU6050_RawToDeg+0x298>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fdfb 	bl	80005f8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc3f 	bl	800028c <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8c7 	bl	8000ba8 <__aeabi_d2f>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	609a      	str	r2, [r3, #8]
	drone->PitchOld = drone->Pitch;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	60da      	str	r2, [r3, #12]

	drone->Roll = ALPHA * (drone->RollOld + dev->ACCEL_Z * 0.005) + (1 - ALPHA) * roll;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd8b 	bl	8000548 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd84 	bl	8000548 <__aeabi_f2d>
 8001a40:	a321      	add	r3, pc, #132	; (adr r3, 8001ac8 <MPU6050_RawToDeg+0x288>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fdd7 	bl	80005f8 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fc1b 	bl	800028c <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	a31c      	add	r3, pc, #112	; (adr r3, 8001ad0 <MPU6050_RawToDeg+0x290>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fdc8 	bl	80005f8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	68b8      	ldr	r0, [r7, #8]
 8001a72:	f7fe fd69 	bl	8000548 <__aeabi_f2d>
 8001a76:	a318      	add	r3, pc, #96	; (adr r3, 8001ad8 <MPU6050_RawToDeg+0x298>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdbc 	bl	80005f8 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fc00 	bl	800028c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f888 	bl	8000ba8 <__aeabi_d2f>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	611a      	str	r2, [r3, #16]
	drone->RollOld = drone->Roll;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	615a      	str	r2, [r3, #20]
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	ecbd 8b02 	vpop	{d8}
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40000000 	.word	0x40000000
 8001ac0:	60000000 	.word	0x60000000
 8001ac4:	404ca994 	.word	0x404ca994
 8001ac8:	47ae147b 	.word	0x47ae147b
 8001acc:	3f747ae1 	.word	0x3f747ae1
 8001ad0:	f5c28f5c 	.word	0xf5c28f5c
 8001ad4:	3fef5c28 	.word	0x3fef5c28
 8001ad8:	47ae1480 	.word	0x47ae1480
 8001adc:	3f947ae1 	.word	0x3f947ae1

08001ae0 <MPU6050_SelfTest>:


uint8_t MPU6050_SelfTest(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b096      	sub	sp, #88	; 0x58
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* set range of gyro (+-250deg/s) */
	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
 8001af0:	2200      	movs	r2, #0
 8001af2:	211b      	movs	r1, #27
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fb70 	bl	80021da <MPU6050_WriteRegister>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MPU6050_SelfTest+0x2c>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e23b      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	/* set rabge of accel (+-8g) */
	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10);
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	211c      	movs	r1, #28
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fb62 	bl	80021da <MPU6050_WriteRegister>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MPU6050_SelfTest+0x48>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e22d      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	uint8_t GyroData[6] = {};	// Gyro data with Self-Test enabled
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	82bb      	strh	r3, [r7, #20]
	uint8_t AccelData[6] = {};	// Accel data with Self-Test enabled
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	2300      	movs	r3, #0
 8001b36:	81bb      	strh	r3, [r7, #12]

	uint16_t gyroOutXSTE = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t gyroOutYSTE = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t gyroOutZSTE = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t gyroOutXSTD = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t gyroOutYSTD = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t gyroOutZSTD = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	uint16_t STResponseGX = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t STResponseGY = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t STResponseGZ = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	float GXResoult = 0;
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
	float GYResoult = 0;
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	63fb      	str	r3, [r7, #60]	; 0x3c
	float GZResoult = 0;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38

	uint16_t accelOutXSTE = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t accelOutYSTE = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t accelOutZSTE = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t accelOutXSTD = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t accelOutYSTD = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t accelOutZSTD = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t STResponseAX = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t STResponseAY = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t STResponseAZ = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	84fb      	strh	r3, [r7, #38]	; 0x26

	float AXResoult = 0;
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
	float AYResoult = 0;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
	float AZResoult = 0;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]

	/*** Read gyro data with self-test disabled ***/
	status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, GyroData, 6);
 8001bb6:	f107 0210 	add.w	r2, r7, #16
 8001bba:	2306      	movs	r3, #6
 8001bbc:	2143      	movs	r1, #67	; 0x43
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 faee 	bl	80021a0 <MPU6050_ReadRegisters>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001bca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MPU6050_SelfTest+0xf6>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1d6      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	gyroOutXSTD = ((uint16_t)GyroData[0] << 8) | GyroData[1];
 8001bd6:	7c3b      	ldrb	r3, [r7, #16]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	7c7b      	ldrb	r3, [r7, #17]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	gyroOutYSTD = ((uint16_t)GyroData[2] << 8) | GyroData[3];
 8001be8:	7cbb      	ldrb	r3, [r7, #18]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	gyroOutZSTD = ((uint16_t)GyroData[4] << 8) | GyroData[5];
 8001bfa:	7d3b      	ldrb	r3, [r7, #20]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	7d7b      	ldrb	r3, [r7, #21]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0xE0); // enable self test on all axies
 8001c0c:	22e0      	movs	r2, #224	; 0xe0
 8001c0e:	211b      	movs	r1, #27
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fae2 	bl	80021da <MPU6050_WriteRegister>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MPU6050_SelfTest+0x148>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e1ad      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	HAL_Delay(10);
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f002 fce9 	bl	8004600 <HAL_Delay>


	/* Read gyro data with self-test enabled */
	status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, GyroData, 6);
 8001c2e:	f107 0210 	add.w	r2, r7, #16
 8001c32:	2306      	movs	r3, #6
 8001c34:	2143      	movs	r1, #67	; 0x43
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fab2 	bl	80021a0 <MPU6050_ReadRegisters>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001c42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MPU6050_SelfTest+0x16e>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e19a      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	gyroOutXSTE = ((uint16_t)GyroData[0] << 8) | GyroData[1];
 8001c4e:	7c3b      	ldrb	r3, [r7, #16]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	7c7b      	ldrb	r3, [r7, #17]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	gyroOutYSTE = ((uint16_t)GyroData[2] << 8) | GyroData[3];
 8001c60:	7cbb      	ldrb	r3, [r7, #18]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	gyroOutZSTE = ((uint16_t)GyroData[4] << 8) | GyroData[5];
 8001c72:	7d3b      	ldrb	r3, [r7, #20]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	7d7b      	ldrb	r3, [r7, #21]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	STResponseGX = gyroOutXSTE - gyroOutXSTD;
 8001c84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	STResponseGY = gyroOutYSTE - gyroOutYSTD;
 8001c92:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001c96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	STResponseGZ = gyroOutZSTE - gyroOutZSTD;
 8001ca0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	GXResoult = (float)((STResponseGX - dev->FT_XG) / dev->FT_XG); // in percent
 8001cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cc0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cce:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	if (GXResoult > 14 || GXResoult < -14 ) return 1;
 8001cd2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cd6:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	dc08      	bgt.n	8001cf6 <MPU6050_SelfTest+0x216>
 8001ce4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ce8:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d501      	bpl.n	8001cfa <MPU6050_SelfTest+0x21a>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e144      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	GYResoult = (float)((STResponseGY - dev->FT_YG) / dev->FT_YG); // in percent
 8001cfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	if (GYResoult > 14 || GYResoult < -14 ) return 1;
 8001d1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d22:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	dc08      	bgt.n	8001d42 <MPU6050_SelfTest+0x262>
 8001d30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d34:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d501      	bpl.n	8001d46 <MPU6050_SelfTest+0x266>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e11e      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	GZResoult = (float)((STResponseGZ - dev->FT_ZG) / dev->FT_ZG); // in percent
 8001d46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	if (GZResoult > 14 || GZResoult < -14 ) return 1;
 8001d6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d6e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	dc08      	bgt.n	8001d8e <MPU6050_SelfTest+0x2ae>
 8001d7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d80:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d501      	bpl.n	8001d92 <MPU6050_SelfTest+0x2b2>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0f8      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>


	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00); // enable self test on all axies
 8001d92:	2200      	movs	r2, #0
 8001d94:	211b      	movs	r1, #27
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa1f 	bl	80021da <MPU6050_WriteRegister>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001da2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MPU6050_SelfTest+0x2ce>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0ea      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>


	/*** Read accel data with self-test disabled ***/
	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, AccelData, 6);
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	2306      	movs	r3, #6
 8001db4:	213b      	movs	r1, #59	; 0x3b
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f9f2 	bl	80021a0 <MPU6050_ReadRegisters>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MPU6050_SelfTest+0x2ee>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0da      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	accelOutXSTD = ((uint16_t)AccelData[0] << 8) | AccelData[1];
 8001dce:	7a3b      	ldrb	r3, [r7, #8]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	7a7b      	ldrb	r3, [r7, #9]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	863b      	strh	r3, [r7, #48]	; 0x30
	accelOutYSTD = ((uint16_t)AccelData[2] << 8) | AccelData[3];
 8001dde:	7abb      	ldrb	r3, [r7, #10]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	accelOutZSTD = ((uint16_t)AccelData[4] << 8) | AccelData[5];
 8001dee:	7b3b      	ldrb	r3, [r7, #12]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	85bb      	strh	r3, [r7, #44]	; 0x2c

	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0xE0); // enable self test on all axies
 8001dfe:	22e0      	movs	r2, #224	; 0xe0
 8001e00:	211c      	movs	r1, #28
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9e9 	bl	80021da <MPU6050_WriteRegister>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MPU6050_SelfTest+0x33a>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0b4      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	HAL_Delay(10);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f002 fbf0 	bl	8004600 <HAL_Delay>


	/* Read gyro data with self-test enabled */
	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, AccelData, 6);
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	2306      	movs	r3, #6
 8001e26:	213b      	movs	r1, #59	; 0x3b
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f9b9 	bl	80021a0 <MPU6050_ReadRegisters>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MPU6050_SelfTest+0x360>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0a1      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	accelOutXSTE = ((uint16_t)AccelData[0] << 8) | AccelData[1];
 8001e40:	7a3b      	ldrb	r3, [r7, #8]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	7a7b      	ldrb	r3, [r7, #9]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	86fb      	strh	r3, [r7, #54]	; 0x36
	accelOutYSTE = ((uint16_t)AccelData[2] << 8) | AccelData[3];
 8001e50:	7abb      	ldrb	r3, [r7, #10]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	86bb      	strh	r3, [r7, #52]	; 0x34
	accelOutZSTE = ((uint16_t)AccelData[4] << 8) | AccelData[5];
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	7b7b      	ldrb	r3, [r7, #13]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	867b      	strh	r3, [r7, #50]	; 0x32

	STResponseAX = accelOutXSTE - accelOutXSTD;
 8001e70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	857b      	strh	r3, [r7, #42]	; 0x2a
	STResponseAY = accelOutYSTE - accelOutYSTD;
 8001e78:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	853b      	strh	r3, [r7, #40]	; 0x28
	STResponseAZ = accelOutZSTE - accelOutZSTD;
 8001e80:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001e82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	84fb      	strh	r3, [r7, #38]	; 0x26

	AXResoult = (float)((STResponseAX - dev->FT_XA) / dev->FT_XA); // in percent
 8001e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	edc7 7a08 	vstr	s15, [r7, #32]
	if (AXResoult > 15 || AXResoult < -14 ) return 1; // 14
 8001eaa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eae:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	dc08      	bgt.n	8001ece <MPU6050_SelfTest+0x3ee>
 8001ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec0:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d501      	bpl.n	8001ed2 <MPU6050_SelfTest+0x3f2>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e058      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	AYResoult = (float)((STResponseAY - dev->FT_YA) / dev->FT_YA); // in percent
 8001ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ee2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (AYResoult > 14 || AYResoult < -14 ) return 1;
 8001ef4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dc08      	bgt.n	8001f18 <MPU6050_SelfTest+0x438>
 8001f06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0a:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d501      	bpl.n	8001f1c <MPU6050_SelfTest+0x43c>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e033      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	AZResoult = (float)((STResponseAZ - dev->FT_ZA) / dev->FT_ZA); // in percent
 8001f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001f2c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	edc7 7a06 	vstr	s15, [r7, #24]
	if (AZResoult > 14 || AZResoult < -14 ) return 1;
 8001f3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f42:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	dc08      	bgt.n	8001f62 <MPU6050_SelfTest+0x482>
 8001f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f54:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	d501      	bpl.n	8001f66 <MPU6050_SelfTest+0x486>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>

	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10); // enable self test on all axies
 8001f66:	2210      	movs	r2, #16
 8001f68:	211c      	movs	r1, #28
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f935 	bl	80021da <MPU6050_WriteRegister>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001f76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MPU6050_SelfTest+0x4a2>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <MPU6050_SelfTest+0x4a4>


	return 0; // OK
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3758      	adds	r7, #88	; 0x58
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <MPU6050_ReadAllDirect>:


uint8_t MPU6050_ReadAllDirect(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t Data[14] = {0};
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	811a      	strh	r2, [r3, #8]

	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, Data, 14);
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	230e      	movs	r3, #14
 8001fb2:	213b      	movs	r1, #59	; 0x3b
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8f3 	bl	80021a0 <MPU6050_ReadRegisters>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK) return 1;	// NOK
 8001fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MPU6050_ReadAllDirect+0x40>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0be      	b.n	800214a <MPU6050_ReadAllDirect+0x1be>

	// Acceleration X
	uint16_t DataMSB = (uint16_t)Data[0] << 8;
 8001fcc:	7b3b      	ldrb	r3, [r7, #12]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t DataLSB = (uint16_t)Data[1];
 8001fd4:	7b7b      	ldrb	r3, [r7, #13]
 8001fd6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelX = DataMSB | DataLSB;
 8001fd8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	853b      	strh	r3, [r7, #40]	; 0x28

	dev->ACCEL_X= (float)RawAccelX / 4096.0f + (float)(X_ACCEL_OFFSET);
 8001fe2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002154 <MPU6050_ReadAllDirect+0x1c8>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002158 <MPU6050_ReadAllDirect+0x1cc>
 8001ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	edc3 7a01 	vstr	s15, [r3, #4]

	// Acceleration Y
	DataMSB = (uint16_t)Data[2] << 8;
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	b29b      	uxth	r3, r3
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[3];
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelY = DataMSB | DataLSB;
 8002010:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002014:	4313      	orrs	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	84fb      	strh	r3, [r7, #38]	; 0x26

	dev->ACCEL_Y= (float)RawAccelY / 4096.0f + (float)(Y_ACCEL_OFFSET);
 800201a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002026:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002154 <MPU6050_ReadAllDirect+0x1c8>
 800202a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800202e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800215c <MPU6050_ReadAllDirect+0x1d0>
 8002032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	edc3 7a02 	vstr	s15, [r3, #8]

	// Acceleration Z
	DataMSB = (uint16_t)Data[4] << 8;
 800203c:	7c3b      	ldrb	r3, [r7, #16]
 800203e:	b29b      	uxth	r3, r3
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[5];
 8002044:	7c7b      	ldrb	r3, [r7, #17]
 8002046:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelZ = DataMSB | DataLSB;
 8002048:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800204a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800204c:	4313      	orrs	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	84bb      	strh	r3, [r7, #36]	; 0x24

	dev->ACCEL_Z= (float)RawAccelZ / 4096.0f + (float)(Z_ACCEL_OFFSET);
 8002052:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002154 <MPU6050_ReadAllDirect+0x1c8>
 8002062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002066:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800215c <MPU6050_ReadAllDirect+0x1d0>
 800206a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	edc3 7a03 	vstr	s15, [r3, #12]

	// Temperature
	DataMSB = (uint16_t)Data[6] << 8;
 8002074:	7cbb      	ldrb	r3, [r7, #18]
 8002076:	b29b      	uxth	r3, r3
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[7];
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	857b      	strh	r3, [r7, #42]	; 0x2a

	uint16_t RawTemp = DataMSB | DataLSB;
 8002080:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002084:	4313      	orrs	r3, r2
 8002086:	847b      	strh	r3, [r7, #34]	; 0x22

	dev->Temp_C = (int16_t)((((float)RawTemp) / 340 + 36.53f) * 10);
 8002088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002092:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002160 <MPU6050_ReadAllDirect+0x1d4>
 8002096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002164 <MPU6050_ReadAllDirect+0x1d8>
 800209e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	839a      	strh	r2, [r3, #28]

	// Gyro X
	DataMSB = (uint16_t)Data[8] << 8;
 80020b8:	7d3b      	ldrb	r3, [r7, #20]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[9];
 80020c0:	7d7b      	ldrb	r3, [r7, #21]
 80020c2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroX = DataMSB | DataLSB;
 80020c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80020c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	843b      	strh	r3, [r7, #32]

	dev->GYRO_X = (float)RawGyroX / 131.0f;
 80020ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002168 <MPU6050_ReadAllDirect+0x1dc>
 80020de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	edc3 7a04 	vstr	s15, [r3, #16]

	// Gyro Y
	DataMSB = (uint16_t)Data[10] << 8;
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[11];
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroY = DataMSB | DataLSB;
 80020f4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80020f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	83fb      	strh	r3, [r7, #30]

	dev->GYRO_Y = (float)RawGyroY / 131.0f;
 80020fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002168 <MPU6050_ReadAllDirect+0x1dc>
 800210e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	edc3 7a05 	vstr	s15, [r3, #20]

	// Gyro Z
	DataMSB = (uint16_t)Data[12] << 8;
 8002118:	7e3b      	ldrb	r3, [r7, #24]
 800211a:	b29b      	uxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[13];
 8002120:	7e7b      	ldrb	r3, [r7, #25]
 8002122:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroZ = DataMSB | DataLSB;
 8002124:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002126:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002128:	4313      	orrs	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	83bb      	strh	r3, [r7, #28]

	dev->GYRO_Z = (float)RawGyroZ / 131.0f;
 800212e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002168 <MPU6050_ReadAllDirect+0x1dc>
 800213e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edc3 7a06 	vstr	s15, [r3, #24]

	return 0; // OK
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3730      	adds	r7, #48	; 0x30
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	45800000 	.word	0x45800000
 8002158:	3cf5c28f 	.word	0x3cf5c28f
 800215c:	00000000 	.word	0x00000000
 8002160:	43aa0000 	.word	0x43aa0000
 8002164:	42121eb8 	.word	0x42121eb8
 8002168:	43030000 	.word	0x43030000

0800216c <MPU6050_ReadRegister>:
	return DataInBuff; // OK
}


//* LL functions *//
HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data){
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af04      	add	r7, sp, #16
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	460b      	mov	r3, r1
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	b29a      	uxth	r2, r3
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	21d0      	movs	r1, #208	; 0xd0
 8002192:	f003 ff73 	bl	800607c <HAL_I2C_Mem_Read>
 8002196:	4603      	mov	r3, r0
};
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint16_t lenght){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af04      	add	r7, sp, #16
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	72fb      	strb	r3, [r7, #11]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	2364      	movs	r3, #100	; 0x64
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	21d0      	movs	r1, #208	; 0xd0
 80021cc:	f003 ff56 	bl	800607c <HAL_I2C_Mem_Read>
 80021d0:	4603      	mov	r3, r0
};
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t data){
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af04      	add	r7, sp, #16
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	2364      	movs	r3, #100	; 0x64
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	1cbb      	adds	r3, r7, #2
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	21d0      	movs	r1, #208	; 0xd0
 8002202:	f003 fe41 	bl	8005e88 <HAL_I2C_Mem_Write>
 8002206:	4603      	mov	r3, r0
};
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <DegresToCCR>:
void SetPWMValue(uint8_t output, uint32_t val);
void PowerToPWMValue(uint8_t power);


void DegresToCCR(float Degress, uint8_t Servo)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	ed87 0a01 	vstr	s0, [r7, #4]
 800221a:	4603      	mov	r3, r0
 800221c:	70fb      	strb	r3, [r7, #3]
	float TimePerDeg = 0.01111; // 0deg = 0.5ms, 90deg = 1.5ms; delta 90deg = 1ms
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <DegresToCCR+0xa8>)
 8002220:	617b      	str	r3, [r7, #20]
	//double TimePerDeg = 0.5 / 90; // 0deg = 0.5ms, 90deg = 1.5ms; delta 90deg = 1ms

	float DutyCycle = ((Degress * TimePerDeg + 0.5) * 100) / 20.0f;
 8002222:	ed97 7a01 	vldr	s14, [r7, #4]
 8002226:	edd7 7a05 	vldr	s15, [r7, #20]
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	ee17 0a90 	vmov	r0, s15
 8002232:	f7fe f989 	bl	8000548 <__aeabi_f2d>
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <DegresToCCR+0xac>)
 800223c:	f7fe f826 	bl	800028c <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <DegresToCCR+0xb0>)
 800224e:	f7fe f9d3 	bl	80005f8 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <DegresToCCR+0xb4>)
 8002260:	f7fe faf4 	bl	800084c <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fc9c 	bl	8000ba8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	613b      	str	r3, [r7, #16]

	// ARR(AutoReloadRegister) = 2400 (set in GUI editor for timer3)
	uint16_t CCRValue = (uint16_t)(DutyCycle * 2400.0f) / 100.0f;
 8002274:	edd7 7a04 	vldr	s15, [r7, #16]
 8002278:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022c8 <DegresToCCR+0xb8>
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002284:	ee17 3a90 	vmov	r3, s15
 8002288:	b29b      	uxth	r3, r3
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002292:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022cc <DegresToCCR+0xbc>
 8002296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	81fb      	strh	r3, [r7, #14]

	SetPWMValue(Servo, CCRValue);
 80022a4:	89fa      	ldrh	r2, [r7, #14]
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f810 	bl	80022d0 <SetPWMValue>
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	3c3606b8 	.word	0x3c3606b8
 80022bc:	3fe00000 	.word	0x3fe00000
 80022c0:	40590000 	.word	0x40590000
 80022c4:	40340000 	.word	0x40340000
 80022c8:	45160000 	.word	0x45160000
 80022cc:	42c80000 	.word	0x42c80000

080022d0 <SetPWMValue>:


void SetPWMValue(uint8_t output, uint32_t val)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
	switch(output){
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	3b01      	subs	r3, #1
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d822      	bhi.n	800232a <SetPWMValue+0x5a>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <SetPWMValue+0x1c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002309 	.word	0x08002309
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002319 	.word	0x08002319
 80022f8:	08002311 	.word	0x08002311
 80022fc:	08002321 	.word	0x08002321
	case SERVO_XN:			// X-
		TIM3->CCR1 = val;
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <SetPWMValue+0x68>)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8002306:	e011      	b.n	800232c <SetPWMValue+0x5c>

	case SERVO_XP:			// X+
		TIM3->CCR2 = val;
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <SetPWMValue+0x68>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800230e:	e00d      	b.n	800232c <SetPWMValue+0x5c>

	case SERVO_YN:			// Y-
		TIM3->CCR4 = val;
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <SetPWMValue+0x68>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002316:	e009      	b.n	800232c <SetPWMValue+0x5c>

	case SERVO_YP:			// Y+
		TIM3->CCR3 = val;
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <SetPWMValue+0x68>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800231e:	e005      	b.n	800232c <SetPWMValue+0x5c>

	case PWM_EDF:			// EDF
		TIM2->CCR4 = val;
 8002320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002328:	e000      	b.n	800232c <SetPWMValue+0x5c>

	default:
		break;
 800232a:	bf00      	nop
	}
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40000400 	.word	0x40000400

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002344:	f002 f8ea 	bl	800451c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002348:	f000 fc98 	bl	8002c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234c:	f001 f88a 	bl	8003464 <MX_GPIO_Init>
  MX_DMA_Init();
 8002350:	f001 f852 	bl	80033f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002354:	f000 fcfc 	bl	8002d50 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002358:	f000 fd88 	bl	8002e6c <MX_SPI1_Init>
  MX_UART4_Init();
 800235c:	f001 f822 	bl	80033a4 <MX_UART4_Init>
  MX_TIM3_Init();
 8002360:	f000 feec 	bl	800313c <MX_TIM3_Init>
  MX_I2C3_Init();
 8002364:	f000 fd54 	bl	8002e10 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002368:	f000 fe64 	bl	8003034 <MX_TIM2_Init>
  MX_TIM1_Init();
 800236c:	f000 fdb4 	bl	8002ed8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002370:	f000 ff7c 	bl	800326c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002374:	f00c fd7e 	bl	800ee74 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8002378:	f000 ffc6 	bl	8003308 <MX_TIM5_Init>
  MX_FATFS_Init();
 800237c:	f00a fd16 	bl	800cdac <MX_FATFS_Init>
  /* Variables */



  // Init
  AmonDrone.DroneStatus = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  AmonDrone.PitchOld = 0;
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  AmonDrone.RollOld = 0;
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (AmonDrone.DroneStatus != DroneStatusOld && GYRO_CALIB == 0)
 8002396:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 800239a:	4bb6      	ldr	r3, [pc, #728]	; (8002674 <main+0x338>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d00c      	beq.n	80023bc <main+0x80>
	  {
		  DroneStatusOld = AmonDrone.DroneStatus;
 80023a2:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80023a6:	4bb3      	ldr	r3, [pc, #716]	; (8002674 <main+0x338>)
 80023a8:	701a      	strb	r2, [r3, #0]
		  DroneStatusLocal = AmonDrone.DroneStatus;
 80023aa:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80023ae:	4bb2      	ldr	r3, [pc, #712]	; (8002678 <main+0x33c>)
 80023b0:	701a      	strb	r2, [r3, #0]
		  StatusLED(AmonDrone.DroneStatus);
 80023b2:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 f9be 	bl	8003738 <StatusLED>

	  /****************************
	   * INIT  SEQUENCE
	   ****************************/

	  if (StartupInit == STATUS_STARTUP)
 80023bc:	4baf      	ldr	r3, [pc, #700]	; (800267c <main+0x340>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 81f6 	bne.w	80027b2 <main+0x476>
	  {

		//AmonDrone.DroneStatus = STATUS_STARTUP;
		uint8_t status = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

		/* Aligne all motors */
		TVCServoEnable();
 80023cc:	f001 f910 	bl	80035f0 <TVCServoEnable>
		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 80023d0:	2002      	movs	r0, #2
 80023d2:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8002680 <main+0x344>
 80023d6:	f7ff ff1b 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 80023da:	2001      	movs	r0, #1
 80023dc:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8002684 <main+0x348>
 80023e0:	f7ff ff16 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 80023e4:	2004      	movs	r0, #4
 80023e6:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8002688 <main+0x34c>
 80023ea:	f7ff ff11 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 80023ee:	2003      	movs	r0, #3
 80023f0:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 8002684 <main+0x348>
 80023f4:	f7ff ff0c 	bl	8002210 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 80023f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023fc:	f002 f900 	bl	8004600 <HAL_Delay>

		DegresToCCR(80.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002400:	2002      	movs	r0, #2
 8002402:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800268c <main+0x350>
 8002406:	f7ff ff03 	bl	8002210 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_XP_OFFSET, SERVO_XP);
 800240a:	2001      	movs	r0, #1
 800240c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8002690 <main+0x354>
 8002410:	f7ff fefe 	bl	8002210 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002414:	2004      	movs	r0, #4
 8002416:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8002694 <main+0x358>
 800241a:	f7ff fef9 	bl	8002210 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_YP_OFFSET, SERVO_YP);
 800241e:	2003      	movs	r0, #3
 8002420:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8002690 <main+0x354>
 8002424:	f7ff fef4 	bl	8002210 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 8002428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800242c:	f002 f8e8 	bl	8004600 <HAL_Delay>

		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002430:	2002      	movs	r0, #2
 8002432:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8002680 <main+0x344>
 8002436:	f7ff feeb 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 800243a:	2001      	movs	r0, #1
 800243c:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002684 <main+0x348>
 8002440:	f7ff fee6 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002444:	2004      	movs	r0, #4
 8002446:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002688 <main+0x34c>
 800244a:	f7ff fee1 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 800244e:	2003      	movs	r0, #3
 8002450:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8002684 <main+0x348>
 8002454:	f7ff fedc 	bl	8002210 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 8002458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800245c:	f002 f8d0 	bl	8004600 <HAL_Delay>

		DegresToCCR(100.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002460:	2002      	movs	r0, #2
 8002462:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8002698 <main+0x35c>
 8002466:	f7ff fed3 	bl	8002210 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_XP_OFFSET, SERVO_XP);
 800246a:	2001      	movs	r0, #1
 800246c:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800269c <main+0x360>
 8002470:	f7ff fece 	bl	8002210 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002474:	2004      	movs	r0, #4
 8002476:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80026a0 <main+0x364>
 800247a:	f7ff fec9 	bl	8002210 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_YP_OFFSET, SERVO_YP);
 800247e:	2003      	movs	r0, #3
 8002480:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800269c <main+0x360>
 8002484:	f7ff fec4 	bl	8002210 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 8002488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800248c:	f002 f8b8 	bl	8004600 <HAL_Delay>

		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002490:	2002      	movs	r0, #2
 8002492:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8002680 <main+0x344>
 8002496:	f7ff febb 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 800249a:	2001      	movs	r0, #1
 800249c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8002684 <main+0x348>
 80024a0:	f7ff feb6 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 80024a4:	2004      	movs	r0, #4
 80024a6:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8002688 <main+0x34c>
 80024aa:	f7ff feb1 	bl	8002210 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 80024ae:	2003      	movs	r0, #3
 80024b0:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8002684 <main+0x348>
 80024b4:	f7ff feac 	bl	8002210 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 80024b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024bc:	f002 f8a0 	bl	8004600 <HAL_Delay>

		HAL_ADC_Start_DMA(&hadc1, ADC_BAT_Val, 2);
 80024c0:	2202      	movs	r2, #2
 80024c2:	4978      	ldr	r1, [pc, #480]	; (80026a4 <main+0x368>)
 80024c4:	4878      	ldr	r0, [pc, #480]	; (80026a8 <main+0x36c>)
 80024c6:	f002 f903 	bl	80046d0 <HAL_ADC_Start_DMA>

		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2104      	movs	r1, #4
 80024ce:	4877      	ldr	r0, [pc, #476]	; (80026ac <main+0x370>)
 80024d0:	f003 fb7c 	bl	8005bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Brd_GPIO_Port, LED_Brd_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2108      	movs	r1, #8
 80024d8:	4875      	ldr	r0, [pc, #468]	; (80026b0 <main+0x374>)
 80024da:	f003 fb77 	bl	8005bcc <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // RGB (50Hz)
 80024de:	2104      	movs	r1, #4
 80024e0:	4874      	ldr	r0, [pc, #464]	; (80026b4 <main+0x378>)
 80024e2:	f006 fbc3 	bl	8008c6c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // RGB (50Hz)
 80024e6:	2108      	movs	r1, #8
 80024e8:	4872      	ldr	r0, [pc, #456]	; (80026b4 <main+0x378>)
 80024ea:	f006 fbbf 	bl	8008c6c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // RGB (50Hz)
 80024ee:	2108      	movs	r1, #8
 80024f0:	4871      	ldr	r0, [pc, #452]	; (80026b8 <main+0x37c>)
 80024f2:	f006 fbbb 	bl	8008c6c <HAL_TIM_PWM_Start>

		/* Read both batteries and save in drone data struct */
		AmonDrone.MainBatVoltage = ADC_Read_Main_Battery();
 80024f6:	f001 f9bb 	bl	8003870 <ADC_Read_Main_Battery>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
		AmonDrone.EDFBatVoltage = ADC_Read_EDF_Battery();
 8002500:	f001 f9fe 	bl	8003900 <ADC_Read_EDF_Battery>
 8002504:	4603      	mov	r3, r0
 8002506:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
		if (AmonDrone.MainBatVoltage < 1000) status++; // check board battery voltage (more than 10V)
 800250a:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 800250e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002512:	d204      	bcs.n	800251e <main+0x1e2>
 8002514:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002518:	3301      	adds	r3, #1
 800251a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		//if (AmonDrone.EDFBatVoltage < 2000) status++; // check board battery voltage (more than 20V)

		HAL_Delay(500);
 800251e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002522:	f002 f86d 	bl	8004600 <HAL_Delay>

		/* Reset all devices */
		status += BME280_Reset(&bme280, &hi2c3);
 8002526:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800252a:	4964      	ldr	r1, [pc, #400]	; (80026bc <main+0x380>)
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fd2d 	bl	8000f8c <BME280_Reset>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800253a:	4413      	add	r3, r2
 800253c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_Reset(&mpu6050, &hi2c3);
 8002540:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002544:	495d      	ldr	r1, [pc, #372]	; (80026bc <main+0x380>)
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe ff29 	bl	800139e <MPU6050_Reset>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002554:	4413      	add	r3, r2
 8002556:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

		HAL_Delay(500); // delay sensors config to complete power on
 800255a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800255e:	f002 f84f 	bl	8004600 <HAL_Delay>

		/* MBE280 */
		status += BME280_ReadDeviceID(&bme280, &hi2c3);
 8002562:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002566:	4955      	ldr	r1, [pc, #340]	; (80026bc <main+0x380>)
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fcef 	bl	8000f4c <BME280_ReadDeviceID>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002576:	4413      	add	r3, r2
 8002578:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += BME280_ReadCalibData(&bme280, &hi2c3);
 800257c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002580:	494e      	ldr	r1, [pc, #312]	; (80026bc <main+0x380>)
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fda0 	bl	80010c8 <BME280_ReadCalibData>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002590:	4413      	add	r3, r2
 8002592:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += BME280_Init(&bme280, &hi2c3);
 8002596:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800259a:	4948      	ldr	r1, [pc, #288]	; (80026bc <main+0x380>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fd55 	bl	800104c <BME280_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80025aa:	4413      	add	r3, r2
 80025ac:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

		/* MPU6050 */
		status += MPU6050_ReadDeviceID(&mpu6050, &hi2c3);
 80025b0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025b4:	4941      	ldr	r1, [pc, #260]	; (80026bc <main+0x380>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fed1 	bl	800135e <MPU6050_ReadDeviceID>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80025c4:	4413      	add	r3, r2
 80025c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_ReadFactoryTrim(&mpu6050, &hi2c3);
 80025ca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025ce:	493b      	ldr	r1, [pc, #236]	; (80026bc <main+0x380>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe ffad 	bl	8001530 <MPU6050_ReadFactoryTrim>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80025de:	4413      	add	r3, r2
 80025e0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_Init(&mpu6050, &hi2c3);
 80025e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80025e8:	4934      	ldr	r1, [pc, #208]	; (80026bc <main+0x380>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe ff32 	bl	8001454 <MPU6050_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80025f8:	4413      	add	r3, r2
 80025fa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_ReadFactoryTrim(&mpu6050, &hi2c3);
 80025fe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002602:	492e      	ldr	r1, [pc, #184]	; (80026bc <main+0x380>)
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe ff93 	bl	8001530 <MPU6050_ReadFactoryTrim>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002612:	4413      	add	r3, r2
 8002614:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002618:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800261c:	4927      	ldr	r1, [pc, #156]	; (80026bc <main+0x380>)
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fcb4 	bl	8001f8c <MPU6050_ReadAllDirect>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800262c:	4413      	add	r3, r2
 800262e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += MPU6050_SelfTest(&mpu6050, &hi2c3);
 8002632:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002636:	4921      	ldr	r1, [pc, #132]	; (80026bc <main+0x380>)
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fa51 	bl	8001ae0 <MPU6050_SelfTest>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002646:	4413      	add	r3, r2
 8002648:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

		/* vl53l1x */
		uint8_t bootOK = 0;
 800264c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002650:	f2a3 13f9 	subw	r3, r3, #505	; 0x1f9
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		status += VL53L1X_ReadID(&vl53l1Dev, &hi2c3);
 8002658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265c:	4917      	ldr	r1, [pc, #92]	; (80026bc <main+0x380>)
 800265e:	4618      	mov	r0, r3
 8002660:	f00a fafa 	bl	800cc58 <VL53L1X_ReadID>
 8002664:	4603      	mov	r3, r0
 8002666:	b2da      	uxtb	r2, r3
 8002668:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800266c:	4413      	add	r3, r2
 800266e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		while (bootOK == 0)
 8002672:	e034      	b.n	80026de <main+0x3a2>
 8002674:	20000000 	.word	0x20000000
 8002678:	2000066c 	.word	0x2000066c
 800267c:	2000066d 	.word	0x2000066d
 8002680:	42b60000 	.word	0x42b60000
 8002684:	42ae0000 	.word	0x42ae0000
 8002688:	42b40000 	.word	0x42b40000
 800268c:	42a20000 	.word	0x42a20000
 8002690:	429a0000 	.word	0x429a0000
 8002694:	42a00000 	.word	0x42a00000
 8002698:	42ca0000 	.word	0x42ca0000
 800269c:	42c20000 	.word	0x42c20000
 80026a0:	42c80000 	.word	0x42c80000
 80026a4:	20000720 	.word	0x20000720
 80026a8:	2000030c 	.word	0x2000030c
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020000 	.word	0x40020000
 80026b4:	20000460 	.word	0x20000460
 80026b8:	200004a8 	.word	0x200004a8
 80026bc:	200003b4 	.word	0x200003b4
		{
			status += VL53L1X_BootState(&vl53l1Dev, &hi2c3, &bootOK);
 80026c0:	f107 0237 	add.w	r2, r7, #55	; 0x37
 80026c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026c8:	499f      	ldr	r1, [pc, #636]	; (8002948 <main+0x60c>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00a fa4d 	bl	800cb6a <VL53L1X_BootState>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80026d8:	4413      	add	r3, r2
 80026da:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		while (bootOK == 0)
 80026de:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80026e2:	f2a3 13f9 	subw	r3, r3, #505	; 0x1f9
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0e9      	beq.n	80026c0 <main+0x384>
		}
		status += VL53L1X_SensorInit(&vl53l1Dev, &hi2c3);
 80026ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f0:	4995      	ldr	r1, [pc, #596]	; (8002948 <main+0x60c>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f009 ffee 	bl	800c6d4 <VL53L1X_SensorInit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002700:	4413      	add	r3, r2
 8002702:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += VL53L1X_SetTimingBudgetInMs(&vl53l1Dev, &hi2c3, 200); // 140ms is min for 4m distance
 8002706:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800270a:	22c8      	movs	r2, #200	; 0xc8
 800270c:	498e      	ldr	r1, [pc, #568]	; (8002948 <main+0x60c>)
 800270e:	4618      	mov	r0, r3
 8002710:	f00a f903 	bl	800c91a <VL53L1X_SetTimingBudgetInMs>
 8002714:	4603      	mov	r3, r0
 8002716:	b2da      	uxtb	r2, r3
 8002718:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800271c:	4413      	add	r3, r2
 800271e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		status += VL53L1X_SetOffset(&vl53l1Dev, &hi2c3, -130);
 8002722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002726:	f06f 0281 	mvn.w	r2, #129	; 0x81
 800272a:	4987      	ldr	r1, [pc, #540]	; (8002948 <main+0x60c>)
 800272c:	4618      	mov	r0, r3
 800272e:	f00a fa5e 	bl	800cbee <VL53L1X_SetOffset>
 8002732:	4603      	mov	r3, r0
 8002734:	b2da      	uxtb	r2, r3
 8002736:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800273a:	4413      	add	r3, r2
 800273c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		VL53L1X_StartRanging(&vl53l1Dev, &hi2c3);
 8002740:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002744:	4980      	ldr	r1, [pc, #512]	; (8002948 <main+0x60c>)
 8002746:	4618      	mov	r0, r3
 8002748:	f00a f879 	bl	800c83e <VL53L1X_StartRanging>


		HAL_TIM_Base_Start_IT(&htim4); // TVC LOOP, leg leds (50Hz)
 800274c:	487f      	ldr	r0, [pc, #508]	; (800294c <main+0x610>)
 800274e:	f006 f9c3 	bl	8008ad8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim5); // Complementary Filter
 8002752:	487f      	ldr	r0, [pc, #508]	; (8002950 <main+0x614>)
 8002754:	f006 f9c0 	bl	8008ad8 <HAL_TIM_Base_Start_IT>

		if (GYRO_CALIB == 0) HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 426); // Do not enable UART DMA if calibrating
 8002758:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800275c:	497d      	ldr	r1, [pc, #500]	; (8002954 <main+0x618>)
 800275e:	487e      	ldr	r0, [pc, #504]	; (8002958 <main+0x61c>)
 8002760:	f007 fab5 	bl	8009cce <HAL_UART_Receive_DMA>


		if (bme280.dig_T1 == 0 || bme280.dig_T2 == 0) // for WTF error
 8002764:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <main+0x438>
 800276c:	f9b7 31c6 	ldrsh.w	r3, [r7, #454]	; 0x1c6
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <main+0x442>
		{
			status++;
 8002774:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002778:	3301      	adds	r3, #1
 800277a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		}

		InitError = status;
 800277e:	4a77      	ldr	r2, [pc, #476]	; (800295c <main+0x620>)
 8002780:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002784:	7013      	strb	r3, [r2, #0]

		// Check if all init functionsa are OK
		if (InitError == 0) // OK
 8002786:	4b75      	ldr	r3, [pc, #468]	; (800295c <main+0x620>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <main+0x460>
		{
			StartupInit = 1;
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <main+0x624>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
			AmonDrone.DroneStatus = STATUS_IDLE_NC;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800279a:	e00a      	b.n	80027b2 <main+0x476>
		}
		else
		{
			StartupInit = 1;
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <main+0x624>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
			AmonDrone.DroneStatus = STATUS_ERROR; // ERROR
 80027a2:	2303      	movs	r3, #3
 80027a4:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
			HAL_GPIO_WritePin(LED_Brd_GPIO_Port, LED_Brd_Pin, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2108      	movs	r1, #8
 80027ac:	486d      	ldr	r0, [pc, #436]	; (8002964 <main+0x628>)
 80027ae:	f003 fa0d 	bl	8005bcc <HAL_GPIO_WritePin>

	  /****************************
	   * SEQUENCE IDLE, ARM, FLY...
	   ****************************/

	  if (StartupInit != STATUS_STARTUP && AmonDrone.DroneStatus != STATUS_ERROR && GYRO_CALIB == 0)
 80027b2:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <main+0x624>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 823c 	beq.w	8002c34 <main+0x8f8>
 80027bc:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	f000 8237 	beq.w	8002c34 <main+0x8f8>
	  {

		  /*** CURRENT DRONE STATUS ***/
		  switch(AmonDrone.DroneStatus){
 80027c6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80027ca:	3b01      	subs	r3, #1
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	f200 8229 	bhi.w	8002c24 <main+0x8e8>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <main+0x49c>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027f1 	.word	0x080027f1
 80027dc:	0800289d 	.word	0x0800289d
 80027e0:	08002c25 	.word	0x08002c25
 80027e4:	08002979 	.word	0x08002979
 80027e8:	08002ae1 	.word	0x08002ae1
 80027ec:	08002b7b 	.word	0x08002b7b

		  case STATUS_IDLE_NC:							/*/ Drone ideling but no connection with link /*/

			  if (TVCServoEnableFlag == 1) TVCServoDisable();
 80027f0:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <main+0x62c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <main+0x4c0>
 80027f8:	f000 ff36 	bl	8003668 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();
 80027fc:	4b5b      	ldr	r3, [pc, #364]	; (800296c <main+0x630>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <main+0x4cc>
 8002804:	f000 ff82 	bl	800370c <EDFDisable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <main+0x634>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d110      	bne.n	8002832 <main+0x4f6>
			  {
				  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002810:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002814:	494c      	ldr	r1, [pc, #304]	; (8002948 <main+0x60c>)
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fbb8 	bl	8001f8c <MPU6050_ReadAllDirect>
				  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 800281c:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8002820:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f80a 	bl	8001840 <MPU6050_RawToDeg>
				  Reg200HzLoopEN = 0;
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <main+0x634>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1)	// Timer 5
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <main+0x638>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	f040 81ff 	bne.w	8002c3a <main+0x8fe>
			  {

				  uint8_t dataRdy = 0;
 800283c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002840:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
				  while(dataRdy == 0)
 8002848:	e007      	b.n	800285a <main+0x51e>
				  {
					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 800284a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800284e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002852:	493d      	ldr	r1, [pc, #244]	; (8002948 <main+0x60c>)
 8002854:	4618      	mov	r0, r3
 8002856:	f00a f826 	bl	800c8a6 <VL53L1X_CheckForDataReady>
				  while(dataRdy == 0)
 800285a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800285e:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <main+0x50e>
				  }
				  dataRdy = 0;
 8002868:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800286c:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002874:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002878:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800287c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002880:	4931      	ldr	r1, [pc, #196]	; (8002948 <main+0x60c>)
 8002882:	4618      	mov	r0, r3
 8002884:	f00a f993 	bl	800cbae <VL53L1X_GetDistance>
				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002888:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800288c:	492e      	ldr	r1, [pc, #184]	; (8002948 <main+0x60c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f009 ff8e 	bl	800c7b0 <VL53L1X_ClearInterrupt>
				  // Read other sensors
				  Reg50HzLoopEN = 0;
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <main+0x638>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800289a:	e1ce      	b.n	8002c3a <main+0x8fe>

		  case STATUS_IDLE_CN: 							/*/ Drone ideling and is connected with link /*/

			  if (TVCServoEnableFlag == 1) TVCServoDisable();
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <main+0x62c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <main+0x56c>
 80028a4:	f000 fee0 	bl	8003668 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <main+0x630>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <main+0x578>
 80028b0:	f000 ff2c 	bl	800370c <EDFDisable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <main+0x634>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d110      	bne.n	80028de <main+0x5a2>
			  {
			  	  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 80028bc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80028c0:	4921      	ldr	r1, [pc, #132]	; (8002948 <main+0x60c>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fb62 	bl	8001f8c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 80028c8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80028cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe ffb4 	bl	8001840 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <main+0x634>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1)	// Timer 5
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <main+0x638>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 81ac 	bne.w	8002c40 <main+0x904>
			  {
 				  uint8_t dataRdy = 0;
 80028e8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80028ec:	f2a3 13fb 	subw	r3, r3, #507	; 0x1fb
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
  				  while(dataRdy == 0)
 80028f4:	e007      	b.n	8002906 <main+0x5ca>
  				  {
  					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 80028f6:	f107 0235 	add.w	r2, r7, #53	; 0x35
 80028fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028fe:	4912      	ldr	r1, [pc, #72]	; (8002948 <main+0x60c>)
 8002900:	4618      	mov	r0, r3
 8002902:	f009 ffd0 	bl	800c8a6 <VL53L1X_CheckForDataReady>
  				  while(dataRdy == 0)
 8002906:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800290a:	f2a3 13fb 	subw	r3, r3, #507	; 0x1fb
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <main+0x5ba>
			  	  }
			  	  dataRdy = 0;
 8002914:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002918:	f2a3 13fb 	subw	r3, r3, #507	; 0x1fb
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
			  	  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002920:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002924:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002928:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <main+0x60c>)
 800292e:	4618      	mov	r0, r3
 8002930:	f00a f93d 	bl	800cbae <VL53L1X_GetDistance>
			  	  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <main+0x60c>)
 800293a:	4618      	mov	r0, r3
 800293c:	f009 ff38 	bl	800c7b0 <VL53L1X_ClearInterrupt>
			  	// Read other sensors...
			  	  Reg50HzLoopEN = 0;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <main+0x638>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8002946:	e17b      	b.n	8002c40 <main+0x904>
 8002948:	200003b4 	.word	0x200003b4
 800294c:	20000538 	.word	0x20000538
 8002950:	20000580 	.word	0x20000580
 8002954:	20000728 	.word	0x20000728
 8002958:	200005c8 	.word	0x200005c8
 800295c:	2000066e 	.word	0x2000066e
 8002960:	2000066d 	.word	0x2000066d
 8002964:	40020000 	.word	0x40020000
 8002968:	20000671 	.word	0x20000671
 800296c:	20000672 	.word	0x20000672
 8002970:	200008d3 	.word	0x200008d3
 8002974:	200008d2 	.word	0x200008d2

		  case STATUS_ARM:								/*/ Drone is armet to take off /*/

			  if (TVCServoEnableFlag == 0) TVCServoEnable();
 8002978:	4bb6      	ldr	r3, [pc, #728]	; (8002c54 <main+0x918>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <main+0x648>
 8002980:	f000 fe36 	bl	80035f0 <TVCServoEnable>
			  if (EDFEnableFlag == 0) EDFEnable();
 8002984:	4bb4      	ldr	r3, [pc, #720]	; (8002c58 <main+0x91c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <main+0x654>
 800298c:	f000 fea8 	bl	80036e0 <EDFEnable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 8002990:	4bb2      	ldr	r3, [pc, #712]	; (8002c5c <main+0x920>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d110      	bne.n	80029ba <main+0x67e>
			  {
			  	  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002998:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800299c:	49b0      	ldr	r1, [pc, #704]	; (8002c60 <main+0x924>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff faf4 	bl	8001f8c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 80029a4:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80029a8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff46 	bl	8001840 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 80029b4:	4ba9      	ldr	r3, [pc, #676]	; (8002c5c <main+0x920>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1 && MeassCnt < 20)	// Timer 5
 80029ba:	4baa      	ldr	r3, [pc, #680]	; (8002c64 <main+0x928>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 8141 	bne.w	8002c46 <main+0x90a>
 80029c4:	4ba8      	ldr	r3, [pc, #672]	; (8002c68 <main+0x92c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b13      	cmp	r3, #19
 80029ca:	f200 813c 	bhi.w	8002c46 <main+0x90a>
			  {
				  PitchDef[MeassCnt] = AmonDrone.Pitch;
 80029ce:	4ba6      	ldr	r3, [pc, #664]	; (8002c68 <main+0x92c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80029d6:	49a5      	ldr	r1, [pc, #660]	; (8002c6c <main+0x930>)
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	601a      	str	r2, [r3, #0]
				  RollDef[MeassCnt] = AmonDrone.Roll;
 80029de:	4ba2      	ldr	r3, [pc, #648]	; (8002c68 <main+0x92c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029e6:	49a2      	ldr	r1, [pc, #648]	; (8002c70 <main+0x934>)
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	601a      	str	r2, [r3, #0]
				  MeassCnt++;
 80029ee:	4b9e      	ldr	r3, [pc, #632]	; (8002c68 <main+0x92c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <main+0x92c>)
 80029f8:	701a      	strb	r2, [r3, #0]

				  if (MeassCnt == 20)
 80029fa:	4b9b      	ldr	r3, [pc, #620]	; (8002c68 <main+0x92c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b14      	cmp	r3, #20
 8002a00:	d13e      	bne.n	8002a80 <main+0x744>
				  {
					  float PitchSum = 0;
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
					  float RollSum = 0;
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

					  for (int i = 0; i < 20; i++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002a18:	e01e      	b.n	8002a58 <main+0x71c>
					  {
						  PitchSum += PitchDef[i];
 8002a1a:	4a94      	ldr	r2, [pc, #592]	; (8002c6c <main+0x930>)
 8002a1c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	edc7 7a88 	vstr	s15, [r7, #544]	; 0x220
						  RollSum += RollDef[i];
 8002a34:	4a8e      	ldr	r2, [pc, #568]	; (8002c70 <main+0x934>)
 8002a36:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
					  for (int i = 0; i < 20; i++)
 8002a4e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002a52:	3301      	adds	r3, #1
 8002a54:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002a58:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002a5c:	2b13      	cmp	r3, #19
 8002a5e:	dddc      	ble.n	8002a1a <main+0x6de>
					  }

					  AmonDrone.PitchMean = PitchSum / 20;
 8002a60:	ed97 7a88 	vldr	s14, [r7, #544]	; 0x220
 8002a64:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6c:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
					  AmonDrone.RollMean = RollSum / 20;
 8002a70:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8002a74:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a7c:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
				  }


				  uint8_t dataRdy = 0;
 8002a80:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
				  while(dataRdy == 0)
 8002a8c:	e007      	b.n	8002a9e <main+0x762>
				  {
				  	  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002a8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a96:	4972      	ldr	r1, [pc, #456]	; (8002c60 <main+0x924>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f009 ff04 	bl	800c8a6 <VL53L1X_CheckForDataReady>
				  while(dataRdy == 0)
 8002a9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <main+0x752>
				  }
				  dataRdy = 0;
 8002aac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002ab8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002abc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac4:	4966      	ldr	r1, [pc, #408]	; (8002c60 <main+0x924>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f00a f871 	bl	800cbae <VL53L1X_GetDistance>
				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad0:	4963      	ldr	r1, [pc, #396]	; (8002c60 <main+0x924>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f009 fe6c 	bl	800c7b0 <VL53L1X_ClearInterrupt>
				  // Read other sensors...

				  Reg50HzLoopEN = 0;
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <main+0x928>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8002ade:	e0b2      	b.n	8002c46 <main+0x90a>

		  case STATUS_FLY:								/*/ Flying /*/

			  // add init level value
			  DegresToCCR(90.0f + AmonDrone.Pitch + (AmonDrone.PitchMean) + SERVO_XN_OFFSET, SERVO_XN);
 8002ae0:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8002ae4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002c74 <main+0x938>
 8002ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002aec:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002afc:	2002      	movs	r0, #2
 8002afe:	eeb0 0a67 	vmov.f32	s0, s15
 8002b02:	f7ff fb85 	bl	8002210 <DegresToCCR>
			  DegresToCCR(90.0f - AmonDrone.Pitch + (AmonDrone.PitchMean) + SERVO_XP_OFFSET, SERVO_XP);
 8002b06:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8002b0a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002c74 <main+0x938>
 8002b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b12:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b22:	2001      	movs	r0, #1
 8002b24:	eeb0 0a67 	vmov.f32	s0, s15
 8002b28:	f7ff fb72 	bl	8002210 <DegresToCCR>
			  DegresToCCR(90.0f - AmonDrone.Roll + (AmonDrone.RollMean) + SERVO_YN_OFFSET, SERVO_YN);
 8002b2c:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8002b30:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002c74 <main+0x938>
 8002b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b38:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002c78 <main+0x93c>
 8002b44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b48:	2004      	movs	r0, #4
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	f7ff fb5f 	bl	8002210 <DegresToCCR>
			  DegresToCCR(90.0f + AmonDrone.Roll + (AmonDrone.RollMean) + SERVO_YP_OFFSET, SERVO_YP);
 8002b52:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8002b56:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002c74 <main+0x938>
 8002b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b5e:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b6e:	2003      	movs	r0, #3
 8002b70:	eeb0 0a67 	vmov.f32	s0, s15
 8002b74:	f7ff fb4c 	bl	8002210 <DegresToCCR>


			  break;
 8002b78:	e069      	b.n	8002c4e <main+0x912>

		  case STATUS_FLY_OVER:							/*/ Dron landed (after flying) /*/

			  if (TVCServoEnableFlag == 1) TVCServoDisable();
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <main+0x918>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <main+0x84a>
 8002b82:	f000 fd71 	bl	8003668 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <main+0x91c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <main+0x856>
 8002b8e:	f000 fdbd 	bl	800370c <EDFDisable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 8002b92:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <main+0x920>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d110      	bne.n	8002bbc <main+0x880>
			  {
				  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002b9a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b9e:	4930      	ldr	r1, [pc, #192]	; (8002c60 <main+0x924>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f9f3 	bl	8001f8c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 8002ba6:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8002baa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fe45 	bl	8001840 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <main+0x920>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1)	// Timer 5
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <main+0x928>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d143      	bne.n	8002c4c <main+0x910>
			  {
 				  uint8_t dataRdy = 0;
 8002bc4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002bc8:	f2a3 13fd 	subw	r3, r3, #509	; 0x1fd
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  				  while(dataRdy == 0)
 8002bd0:	e007      	b.n	8002be2 <main+0x8a6>
  				  {
  					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002bd2:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8002bd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bda:	4921      	ldr	r1, [pc, #132]	; (8002c60 <main+0x924>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f009 fe62 	bl	800c8a6 <VL53L1X_CheckForDataReady>
  				  while(dataRdy == 0)
 8002be2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002be6:	f2a3 13fd 	subw	r3, r3, #509	; 0x1fd
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <main+0x896>
  				  }
  				  dataRdy = 0;
 8002bf0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002bf4:	f2a3 13fd 	subw	r3, r3, #509	; 0x1fd
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
 				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002bfc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002c00:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c08:	4915      	ldr	r1, [pc, #84]	; (8002c60 <main+0x924>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f009 ffcf 	bl	800cbae <VL53L1X_GetDistance>
  				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002c10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c14:	4912      	ldr	r1, [pc, #72]	; (8002c60 <main+0x924>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f009 fdca 	bl	800c7b0 <VL53L1X_ClearInterrupt>
 				  // Read other sensors...
  				  // save to sd...
  				  Reg50HzLoopEN = 0;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <main+0x928>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8002c22:	e013      	b.n	8002c4c <main+0x910>

		  default:
			  AmonDrone.DroneStatus = STATUS_ERROR;		/*/ Wrong state /*/
 8002c24:	2303      	movs	r3, #3
 8002c26:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
			  TVCServoDisable();
 8002c2a:	f000 fd1d 	bl	8003668 <TVCServoDisable>
			  EDFDisable();
 8002c2e:	f000 fd6d 	bl	800370c <EDFDisable>
			  break;
 8002c32:	e00c      	b.n	8002c4e <main+0x912>
		  }
	  }
 8002c34:	bf00      	nop
 8002c36:	f7ff bbae 	b.w	8002396 <main+0x5a>
			  break;
 8002c3a:	bf00      	nop
 8002c3c:	f7ff bbab 	b.w	8002396 <main+0x5a>
			  break;
 8002c40:	bf00      	nop
 8002c42:	f7ff bba8 	b.w	8002396 <main+0x5a>
			  break;
 8002c46:	bf00      	nop
 8002c48:	f7ff bba5 	b.w	8002396 <main+0x5a>
			  break;
 8002c4c:	bf00      	nop
	  if (AmonDrone.DroneStatus != DroneStatusOld && GYRO_CALIB == 0)
 8002c4e:	f7ff bba2 	b.w	8002396 <main+0x5a>
 8002c52:	bf00      	nop
 8002c54:	20000671 	.word	0x20000671
 8002c58:	20000672 	.word	0x20000672
 8002c5c:	200008d3 	.word	0x200008d3
 8002c60:	200003b4 	.word	0x200003b4
 8002c64:	200008d2 	.word	0x200008d2
 8002c68:	20000714 	.word	0x20000714
 8002c6c:	20000674 	.word	0x20000674
 8002c70:	200006c4 	.word	0x200006c4
 8002c74:	42b40000 	.word	0x42b40000
 8002c78:	00000000 	.word	0x00000000

08002c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b094      	sub	sp, #80	; 0x50
 8002c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	2230      	movs	r2, #48	; 0x30
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f00d ff04 	bl	8010a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <SystemClock_Config+0xcc>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <SystemClock_Config+0xcc>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <SystemClock_Config+0xcc>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <SystemClock_Config+0xd0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002cec:	230f      	movs	r3, #15
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002cf0:	2390      	movs	r3, #144	; 0x90
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002cf8:	2305      	movs	r3, #5
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 f9b9 	bl	8008078 <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d0c:	f000 ff78 	bl	8003c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d10:	230f      	movs	r3, #15
 8002d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fc1a 	bl	8008568 <HAL_RCC_ClockConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d3a:	f000 ff61 	bl	8003c00 <Error_Handler>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3750      	adds	r7, #80	; 0x50
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000

08002d50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d56:	463b      	mov	r3, r7
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <MX_ADC1_Init+0xb8>)
 8002d66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002d68:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <MX_ADC1_Init+0xbc>)
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002db0:	4814      	ldr	r0, [pc, #80]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002db2:	f001 fc49 	bl	8004648 <HAL_ADC_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002dbc:	f000 ff20 	bl	8003c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002dd2:	f001 fdab 	bl	800492c <HAL_ADC_ConfigChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ddc:	f000 ff10 	bl	8003c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002de4:	2302      	movs	r3, #2
 8002de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_ADC1_Init+0xb4>)
 8002dee:	f001 fd9d 	bl	800492c <HAL_ADC_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002df8:	f000 ff02 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000030c 	.word	0x2000030c
 8002e08:	40012000 	.word	0x40012000
 8002e0c:	0f000001 	.word	0x0f000001

08002e10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <MX_I2C3_Init+0x54>)
 8002e18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <MX_I2C3_Init+0x58>)
 8002e1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <MX_I2C3_Init+0x50>)
 8002e4e:	f002 fed7 	bl	8005c00 <HAL_I2C_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002e58:	f000 fed2 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200003b4 	.word	0x200003b4
 8002e64:	40005c00 	.word	0x40005c00
 8002e68:	000186a0 	.word	0x000186a0

08002e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <MX_SPI1_Init+0x68>)
 8002e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002eb8:	220a      	movs	r2, #10
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_SPI1_Init+0x64>)
 8002ebe:	f005 fd33 	bl	8008928 <HAL_SPI_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ec8:	f000 fe9a 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000408 	.word	0x20000408
 8002ed4:	40013000 	.word	0x40013000

08002ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b096      	sub	sp, #88	; 0x58
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00d fdc1 	bl	8010a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f16:	4b45      	ldr	r3, [pc, #276]	; (800302c <MX_TIM1_Init+0x154>)
 8002f18:	4a45      	ldr	r2, [pc, #276]	; (8003030 <MX_TIM1_Init+0x158>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500;
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <MX_TIM1_Init+0x154>)
 8002f1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <MX_TIM1_Init+0x154>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 8002f2a:	4b40      	ldr	r3, [pc, #256]	; (800302c <MX_TIM1_Init+0x154>)
 8002f2c:	f640 125f 	movw	r2, #2399	; 0x95f
 8002f30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <MX_TIM1_Init+0x154>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <MX_TIM1_Init+0x154>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <MX_TIM1_Init+0x154>)
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f44:	4839      	ldr	r0, [pc, #228]	; (800302c <MX_TIM1_Init+0x154>)
 8002f46:	f005 fd78 	bl	8008a3a <HAL_TIM_Base_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f50:	f000 fe56 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4832      	ldr	r0, [pc, #200]	; (800302c <MX_TIM1_Init+0x154>)
 8002f62:	f006 f985 	bl	8009270 <HAL_TIM_ConfigClockSource>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f6c:	f000 fe48 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f70:	482e      	ldr	r0, [pc, #184]	; (800302c <MX_TIM1_Init+0x154>)
 8002f72:	f005 fe21 	bl	8008bb8 <HAL_TIM_PWM_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002f7c:	f000 fe40 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4827      	ldr	r0, [pc, #156]	; (800302c <MX_TIM1_Init+0x154>)
 8002f90:	f006 fd6e 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002f9a:	f000 fe31 	bl	8003c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f9e:	2360      	movs	r3, #96	; 0x60
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002faa:	2300      	movs	r3, #0
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	481a      	ldr	r0, [pc, #104]	; (800302c <MX_TIM1_Init+0x154>)
 8002fc4:	f006 f892 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002fce:	f000 fe17 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4814      	ldr	r0, [pc, #80]	; (800302c <MX_TIM1_Init+0x154>)
 8002fdc:	f006 f886 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002fe6:	f000 fe0b 	bl	8003c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4807      	ldr	r0, [pc, #28]	; (800302c <MX_TIM1_Init+0x154>)
 800300e:	f006 fdab 	bl	8009b68 <HAL_TIMEx_ConfigBreakDeadTime>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003018:	f000 fdf2 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800301c:	4803      	ldr	r0, [pc, #12]	; (800302c <MX_TIM1_Init+0x154>)
 800301e:	f000 ffcd 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003022:	bf00      	nop
 8003024:	3758      	adds	r7, #88	; 0x58
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000460 	.word	0x20000460
 8003030:	40010000 	.word	0x40010000

08003034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08e      	sub	sp, #56	; 0x38
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003048:	f107 0320 	add.w	r3, r7, #32
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	615a      	str	r2, [r3, #20]
 8003062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003064:	4b34      	ldr	r3, [pc, #208]	; (8003138 <MX_TIM2_Init+0x104>)
 8003066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800306a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500;
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <MX_TIM2_Init+0x104>)
 800306e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <MX_TIM2_Init+0x104>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2399;
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <MX_TIM2_Init+0x104>)
 800307c:	f640 125f 	movw	r2, #2399	; 0x95f
 8003080:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <MX_TIM2_Init+0x104>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <MX_TIM2_Init+0x104>)
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800308e:	482a      	ldr	r0, [pc, #168]	; (8003138 <MX_TIM2_Init+0x104>)
 8003090:	f005 fcd3 	bl	8008a3a <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800309a:	f000 fdb1 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4823      	ldr	r0, [pc, #140]	; (8003138 <MX_TIM2_Init+0x104>)
 80030ac:	f006 f8e0 	bl	8009270 <HAL_TIM_ConfigClockSource>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80030b6:	f000 fda3 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030ba:	481f      	ldr	r0, [pc, #124]	; (8003138 <MX_TIM2_Init+0x104>)
 80030bc:	f005 fd7c 	bl	8008bb8 <HAL_TIM_PWM_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80030c6:	f000 fd9b 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030d2:	f107 0320 	add.w	r3, r7, #32
 80030d6:	4619      	mov	r1, r3
 80030d8:	4817      	ldr	r0, [pc, #92]	; (8003138 <MX_TIM2_Init+0x104>)
 80030da:	f006 fcc9 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030e4:	f000 fd8c 	bl	8003c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e8:	2360      	movs	r3, #96	; 0x60
 80030ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80030f0:	2302      	movs	r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2208      	movs	r2, #8
 80030fc:	4619      	mov	r1, r3
 80030fe:	480e      	ldr	r0, [pc, #56]	; (8003138 <MX_TIM2_Init+0x104>)
 8003100:	f005 fff4 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800310a:	f000 fd79 	bl	8003c00 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	220c      	movs	r2, #12
 8003116:	4619      	mov	r1, r3
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <MX_TIM2_Init+0x104>)
 800311a:	f005 ffe7 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8003124:	f000 fd6c 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003128:	4803      	ldr	r0, [pc, #12]	; (8003138 <MX_TIM2_Init+0x104>)
 800312a:	f000 ff47 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 800312e:	bf00      	nop
 8003130:	3738      	adds	r7, #56	; 0x38
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200004a8 	.word	0x200004a8

0800313c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003150:	f107 0320 	add.w	r3, r7, #32
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
 8003168:	615a      	str	r2, [r3, #20]
 800316a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800316c:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <MX_TIM3_Init+0x128>)
 800316e:	4a3e      	ldr	r2, [pc, #248]	; (8003268 <MX_TIM3_Init+0x12c>)
 8003170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 8003172:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <MX_TIM3_Init+0x128>)
 8003174:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003178:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317a:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <MX_TIM3_Init+0x128>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 8003180:	4b38      	ldr	r3, [pc, #224]	; (8003264 <MX_TIM3_Init+0x128>)
 8003182:	f640 125f 	movw	r2, #2399	; 0x95f
 8003186:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <MX_TIM3_Init+0x128>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800318e:	4b35      	ldr	r3, [pc, #212]	; (8003264 <MX_TIM3_Init+0x128>)
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003194:	4833      	ldr	r0, [pc, #204]	; (8003264 <MX_TIM3_Init+0x128>)
 8003196:	f005 fc50 	bl	8008a3a <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80031a0:	f000 fd2e 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ae:	4619      	mov	r1, r3
 80031b0:	482c      	ldr	r0, [pc, #176]	; (8003264 <MX_TIM3_Init+0x128>)
 80031b2:	f006 f85d 	bl	8009270 <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80031bc:	f000 fd20 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031c0:	4828      	ldr	r0, [pc, #160]	; (8003264 <MX_TIM3_Init+0x128>)
 80031c2:	f005 fcf9 	bl	8008bb8 <HAL_TIM_PWM_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80031cc:	f000 fd18 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	4619      	mov	r1, r3
 80031de:	4821      	ldr	r0, [pc, #132]	; (8003264 <MX_TIM3_Init+0x128>)
 80031e0:	f006 fc46 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80031ea:	f000 fd09 	bl	8003c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	4619      	mov	r1, r3
 8003204:	4817      	ldr	r0, [pc, #92]	; (8003264 <MX_TIM3_Init+0x128>)
 8003206:	f005 ff71 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003210:	f000 fcf6 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2204      	movs	r2, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4812      	ldr	r0, [pc, #72]	; (8003264 <MX_TIM3_Init+0x128>)
 800321c:	f005 ff66 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003226:	f000 fceb 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2208      	movs	r2, #8
 800322e:	4619      	mov	r1, r3
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <MX_TIM3_Init+0x128>)
 8003232:	f005 ff5b 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800323c:	f000 fce0 	bl	8003c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	220c      	movs	r2, #12
 8003244:	4619      	mov	r1, r3
 8003246:	4807      	ldr	r0, [pc, #28]	; (8003264 <MX_TIM3_Init+0x128>)
 8003248:	f005 ff50 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003252:	f000 fcd5 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003256:	4803      	ldr	r0, [pc, #12]	; (8003264 <MX_TIM3_Init+0x128>)
 8003258:	f000 feb0 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 800325c:	bf00      	nop
 800325e:	3738      	adds	r7, #56	; 0x38
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200004f0 	.word	0x200004f0
 8003268:	40000400 	.word	0x40000400

0800326c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003272:	f107 0308 	add.w	r3, r7, #8
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003280:	463b      	mov	r3, r7
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_TIM4_Init+0x94>)
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <MX_TIM4_Init+0x98>)
 800328c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <MX_TIM4_Init+0x94>)
 8003290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003294:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_TIM4_Init+0x94>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_TIM4_Init+0x94>)
 800329e:	f640 125f 	movw	r2, #2399	; 0x95f
 80032a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <MX_TIM4_Init+0x94>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <MX_TIM4_Init+0x94>)
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032b0:	4813      	ldr	r0, [pc, #76]	; (8003300 <MX_TIM4_Init+0x94>)
 80032b2:	f005 fbc2 	bl	8008a3a <HAL_TIM_Base_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80032bc:	f000 fca0 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <MX_TIM4_Init+0x94>)
 80032ce:	f005 ffcf 	bl	8009270 <HAL_TIM_ConfigClockSource>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80032d8:	f000 fc92 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	4619      	mov	r1, r3
 80032e8:	4805      	ldr	r0, [pc, #20]	; (8003300 <MX_TIM4_Init+0x94>)
 80032ea:	f006 fbc1 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80032f4:	f000 fc84 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000538 	.word	0x20000538
 8003304:	40000800 	.word	0x40000800

08003308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	463b      	mov	r3, r7
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <MX_TIM5_Init+0x94>)
 8003326:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <MX_TIM5_Init+0x98>)
 8003328:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <MX_TIM5_Init+0x94>)
 800332c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003330:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <MX_TIM5_Init+0x94>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 600;
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <MX_TIM5_Init+0x94>)
 800333a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800333e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <MX_TIM5_Init+0x94>)
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <MX_TIM5_Init+0x94>)
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800334c:	4813      	ldr	r0, [pc, #76]	; (800339c <MX_TIM5_Init+0x94>)
 800334e:	f005 fb74 	bl	8008a3a <HAL_TIM_Base_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003358:	f000 fc52 	bl	8003c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4619      	mov	r1, r3
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <MX_TIM5_Init+0x94>)
 800336a:	f005 ff81 	bl	8009270 <HAL_TIM_ConfigClockSource>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003374:	f000 fc44 	bl	8003c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003380:	463b      	mov	r3, r7
 8003382:	4619      	mov	r1, r3
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <MX_TIM5_Init+0x94>)
 8003386:	f006 fb73 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003390:	f000 fc36 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000580 	.word	0x20000580
 80033a0:	40000c00 	.word	0x40000c00

080033a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <MX_UART4_Init+0x50>)
 80033ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033ca:	220c      	movs	r2, #12
 80033cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <MX_UART4_Init+0x4c>)
 80033dc:	f006 fc2a 	bl	8009c34 <HAL_UART_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80033e6:	f000 fc0b 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200005c8 	.word	0x200005c8
 80033f4:	40004c00 	.word	0x40004c00

080033f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <MX_DMA_Init+0x68>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a16      	ldr	r2, [pc, #88]	; (8003460 <MX_DMA_Init+0x68>)
 8003408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <MX_DMA_Init+0x68>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_DMA_Init+0x68>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <MX_DMA_Init+0x68>)
 8003424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <MX_DMA_Init+0x68>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	200d      	movs	r0, #13
 800343c:	f001 fdf1 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003440:	200d      	movs	r0, #13
 8003442:	f001 fe0a 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	2038      	movs	r0, #56	; 0x38
 800344c:	f001 fde9 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003450:	2038      	movs	r0, #56	; 0x38
 8003452:	f001 fe02 	bl	800505a <HAL_NVIC_EnableIRQ>

}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800

08003464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <MX_GPIO_Init+0x154>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a4d      	ldr	r2, [pc, #308]	; (80035b8 <MX_GPIO_Init+0x154>)
 8003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <MX_GPIO_Init+0x154>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <MX_GPIO_Init+0x154>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a46      	ldr	r2, [pc, #280]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a31      	ldr	r2, [pc, #196]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <MX_GPIO_Init+0x154>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Brd_Pin|CS_Flash_Pin, GPIO_PIN_RESET);
 8003506:	2200      	movs	r2, #0
 8003508:	2118      	movs	r1, #24
 800350a:	482c      	ldr	r0, [pc, #176]	; (80035bc <MX_GPIO_Init+0x158>)
 800350c:	f002 fb5e 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Ext_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	2130      	movs	r1, #48	; 0x30
 8003514:	482a      	ldr	r0, [pc, #168]	; (80035c0 <MX_GPIO_Init+0x15c>)
 8003516:	f002 fb59 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 800351a:	2200      	movs	r2, #0
 800351c:	f240 7134 	movw	r1, #1844	; 0x734
 8003520:	4828      	ldr	r0, [pc, #160]	; (80035c4 <MX_GPIO_Init+0x160>)
 8003522:	f002 fb53 	bl	8005bcc <HAL_GPIO_WritePin>
                          |EN_RF1_Pin|CS_RF1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Brd_Pin CS_Flash_Pin */
  GPIO_InitStruct.Pin = LED_Brd_Pin|CS_Flash_Pin;
 8003526:	2318      	movs	r3, #24
 8003528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	481f      	ldr	r0, [pc, #124]	; (80035bc <MX_GPIO_Init+0x158>)
 800353e:	f002 f9a9 	bl	8005894 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Ext_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_Ext_Pin|CS_SD_Pin;
 8003542:	2330      	movs	r3, #48	; 0x30
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4819      	ldr	r0, [pc, #100]	; (80035c0 <MX_GPIO_Init+0x15c>)
 800355a:	f002 f99b 	bl	8005894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_White_Pin CS_RF2_Pin EN_RF2_Pin
                           EN_RF1_Pin CS_RF1_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 800355e:	f240 7334 	movw	r3, #1844	; 0x734
 8003562:	617b      	str	r3, [r7, #20]
                          |EN_RF1_Pin|CS_RF1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003564:	2301      	movs	r3, #1
 8003566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4619      	mov	r1, r3
 8003576:	4813      	ldr	r0, [pc, #76]	; (80035c4 <MX_GPIO_Init+0x160>)
 8003578:	f002 f98c 	bl	8005894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ2_Pin */
  GPIO_InitStruct.Pin = RF_IRQ2_Pin;
 800357c:	2304      	movs	r3, #4
 800357e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ2_GPIO_Port, &GPIO_InitStruct);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	480d      	ldr	r0, [pc, #52]	; (80035c8 <MX_GPIO_Init+0x164>)
 8003592:	f002 f97f 	bl	8005894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ1_Pin */
  GPIO_InitStruct.Pin = RF_IRQ1_Pin;
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800359a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800359e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ1_GPIO_Port, &GPIO_InitStruct);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4619      	mov	r1, r3
 80035aa:	4806      	ldr	r0, [pc, #24]	; (80035c4 <MX_GPIO_Init+0x160>)
 80035ac:	f002 f972 	bl	8005894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020c00 	.word	0x40020c00

080035cc <HAL_UART_RxCpltCallback>:

/*
 * UART
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 426); // enable USART Receive again
 80035d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_UART_RxCpltCallback+0x1c>)
 80035da:	4804      	ldr	r0, [pc, #16]	; (80035ec <HAL_UART_RxCpltCallback+0x20>)
 80035dc:	f006 fb77 	bl	8009cce <HAL_UART_Receive_DMA>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000728 	.word	0x20000728
 80035ec:	200005c8 	.word	0x200005c8

080035f0 <TVCServoEnable>:


uint8_t TVCServoEnable()
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	71fb      	strb	r3, [r7, #7]
	TVCServoEnableFlag = !TVCServoEnableFlag;
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <TVCServoEnable+0x70>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <TVCServoEnable+0x70>)
 800360c:	701a      	strb	r2, [r3, #0]

	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800360e:	2100      	movs	r1, #0
 8003610:	4814      	ldr	r0, [pc, #80]	; (8003664 <TVCServoEnable+0x74>)
 8003612:	f005 fb2b 	bl	8008c6c <HAL_TIM_PWM_Start>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	4413      	add	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003620:	2104      	movs	r1, #4
 8003622:	4810      	ldr	r0, [pc, #64]	; (8003664 <TVCServoEnable+0x74>)
 8003624:	f005 fb22 	bl	8008c6c <HAL_TIM_PWM_Start>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	4413      	add	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003632:	2108      	movs	r1, #8
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <TVCServoEnable+0x74>)
 8003636:	f005 fb19 	bl	8008c6c <HAL_TIM_PWM_Start>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4413      	add	r3, r2
 8003642:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003644:	210c      	movs	r1, #12
 8003646:	4807      	ldr	r0, [pc, #28]	; (8003664 <TVCServoEnable+0x74>)
 8003648:	f005 fb10 	bl	8008c6c <HAL_TIM_PWM_Start>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	4413      	add	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]

	return status;
 8003656:	79fb      	ldrb	r3, [r7, #7]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000671 	.word	0x20000671
 8003664:	200004f0 	.word	0x200004f0

08003668 <TVCServoDisable>:


uint8_t TVCServoDisable()
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
	EDFEnableFlag = !EDFEnableFlag;
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <TVCServoDisable+0x70>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <TVCServoDisable+0x70>)
 8003684:	701a      	strb	r2, [r3, #0]

	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003686:	2100      	movs	r1, #0
 8003688:	4814      	ldr	r0, [pc, #80]	; (80036dc <TVCServoDisable+0x74>)
 800368a:	f005 fbb7 	bl	8008dfc <HAL_TIM_PWM_Stop>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4413      	add	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003698:	2104      	movs	r1, #4
 800369a:	4810      	ldr	r0, [pc, #64]	; (80036dc <TVCServoDisable+0x74>)
 800369c:	f005 fbae 	bl	8008dfc <HAL_TIM_PWM_Stop>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	4413      	add	r3, r2
 80036a8:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80036aa:	2108      	movs	r1, #8
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <TVCServoDisable+0x74>)
 80036ae:	f005 fba5 	bl	8008dfc <HAL_TIM_PWM_Stop>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	4413      	add	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036bc:	210c      	movs	r1, #12
 80036be:	4807      	ldr	r0, [pc, #28]	; (80036dc <TVCServoDisable+0x74>)
 80036c0:	f005 fb9c 	bl	8008dfc <HAL_TIM_PWM_Stop>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	4413      	add	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]

	return status;
 80036ce:	79fb      	ldrb	r3, [r7, #7]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000672 	.word	0x20000672
 80036dc:	200004f0 	.word	0x200004f0

080036e0 <EDFEnable>:


uint8_t EDFEnable()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]

	status += HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80036ea:	210c      	movs	r1, #12
 80036ec:	4806      	ldr	r0, [pc, #24]	; (8003708 <EDFEnable+0x28>)
 80036ee:	f005 fabd 	bl	8008c6c <HAL_TIM_PWM_Start>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4413      	add	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]

	return status;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200004a8 	.word	0x200004a8

0800370c <EDFDisable>:


uint8_t EDFDisable()
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	71fb      	strb	r3, [r7, #7]

	status += HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8003716:	210c      	movs	r1, #12
 8003718:	4806      	ldr	r0, [pc, #24]	; (8003734 <EDFDisable+0x28>)
 800371a:	f005 fb6f 	bl	8008dfc <HAL_TIM_PWM_Stop>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4413      	add	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]

	return status;
 8003728:	79fb      	ldrb	r3, [r7, #7]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200004a8 	.word	0x200004a8

08003738 <StatusLED>:


void StatusLED(uint8_t Status)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
	// OFF: R=2400, G=0, B=0
	// ON (bright): 500
	// ON (medium): 1000

	switch(Status){
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	2b07      	cmp	r3, #7
 8003746:	d875      	bhi.n	8003834 <StatusLED+0xfc>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <StatusLED+0x18>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003771 	.word	0x08003771
 8003754:	08003789 	.word	0x08003789
 8003758:	080037a1 	.word	0x080037a1
 800375c:	080037b9 	.word	0x080037b9
 8003760:	080037d1 	.word	0x080037d1
 8003764:	080037e7 	.word	0x080037e7
 8003768:	08003801 	.word	0x08003801
 800376c:	08003819 	.word	0x08003819
	case 0: // STARTUP (red)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <StatusLED+0x124>)
 8003772:	2200      	movs	r2, #0
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <StatusLED+0x124>)
 8003778:	2200      	movs	r2, #0
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 2400; // LED-RGB (red)
 800377c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003780:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003786:	e063      	b.n	8003850 <StatusLED+0x118>

	case 1: // IDLE - no RF connection (blue)
		TIM1->CCR2 = 1000; // LED-RGB (blue)
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <StatusLED+0x124>)
 800378a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <StatusLED+0x124>)
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 8003796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800379a:	2200      	movs	r2, #0
 800379c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800379e:	e057      	b.n	8003850 <StatusLED+0x118>

	case 2: // IDLE - RF connected (green)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <StatusLED+0x124>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <StatusLED+0x124>)
 80037a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 80037ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037b2:	2200      	movs	r2, #0
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80037b6:	e04b      	b.n	8003850 <StatusLED+0x118>

	case 3: // ERROR (red + brd led on)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <StatusLED+0x124>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <StatusLED+0x124>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 1000; // LED-RGB (red)
 80037c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80037ce:	e03f      	b.n	8003850 <StatusLED+0x118>

	case 4: // ARM (all - pink)
		TIM1->CCR2 = 100; // LED-RGB (blue)
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <StatusLED+0x124>)
 80037d2:	2264      	movs	r2, #100	; 0x64
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 100; // LED-RGB (green)
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <StatusLED+0x124>)
 80037d8:	2264      	movs	r2, #100	; 0x64
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 100; // LED-RGB (red)
 80037dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037e0:	2264      	movs	r2, #100	; 0x64
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80037e4:	e034      	b.n	8003850 <StatusLED+0x118>

	case 5: // FLY ()
		TIM1->CCR2 = 500; // LED-RGB (blue)
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <StatusLED+0x124>)
 80037e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <StatusLED+0x124>)
 80037f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 80037f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037fa:	2200      	movs	r2, #0
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80037fe:	e027      	b.n	8003850 <StatusLED+0x118>

	case 6: // FLY OVER (green)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <StatusLED+0x124>)
 8003802:	2200      	movs	r2, #0
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <StatusLED+0x124>)
 8003808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800380c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 800380e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003816:	e01b      	b.n	8003850 <StatusLED+0x118>

	case 7: // FLY OVER (green)
		TIM1->CCR2 = RGB_Blue; // LED-RGB (blue)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <StatusLED+0x128>)
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <StatusLED+0x124>)
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = RGB_Green; // LED-RGB (green)
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <StatusLED+0x12c>)
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <StatusLED+0x124>)
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = RGB_Red; // LED-RGB (red)
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <StatusLED+0x130>)
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003832:	e00d      	b.n	8003850 <StatusLED+0x118>

	default: // DEFAULT STATE
		TIM1->CCR2 = 500; // LED-RGB (blue)
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <StatusLED+0x124>)
 8003836:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <StatusLED+0x124>)
 800383e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 500; // LED-RGB (red)
 8003844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003848:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800384e:	bf00      	nop
	}
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40010000 	.word	0x40010000
 8003860:	20000004 	.word	0x20000004
 8003864:	20000002 	.word	0x20000002
 8003868:	20000716 	.word	0x20000716
 800386c:	00000000 	.word	0x00000000

08003870 <ADC_Read_Main_Battery>:

/*
 * Reading voltage of main board battery
 */
uint16_t ADC_Read_Main_Battery()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
	uint16_t adcVal = ADC_BAT_Val[1];
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <ADC_Read_Main_Battery+0x88>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	81fb      	strh	r3, [r7, #14]

	float temp = ((float)adcVal * 3.3) / 4095;
 800387c:	89fb      	ldrh	r3, [r7, #14]
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	ee17 0a90 	vmov	r0, s15
 800388a:	f7fc fe5d 	bl	8000548 <__aeabi_f2d>
 800388e:	a316      	add	r3, pc, #88	; (adr r3, 80038e8 <ADC_Read_Main_Battery+0x78>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f7fc feb0 	bl	80005f8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	a313      	add	r3, pc, #76	; (adr r3, 80038f0 <ADC_Read_Main_Battery+0x80>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f7fc ffd1 	bl	800084c <__aeabi_ddiv>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	f7fd f979 	bl	8000ba8 <__aeabi_d2f>
 80038b6:	4603      	mov	r3, r0
 80038b8:	60bb      	str	r3, [r7, #8]

	float voltage = (((100000+10000)/10000) * temp);
 80038ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80038be:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80038c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c6:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint16_t)(voltage*100);
 80038ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ce:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80038fc <ADC_Read_Main_Battery+0x8c>
 80038d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038da:	ee17 3a90 	vmov	r3, s15
 80038de:	b29b      	uxth	r3, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	66666666 	.word	0x66666666
 80038ec:	400a6666 	.word	0x400a6666
 80038f0:	00000000 	.word	0x00000000
 80038f4:	40affe00 	.word	0x40affe00
 80038f8:	20000720 	.word	0x20000720
 80038fc:	42c80000 	.word	0x42c80000

08003900 <ADC_Read_EDF_Battery>:

/*
 * Reading voltage of EDF battery
 */
uint16_t ADC_Read_EDF_Battery()
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
	uint16_t adcVal = ADC_BAT_Val[0];
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <ADC_Read_EDF_Battery+0x88>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	81fb      	strh	r3, [r7, #14]

	float temp = ((float)adcVal * 3.3) / 4095;
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	ee17 0a90 	vmov	r0, s15
 800391a:	f7fc fe15 	bl	8000548 <__aeabi_f2d>
 800391e:	a316      	add	r3, pc, #88	; (adr r3, 8003978 <ADC_Read_EDF_Battery+0x78>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fe68 	bl	80005f8 <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	a313      	add	r3, pc, #76	; (adr r3, 8003980 <ADC_Read_EDF_Battery+0x80>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc ff89 	bl	800084c <__aeabi_ddiv>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f7fd f931 	bl	8000ba8 <__aeabi_d2f>
 8003946:	4603      	mov	r3, r0
 8003948:	60bb      	str	r3, [r7, #8]

	float voltage = (((100000+10000)/10000) * temp);
 800394a:	edd7 7a02 	vldr	s15, [r7, #8]
 800394e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003956:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint16_t)(voltage*100);
 800395a:	edd7 7a01 	vldr	s15, [r7, #4]
 800395e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800398c <ADC_Read_EDF_Battery+0x8c>
 8003962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800396a:	ee17 3a90 	vmov	r3, s15
 800396e:	b29b      	uxth	r3, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	66666666 	.word	0x66666666
 800397c:	400a6666 	.word	0x400a6666
 8003980:	00000000 	.word	0x00000000
 8003984:	40affe00 	.word	0x40affe00
 8003988:	20000720 	.word	0x20000720
 800398c:	42c80000 	.word	0x42c80000

08003990 <HAL_TIM_PeriodElapsedCallback>:
 * 	- send over RF
 * 	- save to flash
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

	/* TIMER 4 - 50Hz */

	if (htim->Instance == TIM4){
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a8a      	ldr	r2, [pc, #552]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	f040 808b 	bne.w	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>

		Reg50HzLoopEN = 1;
 80039a4:	4b89      	ldr	r3, [pc, #548]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
		// Idle - single blink
		if (DroneStatusLocal != STATUS_STARTUP && DroneStatusLocal != STATUS_ERROR && DroneStatusLocal != STATUS_FLY && GYRO_CALIB == 0)
 80039aa:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d033      	beq.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x8a>
 80039b2:	4b87      	ldr	r3, [pc, #540]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d02f      	beq.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x8a>
 80039ba:	4b85      	ldr	r3, [pc, #532]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d02b      	beq.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			if (LED_blink_cnt_ON < 50) // LED OFF
 80039c2:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b31      	cmp	r3, #49	; 0x31
 80039c8:	d806      	bhi.n	80039d8 <HAL_TIM_PeriodElapsedCallback+0x48>
			{
				LED_blink_cnt_ON++;
 80039ca:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b80      	ldr	r3, [pc, #512]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e020      	b.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x8a>
			}
			else
			{
				if (LED_blink_cnt_OFF < 10) // LED ON for short time
 80039d8:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d810      	bhi.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x72>
				{
					if (LED_blink_cnt_OFF == 0)
 80039e0:	4b7d      	ldr	r3, [pc, #500]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_TIM_PeriodElapsedCallback+0x64>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 80039e8:	2201      	movs	r2, #1
 80039ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039ee:	487b      	ldr	r0, [pc, #492]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80039f0:	f002 f8ec 	bl	8005bcc <HAL_GPIO_WritePin>
					}
					LED_blink_cnt_OFF++;
 80039f4:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b76      	ldr	r3, [pc, #472]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e00b      	b.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x8a>
				}
				else
				{
					HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a08:	4874      	ldr	r0, [pc, #464]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003a0a:	f002 f8df 	bl	8005bcc <HAL_GPIO_WritePin>
					LED_blink_cnt_OFF = 0;
 8003a0e:	4b72      	ldr	r3, [pc, #456]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
					LED_blink_cnt_ON = 0;
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		// Fly - dual blink
		if (DroneStatusLocal != STATUS_STARTUP && DroneStatusLocal != STATUS_ERROR && DroneStatusLocal == STATUS_FLY && GYRO_CALIB == 0)
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04b      	beq.n	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>
 8003a22:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d047      	beq.n	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>
 8003a2a:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d143      	bne.n	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>
		{
			if (LED_blink_cnt_ON < 50) // LED OFF
 8003a32:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b31      	cmp	r3, #49	; 0x31
 8003a38:	d806      	bhi.n	8003a48 <HAL_TIM_PeriodElapsedCallback+0xb8>
			{
				LED_blink_cnt_ON++;
 8003a3a:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b64      	ldr	r3, [pc, #400]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e038      	b.n	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>
			}
			else
			{
				if (LED_blink_cnt_OFF < 10) // LED ON for short time
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d828      	bhi.n	8003aa2 <HAL_TIM_PeriodElapsedCallback+0x112>
				{
					if (LED_blink_cnt_OFF <3)
 8003a50:	4b61      	ldr	r3, [pc, #388]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d805      	bhi.n	8003a64 <HAL_TIM_PeriodElapsedCallback+0xd4>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a5e:	485f      	ldr	r0, [pc, #380]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003a60:	f002 f8b4 	bl	8005bcc <HAL_GPIO_WritePin>
					}

					if (LED_blink_cnt_OFF >=3 && LED_blink_cnt_OFF <7)
 8003a64:	4b5c      	ldr	r3, [pc, #368]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d909      	bls.n	8003a80 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d805      	bhi.n	8003a80 <HAL_TIM_PeriodElapsedCallback+0xf0>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a7a:	4858      	ldr	r0, [pc, #352]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003a7c:	f002 f8a6 	bl	8005bcc <HAL_GPIO_WritePin>
					}

					if (LED_blink_cnt_OFF >=7)
 8003a80:	4b55      	ldr	r3, [pc, #340]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d905      	bls.n	8003a94 <HAL_TIM_PeriodElapsedCallback+0x104>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a8e:	4853      	ldr	r0, [pc, #332]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003a90:	f002 f89c 	bl	8005bcc <HAL_GPIO_WritePin>
					}

					LED_blink_cnt_OFF++;
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e00b      	b.n	8003aba <HAL_TIM_PeriodElapsedCallback+0x12a>
				}
				else
				{
					HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aa8:	484c      	ldr	r0, [pc, #304]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003aaa:	f002 f88f 	bl	8005bcc <HAL_GPIO_WritePin>
					LED_blink_cnt_OFF = 0;
 8003aae:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
					LED_blink_cnt_ON = 0;
 8003ab4:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIMER 5 - 200Hz */

	if (htim->Instance == TIM5)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a48      	ldr	r2, [pc, #288]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d17d      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x230>
	{
		Reg200HzLoopEN = 1;
 8003ac4:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]

		/* RGB Cycling */
		// Red
		if (RGB_RedMax == 0)
 8003aca:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_TIM_PeriodElapsedCallback+0x15e>
		{
			RGB_Red += 1;
 8003ad2:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b44      	ldr	r3, [pc, #272]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003adc:	801a      	strh	r2, [r3, #0]
			if (RGB_Red == 1000) RGB_RedMax = 1;
 8003ade:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae6:	d102      	bne.n	8003aee <HAL_TIM_PeriodElapsedCallback+0x15e>
 8003ae8:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_RedMax == 1)
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIM_PeriodElapsedCallback+0x180>
		{
			RGB_Red -= 1;
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003b00:	801a      	strh	r2, [r3, #0]
			if (RGB_Red == 0) RGB_RedMax = 0;
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_TIM_PeriodElapsedCallback+0x180>
 8003b0a:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
		}

		// Green
		if (RGB_GreenMax == 0 || (RGB_Green == 300 && RGB_GreenMax == 0 ))
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_TIM_PeriodElapsedCallback+0x19a>
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b20:	d111      	bne.n	8003b46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10d      	bne.n	8003b46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		{
			RGB_Green += 1;
 8003b2a:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b34:	801a      	strh	r2, [r3, #0]
			if (RGB_Green == 900) RGB_GreenMax = 1;
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003b3e:	d102      	bne.n	8003b46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_GreenMax == 1)
 8003b46:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10c      	bne.n	8003b68 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		{
			RGB_Green -= 1;
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b58:	801a      	strh	r2, [r3, #0]
			if (RGB_Green == 0) RGB_GreenMax = 0;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8003b62:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	801a      	strh	r2, [r3, #0]
		}

		// Blue
		if (RGB_BlueMax == 0 || (RGB_Blue == 600 && RGB_BlueMax == 0 ))
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8003b70:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003b78:	d111      	bne.n	8003b9e <HAL_TIM_PeriodElapsedCallback+0x20e>
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10d      	bne.n	8003b9e <HAL_TIM_PeriodElapsedCallback+0x20e>
		{
			RGB_Blue += 1;
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003b8c:	801a      	strh	r2, [r3, #0]
			if (RGB_Blue == 900) RGB_BlueMax = 1;
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003b96:	d102      	bne.n	8003b9e <HAL_TIM_PeriodElapsedCallback+0x20e>
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_BlueMax == 1)
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x230>
		{
			RGB_Blue -= 1;
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003bb0:	801a      	strh	r2, [r3, #0]
			if (RGB_Blue == 0) RGB_BlueMax = 0;
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x230>
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	200008d2 	.word	0x200008d2
 8003bd0:	2000066c 	.word	0x2000066c
 8003bd4:	2000066f 	.word	0x2000066f
 8003bd8:	20000670 	.word	0x20000670
 8003bdc:	40020400 	.word	0x40020400
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	200008d3 	.word	0x200008d3
 8003be8:	20000718 	.word	0x20000718
 8003bec:	20000716 	.word	0x20000716
 8003bf0:	2000071a 	.word	0x2000071a
 8003bf4:	20000002 	.word	0x20000002
 8003bf8:	2000071c 	.word	0x2000071c
 8003bfc:	20000004 	.word	0x20000004

08003c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
}
 8003c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <Error_Handler+0x8>
	...

08003c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c20:	6453      	str	r3, [r2, #68]	; 0x44
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_MspInit+0x4c>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <HAL_ADC_MspInit+0xdc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d157      	bne.n	8003d2e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_ADC_MspInit+0xe0>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = EDF_BAT_Pin|BRD_BAT_Pin;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	481d      	ldr	r0, [pc, #116]	; (8003d40 <HAL_ADC_MspInit+0xe4>)
 8003cca:	f001 fde3 	bl	8005894 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_ADC_MspInit+0xec>)
 8003cd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce0:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d12:	480c      	ldr	r0, [pc, #48]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d14:	f001 f9bc 	bl	8005090 <HAL_DMA_Init>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003d1e:	f7ff ff6f 	bl	8003c00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <HAL_ADC_MspInit+0xe8>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d2e:	bf00      	nop
 8003d30:	3728      	adds	r7, #40	; 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40012000 	.word	0x40012000
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020000 	.word	0x40020000
 8003d44:	20000354 	.word	0x20000354
 8003d48:	40026410 	.word	0x40026410

08003d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_I2C_MspInit+0xc4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d14b      	bne.n	8003e06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dac:	2312      	movs	r3, #18
 8003dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db4:	2303      	movs	r3, #3
 8003db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003db8:	2304      	movs	r3, #4
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4815      	ldr	r0, [pc, #84]	; (8003e18 <HAL_I2C_MspInit+0xcc>)
 8003dc4:	f001 fd66 	bl	8005894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dce:	2312      	movs	r3, #18
 8003dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <HAL_I2C_MspInit+0xd0>)
 8003de6:	f001 fd55 	bl	8005894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_I2C_MspInit+0xc8>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	; 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40005c00 	.word	0x40005c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020000 	.word	0x40020000

08003e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_SPI_MspInit+0x84>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12b      	bne.n	8003e9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_SPI_MspInit+0x88>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e7a:	23e0      	movs	r3, #224	; 0xe0
 8003e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e86:	2303      	movs	r3, #3
 8003e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 0314 	add.w	r3, r7, #20
 8003e92:	4619      	mov	r1, r3
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <HAL_SPI_MspInit+0x8c>)
 8003e96:	f001 fcfd 	bl	8005894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e9a:	bf00      	nop
 8003e9c:	3728      	adds	r7, #40	; 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40013000 	.word	0x40013000
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40020000 	.word	0x40020000

08003eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_TIM_Base_MspInit+0xf8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a38      	ldr	r2, [pc, #224]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003ede:	e05e      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]
}
 8003f06:	e04a      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <HAL_TIM_Base_MspInit+0x100>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a24      	ldr	r2, [pc, #144]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	e036      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_Base_MspInit+0x104>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d116      	bne.n	8003f68 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2101      	movs	r1, #1
 8003f5a:	201e      	movs	r0, #30
 8003f5c:	f001 f861 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f60:	201e      	movs	r0, #30
 8003f62:	f001 f87a 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8003f66:	e01a      	b.n	8003f9e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <HAL_TIM_Base_MspInit+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d115      	bne.n	8003f9e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_TIM_Base_MspInit+0xfc>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	2032      	movs	r0, #50	; 0x32
 8003f94:	f001 f845 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f98:	2032      	movs	r0, #50	; 0x32
 8003f9a:	f001 f85e 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00

08003fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a55      	ldr	r2, [pc, #340]	; (8004130 <HAL_TIM_MspPostInit+0x174>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d11f      	bne.n	800401e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH2_RGB_G_Pin|TIM1_CH3_RGB_R_Pin;
 8003ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004010:	f107 031c 	add.w	r3, r7, #28
 8004014:	4619      	mov	r1, r3
 8004016:	4848      	ldr	r0, [pc, #288]	; (8004138 <HAL_TIM_MspPostInit+0x17c>)
 8004018:	f001 fc3c 	bl	8005894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800401c:	e083      	b.n	8004126 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d13d      	bne.n	80040a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4a40      	ldr	r2, [pc, #256]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6313      	str	r3, [r2, #48]	; 0x30
 8004038:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a39      	ldr	r2, [pc, #228]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	6313      	str	r3, [r2, #48]	; 0x30
 8004054:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_RGB_B_Pin;
 8004060:	2304      	movs	r3, #4
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004070:	2301      	movs	r3, #1
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_RGB_B_GPIO_Port, &GPIO_InitStruct);
 8004074:	f107 031c 	add.w	r3, r7, #28
 8004078:	4619      	mov	r1, r3
 800407a:	482f      	ldr	r0, [pc, #188]	; (8004138 <HAL_TIM_MspPostInit+0x17c>)
 800407c:	f001 fc0a 	bl	8005894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH4_EDF_Pin;
 8004080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH4_EDF_GPIO_Port, &GPIO_InitStruct);
 8004096:	f107 031c 	add.w	r3, r7, #28
 800409a:	4619      	mov	r1, r3
 800409c:	4827      	ldr	r0, [pc, #156]	; (800413c <HAL_TIM_MspPostInit+0x180>)
 800409e:	f001 fbf9 	bl	8005894 <HAL_GPIO_Init>
}
 80040a2:	e040      	b.n	8004126 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <HAL_TIM_MspPostInit+0x184>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d13b      	bne.n	8004126 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6313      	str	r3, [r2, #48]	; 0x30
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_TIM_MspPostInit+0x178>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH3_Y__Pin|TIM3_CH4_Y__Pin;
 80040e6:	2303      	movs	r3, #3
 80040e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040f6:	2302      	movs	r3, #2
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040fa:	f107 031c 	add.w	r3, r7, #28
 80040fe:	4619      	mov	r1, r3
 8004100:	480e      	ldr	r0, [pc, #56]	; (800413c <HAL_TIM_MspPostInit+0x180>)
 8004102:	f001 fbc7 	bl	8005894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH1_X__Pin|TIM3_CH2_X__Pin;
 8004106:	23c0      	movs	r3, #192	; 0xc0
 8004108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410a:	2302      	movs	r3, #2
 800410c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004112:	2300      	movs	r3, #0
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004116:	2302      	movs	r3, #2
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800411a:	f107 031c 	add.w	r3, r7, #28
 800411e:	4619      	mov	r1, r3
 8004120:	4808      	ldr	r0, [pc, #32]	; (8004144 <HAL_TIM_MspPostInit+0x188>)
 8004122:	f001 fbb7 	bl	8005894 <HAL_GPIO_Init>
}
 8004126:	bf00      	nop
 8004128:	3730      	adds	r7, #48	; 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40023800 	.word	0x40023800
 8004138:	40020000 	.word	0x40020000
 800413c:	40020400 	.word	0x40020400
 8004140:	40000400 	.word	0x40000400
 8004144:	40020800 	.word	0x40020800

08004148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a34      	ldr	r2, [pc, #208]	; (8004238 <HAL_UART_MspInit+0xf0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d162      	bne.n	8004230 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	4b33      	ldr	r3, [pc, #204]	; (800423c <HAL_UART_MspInit+0xf4>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a32      	ldr	r2, [pc, #200]	; (800423c <HAL_UART_MspInit+0xf4>)
 8004174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_UART_MspInit+0xf4>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_UART_MspInit+0xf4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a2b      	ldr	r2, [pc, #172]	; (800423c <HAL_UART_MspInit+0xf4>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_UART_MspInit+0xf4>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_GPS_Pin|UART4_RX_GPS_Pin;
 80041a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b0:	2303      	movs	r3, #3
 80041b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80041b4:	2308      	movs	r3, #8
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4619      	mov	r1, r3
 80041be:	4820      	ldr	r0, [pc, #128]	; (8004240 <HAL_UART_MspInit+0xf8>)
 80041c0:	f001 fb68 	bl	8005894 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041c6:	4a20      	ldr	r2, [pc, #128]	; (8004248 <HAL_UART_MspInit+0x100>)
 80041c8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041d0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041de:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041e4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_UART_MspInit+0xfc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_UART_MspInit+0xfc>)
 8004200:	2200      	movs	r2, #0
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004204:	480f      	ldr	r0, [pc, #60]	; (8004244 <HAL_UART_MspInit+0xfc>)
 8004206:	f000 ff43 	bl	8005090 <HAL_DMA_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004210:	f7ff fcf6 	bl	8003c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_UART_MspInit+0xfc>)
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_UART_MspInit+0xfc>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2102      	movs	r1, #2
 8004224:	2034      	movs	r0, #52	; 0x34
 8004226:	f000 fefc 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800422a:	2034      	movs	r0, #52	; 0x34
 800422c:	f000 ff15 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40004c00 	.word	0x40004c00
 800423c:	40023800 	.word	0x40023800
 8004240:	40020800 	.word	0x40020800
 8004244:	2000060c 	.word	0x2000060c
 8004248:	40026040 	.word	0x40026040

0800424c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <NMI_Handler+0x4>

08004252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <HardFault_Handler+0x4>

08004258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <MemManage_Handler+0x4>

0800425e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004262:	e7fe      	b.n	8004262 <BusFault_Handler+0x4>

08004264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004268:	e7fe      	b.n	8004268 <UsageFault_Handler+0x4>

0800426a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004298:	f000 f992 	bl	80045c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}

080042a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <DMA1_Stream2_IRQHandler+0x10>)
 80042a6:	f001 f88b 	bl	80053c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000060c 	.word	0x2000060c

080042b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <TIM4_IRQHandler+0x10>)
 80042ba:	f004 fe0f 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000538 	.word	0x20000538

080042c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <TIM5_IRQHandler+0x10>)
 80042ce:	f004 fe05 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000580 	.word	0x20000580

080042dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <UART4_IRQHandler+0x10>)
 80042e2:	f005 fd25 	bl	8009d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200005c8 	.word	0x200005c8

080042f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <DMA2_Stream0_IRQHandler+0x10>)
 80042f6:	f001 f863 	bl	80053c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000354 	.word	0x20000354

08004304 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <OTG_FS_IRQHandler+0x10>)
 800430a:	f002 fd88 	bl	8006e1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20001dd0 	.word	0x20001dd0

08004318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
	return 1;
 800431c:	2301      	movs	r3, #1
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <_kill>:

int _kill(int pid, int sig)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004332:	f00c fb87 	bl	8010a44 <__errno>
 8004336:	4603      	mov	r3, r0
 8004338:	2216      	movs	r2, #22
 800433a:	601a      	str	r2, [r3, #0]
	return -1;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_exit>:

void _exit (int status)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004350:	f04f 31ff 	mov.w	r1, #4294967295
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ffe7 	bl	8004328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800435a:	e7fe      	b.n	800435a <_exit+0x12>

0800435c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e00a      	b.n	8004384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800436e:	f3af 8000 	nop.w
 8004372:	4601      	mov	r1, r0
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	60ba      	str	r2, [r7, #8]
 800437a:	b2ca      	uxtb	r2, r1
 800437c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3301      	adds	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	dbf0      	blt.n	800436e <_read+0x12>
	}

return len;
 800438c:	687b      	ldr	r3, [r7, #4]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e009      	b.n	80043bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	60ba      	str	r2, [r7, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	dbf1      	blt.n	80043a8 <_write+0x12>
	}
	return len;
 80043c4:	687b      	ldr	r3, [r7, #4]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_close>:

int _close(int file)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	return -1;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f6:	605a      	str	r2, [r3, #4]
	return 0;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_isatty>:

int _isatty(int file)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	return 1;
 800440e:	2301      	movs	r3, #1
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
	return 0;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <_sbrk+0x5c>)
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <_sbrk+0x60>)
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <_sbrk+0x64>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <_sbrk+0x64>)
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <_sbrk+0x68>)
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <_sbrk+0x64>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d207      	bcs.n	8004478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004468:	f00c faec 	bl	8010a44 <__errno>
 800446c:	4603      	mov	r3, r0
 800446e:	220c      	movs	r2, #12
 8004470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	e009      	b.n	800448c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <_sbrk+0x64>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <_sbrk+0x64>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <_sbrk+0x64>)
 8004488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20020000 	.word	0x20020000
 8004498:	00000400 	.word	0x00000400
 800449c:	200008d4 	.word	0x200008d4
 80044a0:	20002510 	.word	0x20002510

080044a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <SystemInit+0x20>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <SystemInit+0x20>)
 80044b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044cc:	480d      	ldr	r0, [pc, #52]	; (8004504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ce:	490e      	ldr	r1, [pc, #56]	; (8004508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044d0:	4a0e      	ldr	r2, [pc, #56]	; (800450c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d4:	e002      	b.n	80044dc <LoopCopyDataInit>

080044d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044da:	3304      	adds	r3, #4

080044dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e0:	d3f9      	bcc.n	80044d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044e4:	4c0b      	ldr	r4, [pc, #44]	; (8004514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e8:	e001      	b.n	80044ee <LoopFillZerobss>

080044ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ec:	3204      	adds	r2, #4

080044ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f0:	d3fb      	bcc.n	80044ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044f2:	f7ff ffd7 	bl	80044a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f6:	f00c faab 	bl	8010a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044fa:	f7fd ff1f 	bl	800233c <main>
  bx  lr    
 80044fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004508:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 800450c:	08013b34 	.word	0x08013b34
  ldr r2, =_sbss
 8004510:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8004514:	2000250c 	.word	0x2000250c

08004518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004518:	e7fe      	b.n	8004518 <ADC_IRQHandler>
	...

0800451c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0d      	ldr	r2, [pc, #52]	; (800455c <HAL_Init+0x40>)
 8004526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_Init+0x40>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <HAL_Init+0x40>)
 8004532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a07      	ldr	r2, [pc, #28]	; (800455c <HAL_Init+0x40>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004544:	2003      	movs	r0, #3
 8004546:	f000 fd61 	bl	800500c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800454a:	2003      	movs	r0, #3
 800454c:	f000 f808 	bl	8004560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004550:	f7ff fb5c 	bl	8003c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023c00 	.word	0x40023c00

08004560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_InitTick+0x54>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_InitTick+0x58>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004576:	fbb3 f3f1 	udiv	r3, r3, r1
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fd79 	bl	8005076 <HAL_SYSTICK_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e00e      	b.n	80045ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0f      	cmp	r3, #15
 8004592:	d80a      	bhi.n	80045aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004594:	2200      	movs	r2, #0
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	f000 fd41 	bl	8005022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045a0:	4a06      	ldr	r2, [pc, #24]	; (80045bc <HAL_InitTick+0x5c>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000008 	.word	0x20000008
 80045b8:	20000010 	.word	0x20000010
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_IncTick+0x20>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_IncTick+0x24>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <HAL_IncTick+0x24>)
 80045d2:	6013      	str	r3, [r2, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000010 	.word	0x20000010
 80045e4:	200008d8 	.word	0x200008d8

080045e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return uwTick;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_GetTick+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	200008d8 	.word	0x200008d8

08004600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7ff ffee 	bl	80045e8 <HAL_GetTick>
 800460c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d005      	beq.n	8004626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_Delay+0x44>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004626:	bf00      	nop
 8004628:	f7ff ffde 	bl	80045e8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d8f7      	bhi.n	8004628 <HAL_Delay+0x28>
  {
  }
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000010 	.word	0x20000010

08004648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e033      	b.n	80046c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff faf8 	bl	8003c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800468e:	f023 0302 	bic.w	r3, r3, #2
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa68 	bl	8004b70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
 80046b6:	e001      	b.n	80046bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Start_DMA+0x1e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0e9      	b.n	80048c2 <HAL_ADC_Start_DMA+0x1f2>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d018      	beq.n	8004736 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004714:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_ADC_Start_DMA+0x1fc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6d      	ldr	r2, [pc, #436]	; (80048d0 <HAL_ADC_Start_DMA+0x200>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0c9a      	lsrs	r2, r3, #18
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004728:	e002      	b.n	8004730 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3b01      	subs	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f9      	bne.n	800472a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004744:	d107      	bne.n	8004756 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004754:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 80a1 	bne.w	80048a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d106      	bne.n	80047b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f023 0206 	bic.w	r2, r3, #6
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
 80047b2:	e002      	b.n	80047ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_ADC_Start_DMA+0x204>)
 80047c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4a43      	ldr	r2, [pc, #268]	; (80048d8 <HAL_ADC_Start_DMA+0x208>)
 80047cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4a42      	ldr	r2, [pc, #264]	; (80048dc <HAL_ADC_Start_DMA+0x20c>)
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4a41      	ldr	r2, [pc, #260]	; (80048e0 <HAL_ADC_Start_DMA+0x210>)
 80047dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004806:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	334c      	adds	r3, #76	; 0x4c
 8004812:	4619      	mov	r1, r3
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f000 fce8 	bl	80051ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2b00      	cmp	r3, #0
 8004826:	d12a      	bne.n	800487e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a2d      	ldr	r2, [pc, #180]	; (80048e4 <HAL_ADC_Start_DMA+0x214>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d015      	beq.n	800485e <HAL_ADC_Start_DMA+0x18e>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <HAL_ADC_Start_DMA+0x218>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d105      	bne.n	8004848 <HAL_ADC_Start_DMA+0x178>
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_ADC_Start_DMA+0x204>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a27      	ldr	r2, [pc, #156]	; (80048ec <HAL_ADC_Start_DMA+0x21c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d136      	bne.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
 8004852:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_ADC_Start_DMA+0x204>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	d130      	bne.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d129      	bne.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	e020      	b.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_ADC_Start_DMA+0x214>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d11b      	bne.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d114      	bne.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048a4:	609a      	str	r2, [r3, #8]
 80048a6:	e00b      	b.n	80048c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f043 0201 	orr.w	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000008 	.word	0x20000008
 80048d0:	431bde83 	.word	0x431bde83
 80048d4:	40012300 	.word	0x40012300
 80048d8:	08004d69 	.word	0x08004d69
 80048dc:	08004e23 	.word	0x08004e23
 80048e0:	08004e3f 	.word	0x08004e3f
 80048e4:	40012000 	.word	0x40012000
 80048e8:	40012100 	.word	0x40012100
 80048ec:	40012200 	.word	0x40012200

080048f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e105      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x228>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b09      	cmp	r3, #9
 8004956:	d925      	bls.n	80049a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	3b1e      	subs	r3, #30
 800496e:	2207      	movs	r2, #7
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43da      	mvns	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	400a      	ands	r2, r1
 800497c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68d9      	ldr	r1, [r3, #12]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	4618      	mov	r0, r3
 8004990:	4603      	mov	r3, r0
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4403      	add	r3, r0
 8004996:	3b1e      	subs	r3, #30
 8004998:	409a      	lsls	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	e022      	b.n	80049ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	2207      	movs	r2, #7
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43da      	mvns	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	400a      	ands	r2, r1
 80049c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6919      	ldr	r1, [r3, #16]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4618      	mov	r0, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4403      	add	r3, r0
 80049e0:	409a      	lsls	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d824      	bhi.n	8004a3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	3b05      	subs	r3, #5
 8004a04:	221f      	movs	r2, #31
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4618      	mov	r0, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3b05      	subs	r3, #5
 8004a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
 8004a3a:	e04c      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d824      	bhi.n	8004a8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	3b23      	subs	r3, #35	; 0x23
 8004a56:	221f      	movs	r2, #31
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	400a      	ands	r2, r1
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4618      	mov	r0, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3b23      	subs	r3, #35	; 0x23
 8004a80:	fa00 f203 	lsl.w	r2, r0, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8c:	e023      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3b41      	subs	r3, #65	; 0x41
 8004aa0:	221f      	movs	r2, #31
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	400a      	ands	r2, r1
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4618      	mov	r0, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3b41      	subs	r3, #65	; 0x41
 8004aca:	fa00 f203 	lsl.w	r2, r0, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_ADC_ConfigChannel+0x234>)
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <HAL_ADC_ConfigChannel+0x238>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d109      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x1cc>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b12      	cmp	r3, #18
 8004aea:	d105      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_ADC_ConfigChannel+0x238>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d123      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x21e>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d003      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0x1e6>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b11      	cmp	r3, #17
 8004b10:	d11b      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d111      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_ADC_ConfigChannel+0x23c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <HAL_ADC_ConfigChannel+0x240>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	0c9a      	lsrs	r2, r3, #18
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b3c:	e002      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f9      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40012300 	.word	0x40012300
 8004b64:	40012000 	.word	0x40012000
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	431bde83 	.word	0x431bde83

08004b70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <ADC_Init+0x1f0>)
 8004b7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <ADC_Init+0x1f4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	e00f      	b.n	8004c6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0202 	bic.w	r2, r2, #2
 8004c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6899      	ldr	r1, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	005a      	lsls	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004caa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	035a      	lsls	r2, r3, #13
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e007      	b.n	8004ce4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	051a      	lsls	r2, r3, #20
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d26:	025a      	lsls	r2, r3, #9
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	029a      	lsls	r2, r3, #10
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40012300 	.word	0x40012300
 8004d64:	0f000001 	.word	0x0f000001

08004d68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d13c      	bne.n	8004dfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d12b      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d127      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d119      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0220 	bic.w	r2, r2, #32
 8004dce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff fd7b 	bl	80048f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dfa:	e00e      	b.n	8004e1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fd85 	bl	8004918 <HAL_ADC_ErrorCallback>
}
 8004e0e:	e004      	b.n	8004e1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fd67 	bl	8004904 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff fd5a 	bl	8004918 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <__NVIC_GetPriorityGrouping+0x18>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	f003 0307 	and.w	r3, r3, #7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db0b      	blt.n	8004efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <__NVIC_EnableIRQ+0x38>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e100 	.word	0xe000e100

08004f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	db0a      	blt.n	8004f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	490c      	ldr	r1, [pc, #48]	; (8004f58 <__NVIC_SetPriority+0x4c>)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	0112      	lsls	r2, r2, #4
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f34:	e00a      	b.n	8004f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <__NVIC_SetPriority+0x50>)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3b04      	subs	r3, #4
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	440b      	add	r3, r1
 8004f4a:	761a      	strb	r2, [r3, #24]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000e100 	.word	0xe000e100
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf28      	it	cs
 8004f7e:	2304      	movcs	r3, #4
 8004f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3304      	adds	r3, #4
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d902      	bls.n	8004f90 <NVIC_EncodePriority+0x30>
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3b03      	subs	r3, #3
 8004f8e:	e000      	b.n	8004f92 <NVIC_EncodePriority+0x32>
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43d9      	mvns	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	4313      	orrs	r3, r2
         );
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	; 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd8:	d301      	bcc.n	8004fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00f      	b.n	8004ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <SysTick_Config+0x40>)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	f7ff ff8e 	bl	8004f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <SysTick_Config+0x40>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <SysTick_Config+0x40>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e010 	.word	0xe000e010

0800500c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff29 	bl	8004e6c <__NVIC_SetPriorityGrouping>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005034:	f7ff ff3e 	bl	8004eb4 <__NVIC_GetPriorityGrouping>
 8005038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff8e 	bl	8004f60 <NVIC_EncodePriority>
 8005044:	4602      	mov	r2, r0
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff5d 	bl	8004f0c <__NVIC_SetPriority>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff31 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffa2 	bl	8004fc8 <SysTick_Config>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800509c:	f7ff faa4 	bl	80045e8 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e099      	b.n	80051e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050cc:	e00f      	b.n	80050ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ce:	f7ff fa8b 	bl	80045e8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d908      	bls.n	80050ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2203      	movs	r2, #3
 80050e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e078      	b.n	80051e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e8      	bne.n	80050ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_DMA_Init+0x158>)
 8005108:	4013      	ands	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800511a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b04      	cmp	r3, #4
 8005146:	d107      	bne.n	8005158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	4313      	orrs	r3, r2
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b04      	cmp	r3, #4
 8005180:	d117      	bne.n	80051b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fb01 	bl	800579c <DMA_CheckFifoParam>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051ae:	2301      	movs	r3, #1
 80051b0:	e016      	b.n	80051e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fab8 	bl	8005730 <DMA_CalcBaseAndBitshift>
 80051c0:	4603      	mov	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	223f      	movs	r2, #63	; 0x3f
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	f010803f 	.word	0xf010803f

080051ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_DMA_Start_IT+0x26>
 800520e:	2302      	movs	r3, #2
 8005210:	e040      	b.n	8005294 <HAL_DMA_Start_IT+0xa8>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	d12f      	bne.n	8005286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa4a 	bl	80056d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	223f      	movs	r2, #63	; 0x3f
 8005246:	409a      	lsls	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0216 	orr.w	r2, r2, #22
 800525a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e005      	b.n	8005292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052aa:	f7ff f99d 	bl	80045e8 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d008      	beq.n	80052ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e052      	b.n	8005374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0216 	bic.w	r2, r2, #22
 80052dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <HAL_DMA_Abort+0x62>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0208 	bic.w	r2, r2, #8
 800530c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800531e:	e013      	b.n	8005348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005320:	f7ff f962 	bl	80045e8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b05      	cmp	r3, #5
 800532c:	d90c      	bls.n	8005348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e015      	b.n	8005374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e4      	bne.n	8005320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	223f      	movs	r2, #63	; 0x3f
 800535c:	409a      	lsls	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d004      	beq.n	800539a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e00c      	b.n	80053b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2205      	movs	r2, #5
 800539e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053cc:	4b8e      	ldr	r3, [pc, #568]	; (8005608 <HAL_DMA_IRQHandler+0x248>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a8e      	ldr	r2, [pc, #568]	; (800560c <HAL_DMA_IRQHandler+0x24c>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	0a9b      	lsrs	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	2208      	movs	r2, #8
 80053ec:	409a      	lsls	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01a      	beq.n	800542c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0204 	bic.w	r2, r2, #4
 8005412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	2208      	movs	r2, #8
 800541a:	409a      	lsls	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	f043 0201 	orr.w	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	2201      	movs	r2, #1
 8005450:	409a      	lsls	r2, r3
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f043 0202 	orr.w	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	2204      	movs	r2, #4
 8005468:	409a      	lsls	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d012      	beq.n	8005498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	2204      	movs	r2, #4
 8005486:	409a      	lsls	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	2210      	movs	r2, #16
 800549e:	409a      	lsls	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d043      	beq.n	8005530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03c      	beq.n	8005530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ba:	2210      	movs	r2, #16
 80054bc:	409a      	lsls	r2, r3
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d018      	beq.n	8005502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d024      	beq.n	8005530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
 80054ee:	e01f      	b.n	8005530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
 8005500:	e016      	b.n	8005530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0208 	bic.w	r2, r2, #8
 800551e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	2220      	movs	r2, #32
 8005536:	409a      	lsls	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 808f 	beq.w	8005660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8087 	beq.w	8005660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	2220      	movs	r2, #32
 8005558:	409a      	lsls	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b05      	cmp	r3, #5
 8005568:	d136      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0216 	bic.w	r2, r2, #22
 8005578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_DMA_IRQHandler+0x1da>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0208 	bic.w	r2, r2, #8
 80055a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ae:	223f      	movs	r2, #63	; 0x3f
 80055b0:	409a      	lsls	r2, r3
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d07e      	beq.n	80056cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
        }
        return;
 80055d6:	e079      	b.n	80056cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01d      	beq.n	8005622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d031      	beq.n	8005660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	e02c      	b.n	8005660 <HAL_DMA_IRQHandler+0x2a0>
 8005606:	bf00      	nop
 8005608:	20000008 	.word	0x20000008
 800560c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d023      	beq.n	8005660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e01e      	b.n	8005660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0210 	bic.w	r2, r2, #16
 800563e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	d032      	beq.n	80056ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d022      	beq.n	80056ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2205      	movs	r2, #5
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3301      	adds	r3, #1
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	d307      	bcc.n	80056a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f2      	bne.n	800568c <HAL_DMA_IRQHandler+0x2cc>
 80056a6:	e000      	b.n	80056aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
 80056ca:	e000      	b.n	80056ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80056cc:	bf00      	nop
    }
  }
}
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d108      	bne.n	8005714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005712:	e007      	b.n	8005724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	3b10      	subs	r3, #16
 8005740:	4a14      	ldr	r2, [pc, #80]	; (8005794 <DMA_CalcBaseAndBitshift+0x64>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800574a:	4a13      	ldr	r2, [pc, #76]	; (8005798 <DMA_CalcBaseAndBitshift+0x68>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d909      	bls.n	8005772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	659a      	str	r2, [r3, #88]	; 0x58
 8005770:	e007      	b.n	8005782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	aaaaaaab 	.word	0xaaaaaaab
 8005798:	08013674 	.word	0x08013674

0800579c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11f      	bne.n	80057f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d856      	bhi.n	800586a <DMA_CheckFifoParam+0xce>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <DMA_CheckFifoParam+0x28>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e7 	.word	0x080057e7
 80057cc:	080057d5 	.word	0x080057d5
 80057d0:	0800586b 	.word	0x0800586b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d046      	beq.n	800586e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e4:	e043      	b.n	800586e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ee:	d140      	bne.n	8005872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f4:	e03d      	b.n	8005872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d121      	bne.n	8005844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d837      	bhi.n	8005876 <DMA_CheckFifoParam+0xda>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <DMA_CheckFifoParam+0x70>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005823 	.word	0x08005823
 8005814:	0800581d 	.word	0x0800581d
 8005818:	08005835 	.word	0x08005835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e030      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d025      	beq.n	800587a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005832:	e022      	b.n	800587a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800583c:	d11f      	bne.n	800587e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005842:	e01c      	b.n	800587e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d903      	bls.n	8005852 <DMA_CheckFifoParam+0xb6>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d003      	beq.n	8005858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005850:	e018      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
      break;
 8005856:	e015      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
      break;
 8005868:	e00b      	b.n	8005882 <DMA_CheckFifoParam+0xe6>
      break;
 800586a:	bf00      	nop
 800586c:	e00a      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;
 800586e:	bf00      	nop
 8005870:	e008      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;
 8005872:	bf00      	nop
 8005874:	e006      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;
 8005876:	bf00      	nop
 8005878:	e004      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;   
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
    }
  } 
  
  return status; 
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e16b      	b.n	8005b88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058b0:	2201      	movs	r2, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	f040 815a 	bne.w	8005b82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d005      	beq.n	80058e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d130      	bne.n	8005948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	2203      	movs	r2, #3
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800591c:	2201      	movs	r2, #1
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 0201 	and.w	r2, r3, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b03      	cmp	r3, #3
 8005952:	d017      	beq.n	8005984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2203      	movs	r2, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4313      	orrs	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d123      	bne.n	80059d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	08da      	lsrs	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3208      	adds	r2, #8
 8005998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	220f      	movs	r2, #15
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	08da      	lsrs	r2, r3, #3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3208      	adds	r2, #8
 80059d2:	69b9      	ldr	r1, [r7, #24]
 80059d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 0203 	and.w	r2, r3, #3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80b4 	beq.w	8005b82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	4b60      	ldr	r3, [pc, #384]	; (8005ba0 <HAL_GPIO_Init+0x30c>)
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	4a5f      	ldr	r2, [pc, #380]	; (8005ba0 <HAL_GPIO_Init+0x30c>)
 8005a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a28:	6453      	str	r3, [r2, #68]	; 0x44
 8005a2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ba0 <HAL_GPIO_Init+0x30c>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a36:	4a5b      	ldr	r2, [pc, #364]	; (8005ba4 <HAL_GPIO_Init+0x310>)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a52      	ldr	r2, [pc, #328]	; (8005ba8 <HAL_GPIO_Init+0x314>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02b      	beq.n	8005aba <HAL_GPIO_Init+0x226>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a51      	ldr	r2, [pc, #324]	; (8005bac <HAL_GPIO_Init+0x318>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d025      	beq.n	8005ab6 <HAL_GPIO_Init+0x222>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a50      	ldr	r2, [pc, #320]	; (8005bb0 <HAL_GPIO_Init+0x31c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01f      	beq.n	8005ab2 <HAL_GPIO_Init+0x21e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <HAL_GPIO_Init+0x320>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d019      	beq.n	8005aae <HAL_GPIO_Init+0x21a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a4e      	ldr	r2, [pc, #312]	; (8005bb8 <HAL_GPIO_Init+0x324>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_GPIO_Init+0x216>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a4d      	ldr	r2, [pc, #308]	; (8005bbc <HAL_GPIO_Init+0x328>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00d      	beq.n	8005aa6 <HAL_GPIO_Init+0x212>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a4c      	ldr	r2, [pc, #304]	; (8005bc0 <HAL_GPIO_Init+0x32c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <HAL_GPIO_Init+0x20e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a4b      	ldr	r2, [pc, #300]	; (8005bc4 <HAL_GPIO_Init+0x330>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_GPIO_Init+0x20a>
 8005a9a:	2307      	movs	r3, #7
 8005a9c:	e00e      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	e00c      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005aa2:	2306      	movs	r3, #6
 8005aa4:	e00a      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005aa6:	2305      	movs	r3, #5
 8005aa8:	e008      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005aaa:	2304      	movs	r3, #4
 8005aac:	e006      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e004      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_GPIO_Init+0x228>
 8005aba:	2300      	movs	r3, #0
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	f002 0203 	and.w	r2, r2, #3
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4093      	lsls	r3, r2
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005acc:	4935      	ldr	r1, [pc, #212]	; (8005ba4 <HAL_GPIO_Init+0x310>)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005afe:	4a32      	ldr	r2, [pc, #200]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b04:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b58:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b7c:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <HAL_GPIO_Init+0x334>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	f67f ae90 	bls.w	80058b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40020000 	.word	0x40020000
 8005bac:	40020400 	.word	0x40020400
 8005bb0:	40020800 	.word	0x40020800
 8005bb4:	40020c00 	.word	0x40020c00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40021400 	.word	0x40021400
 8005bc0:	40021800 	.word	0x40021800
 8005bc4:	40021c00 	.word	0x40021c00
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be8:	e003      	b.n	8005bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	619a      	str	r2, [r3, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e12b      	b.n	8005e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fe f890 	bl	8003d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c64:	f002 fe38 	bl	80088d8 <HAL_RCC_GetPCLK1Freq>
 8005c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4a81      	ldr	r2, [pc, #516]	; (8005e74 <HAL_I2C_Init+0x274>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d807      	bhi.n	8005c84 <HAL_I2C_Init+0x84>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a80      	ldr	r2, [pc, #512]	; (8005e78 <HAL_I2C_Init+0x278>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bf94      	ite	ls
 8005c7c:	2301      	movls	r3, #1
 8005c7e:	2300      	movhi	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e006      	b.n	8005c92 <HAL_I2C_Init+0x92>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a7d      	ldr	r2, [pc, #500]	; (8005e7c <HAL_I2C_Init+0x27c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bf94      	ite	ls
 8005c8c:	2301      	movls	r3, #1
 8005c8e:	2300      	movhi	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0e7      	b.n	8005e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a78      	ldr	r2, [pc, #480]	; (8005e80 <HAL_I2C_Init+0x280>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	0c9b      	lsrs	r3, r3, #18
 8005ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a6a      	ldr	r2, [pc, #424]	; (8005e74 <HAL_I2C_Init+0x274>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d802      	bhi.n	8005cd4 <HAL_I2C_Init+0xd4>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	e009      	b.n	8005ce8 <HAL_I2C_Init+0xe8>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	4a69      	ldr	r2, [pc, #420]	; (8005e84 <HAL_I2C_Init+0x284>)
 8005ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce4:	099b      	lsrs	r3, r3, #6
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	495c      	ldr	r1, [pc, #368]	; (8005e74 <HAL_I2C_Init+0x274>)
 8005d04:	428b      	cmp	r3, r1
 8005d06:	d819      	bhi.n	8005d3c <HAL_I2C_Init+0x13c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1e59      	subs	r1, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d1c:	400b      	ands	r3, r1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_I2C_Init+0x138>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1e59      	subs	r1, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d30:	3301      	adds	r3, #1
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	e051      	b.n	8005ddc <HAL_I2C_Init+0x1dc>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	e04f      	b.n	8005ddc <HAL_I2C_Init+0x1dc>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d111      	bne.n	8005d68 <HAL_I2C_Init+0x168>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1e58      	subs	r0, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	440b      	add	r3, r1
 8005d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d56:	3301      	adds	r3, #1
 8005d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e012      	b.n	8005d8e <HAL_I2C_Init+0x18e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e58      	subs	r0, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	0099      	lsls	r1, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Init+0x196>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e022      	b.n	8005ddc <HAL_I2C_Init+0x1dc>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10e      	bne.n	8005dbc <HAL_I2C_Init+0x1bc>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e58      	subs	r0, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	440b      	add	r3, r1
 8005dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db0:	3301      	adds	r3, #1
 8005db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	e00f      	b.n	8005ddc <HAL_I2C_Init+0x1dc>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1e58      	subs	r0, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	0099      	lsls	r1, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	6809      	ldr	r1, [r1, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6911      	ldr	r1, [r2, #16]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68d2      	ldr	r2, [r2, #12]
 8005e16:	4311      	orrs	r1, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	000186a0 	.word	0x000186a0
 8005e78:	001e847f 	.word	0x001e847f
 8005e7c:	003d08ff 	.word	0x003d08ff
 8005e80:	431bde83 	.word	0x431bde83
 8005e84:	10624dd3 	.word	0x10624dd3

08005e88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	4608      	mov	r0, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	817b      	strh	r3, [r7, #10]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	813b      	strh	r3, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ea2:	f7fe fba1 	bl	80045e8 <HAL_GetTick>
 8005ea6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	f040 80d9 	bne.w	8006068 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	2319      	movs	r3, #25
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	496d      	ldr	r1, [pc, #436]	; (8006074 <HAL_I2C_Mem_Write+0x1ec>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fc7f 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e0cc      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_I2C_Mem_Write+0x56>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0c5      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d007      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2221      	movs	r2, #33	; 0x21
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2240      	movs	r2, #64	; 0x40
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_I2C_Mem_Write+0x1f0>)
 8005f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f46:	88f8      	ldrh	r0, [r7, #6]
 8005f48:	893a      	ldrh	r2, [r7, #8]
 8005f4a:	8979      	ldrh	r1, [r7, #10]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	4603      	mov	r3, r0
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fab6 	bl	80064c8 <I2C_RequestMemoryWrite>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d052      	beq.n	8006008 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e081      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fd00 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d107      	bne.n	8005f8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e06b      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d11b      	bne.n	8006008 <HAL_I2C_Mem_Write+0x180>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d017      	beq.n	8006008 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	781a      	ldrb	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1aa      	bne.n	8005f66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fcec 	bl	80069f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	2b04      	cmp	r3, #4
 8006026:	d107      	bne.n	8006038 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e016      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	00100002 	.word	0x00100002
 8006078:	ffff0000 	.word	0xffff0000

0800607c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	4603      	mov	r3, r0
 800608c:	817b      	strh	r3, [r7, #10]
 800608e:	460b      	mov	r3, r1
 8006090:	813b      	strh	r3, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006096:	f7fe faa7 	bl	80045e8 <HAL_GetTick>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	f040 8208 	bne.w	80064ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	2319      	movs	r3, #25
 80060b0:	2201      	movs	r2, #1
 80060b2:	497b      	ldr	r1, [pc, #492]	; (80062a0 <HAL_I2C_Mem_Read+0x224>)
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fb85 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	e1fb      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_I2C_Mem_Read+0x56>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e1f4      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d007      	beq.n	80060f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2222      	movs	r2, #34	; 0x22
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a5b      	ldr	r2, [pc, #364]	; (80062a4 <HAL_I2C_Mem_Read+0x228>)
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613a:	88f8      	ldrh	r0, [r7, #6]
 800613c:	893a      	ldrh	r2, [r7, #8]
 800613e:	8979      	ldrh	r1, [r7, #10]
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4603      	mov	r3, r0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fa52 	bl	80065f4 <I2C_RequestMemoryRead>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e1b0      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d113      	bne.n	800618a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006162:	2300      	movs	r3, #0
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e184      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618e:	2b01      	cmp	r3, #1
 8006190:	d11b      	bne.n	80061ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e164      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d11b      	bne.n	800620a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	e144      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006220:	e138      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	2b03      	cmp	r3, #3
 8006228:	f200 80f1 	bhi.w	800640e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	2b01      	cmp	r3, #1
 8006232:	d123      	bne.n	800627c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fc1b 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e139      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a
 800627a:	e10b      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	2b02      	cmp	r3, #2
 8006282:	d14e      	bne.n	8006322 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	2200      	movs	r2, #0
 800628c:	4906      	ldr	r1, [pc, #24]	; (80062a8 <HAL_I2C_Mem_Read+0x22c>)
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa98 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e10e      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
 800629e:	bf00      	nop
 80062a0:	00100002 	.word	0x00100002
 80062a4:	ffff0000 	.word	0xffff0000
 80062a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006320:	e0b8      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	2200      	movs	r2, #0
 800632a:	4966      	ldr	r1, [pc, #408]	; (80064c4 <HAL_I2C_Mem_Read+0x448>)
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fa49 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0bf      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2200      	movs	r2, #0
 8006386:	494f      	ldr	r1, [pc, #316]	; (80064c4 <HAL_I2C_Mem_Read+0x448>)
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fa1b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e091      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800640c:	e042      	b.n	8006494 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fb2e 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e04c      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	d118      	bne.n	8006494 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	f47f aec2 	bne.w	8006222 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	00010004 	.word	0x00010004

080064c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f960 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006518:	d103      	bne.n	8006522 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e05f      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	492d      	ldr	r1, [pc, #180]	; (80065f0 <I2C_RequestMemoryWrite+0x128>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f998 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04c      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006564:	6a39      	ldr	r1, [r7, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa02 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b04      	cmp	r3, #4
 8006578:	d107      	bne.n	800658a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e02b      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e021      	b.n	80065e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f9dc 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e005      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065da:	893b      	ldrh	r3, [r7, #8]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	00010002 	.word	0x00010002

080065f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800661c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2200      	movs	r2, #0
 8006636:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f8c2 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006654:	d103      	bne.n	800665e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e0aa      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006662:	897b      	ldrh	r3, [r7, #10]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	4952      	ldr	r1, [pc, #328]	; (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8fa 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e097      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800669e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a0:	6a39      	ldr	r1, [r7, #32]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f964 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d107      	bne.n	80066c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e076      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d105      	bne.n	80066dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	e021      	b.n	8006720 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ec:	6a39      	ldr	r1, [r7, #32]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f93e 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d107      	bne.n	8006712 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e050      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	6a39      	ldr	r1, [r7, #32]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f923 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	2b04      	cmp	r3, #4
 8006736:	d107      	bne.n	8006748 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006746:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e035      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800675a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2200      	movs	r2, #0
 8006764:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f82b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d103      	bne.n	800678c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e013      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	4906      	ldr	r1, [pc, #24]	; (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f863 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	00010002 	.word	0x00010002

080067c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d4:	e025      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d021      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fd ff03 	bl	80045e8 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e023      	b.n	800686a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10d      	bne.n	8006848 <I2C_WaitOnFlagUntilTimeout+0x84>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	43da      	mvns	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	e00c      	b.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	43da      	mvns	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4013      	ands	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	429a      	cmp	r2, r3
 8006866:	d0b6      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006880:	e051      	b.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d123      	bne.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e046      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d021      	beq.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fd fe81 	bl	80045e8 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d116      	bne.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e020      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10c      	bne.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	43da      	mvns	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e00b      	b.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	43da      	mvns	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d18d      	bne.n	8006882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800697c:	e02d      	b.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f8ce 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e02d      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d021      	beq.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fd fe27 	bl	80045e8 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d116      	bne.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d1ca      	bne.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069fe:	e02d      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f88d 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e02d      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d021      	beq.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a18:	f7fd fde6 	bl	80045e8 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d116      	bne.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e007      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d1ca      	bne.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a80:	e042      	b.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d119      	bne.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e029      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac4:	f7fd fd90 	bl	80045e8 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d116      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e007      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d1b5      	bne.n	8006a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b36:	d11b      	bne.n	8006b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b80:	b08f      	sub	sp, #60	; 0x3c
 8006b82:	af0a      	add	r7, sp, #40	; 0x28
 8006b84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e10f      	b.n	8006db0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f008 fb56 	bl	800f25c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f004 fa47 	bl	800b062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	687e      	ldr	r6, [r7, #4]
 8006bdc:	466d      	mov	r5, sp
 8006bde:	f106 0410 	add.w	r4, r6, #16
 8006be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bee:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bf2:	1d33      	adds	r3, r6, #4
 8006bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f004 f91e 	bl	800ae38 <USB_CoreInit>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0d0      	b.n	8006db0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f004 fa35 	bl	800b084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	e04a      	b.n	8006cb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	333d      	adds	r3, #61	; 0x3d
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	333c      	adds	r3, #60	; 0x3c
 8006c44:	7bfa      	ldrb	r2, [r7, #15]
 8006c46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c48:	7bfa      	ldrb	r2, [r7, #15]
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	b298      	uxth	r0, r3
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	3344      	adds	r3, #68	; 0x44
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3340      	adds	r3, #64	; 0x40
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3348      	adds	r3, #72	; 0x48
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	334c      	adds	r3, #76	; 0x4c
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	3354      	adds	r3, #84	; 0x54
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	7bfa      	ldrb	r2, [r7, #15]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d3af      	bcc.n	8006c20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]
 8006cc4:	e044      	b.n	8006d50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006cee:	7bfa      	ldrb	r2, [r7, #15]
 8006cf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d34:	7bfa      	ldrb	r2, [r7, #15]
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d3b5      	bcc.n	8006cc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	687e      	ldr	r6, [r7, #4]
 8006d62:	466d      	mov	r5, sp
 8006d64:	f106 0410 	add.w	r4, r6, #16
 8006d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d78:	1d33      	adds	r3, r6, #4
 8006d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d7c:	6838      	ldr	r0, [r7, #0]
 8006d7e:	f004 f9cd 	bl	800b11c <USB_DevInit>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e00d      	b.n	8006db0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f005 fb1c 	bl	800c3e6 <USB_DevDisconnect>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_PCD_Start+0x1c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e020      	b.n	8006e16 <HAL_PCD_Start+0x5e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d109      	bne.n	8006df8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d005      	beq.n	8006df8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f004 f91f 	bl	800b040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f005 facc 	bl	800c3a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e1e:	b590      	push	{r4, r7, lr}
 8006e20:	b08d      	sub	sp, #52	; 0x34
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f005 fb8a 	bl	800c54e <USB_GetMode>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 848a 	bne.w	8007756 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f005 faee 	bl	800c428 <USB_ReadInterrupts>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 8480 	beq.w	8007754 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f005 fadb 	bl	800c428 <USB_ReadInterrupts>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d107      	bne.n	8006e8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f002 0202 	and.w	r2, r2, #2
 8006e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f005 fac9 	bl	800c428 <USB_ReadInterrupts>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d161      	bne.n	8006f64 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0210 	bic.w	r2, r2, #16
 8006eae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	3304      	adds	r3, #4
 8006ece:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	0c5b      	lsrs	r3, r3, #17
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d124      	bne.n	8006f26 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d035      	beq.n	8006f54 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6a38      	ldr	r0, [r7, #32]
 8006efc:	f005 f900 	bl	800c100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f0c:	441a      	add	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f1e:	441a      	add	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	621a      	str	r2, [r3, #32]
 8006f24:	e016      	b.n	8006f54 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	0c5b      	lsrs	r3, r3, #17
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	2b06      	cmp	r3, #6
 8006f30:	d110      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f38:	2208      	movs	r2, #8
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6a38      	ldr	r0, [r7, #32]
 8006f3e:	f005 f8df 	bl	800c100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4e:	441a      	add	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0210 	orr.w	r2, r2, #16
 8006f62:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f005 fa5d 	bl	800c428 <USB_ReadInterrupts>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f78:	f040 80a7 	bne.w	80070ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f005 fa62 	bl	800c44e <USB_ReadDevAllOutEpInterrupt>
 8006f8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006f8c:	e099      	b.n	80070c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 808e 	beq.w	80070b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f005 fa86 	bl	800c4b6 <USB_ReadDevOutEPInterrupt>
 8006faa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00c      	beq.n	8006fd0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fec2 	bl	8007d54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2308      	movs	r3, #8
 8006fea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 ff98 	bl	8007f24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d008      	beq.n	8007010 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	2310      	movs	r3, #16
 800700e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d030      	beq.n	800707c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d109      	bne.n	800703a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007038:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800703a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4413      	add	r3, r2
 800704c:	3304      	adds	r3, #4
 800704e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d108      	bne.n	800706a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2200      	movs	r2, #0
 800705c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f008 f9ff 	bl	800f468 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	2302      	movs	r3, #2
 800707a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	2320      	movs	r3, #32
 8007096:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	461a      	mov	r2, r3
 80070b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	3301      	adds	r3, #1
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f af62 	bne.w	8006f8e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f005 f9aa 	bl	800c428 <USB_ReadInterrupts>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070de:	f040 80db 	bne.w	8007298 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f005 f9cb 	bl	800c482 <USB_ReadDevAllInEpInterrupt>
 80070ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80070f2:	e0cd      	b.n	8007290 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80c2 	beq.w	8007284 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f005 f9f1 	bl	800c4f2 <USB_ReadDevInEPInterrupt>
 8007110:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d057      	beq.n	80071cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	2201      	movs	r2, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	43db      	mvns	r3, r3
 8007136:	69f9      	ldr	r1, [r7, #28]
 8007138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713c:	4013      	ands	r3, r2
 800713e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	461a      	mov	r2, r3
 800714e:	2301      	movs	r3, #1
 8007150:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d132      	bne.n	80071c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715e:	4613      	mov	r3, r2
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	334c      	adds	r3, #76	; 0x4c
 800716a:	6819      	ldr	r1, [r3, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4403      	add	r3, r0
 800717a:	3348      	adds	r3, #72	; 0x48
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4419      	add	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4403      	add	r3, r0
 800718e:	334c      	adds	r3, #76	; 0x4c
 8007190:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d113      	bne.n	80071c0 <HAL_PCD_IRQHandler+0x3a2>
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	3354      	adds	r3, #84	; 0x54
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d108      	bne.n	80071c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071b8:	461a      	mov	r2, r3
 80071ba:	2101      	movs	r1, #1
 80071bc:	f005 f9f8 	bl	800c5b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f008 f8c9 	bl	800f35e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	461a      	mov	r2, r3
 80071e4:	2308      	movs	r3, #8
 80071e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	461a      	mov	r2, r3
 8007200:	2310      	movs	r3, #16
 8007202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	461a      	mov	r2, r3
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d023      	beq.n	8007272 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800722a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800722c:	6a38      	ldr	r0, [r7, #32]
 800722e:	f004 f8d9 	bl	800b3e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	3338      	adds	r3, #56	; 0x38
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	3304      	adds	r3, #4
 8007244:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	78db      	ldrb	r3, [r3, #3]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d108      	bne.n	8007260 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f008 f916 	bl	800f48c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	461a      	mov	r2, r3
 800726e:	2302      	movs	r3, #2
 8007270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800727c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fcdb 	bl	8007c3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	3301      	adds	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af2e 	bne.w	80070f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f005 f8c3 	bl	800c428 <USB_ReadInterrupts>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ac:	d122      	bne.n	80072f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d108      	bne.n	80072de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fec2 	bl	8008060 <HAL_PCDEx_LPM_Callback>
 80072dc:	e002      	b.n	80072e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f008 f8b4 	bl	800f44c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695a      	ldr	r2, [r3, #20]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80072f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f005 f895 	bl	800c428 <USB_ReadInterrupts>
 80072fe:	4603      	mov	r3, r0
 8007300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d112      	bne.n	8007330 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f008 f870 	bl	800f400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800732e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f005 f877 	bl	800c428 <USB_ReadInterrupts>
 800733a:	4603      	mov	r3, r0
 800733c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007344:	f040 80b7 	bne.w	80074b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007356:	f023 0301 	bic.w	r3, r3, #1
 800735a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2110      	movs	r1, #16
 8007362:	4618      	mov	r0, r3
 8007364:	f004 f83e 	bl	800b3e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007368:	2300      	movs	r3, #0
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736c:	e046      	b.n	80073fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737a:	461a      	mov	r2, r3
 800737c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007380:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	461a      	mov	r2, r3
 80073b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	3301      	adds	r3, #1
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007402:	429a      	cmp	r2, r3
 8007404:	d3b3      	bcc.n	800736e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007414:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007418:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007432:	f043 030b 	orr.w	r3, r3, #11
 8007436:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007448:	f043 030b 	orr.w	r3, r3, #11
 800744c:	6453      	str	r3, [r2, #68]	; 0x44
 800744e:	e015      	b.n	800747c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007462:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007466:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f043 030b 	orr.w	r3, r3, #11
 800747a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800748a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800748e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6818      	ldr	r0, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074a0:	461a      	mov	r2, r3
 80074a2:	f005 f885 	bl	800c5b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80074b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f004 ffb4 	bl	800c428 <USB_ReadInterrupts>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ca:	d124      	bne.n	8007516 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f005 f84a 	bl	800c56a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f003 ffff 	bl	800b4de <USB_GetDevSpeed>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681c      	ldr	r4, [r3, #0]
 80074ec:	f001 f9e8 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 80074f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	4620      	mov	r0, r4
 80074fc:	f003 fcfe 	bl	800aefc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f007 ff54 	bl	800f3ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695a      	ldr	r2, [r3, #20]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007514:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f004 ff84 	bl	800c428 <USB_ReadInterrupts>
 8007520:	4603      	mov	r3, r0
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b08      	cmp	r3, #8
 8007528:	d10a      	bne.n	8007540 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f007 ff31 	bl	800f392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f002 0208 	and.w	r2, r2, #8
 800753e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f004 ff6f 	bl	800c428 <USB_ReadInterrupts>
 800754a:	4603      	mov	r3, r0
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d122      	bne.n	800759a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007560:	2301      	movs	r3, #1
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
 8007564:	e014      	b.n	8007590 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb27 	bl	8007bd8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	3301      	adds	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007596:	429a      	cmp	r2, r3
 8007598:	d3e5      	bcc.n	8007566 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f004 ff42 	bl	800c428 <USB_ReadInterrupts>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ae:	d13b      	bne.n	8007628 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075b0:	2301      	movs	r3, #1
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
 80075b4:	e02b      	b.n	800760e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ca:	4613      	mov	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	3340      	adds	r3, #64	; 0x40
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d115      	bne.n	8007608 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80075dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da12      	bge.n	8007608 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e6:	4613      	mov	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	333f      	adds	r3, #63	; 0x3f
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fae8 	bl	8007bd8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	429a      	cmp	r2, r3
 8007616:	d3ce      	bcc.n	80075b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f004 fefb 	bl	800c428 <USB_ReadInterrupts>
 8007632:	4603      	mov	r3, r0
 8007634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800763c:	d155      	bne.n	80076ea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800763e:	2301      	movs	r3, #1
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
 8007642:	e045      	b.n	80076d0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d12e      	bne.n	80076ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800766c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800766e:	2b00      	cmp	r3, #0
 8007670:	da2b      	bge.n	80076ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800767e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007682:	429a      	cmp	r2, r3
 8007684:	d121      	bne.n	80076ca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	4613      	mov	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007698:	2201      	movs	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076c6:	6053      	str	r3, [r2, #4]
            break;
 80076c8:	e007      	b.n	80076da <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	3301      	adds	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d3b4      	bcc.n	8007644 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80076e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f004 fe9a 	bl	800c428 <USB_ReadInterrupts>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d10a      	bne.n	8007716 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f007 fed5 	bl	800f4b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f004 fe84 	bl	800c428 <USB_ReadInterrupts>
 8007720:	4603      	mov	r3, r0
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d115      	bne.n	8007756 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f007 fec5 	bl	800f4cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6859      	ldr	r1, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e000      	b.n	8007756 <HAL_PCD_IRQHandler+0x938>
      return;
 8007754:	bf00      	nop
    }
  }
}
 8007756:	3734      	adds	r7, #52	; 0x34
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_PCD_SetAddress+0x1a>
 8007772:	2302      	movs	r3, #2
 8007774:	e013      	b.n	800779e <HAL_PCD_SetAddress+0x42>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f004 fde2 	bl	800c358 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	461a      	mov	r2, r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	70fb      	strb	r3, [r7, #3]
 80077b8:	460b      	mov	r3, r1
 80077ba:	803b      	strh	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0f      	bge.n	80077ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3338      	adds	r3, #56	; 0x38
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
 80077ea:	e00f      	b.n	800780c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 020f 	and.w	r2, r3, #15
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007818:	883a      	ldrh	r2, [r7, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	78ba      	ldrb	r2, [r7, #2]
 8007822:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007836:	78bb      	ldrb	r3, [r7, #2]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d102      	bne.n	8007842 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_PCD_EP_Open+0xaa>
 800784c:	2302      	movs	r3, #2
 800784e:	e00e      	b.n	800786e <HAL_PCD_EP_Open+0xc8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68f9      	ldr	r1, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	f003 fe62 	bl	800b528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800786c:	7afb      	ldrb	r3, [r7, #11]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007886:	2b00      	cmp	r3, #0
 8007888:	da0f      	bge.n	80078aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	f003 020f 	and.w	r2, r3, #15
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	3338      	adds	r3, #56	; 0x38
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	3304      	adds	r3, #4
 80078a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	705a      	strb	r2, [r3, #1]
 80078a8:	e00f      	b.n	80078ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	3304      	adds	r3, #4
 80078c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_PCD_EP_Close+0x6e>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e00e      	b.n	8007902 <HAL_PCD_EP_Close+0x8c>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68f9      	ldr	r1, [r7, #12]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f003 fea0 	bl	800b638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	460b      	mov	r3, r1
 8007918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2200      	movs	r2, #0
 800794a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	b2da      	uxtb	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d102      	bne.n	8007966 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	f004 f97f 	bl	800bc80 <USB_EP0StartXfer>
 8007982:	e008      	b.n	8007996 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6979      	ldr	r1, [r7, #20]
 8007992:	f003 ff2d 	bl	800b7f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	607a      	str	r2, [r7, #4]
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	460b      	mov	r3, r1
 80079de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	f003 020f 	and.w	r2, r3, #15
 80079e6:	4613      	mov	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3338      	adds	r3, #56	; 0x38
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	3304      	adds	r3, #4
 80079f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2200      	movs	r2, #0
 8007a08:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d102      	bne.n	8007a2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	f004 f91d 	bl	800bc80 <USB_EP0StartXfer>
 8007a46:	e008      	b.n	8007a5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	f003 fecb 	bl	800b7f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	f003 020f 	and.w	r2, r3, #15
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d901      	bls.n	8007a82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e050      	b.n	8007b24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da0f      	bge.n	8007aaa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	4613      	mov	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	3338      	adds	r3, #56	; 0x38
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	705a      	strb	r2, [r3, #1]
 8007aa8:	e00d      	b.n	8007ac6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <HAL_PCD_EP_SetStall+0x82>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e01e      	b.n	8007b24 <HAL_PCD_EP_SetStall+0xc0>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f004 fb5b 	bl	800c1b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	b2d9      	uxtb	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b14:	461a      	mov	r2, r3
 8007b16:	f004 fd4b 	bl	800c5b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	f003 020f 	and.w	r2, r3, #15
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d901      	bls.n	8007b4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e042      	b.n	8007bd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0f      	bge.n	8007b72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	4613      	mov	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3338      	adds	r3, #56	; 0x38
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	705a      	strb	r2, [r3, #1]
 8007b70:	e00f      	b.n	8007b92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	4613      	mov	r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	3304      	adds	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_PCD_EP_ClrStall+0x86>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e00e      	b.n	8007bd0 <HAL_PCD_EP_ClrStall+0xa4>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f004 fb63 	bl	800c28c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da0c      	bge.n	8007c06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 020f 	and.w	r2, r3, #15
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3338      	adds	r3, #56	; 0x38
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3304      	adds	r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e00c      	b.n	8007c20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f004 f982 	bl	800bf30 <USB_EPStopXfer>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b08a      	sub	sp, #40	; 0x28
 8007c3e:	af02      	add	r7, sp, #8
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	3338      	adds	r3, #56	; 0x38
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3304      	adds	r3, #4
 8007c60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1a      	ldr	r2, [r3, #32]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d901      	bls.n	8007c72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e06c      	b.n	8007d4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d902      	bls.n	8007c8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3303      	adds	r3, #3
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c96:	e02b      	b.n	8007cf0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	69fa      	ldr	r2, [r7, #28]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d902      	bls.n	8007cb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	089b      	lsrs	r3, r3, #2
 8007cba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6919      	ldr	r1, [r3, #16]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	6978      	ldr	r0, [r7, #20]
 8007cd4:	f004 f9d6 	bl	800c084 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	441a      	add	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d809      	bhi.n	8007d1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1a      	ldr	r2, [r3, #32]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d203      	bcs.n	8007d1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1be      	bne.n	8007c98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d811      	bhi.n	8007d4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	6939      	ldr	r1, [r7, #16]
 8007d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d46:	4013      	ands	r3, r2
 8007d48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	333c      	adds	r3, #60	; 0x3c
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d17b      	bne.n	8007e82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d015      	beq.n	8007dc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4a61      	ldr	r2, [pc, #388]	; (8007f1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	f240 80b9 	bls.w	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80b3 	beq.w	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dbc:	6093      	str	r3, [r2, #8]
 8007dbe:	e0a7      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2320      	movs	r3, #32
 8007dda:	6093      	str	r3, [r2, #8]
 8007ddc:	e098      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 8093 	bne.w	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	4a4b      	ldr	r2, [pc, #300]	; (8007f1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d90f      	bls.n	8007e12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e0e:	6093      	str	r3, [r2, #8]
 8007e10:	e07e      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	0159      	lsls	r1, r3, #5
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	440b      	add	r3, r1
 8007e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d114      	bne.n	8007e74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	2101      	movs	r1, #1
 8007e60:	f004 fba6 	bl	800c5b0 <USB_EP0_OutStart>
 8007e64:	e006      	b.n	8007e74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	441a      	add	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f007 fa54 	bl	800f328 <HAL_PCD_DataOutStageCallback>
 8007e80:	e046      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4a26      	ldr	r2, [pc, #152]	; (8007f20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d124      	bne.n	8007ed4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea6:	6093      	str	r3, [r2, #8]
 8007ea8:	e032      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f003 0320 	and.w	r3, r3, #32
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2320      	movs	r3, #32
 8007ec4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f007 fa2b 	bl	800f328 <HAL_PCD_DataOutStageCallback>
 8007ed2:	e01d      	b.n	8007f10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d114      	bne.n	8007f04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d108      	bne.n	8007f04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007efc:	461a      	mov	r2, r3
 8007efe:	2100      	movs	r1, #0
 8007f00:	f004 fb56 	bl	800c5b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f007 fa0c 	bl	800f328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	4f54300a 	.word	0x4f54300a
 8007f20:	4f54310a 	.word	0x4f54310a

08007f24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	333c      	adds	r3, #60	; 0x3c
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <PCD_EP_OutSetupPacket_int+0x88>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d90e      	bls.n	8007f78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	461a      	mov	r2, r3
 8007f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f007 f9c3 	bl	800f304 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <PCD_EP_OutSetupPacket_int+0x88>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d90c      	bls.n	8007fa0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d108      	bne.n	8007fa0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f98:	461a      	mov	r2, r3
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	f004 fb08 	bl	800c5b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	4f54300a 	.word	0x4f54300a

08007fb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007fce:	883b      	ldrh	r3, [r7, #0]
 8007fd0:	0419      	lsls	r1, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
 8007fdc:	e028      	b.n	8008030 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	e00d      	b.n	800800e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	3340      	adds	r3, #64	; 0x40
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	0c1b      	lsrs	r3, r3, #16
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	3301      	adds	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	7bfa      	ldrb	r2, [r7, #15]
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	3b01      	subs	r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	d3ec      	bcc.n	8007ff2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008018:	883b      	ldrh	r3, [r7, #0]
 800801a:	0418      	lsls	r0, r3, #16
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	3b01      	subs	r3, #1
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	4302      	orrs	r2, r0
 8008028:	3340      	adds	r3, #64	; 0x40
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	887a      	ldrh	r2, [r7, #2]
 8008050:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e267      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d075      	beq.n	8008182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008096:	4b88      	ldr	r3, [pc, #544]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 030c 	and.w	r3, r3, #12
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d00c      	beq.n	80080bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080a2:	4b85      	ldr	r3, [pc, #532]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d112      	bne.n	80080d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ae:	4b82      	ldr	r3, [pc, #520]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ba:	d10b      	bne.n	80080d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080bc:	4b7e      	ldr	r3, [pc, #504]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d05b      	beq.n	8008180 <HAL_RCC_OscConfig+0x108>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d157      	bne.n	8008180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e242      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080dc:	d106      	bne.n	80080ec <HAL_RCC_OscConfig+0x74>
 80080de:	4b76      	ldr	r3, [pc, #472]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a75      	ldr	r2, [pc, #468]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e01d      	b.n	8008128 <HAL_RCC_OscConfig+0xb0>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080f4:	d10c      	bne.n	8008110 <HAL_RCC_OscConfig+0x98>
 80080f6:	4b70      	ldr	r3, [pc, #448]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a6f      	ldr	r2, [pc, #444]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80080fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	4b6d      	ldr	r3, [pc, #436]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a6c      	ldr	r2, [pc, #432]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	e00b      	b.n	8008128 <HAL_RCC_OscConfig+0xb0>
 8008110:	4b69      	ldr	r3, [pc, #420]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a68      	ldr	r2, [pc, #416]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	4b66      	ldr	r3, [pc, #408]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a65      	ldr	r2, [pc, #404]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008130:	f7fc fa5a 	bl	80045e8 <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008138:	f7fc fa56 	bl	80045e8 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b64      	cmp	r3, #100	; 0x64
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e207      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800814a:	4b5b      	ldr	r3, [pc, #364]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0xc0>
 8008156:	e014      	b.n	8008182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008158:	f7fc fa46 	bl	80045e8 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008160:	f7fc fa42 	bl	80045e8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b64      	cmp	r3, #100	; 0x64
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e1f3      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008172:	4b51      	ldr	r3, [pc, #324]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0xe8>
 800817e:	e000      	b.n	8008182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d063      	beq.n	8008256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800818e:	4b4a      	ldr	r3, [pc, #296]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 030c 	and.w	r3, r3, #12
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800819a:	4b47      	ldr	r3, [pc, #284]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d11c      	bne.n	80081e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081a6:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d116      	bne.n	80081e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081b2:	4b41      	ldr	r3, [pc, #260]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <HAL_RCC_OscConfig+0x152>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d001      	beq.n	80081ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e1c7      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ca:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4937      	ldr	r1, [pc, #220]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081de:	e03a      	b.n	8008256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081e8:	4b34      	ldr	r3, [pc, #208]	; (80082bc <HAL_RCC_OscConfig+0x244>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ee:	f7fc f9fb 	bl	80045e8 <HAL_GetTick>
 80081f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f4:	e008      	b.n	8008208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081f6:	f7fc f9f7 	bl	80045e8 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e1a8      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008208:	4b2b      	ldr	r3, [pc, #172]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f0      	beq.n	80081f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008214:	4b28      	ldr	r3, [pc, #160]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4925      	ldr	r1, [pc, #148]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 8008224:	4313      	orrs	r3, r2
 8008226:	600b      	str	r3, [r1, #0]
 8008228:	e015      	b.n	8008256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800822a:	4b24      	ldr	r3, [pc, #144]	; (80082bc <HAL_RCC_OscConfig+0x244>)
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008230:	f7fc f9da 	bl	80045e8 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008238:	f7fc f9d6 	bl	80045e8 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e187      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f0      	bne.n	8008238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d036      	beq.n	80082d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800826a:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <HAL_RCC_OscConfig+0x248>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fc f9ba 	bl	80045e8 <HAL_GetTick>
 8008274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008276:	e008      	b.n	800828a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008278:	f7fc f9b6 	bl	80045e8 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d901      	bls.n	800828a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e167      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_RCC_OscConfig+0x240>)
 800828c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0f0      	beq.n	8008278 <HAL_RCC_OscConfig+0x200>
 8008296:	e01b      	b.n	80082d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <HAL_RCC_OscConfig+0x248>)
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829e:	f7fc f9a3 	bl	80045e8 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a4:	e00e      	b.n	80082c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082a6:	f7fc f99f 	bl	80045e8 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d907      	bls.n	80082c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e150      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
 80082b8:	40023800 	.word	0x40023800
 80082bc:	42470000 	.word	0x42470000
 80082c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082c4:	4b88      	ldr	r3, [pc, #544]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80082c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1ea      	bne.n	80082a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8097 	beq.w	800840c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e2:	4b81      	ldr	r3, [pc, #516]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10f      	bne.n	800830e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	4b7d      	ldr	r3, [pc, #500]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	4a7c      	ldr	r2, [pc, #496]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	6413      	str	r3, [r2, #64]	; 0x40
 80082fe:	4b7a      	ldr	r3, [pc, #488]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830e:	4b77      	ldr	r3, [pc, #476]	; (80084ec <HAL_RCC_OscConfig+0x474>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d118      	bne.n	800834c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800831a:	4b74      	ldr	r3, [pc, #464]	; (80084ec <HAL_RCC_OscConfig+0x474>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a73      	ldr	r2, [pc, #460]	; (80084ec <HAL_RCC_OscConfig+0x474>)
 8008320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008326:	f7fc f95f 	bl	80045e8 <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832e:	f7fc f95b 	bl	80045e8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e10c      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008340:	4b6a      	ldr	r3, [pc, #424]	; (80084ec <HAL_RCC_OscConfig+0x474>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0f0      	beq.n	800832e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d106      	bne.n	8008362 <HAL_RCC_OscConfig+0x2ea>
 8008354:	4b64      	ldr	r3, [pc, #400]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	4a63      	ldr	r2, [pc, #396]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6713      	str	r3, [r2, #112]	; 0x70
 8008360:	e01c      	b.n	800839c <HAL_RCC_OscConfig+0x324>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d10c      	bne.n	8008384 <HAL_RCC_OscConfig+0x30c>
 800836a:	4b5f      	ldr	r3, [pc, #380]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836e:	4a5e      	ldr	r2, [pc, #376]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008370:	f043 0304 	orr.w	r3, r3, #4
 8008374:	6713      	str	r3, [r2, #112]	; 0x70
 8008376:	4b5c      	ldr	r3, [pc, #368]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4a5b      	ldr	r2, [pc, #364]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	6713      	str	r3, [r2, #112]	; 0x70
 8008382:	e00b      	b.n	800839c <HAL_RCC_OscConfig+0x324>
 8008384:	4b58      	ldr	r3, [pc, #352]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008388:	4a57      	ldr	r2, [pc, #348]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	6713      	str	r3, [r2, #112]	; 0x70
 8008390:	4b55      	ldr	r3, [pc, #340]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	4a54      	ldr	r2, [pc, #336]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008396:	f023 0304 	bic.w	r3, r3, #4
 800839a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d015      	beq.n	80083d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a4:	f7fc f920 	bl	80045e8 <HAL_GetTick>
 80083a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083aa:	e00a      	b.n	80083c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ac:	f7fc f91c 	bl	80045e8 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e0cb      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c2:	4b49      	ldr	r3, [pc, #292]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0ee      	beq.n	80083ac <HAL_RCC_OscConfig+0x334>
 80083ce:	e014      	b.n	80083fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083d0:	f7fc f90a 	bl	80045e8 <HAL_GetTick>
 80083d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083d6:	e00a      	b.n	80083ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083d8:	f7fc f906 	bl	80045e8 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e0b5      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ee:	4b3e      	ldr	r3, [pc, #248]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80083f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1ee      	bne.n	80083d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d105      	bne.n	800840c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008400:	4b39      	ldr	r3, [pc, #228]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	4a38      	ldr	r2, [pc, #224]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800840a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 80a1 	beq.w	8008558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008416:	4b34      	ldr	r3, [pc, #208]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 030c 	and.w	r3, r3, #12
 800841e:	2b08      	cmp	r3, #8
 8008420:	d05c      	beq.n	80084dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	2b02      	cmp	r3, #2
 8008428:	d141      	bne.n	80084ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800842a:	4b31      	ldr	r3, [pc, #196]	; (80084f0 <HAL_RCC_OscConfig+0x478>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008430:	f7fc f8da 	bl	80045e8 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008438:	f7fc f8d6 	bl	80045e8 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e087      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800844a:	4b27      	ldr	r3, [pc, #156]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f0      	bne.n	8008438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69da      	ldr	r2, [r3, #28]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	019b      	lsls	r3, r3, #6
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	3b01      	subs	r3, #1
 8008470:	041b      	lsls	r3, r3, #16
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	061b      	lsls	r3, r3, #24
 800847a:	491b      	ldr	r1, [pc, #108]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 800847c:	4313      	orrs	r3, r2
 800847e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008480:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <HAL_RCC_OscConfig+0x478>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008486:	f7fc f8af 	bl	80045e8 <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800848e:	f7fc f8ab 	bl	80045e8 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e05c      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0f0      	beq.n	800848e <HAL_RCC_OscConfig+0x416>
 80084ac:	e054      	b.n	8008558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ae:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <HAL_RCC_OscConfig+0x478>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b4:	f7fc f898 	bl	80045e8 <HAL_GetTick>
 80084b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ba:	e008      	b.n	80084ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084bc:	f7fc f894 	bl	80045e8 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e045      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <HAL_RCC_OscConfig+0x470>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1f0      	bne.n	80084bc <HAL_RCC_OscConfig+0x444>
 80084da:	e03d      	b.n	8008558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d107      	bne.n	80084f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e038      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
 80084e8:	40023800 	.word	0x40023800
 80084ec:	40007000 	.word	0x40007000
 80084f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084f4:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <HAL_RCC_OscConfig+0x4ec>)
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d028      	beq.n	8008554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d121      	bne.n	8008554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800851a:	429a      	cmp	r2, r3
 800851c:	d11a      	bne.n	8008554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008524:	4013      	ands	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800852a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800852c:	4293      	cmp	r3, r2
 800852e:	d111      	bne.n	8008554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	3b01      	subs	r3, #1
 800853e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d107      	bne.n	8008554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d001      	beq.n	8008558 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	40023800 	.word	0x40023800

08008568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0cc      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800857c:	4b68      	ldr	r3, [pc, #416]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d90c      	bls.n	80085a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858a:	4b65      	ldr	r3, [pc, #404]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008592:	4b63      	ldr	r3, [pc, #396]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d001      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0b8      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d020      	beq.n	80085f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085bc:	4b59      	ldr	r3, [pc, #356]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	4a58      	ldr	r2, [pc, #352]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085d4:	4b53      	ldr	r3, [pc, #332]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	4a52      	ldr	r2, [pc, #328]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085e0:	4b50      	ldr	r3, [pc, #320]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	494d      	ldr	r1, [pc, #308]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d044      	beq.n	8008688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d107      	bne.n	8008616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008606:	4b47      	ldr	r3, [pc, #284]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d119      	bne.n	8008646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e07f      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d003      	beq.n	8008626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008622:	2b03      	cmp	r3, #3
 8008624:	d107      	bne.n	8008636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e06f      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008636:	4b3b      	ldr	r3, [pc, #236]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e067      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008646:	4b37      	ldr	r3, [pc, #220]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f023 0203 	bic.w	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	4934      	ldr	r1, [pc, #208]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008654:	4313      	orrs	r3, r2
 8008656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008658:	f7fb ffc6 	bl	80045e8 <HAL_GetTick>
 800865c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800865e:	e00a      	b.n	8008676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008660:	f7fb ffc2 	bl	80045e8 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f241 3288 	movw	r2, #5000	; 0x1388
 800866e:	4293      	cmp	r3, r2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e04f      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008676:	4b2b      	ldr	r3, [pc, #172]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 020c 	and.w	r2, r3, #12
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	429a      	cmp	r2, r3
 8008686:	d1eb      	bne.n	8008660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d20c      	bcs.n	80086b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008696:	4b22      	ldr	r3, [pc, #136]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800869e:	4b20      	ldr	r3, [pc, #128]	; (8008720 <HAL_RCC_ClockConfig+0x1b8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d001      	beq.n	80086b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e032      	b.n	8008716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086bc:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	4916      	ldr	r1, [pc, #88]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086da:	4b12      	ldr	r3, [pc, #72]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	490e      	ldr	r1, [pc, #56]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086ee:	f000 f821 	bl	8008734 <HAL_RCC_GetSysClockFreq>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	091b      	lsrs	r3, r3, #4
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	490a      	ldr	r1, [pc, #40]	; (8008728 <HAL_RCC_ClockConfig+0x1c0>)
 8008700:	5ccb      	ldrb	r3, [r1, r3]
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	4a09      	ldr	r2, [pc, #36]	; (800872c <HAL_RCC_ClockConfig+0x1c4>)
 8008708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <HAL_RCC_ClockConfig+0x1c8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f7fb ff26 	bl	8004560 <HAL_InitTick>

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40023c00 	.word	0x40023c00
 8008724:	40023800 	.word	0x40023800
 8008728:	0801365c 	.word	0x0801365c
 800872c:	20000008 	.word	0x20000008
 8008730:	2000000c 	.word	0x2000000c

08008734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008738:	b090      	sub	sp, #64	; 0x40
 800873a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
 8008740:	2300      	movs	r3, #0
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008744:	2300      	movs	r3, #0
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800874c:	4b59      	ldr	r3, [pc, #356]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 030c 	and.w	r3, r3, #12
 8008754:	2b08      	cmp	r3, #8
 8008756:	d00d      	beq.n	8008774 <HAL_RCC_GetSysClockFreq+0x40>
 8008758:	2b08      	cmp	r3, #8
 800875a:	f200 80a1 	bhi.w	80088a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_RCC_GetSysClockFreq+0x34>
 8008762:	2b04      	cmp	r3, #4
 8008764:	d003      	beq.n	800876e <HAL_RCC_GetSysClockFreq+0x3a>
 8008766:	e09b      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008768:	4b53      	ldr	r3, [pc, #332]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800876a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800876c:	e09b      	b.n	80088a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800876e:	4b53      	ldr	r3, [pc, #332]	; (80088bc <HAL_RCC_GetSysClockFreq+0x188>)
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008772:	e098      	b.n	80088a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008774:	4b4f      	ldr	r3, [pc, #316]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800877e:	4b4d      	ldr	r3, [pc, #308]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d028      	beq.n	80087dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800878a:	4b4a      	ldr	r3, [pc, #296]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	099b      	lsrs	r3, r3, #6
 8008790:	2200      	movs	r2, #0
 8008792:	623b      	str	r3, [r7, #32]
 8008794:	627a      	str	r2, [r7, #36]	; 0x24
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800879c:	2100      	movs	r1, #0
 800879e:	4b47      	ldr	r3, [pc, #284]	; (80088bc <HAL_RCC_GetSysClockFreq+0x188>)
 80087a0:	fb03 f201 	mul.w	r2, r3, r1
 80087a4:	2300      	movs	r3, #0
 80087a6:	fb00 f303 	mul.w	r3, r0, r3
 80087aa:	4413      	add	r3, r2
 80087ac:	4a43      	ldr	r2, [pc, #268]	; (80088bc <HAL_RCC_GetSysClockFreq+0x188>)
 80087ae:	fba0 1202 	umull	r1, r2, r0, r2
 80087b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087b4:	460a      	mov	r2, r1
 80087b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80087b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ba:	4413      	add	r3, r2
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	2200      	movs	r2, #0
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	61fa      	str	r2, [r7, #28]
 80087c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087ce:	f7f8 fa3b 	bl	8000c48 <__aeabi_uldivmod>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4613      	mov	r3, r2
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087da:	e053      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087dc:	4b35      	ldr	r3, [pc, #212]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	099b      	lsrs	r3, r3, #6
 80087e2:	2200      	movs	r2, #0
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	617a      	str	r2, [r7, #20]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087ee:	f04f 0b00 	mov.w	fp, #0
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f04f 0000 	mov.w	r0, #0
 80087fa:	f04f 0100 	mov.w	r1, #0
 80087fe:	0159      	lsls	r1, r3, #5
 8008800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008804:	0150      	lsls	r0, r2, #5
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	ebb2 080a 	subs.w	r8, r2, sl
 800880e:	eb63 090b 	sbc.w	r9, r3, fp
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800881e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008822:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008826:	ebb2 0408 	subs.w	r4, r2, r8
 800882a:	eb63 0509 	sbc.w	r5, r3, r9
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	00eb      	lsls	r3, r5, #3
 8008838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800883c:	00e2      	lsls	r2, r4, #3
 800883e:	4614      	mov	r4, r2
 8008840:	461d      	mov	r5, r3
 8008842:	eb14 030a 	adds.w	r3, r4, sl
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	eb45 030b 	adc.w	r3, r5, fp
 800884c:	607b      	str	r3, [r7, #4]
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800885a:	4629      	mov	r1, r5
 800885c:	028b      	lsls	r3, r1, #10
 800885e:	4621      	mov	r1, r4
 8008860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008864:	4621      	mov	r1, r4
 8008866:	028a      	lsls	r2, r1, #10
 8008868:	4610      	mov	r0, r2
 800886a:	4619      	mov	r1, r3
 800886c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886e:	2200      	movs	r2, #0
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	60fa      	str	r2, [r7, #12]
 8008874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008878:	f7f8 f9e6 	bl	8000c48 <__aeabi_uldivmod>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4613      	mov	r3, r2
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	3301      	adds	r3, #1
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	fbb2 f3f3 	udiv	r3, r2, r3
 800889c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800889e:	e002      	b.n	80088a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088a0:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80088a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3740      	adds	r7, #64	; 0x40
 80088ac:	46bd      	mov	sp, r7
 80088ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088b2:	bf00      	nop
 80088b4:	40023800 	.word	0x40023800
 80088b8:	00f42400 	.word	0x00f42400
 80088bc:	017d7840 	.word	0x017d7840

080088c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088c4:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80088c6:	681b      	ldr	r3, [r3, #0]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000008 	.word	0x20000008

080088d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088dc:	f7ff fff0 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 80088e0:	4602      	mov	r2, r0
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	0a9b      	lsrs	r3, r3, #10
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	4903      	ldr	r1, [pc, #12]	; (80088fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80088ee:	5ccb      	ldrb	r3, [r1, r3]
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40023800 	.word	0x40023800
 80088fc:	0801366c 	.word	0x0801366c

08008900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008904:	f7ff ffdc 	bl	80088c0 <HAL_RCC_GetHCLKFreq>
 8008908:	4602      	mov	r2, r0
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	0b5b      	lsrs	r3, r3, #13
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	4903      	ldr	r1, [pc, #12]	; (8008924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008916:	5ccb      	ldrb	r3, [r1, r3]
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800891c:	4618      	mov	r0, r3
 800891e:	bd80      	pop	{r7, pc}
 8008920:	40023800 	.word	0x40023800
 8008924:	0801366c 	.word	0x0801366c

08008928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e07b      	b.n	8008a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d108      	bne.n	8008954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894a:	d009      	beq.n	8008960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	61da      	str	r2, [r3, #28]
 8008952:	e005      	b.n	8008960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d106      	bne.n	8008980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fb fa50 	bl	8003e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e4:	ea42 0103 	orr.w	r1, r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	f003 0104 	and.w	r1, r3, #4
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	f003 0210 	and.w	r2, r3, #16
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e041      	b.n	8008ad0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fb fa25 	bl	8003eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f000 fce9 	bl	8009450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d001      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e04e      	b.n	8008b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0201 	orr.w	r2, r2, #1
 8008b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a23      	ldr	r2, [pc, #140]	; (8008b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d022      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d01d      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1f      	ldr	r2, [pc, #124]	; (8008ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d018      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00e      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1b      	ldr	r2, [pc, #108]	; (8008bac <HAL_TIM_Base_Start_IT+0xd4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d009      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d004      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a18      	ldr	r2, [pc, #96]	; (8008bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d111      	bne.n	8008b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d010      	beq.n	8008b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7a:	e007      	b.n	8008b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	40010400 	.word	0x40010400
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40001800 	.word	0x40001800

08008bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e041      	b.n	8008c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f839 	bl	8008c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f000 fc2a 	bl	8009450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_TIM_PWM_Start+0x24>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	bf14      	ite	ne
 8008c88:	2301      	movne	r3, #1
 8008c8a:	2300      	moveq	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	e022      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d109      	bne.n	8008caa <HAL_TIM_PWM_Start+0x3e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	bf14      	ite	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	2300      	moveq	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	e015      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d109      	bne.n	8008cc4 <HAL_TIM_PWM_Start+0x58>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	bf14      	ite	ne
 8008cbc:	2301      	movne	r3, #1
 8008cbe:	2300      	moveq	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	e008      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	bf14      	ite	ne
 8008cd0:	2301      	movne	r3, #1
 8008cd2:	2300      	moveq	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e07c      	b.n	8008dd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_PWM_Start+0x82>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cec:	e013      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d104      	bne.n	8008cfe <HAL_TIM_PWM_Start+0x92>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cfc:	e00b      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_PWM_Start+0xa2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d0c:	e003      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fe80 	bl	8009a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2d      	ldr	r2, [pc, #180]	; (8008de0 <HAL_TIM_PWM_Start+0x174>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_TIM_PWM_Start+0xcc>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <HAL_TIM_PWM_Start+0x178>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d101      	bne.n	8008d3c <HAL_TIM_PWM_Start+0xd0>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <HAL_TIM_PWM_Start+0xd2>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a22      	ldr	r2, [pc, #136]	; (8008de0 <HAL_TIM_PWM_Start+0x174>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d022      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d01d      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <HAL_TIM_PWM_Start+0x17c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d018      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <HAL_TIM_PWM_Start+0x180>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <HAL_TIM_PWM_Start+0x184>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00e      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <HAL_TIM_PWM_Start+0x178>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d009      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <HAL_TIM_PWM_Start+0x188>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x136>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <HAL_TIM_PWM_Start+0x18c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d111      	bne.n	8008dc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b06      	cmp	r3, #6
 8008db2:	d010      	beq.n	8008dd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc4:	e007      	b.n	8008dd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40010400 	.word	0x40010400
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40001800 	.word	0x40001800

08008dfc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fe08 	bl	8009a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2e      	ldr	r2, [pc, #184]	; (8008ed4 <HAL_TIM_PWM_Stop+0xd8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d004      	beq.n	8008e28 <HAL_TIM_PWM_Stop+0x2c>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a2d      	ldr	r2, [pc, #180]	; (8008ed8 <HAL_TIM_PWM_Stop+0xdc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d101      	bne.n	8008e2c <HAL_TIM_PWM_Stop+0x30>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e000      	b.n	8008e2e <HAL_TIM_PWM_Stop+0x32>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d017      	beq.n	8008e62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a1a      	ldr	r2, [r3, #32]
 8008e38:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10f      	bne.n	8008e62 <HAL_TIM_PWM_Stop+0x66>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6a1a      	ldr	r2, [r3, #32]
 8008e48:	f240 4344 	movw	r3, #1092	; 0x444
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d107      	bne.n	8008e62 <HAL_TIM_PWM_Stop+0x66>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6a1a      	ldr	r2, [r3, #32]
 8008e68:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10f      	bne.n	8008e92 <HAL_TIM_PWM_Stop+0x96>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6a1a      	ldr	r2, [r3, #32]
 8008e78:	f240 4344 	movw	r3, #1092	; 0x444
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <HAL_TIM_PWM_Stop+0x96>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0201 	bic.w	r2, r2, #1
 8008e90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Stop+0xa6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ea0:	e013      	b.n	8008eca <HAL_TIM_PWM_Stop+0xce>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIM_PWM_Stop+0xb6>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eb0:	e00b      	b.n	8008eca <HAL_TIM_PWM_Stop+0xce>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIM_PWM_Stop+0xc6>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ec0:	e003      	b.n	8008eca <HAL_TIM_PWM_Stop+0xce>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	40010400 	.word	0x40010400

08008edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d122      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d11b      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0202 	mvn.w	r2, #2
 8008f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa77 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 8008f24:	e005      	b.n	8008f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa69 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa7a 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0304 	and.w	r3, r3, #4
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d122      	bne.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d11b      	bne.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0204 	mvn.w	r2, #4
 8008f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa4d 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa3f 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa50 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d122      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d11b      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0208 	mvn.w	r2, #8
 8008fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2204      	movs	r2, #4
 8008fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa23 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 8008fcc:	e005      	b.n	8008fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa15 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa26 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d122      	bne.n	8009034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d11b      	bne.n	8009034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0210 	mvn.w	r2, #16
 8009004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2208      	movs	r2, #8
 800900a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f9f9 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 8009020:	e005      	b.n	800902e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f9eb 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f9fc 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10e      	bne.n	8009060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d107      	bne.n	8009060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f06f 0201 	mvn.w	r2, #1
 8009058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fa fc98 	bl	8003990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b80      	cmp	r3, #128	; 0x80
 800906c:	d10e      	bne.n	800908c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d107      	bne.n	800908c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fdca 	bl	8009c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009096:	2b40      	cmp	r3, #64	; 0x40
 8009098:	d10e      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	d107      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9c1 	bl	800943a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d10e      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d107      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0220 	mvn.w	r2, #32
 80090dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fd94 	bl	8009c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009106:	2302      	movs	r3, #2
 8009108:	e0ae      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b0c      	cmp	r3, #12
 8009116:	f200 809f 	bhi.w	8009258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009155 	.word	0x08009155
 8009124:	08009259 	.word	0x08009259
 8009128:	08009259 	.word	0x08009259
 800912c:	08009259 	.word	0x08009259
 8009130:	08009195 	.word	0x08009195
 8009134:	08009259 	.word	0x08009259
 8009138:	08009259 	.word	0x08009259
 800913c:	08009259 	.word	0x08009259
 8009140:	080091d7 	.word	0x080091d7
 8009144:	08009259 	.word	0x08009259
 8009148:	08009259 	.word	0x08009259
 800914c:	08009259 	.word	0x08009259
 8009150:	08009217 	.word	0x08009217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fa18 	bl	8009590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 0208 	orr.w	r2, r2, #8
 800916e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699a      	ldr	r2, [r3, #24]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0204 	bic.w	r2, r2, #4
 800917e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6999      	ldr	r1, [r3, #24]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	619a      	str	r2, [r3, #24]
      break;
 8009192:	e064      	b.n	800925e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fa68 	bl	8009670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6999      	ldr	r1, [r3, #24]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	021a      	lsls	r2, r3, #8
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	619a      	str	r2, [r3, #24]
      break;
 80091d4:	e043      	b.n	800925e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fabd 	bl	800975c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0208 	orr.w	r2, r2, #8
 80091f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0204 	bic.w	r2, r2, #4
 8009200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69d9      	ldr	r1, [r3, #28]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	61da      	str	r2, [r3, #28]
      break;
 8009214:	e023      	b.n	800925e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fb11 	bl	8009844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69d9      	ldr	r1, [r3, #28]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	021a      	lsls	r2, r3, #8
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	61da      	str	r2, [r3, #28]
      break;
 8009256:	e002      	b.n	800925e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
      break;
 800925c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_TIM_ConfigClockSource+0x1c>
 8009288:	2302      	movs	r3, #2
 800928a:	e0b4      	b.n	80093f6 <HAL_TIM_ConfigClockSource+0x186>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c4:	d03e      	beq.n	8009344 <HAL_TIM_ConfigClockSource+0xd4>
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ca:	f200 8087 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d2:	f000 8086 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x172>
 80092d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092da:	d87f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092dc:	2b70      	cmp	r3, #112	; 0x70
 80092de:	d01a      	beq.n	8009316 <HAL_TIM_ConfigClockSource+0xa6>
 80092e0:	2b70      	cmp	r3, #112	; 0x70
 80092e2:	d87b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092e4:	2b60      	cmp	r3, #96	; 0x60
 80092e6:	d050      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x11a>
 80092e8:	2b60      	cmp	r3, #96	; 0x60
 80092ea:	d877      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092ec:	2b50      	cmp	r3, #80	; 0x50
 80092ee:	d03c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0xfa>
 80092f0:	2b50      	cmp	r3, #80	; 0x50
 80092f2:	d873      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d058      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x13a>
 80092f8:	2b40      	cmp	r3, #64	; 0x40
 80092fa:	d86f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092fc:	2b30      	cmp	r3, #48	; 0x30
 80092fe:	d064      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009300:	2b30      	cmp	r3, #48	; 0x30
 8009302:	d86b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 8009304:	2b20      	cmp	r3, #32
 8009306:	d060      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d867      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05c      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009310:	2b10      	cmp	r3, #16
 8009312:	d05a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009314:	e062      	b.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6899      	ldr	r1, [r3, #8]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f000 fb5d 	bl	80099e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	609a      	str	r2, [r3, #8]
      break;
 8009342:	e04f      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6899      	ldr	r1, [r3, #8]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f000 fb46 	bl	80099e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009366:	609a      	str	r2, [r3, #8]
      break;
 8009368:	e03c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6859      	ldr	r1, [r3, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	461a      	mov	r2, r3
 8009378:	f000 faba 	bl	80098f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2150      	movs	r1, #80	; 0x50
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fb13 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 8009388:	e02c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6859      	ldr	r1, [r3, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	f000 fad9 	bl	800994e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2160      	movs	r1, #96	; 0x60
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fb03 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 80093a8:	e01c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6859      	ldr	r1, [r3, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f000 fa9a 	bl	80098f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2140      	movs	r1, #64	; 0x40
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 faf3 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 80093c8:	e00c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f000 faea 	bl	80099ae <TIM_ITRx_SetConfig>
      break;
 80093da:	e003      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e000      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
	...

08009450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a40      	ldr	r2, [pc, #256]	; (8009564 <TIM_Base_SetConfig+0x114>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946e:	d00f      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3d      	ldr	r2, [pc, #244]	; (8009568 <TIM_Base_SetConfig+0x118>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a3c      	ldr	r2, [pc, #240]	; (800956c <TIM_Base_SetConfig+0x11c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a3b      	ldr	r2, [pc, #236]	; (8009570 <TIM_Base_SetConfig+0x120>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a3a      	ldr	r2, [pc, #232]	; (8009574 <TIM_Base_SetConfig+0x124>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d108      	bne.n	80094a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2f      	ldr	r2, [pc, #188]	; (8009564 <TIM_Base_SetConfig+0x114>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d02b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b0:	d027      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <TIM_Base_SetConfig+0x118>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d023      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2b      	ldr	r2, [pc, #172]	; (800956c <TIM_Base_SetConfig+0x11c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01f      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <TIM_Base_SetConfig+0x120>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d01b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a29      	ldr	r2, [pc, #164]	; (8009574 <TIM_Base_SetConfig+0x124>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d017      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a28      	ldr	r2, [pc, #160]	; (8009578 <TIM_Base_SetConfig+0x128>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a27      	ldr	r2, [pc, #156]	; (800957c <TIM_Base_SetConfig+0x12c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00f      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a26      	ldr	r2, [pc, #152]	; (8009580 <TIM_Base_SetConfig+0x130>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a25      	ldr	r2, [pc, #148]	; (8009584 <TIM_Base_SetConfig+0x134>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d007      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a24      	ldr	r2, [pc, #144]	; (8009588 <TIM_Base_SetConfig+0x138>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d003      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a23      	ldr	r2, [pc, #140]	; (800958c <TIM_Base_SetConfig+0x13c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d108      	bne.n	8009514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a0a      	ldr	r2, [pc, #40]	; (8009564 <TIM_Base_SetConfig+0x114>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_Base_SetConfig+0xf8>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <TIM_Base_SetConfig+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d103      	bne.n	8009550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	615a      	str	r2, [r3, #20]
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40010000 	.word	0x40010000
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40010400 	.word	0x40010400
 8009578:	40014000 	.word	0x40014000
 800957c:	40014400 	.word	0x40014400
 8009580:	40014800 	.word	0x40014800
 8009584:	40001800 	.word	0x40001800
 8009588:	40001c00 	.word	0x40001c00
 800958c:	40002000 	.word	0x40002000

08009590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f023 0201 	bic.w	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f023 0302 	bic.w	r3, r3, #2
 80095d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a20      	ldr	r2, [pc, #128]	; (8009668 <TIM_OC1_SetConfig+0xd8>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d003      	beq.n	80095f4 <TIM_OC1_SetConfig+0x64>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a1f      	ldr	r2, [pc, #124]	; (800966c <TIM_OC1_SetConfig+0xdc>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d10c      	bne.n	800960e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f023 0308 	bic.w	r3, r3, #8
 80095fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f023 0304 	bic.w	r3, r3, #4
 800960c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a15      	ldr	r2, [pc, #84]	; (8009668 <TIM_OC1_SetConfig+0xd8>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d003      	beq.n	800961e <TIM_OC1_SetConfig+0x8e>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a14      	ldr	r2, [pc, #80]	; (800966c <TIM_OC1_SetConfig+0xdc>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d111      	bne.n	8009642 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800962c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	621a      	str	r2, [r3, #32]
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	40010000 	.word	0x40010000
 800966c:	40010400 	.word	0x40010400

08009670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	f023 0210 	bic.w	r2, r3, #16
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800969e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f023 0320 	bic.w	r3, r3, #32
 80096ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a22      	ldr	r2, [pc, #136]	; (8009754 <TIM_OC2_SetConfig+0xe4>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d003      	beq.n	80096d8 <TIM_OC2_SetConfig+0x68>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a21      	ldr	r2, [pc, #132]	; (8009758 <TIM_OC2_SetConfig+0xe8>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d10d      	bne.n	80096f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	011b      	lsls	r3, r3, #4
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a17      	ldr	r2, [pc, #92]	; (8009754 <TIM_OC2_SetConfig+0xe4>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_OC2_SetConfig+0x94>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a16      	ldr	r2, [pc, #88]	; (8009758 <TIM_OC2_SetConfig+0xe8>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d113      	bne.n	800972c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800970a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	4313      	orrs	r3, r2
 800971e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a21      	ldr	r2, [pc, #132]	; (800983c <TIM_OC3_SetConfig+0xe0>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d003      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a20      	ldr	r2, [pc, #128]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d10d      	bne.n	80097de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a16      	ldr	r2, [pc, #88]	; (800983c <TIM_OC3_SetConfig+0xe0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_OC3_SetConfig+0x92>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a15      	ldr	r2, [pc, #84]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d113      	bne.n	8009816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	40010000 	.word	0x40010000
 8009840:	40010400 	.word	0x40010400

08009844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800987a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800988e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a12      	ldr	r2, [pc, #72]	; (80098e8 <TIM_OC4_SetConfig+0xa4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d003      	beq.n	80098ac <TIM_OC4_SetConfig+0x68>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a11      	ldr	r2, [pc, #68]	; (80098ec <TIM_OC4_SetConfig+0xa8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d109      	bne.n	80098c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	019b      	lsls	r3, r3, #6
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40010400 	.word	0x40010400

080098f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800991a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f023 030a 	bic.w	r3, r3, #10
 800992c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4313      	orrs	r3, r2
 8009934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800994e:	b480      	push	{r7}
 8009950:	b087      	sub	sp, #28
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	f023 0210 	bic.w	r2, r3, #16
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	031b      	lsls	r3, r3, #12
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800998a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	4313      	orrs	r3, r2
 8009994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	621a      	str	r2, [r3, #32]
}
 80099a2:	bf00      	nop
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f043 0307 	orr.w	r3, r3, #7
 80099d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	609a      	str	r2, [r3, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2201      	movs	r2, #1
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1a      	ldr	r2, [r3, #32]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	43db      	mvns	r3, r3
 8009a46:	401a      	ands	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	621a      	str	r2, [r3, #32]
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e05a      	b.n	8009b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a21      	ldr	r2, [pc, #132]	; (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d022      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad4:	d01d      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d018      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1b      	ldr	r2, [pc, #108]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d013      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00e      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d009      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a17      	ldr	r2, [pc, #92]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d004      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a15      	ldr	r2, [pc, #84]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d10c      	bne.n	8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	40010000 	.word	0x40010000
 8009b50:	40000400 	.word	0x40000400
 8009b54:	40000800 	.word	0x40000800
 8009b58:	40000c00 	.word	0x40000c00
 8009b5c:	40010400 	.word	0x40010400
 8009b60:	40014000 	.word	0x40014000
 8009b64:	40001800 	.word	0x40001800

08009b68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e03d      	b.n	8009c00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e03f      	b.n	8009cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d106      	bne.n	8009c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7fa fa74 	bl	8004148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2224      	movs	r2, #36	; 0x24
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fe69 	bl	800a950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691a      	ldr	r2, [r3, #16]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	695a      	ldr	r2, [r3, #20]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d11d      	bne.n	8009d24 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <HAL_UART_Receive_DMA+0x26>
 8009cee:	88fb      	ldrh	r3, [r7, #6]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e016      	b.n	8009d26 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <HAL_UART_Receive_DMA+0x38>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e00f      	b.n	8009d26 <HAL_UART_Receive_DMA+0x58>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fbb8 	bl	800a490 <UART_Start_Receive_DMA>
 8009d20:	4603      	mov	r3, r0
 8009d22:	e000      	b.n	8009d26 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d24:	2302      	movs	r3, #2
  }
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b0ba      	sub	sp, #232	; 0xe8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d66:	f003 030f 	and.w	r3, r3, #15
 8009d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10f      	bne.n	8009d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <HAL_UART_IRQHandler+0x66>
 8009d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d86:	f003 0320 	and.w	r3, r3, #32
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fd23 	bl	800a7da <UART_Receive_IT>
      return;
 8009d94:	e256      	b.n	800a244 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 80de 	beq.w	8009f5c <HAL_UART_IRQHandler+0x22c>
 8009da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80d1 	beq.w	8009f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_UART_IRQHandler+0xae>
 8009dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f043 0201 	orr.w	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <HAL_UART_IRQHandler+0xd2>
 8009dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f043 0202 	orr.w	r2, r3, #2
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <HAL_UART_IRQHandler+0xf6>
 8009e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f043 0204 	orr.w	r2, r3, #4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2a:	f003 0308 	and.w	r3, r3, #8
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <HAL_UART_IRQHandler+0x126>
 8009e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d105      	bne.n	8009e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	f043 0208 	orr.w	r2, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 81ed 	beq.w	800a23a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e64:	f003 0320 	and.w	r3, r3, #32
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_UART_IRQHandler+0x14e>
 8009e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e70:	f003 0320 	and.w	r3, r3, #32
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fcae 	bl	800a7da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2301      	moveq	r3, #1
 8009e8e:	2300      	movne	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f003 0308 	and.w	r3, r3, #8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d103      	bne.n	8009eaa <HAL_UART_IRQHandler+0x17a>
 8009ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d04f      	beq.n	8009f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fbb6 	bl	800a61c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eba:	2b40      	cmp	r3, #64	; 0x40
 8009ebc:	d141      	bne.n	8009f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3314      	adds	r3, #20
 8009ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1d9      	bne.n	8009ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d013      	beq.n	8009f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	4a7d      	ldr	r2, [pc, #500]	; (800a10c <HAL_UART_IRQHandler+0x3dc>)
 8009f18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fb fa2c 	bl	800537c <HAL_DMA_Abort_IT>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d016      	beq.n	8009f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f38:	e00e      	b.n	8009f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f99a 	bl	800a274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	e00a      	b.n	8009f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f996 	bl	800a274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f48:	e006      	b.n	8009f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f992 	bl	800a274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f56:	e170      	b.n	800a23a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f58:	bf00      	nop
    return;
 8009f5a:	e16e      	b.n	800a23a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	f040 814a 	bne.w	800a1fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8143 	beq.w	800a1fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 813c 	beq.w	800a1fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60bb      	str	r3, [r7, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	60bb      	str	r3, [r7, #8]
 8009f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa2:	2b40      	cmp	r3, #64	; 0x40
 8009fa4:	f040 80b4 	bne.w	800a110 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 8140 	beq.w	800a23e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f080 8139 	bcs.w	800a23e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fde:	f000 8088 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ff0:	e853 3f00 	ldrex	r3, [r3]
 8009ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	330c      	adds	r3, #12
 800a00a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a00e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a01a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a01e:	e841 2300 	strex	r3, r2, [r1]
 800a022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1d9      	bne.n	8009fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3314      	adds	r3, #20
 800a034:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a03e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a040:	f023 0301 	bic.w	r3, r3, #1
 800a044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3314      	adds	r3, #20
 800a04e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a056:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a05a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e1      	bne.n	800a02e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3314      	adds	r3, #20
 800a070:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3314      	adds	r3, #20
 800a08a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a08e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a090:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e3      	bne.n	800a06a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c2:	f023 0310 	bic.w	r3, r3, #16
 800a0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0d4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e3      	bne.n	800a0b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fb f8d5 	bl	800529c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8c0 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a108:	e099      	b.n	800a23e <HAL_UART_IRQHandler+0x50e>
 800a10a:	bf00      	nop
 800a10c:	0800a6e3 	.word	0x0800a6e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a124:	b29b      	uxth	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 808b 	beq.w	800a242 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a12c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8086 	beq.w	800a242 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	e853 3f00 	ldrex	r3, [r3]
 800a144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a14c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a15a:	647a      	str	r2, [r7, #68]	; 0x44
 800a15c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e3      	bne.n	800a136 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3314      	adds	r3, #20
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	623b      	str	r3, [r7, #32]
   return(result);
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3314      	adds	r3, #20
 800a18e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a192:	633a      	str	r2, [r7, #48]	; 0x30
 800a194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e3      	bne.n	800a16e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0310 	bic.w	r3, r3, #16
 800a1ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1d8:	61fa      	str	r2, [r7, #28]
 800a1da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	69b9      	ldr	r1, [r7, #24]
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e3      	bne.n	800a1b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f848 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1f8:	e023      	b.n	800a242 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a202:	2b00      	cmp	r3, #0
 800a204:	d009      	beq.n	800a21a <HAL_UART_IRQHandler+0x4ea>
 800a206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa79 	bl	800a70a <UART_Transmit_IT>
    return;
 800a218:	e014      	b.n	800a244 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00e      	beq.n	800a244 <HAL_UART_IRQHandler+0x514>
 800a226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d008      	beq.n	800a244 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fab9 	bl	800a7aa <UART_EndTransmit_IT>
    return;
 800a238:	e004      	b.n	800a244 <HAL_UART_IRQHandler+0x514>
    return;
 800a23a:	bf00      	nop
 800a23c:	e002      	b.n	800a244 <HAL_UART_IRQHandler+0x514>
      return;
 800a23e:	bf00      	nop
 800a240:	e000      	b.n	800a244 <HAL_UART_IRQHandler+0x514>
      return;
 800a242:	bf00      	nop
  }
}
 800a244:	37e8      	adds	r7, #232	; 0xe8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop

0800a24c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b09c      	sub	sp, #112	; 0x70
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d172      	bne.n	800a3a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a2bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2be:	2200      	movs	r2, #0
 800a2c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	330c      	adds	r3, #12
 800a2e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2e2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a2e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2ea:	e841 2300 	strex	r3, r2, [r1]
 800a2ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e5      	bne.n	800a2c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3314      	adds	r3, #20
 800a2fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a308:	f023 0301 	bic.w	r3, r3, #1
 800a30c:	667b      	str	r3, [r7, #100]	; 0x64
 800a30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3314      	adds	r3, #20
 800a314:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a316:	647a      	str	r2, [r7, #68]	; 0x44
 800a318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a31c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3314      	adds	r3, #20
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	623b      	str	r3, [r7, #32]
   return(result);
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a340:	663b      	str	r3, [r7, #96]	; 0x60
 800a342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a34a:	633a      	str	r2, [r7, #48]	; 0x30
 800a34c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e5      	bne.n	800a32a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a360:	2220      	movs	r2, #32
 800a362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d119      	bne.n	800a3a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	330c      	adds	r3, #12
 800a374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f023 0310 	bic.w	r3, r3, #16
 800a384:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	330c      	adds	r3, #12
 800a38c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a38e:	61fa      	str	r2, [r7, #28]
 800a390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	69b9      	ldr	r1, [r7, #24]
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	617b      	str	r3, [r7, #20]
   return(result);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d106      	bne.n	800a3b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3b2:	f7ff ff69 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3b6:	e002      	b.n	800a3be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a3b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3ba:	f7f9 f907 	bl	80035cc <HAL_UART_RxCpltCallback>
}
 800a3be:	bf00      	nop
 800a3c0:	3770      	adds	r7, #112	; 0x70
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d108      	bne.n	800a3ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7ff ff4e 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ec:	e002      	b.n	800a3f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff ff36 	bl	800a260 <HAL_UART_RxHalfCpltCallback>
}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a418:	2b80      	cmp	r3, #128	; 0x80
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b21      	cmp	r3, #33	; 0x21
 800a42e:	d108      	bne.n	800a442 <UART_DMAError+0x46>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2200      	movs	r2, #0
 800a43a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a43c:	68b8      	ldr	r0, [r7, #8]
 800a43e:	f000 f8c5 	bl	800a5cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	bf0c      	ite	eq
 800a450:	2301      	moveq	r3, #1
 800a452:	2300      	movne	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b22      	cmp	r3, #34	; 0x22
 800a462:	d108      	bne.n	800a476 <UART_DMAError+0x7a>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2200      	movs	r2, #0
 800a46e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a470:	68b8      	ldr	r0, [r7, #8]
 800a472:	f000 f8d3 	bl	800a61c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47a:	f043 0210 	orr.w	r2, r3, #16
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a482:	68b8      	ldr	r0, [r7, #8]
 800a484:	f7ff fef6 	bl	800a274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b098      	sub	sp, #96	; 0x60
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2222      	movs	r2, #34	; 0x22
 800a4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	4a40      	ldr	r2, [pc, #256]	; (800a5c0 <UART_Start_Receive_DMA+0x130>)
 800a4be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	4a3f      	ldr	r2, [pc, #252]	; (800a5c4 <UART_Start_Receive_DMA+0x134>)
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	4a3e      	ldr	r2, [pc, #248]	; (800a5c8 <UART_Start_Receive_DMA+0x138>)
 800a4ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a4d8:	f107 0308 	add.w	r3, r7, #8
 800a4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	f7fa fe7c 	bl	80051ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	613b      	str	r3, [r7, #16]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d019      	beq.n	800a54e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	330c      	adds	r3, #12
 800a520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a530:	65bb      	str	r3, [r7, #88]	; 0x58
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	330c      	adds	r3, #12
 800a538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a53a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a53c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e5      	bne.n	800a51a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3314      	adds	r3, #20
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f043 0301 	orr.w	r3, r3, #1
 800a564:	657b      	str	r3, [r7, #84]	; 0x54
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3314      	adds	r3, #20
 800a56c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a56e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a572:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1e5      	bne.n	800a54e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3314      	adds	r3, #20
 800a588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	e853 3f00 	ldrex	r3, [r3]
 800a590:	617b      	str	r3, [r7, #20]
   return(result);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a598:	653b      	str	r3, [r7, #80]	; 0x50
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3314      	adds	r3, #20
 800a5a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5a2:	627a      	str	r2, [r7, #36]	; 0x24
 800a5a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a6:	6a39      	ldr	r1, [r7, #32]
 800a5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e5      	bne.n	800a582 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3760      	adds	r7, #96	; 0x60
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	0800a2a1 	.word	0x0800a2a1
 800a5c4:	0800a3c7 	.word	0x0800a3c7
 800a5c8:	0800a3fd 	.word	0x0800a3fd

0800a5cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b089      	sub	sp, #36	; 0x24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	e853 3f00 	ldrex	r3, [r3]
 800a5e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	61ba      	str	r2, [r7, #24]
 800a5f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6979      	ldr	r1, [r7, #20]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	613b      	str	r3, [r7, #16]
   return(result);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e5      	bne.n	800a5d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a610:	bf00      	nop
 800a612:	3724      	adds	r7, #36	; 0x24
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b095      	sub	sp, #84	; 0x54
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	330c      	adds	r3, #12
 800a62a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a63a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	330c      	adds	r3, #12
 800a642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a644:	643a      	str	r2, [r7, #64]	; 0x40
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a64a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e5      	bne.n	800a624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3314      	adds	r3, #20
 800a65e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	e853 3f00 	ldrex	r3, [r3]
 800a666:	61fb      	str	r3, [r7, #28]
   return(result);
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	f023 0301 	bic.w	r3, r3, #1
 800a66e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3314      	adds	r3, #20
 800a676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a67e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a680:	e841 2300 	strex	r3, r2, [r1]
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e5      	bne.n	800a658 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a690:	2b01      	cmp	r3, #1
 800a692:	d119      	bne.n	800a6c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	330c      	adds	r3, #12
 800a69a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	e853 3f00 	ldrex	r3, [r3]
 800a6a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f023 0310 	bic.w	r3, r3, #16
 800a6aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b4:	61ba      	str	r2, [r7, #24]
 800a6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	6979      	ldr	r1, [r7, #20]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e5      	bne.n	800a694 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a6d6:	bf00      	nop
 800a6d8:	3754      	adds	r7, #84	; 0x54
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff fdb9 	bl	800a274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b21      	cmp	r3, #33	; 0x21
 800a71c:	d13e      	bne.n	800a79c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a726:	d114      	bne.n	800a752 <UART_Transmit_IT+0x48>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d110      	bne.n	800a752 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a744:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	1c9a      	adds	r2, r3, #2
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	621a      	str	r2, [r3, #32]
 800a750:	e008      	b.n	800a764 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	1c59      	adds	r1, r3, #1
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6211      	str	r1, [r2, #32]
 800a75c:	781a      	ldrb	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a768:	b29b      	uxth	r3, r3
 800a76a:	3b01      	subs	r3, #1
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	4619      	mov	r1, r3
 800a772:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10f      	bne.n	800a798 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a786:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a796:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	e000      	b.n	800a79e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a79c:	2302      	movs	r3, #2
  }
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff fd3e 	bl	800a24c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b08c      	sub	sp, #48	; 0x30
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b22      	cmp	r3, #34	; 0x22
 800a7ec:	f040 80ab 	bne.w	800a946 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f8:	d117      	bne.n	800a82a <UART_Receive_IT+0x50>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d113      	bne.n	800a82a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a802:	2300      	movs	r3, #0
 800a804:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a818:	b29a      	uxth	r2, r3
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	1c9a      	adds	r2, r3, #2
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	629a      	str	r2, [r3, #40]	; 0x28
 800a828:	e026      	b.n	800a878 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a830:	2300      	movs	r3, #0
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a83c:	d007      	beq.n	800a84e <UART_Receive_IT+0x74>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10a      	bne.n	800a85c <UART_Receive_IT+0x82>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e008      	b.n	800a86e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29b      	uxth	r3, r3
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	4619      	mov	r1, r3
 800a886:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d15a      	bne.n	800a942 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0220 	bic.w	r2, r2, #32
 800a89a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d135      	bne.n	800a938 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	330c      	adds	r3, #12
 800a8d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f023 0310 	bic.w	r3, r3, #16
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	330c      	adds	r3, #12
 800a8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f2:	623a      	str	r2, [r7, #32]
 800a8f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	69f9      	ldr	r1, [r7, #28]
 800a8f8:	6a3a      	ldr	r2, [r7, #32]
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e5      	bne.n	800a8d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0310 	and.w	r3, r3, #16
 800a910:	2b10      	cmp	r3, #16
 800a912:	d10a      	bne.n	800a92a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff fca9 	bl	800a288 <HAL_UARTEx_RxEventCallback>
 800a936:	e002      	b.n	800a93e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7f8 fe47 	bl	80035cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e002      	b.n	800a948 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	e000      	b.n	800a948 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a946:	2302      	movs	r3, #2
  }
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3730      	adds	r7, #48	; 0x30
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a954:	b0c0      	sub	sp, #256	; 0x100
 800a956:	af00      	add	r7, sp, #0
 800a958:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96c:	68d9      	ldr	r1, [r3, #12]
 800a96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	ea40 0301 	orr.w	r3, r0, r1
 800a978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97e:	689a      	ldr	r2, [r3, #8]
 800a980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	431a      	orrs	r2, r3
 800a988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	431a      	orrs	r2, r3
 800a990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	4313      	orrs	r3, r2
 800a998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9a8:	f021 010c 	bic.w	r1, r1, #12
 800a9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9b6:	430b      	orrs	r3, r1
 800a9b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a9ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ca:	6999      	ldr	r1, [r3, #24]
 800a9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	ea40 0301 	orr.w	r3, r0, r1
 800a9d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b8f      	ldr	r3, [pc, #572]	; (800ac1c <UART_SetConfig+0x2cc>)
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d005      	beq.n	800a9f0 <UART_SetConfig+0xa0>
 800a9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4b8d      	ldr	r3, [pc, #564]	; (800ac20 <UART_SetConfig+0x2d0>)
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d104      	bne.n	800a9fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9f0:	f7fd ff86 	bl	8008900 <HAL_RCC_GetPCLK2Freq>
 800a9f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a9f8:	e003      	b.n	800aa02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9fa:	f7fd ff6d 	bl	80088d8 <HAL_RCC_GetPCLK1Freq>
 800a9fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0c:	f040 810c 	bne.w	800ac28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa22:	4622      	mov	r2, r4
 800aa24:	462b      	mov	r3, r5
 800aa26:	1891      	adds	r1, r2, r2
 800aa28:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa2a:	415b      	adcs	r3, r3
 800aa2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa32:	4621      	mov	r1, r4
 800aa34:	eb12 0801 	adds.w	r8, r2, r1
 800aa38:	4629      	mov	r1, r5
 800aa3a:	eb43 0901 	adc.w	r9, r3, r1
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa52:	4690      	mov	r8, r2
 800aa54:	4699      	mov	r9, r3
 800aa56:	4623      	mov	r3, r4
 800aa58:	eb18 0303 	adds.w	r3, r8, r3
 800aa5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa60:	462b      	mov	r3, r5
 800aa62:	eb49 0303 	adc.w	r3, r9, r3
 800aa66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa7e:	460b      	mov	r3, r1
 800aa80:	18db      	adds	r3, r3, r3
 800aa82:	653b      	str	r3, [r7, #80]	; 0x50
 800aa84:	4613      	mov	r3, r2
 800aa86:	eb42 0303 	adc.w	r3, r2, r3
 800aa8a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa94:	f7f6 f8d8 	bl	8000c48 <__aeabi_uldivmod>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4b61      	ldr	r3, [pc, #388]	; (800ac24 <UART_SetConfig+0x2d4>)
 800aa9e:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa2:	095b      	lsrs	r3, r3, #5
 800aaa4:	011c      	lsls	r4, r3, #4
 800aaa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aab0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aab8:	4642      	mov	r2, r8
 800aaba:	464b      	mov	r3, r9
 800aabc:	1891      	adds	r1, r2, r2
 800aabe:	64b9      	str	r1, [r7, #72]	; 0x48
 800aac0:	415b      	adcs	r3, r3
 800aac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aac8:	4641      	mov	r1, r8
 800aaca:	eb12 0a01 	adds.w	sl, r2, r1
 800aace:	4649      	mov	r1, r9
 800aad0:	eb43 0b01 	adc.w	fp, r3, r1
 800aad4:	f04f 0200 	mov.w	r2, #0
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aae8:	4692      	mov	sl, r2
 800aaea:	469b      	mov	fp, r3
 800aaec:	4643      	mov	r3, r8
 800aaee:	eb1a 0303 	adds.w	r3, sl, r3
 800aaf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaf6:	464b      	mov	r3, r9
 800aaf8:	eb4b 0303 	adc.w	r3, fp, r3
 800aafc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab14:	460b      	mov	r3, r1
 800ab16:	18db      	adds	r3, r3, r3
 800ab18:	643b      	str	r3, [r7, #64]	; 0x40
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	eb42 0303 	adc.w	r3, r2, r3
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44
 800ab22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab2a:	f7f6 f88d 	bl	8000c48 <__aeabi_uldivmod>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	4b3b      	ldr	r3, [pc, #236]	; (800ac24 <UART_SetConfig+0x2d4>)
 800ab36:	fba3 2301 	umull	r2, r3, r3, r1
 800ab3a:	095b      	lsrs	r3, r3, #5
 800ab3c:	2264      	movs	r2, #100	; 0x64
 800ab3e:	fb02 f303 	mul.w	r3, r2, r3
 800ab42:	1acb      	subs	r3, r1, r3
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab4a:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <UART_SetConfig+0x2d4>)
 800ab4c:	fba3 2302 	umull	r2, r3, r3, r2
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab58:	441c      	add	r4, r3
 800ab5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab6c:	4642      	mov	r2, r8
 800ab6e:	464b      	mov	r3, r9
 800ab70:	1891      	adds	r1, r2, r2
 800ab72:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab74:	415b      	adcs	r3, r3
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab7c:	4641      	mov	r1, r8
 800ab7e:	1851      	adds	r1, r2, r1
 800ab80:	6339      	str	r1, [r7, #48]	; 0x30
 800ab82:	4649      	mov	r1, r9
 800ab84:	414b      	adcs	r3, r1
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
 800ab88:	f04f 0200 	mov.w	r2, #0
 800ab8c:	f04f 0300 	mov.w	r3, #0
 800ab90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab94:	4659      	mov	r1, fp
 800ab96:	00cb      	lsls	r3, r1, #3
 800ab98:	4651      	mov	r1, sl
 800ab9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab9e:	4651      	mov	r1, sl
 800aba0:	00ca      	lsls	r2, r1, #3
 800aba2:	4610      	mov	r0, r2
 800aba4:	4619      	mov	r1, r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	4642      	mov	r2, r8
 800abaa:	189b      	adds	r3, r3, r2
 800abac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abb0:	464b      	mov	r3, r9
 800abb2:	460a      	mov	r2, r1
 800abb4:	eb42 0303 	adc.w	r3, r2, r3
 800abb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800abcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800abd0:	460b      	mov	r3, r1
 800abd2:	18db      	adds	r3, r3, r3
 800abd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abd6:	4613      	mov	r3, r2
 800abd8:	eb42 0303 	adc.w	r3, r2, r3
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800abe6:	f7f6 f82f 	bl	8000c48 <__aeabi_uldivmod>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <UART_SetConfig+0x2d4>)
 800abf0:	fba3 1302 	umull	r1, r3, r3, r2
 800abf4:	095b      	lsrs	r3, r3, #5
 800abf6:	2164      	movs	r1, #100	; 0x64
 800abf8:	fb01 f303 	mul.w	r3, r1, r3
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	3332      	adds	r3, #50	; 0x32
 800ac02:	4a08      	ldr	r2, [pc, #32]	; (800ac24 <UART_SetConfig+0x2d4>)
 800ac04:	fba2 2303 	umull	r2, r3, r2, r3
 800ac08:	095b      	lsrs	r3, r3, #5
 800ac0a:	f003 0207 	and.w	r2, r3, #7
 800ac0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4422      	add	r2, r4
 800ac16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac18:	e105      	b.n	800ae26 <UART_SetConfig+0x4d6>
 800ac1a:	bf00      	nop
 800ac1c:	40011000 	.word	0x40011000
 800ac20:	40011400 	.word	0x40011400
 800ac24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	1891      	adds	r1, r2, r2
 800ac40:	6239      	str	r1, [r7, #32]
 800ac42:	415b      	adcs	r3, r3
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
 800ac46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac4a:	4641      	mov	r1, r8
 800ac4c:	1854      	adds	r4, r2, r1
 800ac4e:	4649      	mov	r1, r9
 800ac50:	eb43 0501 	adc.w	r5, r3, r1
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	00eb      	lsls	r3, r5, #3
 800ac5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac62:	00e2      	lsls	r2, r4, #3
 800ac64:	4614      	mov	r4, r2
 800ac66:	461d      	mov	r5, r3
 800ac68:	4643      	mov	r3, r8
 800ac6a:	18e3      	adds	r3, r4, r3
 800ac6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac70:	464b      	mov	r3, r9
 800ac72:	eb45 0303 	adc.w	r3, r5, r3
 800ac76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac96:	4629      	mov	r1, r5
 800ac98:	008b      	lsls	r3, r1, #2
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aca0:	4621      	mov	r1, r4
 800aca2:	008a      	lsls	r2, r1, #2
 800aca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aca8:	f7f5 ffce 	bl	8000c48 <__aeabi_uldivmod>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4b60      	ldr	r3, [pc, #384]	; (800ae34 <UART_SetConfig+0x4e4>)
 800acb2:	fba3 2302 	umull	r2, r3, r3, r2
 800acb6:	095b      	lsrs	r3, r3, #5
 800acb8:	011c      	lsls	r4, r3, #4
 800acba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800accc:	4642      	mov	r2, r8
 800acce:	464b      	mov	r3, r9
 800acd0:	1891      	adds	r1, r2, r2
 800acd2:	61b9      	str	r1, [r7, #24]
 800acd4:	415b      	adcs	r3, r3
 800acd6:	61fb      	str	r3, [r7, #28]
 800acd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acdc:	4641      	mov	r1, r8
 800acde:	1851      	adds	r1, r2, r1
 800ace0:	6139      	str	r1, [r7, #16]
 800ace2:	4649      	mov	r1, r9
 800ace4:	414b      	adcs	r3, r1
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	f04f 0200 	mov.w	r2, #0
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800acf4:	4659      	mov	r1, fp
 800acf6:	00cb      	lsls	r3, r1, #3
 800acf8:	4651      	mov	r1, sl
 800acfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acfe:	4651      	mov	r1, sl
 800ad00:	00ca      	lsls	r2, r1, #3
 800ad02:	4610      	mov	r0, r2
 800ad04:	4619      	mov	r1, r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	4642      	mov	r2, r8
 800ad0a:	189b      	adds	r3, r3, r2
 800ad0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad10:	464b      	mov	r3, r9
 800ad12:	460a      	mov	r2, r1
 800ad14:	eb42 0303 	adc.w	r3, r2, r3
 800ad18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad26:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad28:	f04f 0200 	mov.w	r2, #0
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad34:	4649      	mov	r1, r9
 800ad36:	008b      	lsls	r3, r1, #2
 800ad38:	4641      	mov	r1, r8
 800ad3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad3e:	4641      	mov	r1, r8
 800ad40:	008a      	lsls	r2, r1, #2
 800ad42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad46:	f7f5 ff7f 	bl	8000c48 <__aeabi_uldivmod>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4b39      	ldr	r3, [pc, #228]	; (800ae34 <UART_SetConfig+0x4e4>)
 800ad50:	fba3 1302 	umull	r1, r3, r3, r2
 800ad54:	095b      	lsrs	r3, r3, #5
 800ad56:	2164      	movs	r1, #100	; 0x64
 800ad58:	fb01 f303 	mul.w	r3, r1, r3
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	3332      	adds	r3, #50	; 0x32
 800ad62:	4a34      	ldr	r2, [pc, #208]	; (800ae34 <UART_SetConfig+0x4e4>)
 800ad64:	fba2 2303 	umull	r2, r3, r2, r3
 800ad68:	095b      	lsrs	r3, r3, #5
 800ad6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad6e:	441c      	add	r4, r3
 800ad70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad74:	2200      	movs	r2, #0
 800ad76:	673b      	str	r3, [r7, #112]	; 0x70
 800ad78:	677a      	str	r2, [r7, #116]	; 0x74
 800ad7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad7e:	4642      	mov	r2, r8
 800ad80:	464b      	mov	r3, r9
 800ad82:	1891      	adds	r1, r2, r2
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	415b      	adcs	r3, r3
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad8e:	4641      	mov	r1, r8
 800ad90:	1851      	adds	r1, r2, r1
 800ad92:	6039      	str	r1, [r7, #0]
 800ad94:	4649      	mov	r1, r9
 800ad96:	414b      	adcs	r3, r1
 800ad98:	607b      	str	r3, [r7, #4]
 800ad9a:	f04f 0200 	mov.w	r2, #0
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ada6:	4659      	mov	r1, fp
 800ada8:	00cb      	lsls	r3, r1, #3
 800adaa:	4651      	mov	r1, sl
 800adac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adb0:	4651      	mov	r1, sl
 800adb2:	00ca      	lsls	r2, r1, #3
 800adb4:	4610      	mov	r0, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	4603      	mov	r3, r0
 800adba:	4642      	mov	r2, r8
 800adbc:	189b      	adds	r3, r3, r2
 800adbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800adc0:	464b      	mov	r3, r9
 800adc2:	460a      	mov	r2, r1
 800adc4:	eb42 0303 	adc.w	r3, r2, r3
 800adc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	663b      	str	r3, [r7, #96]	; 0x60
 800add4:	667a      	str	r2, [r7, #100]	; 0x64
 800add6:	f04f 0200 	mov.w	r2, #0
 800adda:	f04f 0300 	mov.w	r3, #0
 800adde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ade2:	4649      	mov	r1, r9
 800ade4:	008b      	lsls	r3, r1, #2
 800ade6:	4641      	mov	r1, r8
 800ade8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adec:	4641      	mov	r1, r8
 800adee:	008a      	lsls	r2, r1, #2
 800adf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800adf4:	f7f5 ff28 	bl	8000c48 <__aeabi_uldivmod>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <UART_SetConfig+0x4e4>)
 800adfe:	fba3 1302 	umull	r1, r3, r3, r2
 800ae02:	095b      	lsrs	r3, r3, #5
 800ae04:	2164      	movs	r1, #100	; 0x64
 800ae06:	fb01 f303 	mul.w	r3, r1, r3
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	3332      	adds	r3, #50	; 0x32
 800ae10:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <UART_SetConfig+0x4e4>)
 800ae12:	fba2 2303 	umull	r2, r3, r2, r3
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	f003 020f 	and.w	r2, r3, #15
 800ae1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4422      	add	r2, r4
 800ae24:	609a      	str	r2, [r3, #8]
}
 800ae26:	bf00      	nop
 800ae28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae32:	bf00      	nop
 800ae34:	51eb851f 	.word	0x51eb851f

0800ae38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae38:	b084      	sub	sp, #16
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	f107 001c 	add.w	r0, r7, #28
 800ae46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d122      	bne.n	800ae96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ae64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ae78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d105      	bne.n	800ae8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 fbee 	bl	800c66c <USB_CoreReset>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
 800ae94:	e01a      	b.n	800aecc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 fbe2 	bl	800c66c <USB_CoreReset>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	639a      	str	r2, [r3, #56]	; 0x38
 800aebe:	e005      	b.n	800aecc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d10b      	bne.n	800aeea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f043 0206 	orr.w	r2, r3, #6
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f043 0220 	orr.w	r2, r3, #32
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aef6:	b004      	add	sp, #16
 800aef8:	4770      	bx	lr
	...

0800aefc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4613      	mov	r3, r2
 800af08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d165      	bne.n	800afdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	4a41      	ldr	r2, [pc, #260]	; (800b018 <USB_SetTurnaroundTime+0x11c>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d906      	bls.n	800af26 <USB_SetTurnaroundTime+0x2a>
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	4a40      	ldr	r2, [pc, #256]	; (800b01c <USB_SetTurnaroundTime+0x120>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d202      	bcs.n	800af26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800af20:	230f      	movs	r3, #15
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	e062      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	4a3c      	ldr	r2, [pc, #240]	; (800b01c <USB_SetTurnaroundTime+0x120>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d306      	bcc.n	800af3c <USB_SetTurnaroundTime+0x40>
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	4a3b      	ldr	r2, [pc, #236]	; (800b020 <USB_SetTurnaroundTime+0x124>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d202      	bcs.n	800af3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800af36:	230e      	movs	r3, #14
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e057      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4a38      	ldr	r2, [pc, #224]	; (800b020 <USB_SetTurnaroundTime+0x124>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d306      	bcc.n	800af52 <USB_SetTurnaroundTime+0x56>
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	4a37      	ldr	r2, [pc, #220]	; (800b024 <USB_SetTurnaroundTime+0x128>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d202      	bcs.n	800af52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800af4c:	230d      	movs	r3, #13
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	e04c      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	4a33      	ldr	r2, [pc, #204]	; (800b024 <USB_SetTurnaroundTime+0x128>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d306      	bcc.n	800af68 <USB_SetTurnaroundTime+0x6c>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4a32      	ldr	r2, [pc, #200]	; (800b028 <USB_SetTurnaroundTime+0x12c>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d802      	bhi.n	800af68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800af62:	230c      	movs	r3, #12
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	e041      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	4a2f      	ldr	r2, [pc, #188]	; (800b028 <USB_SetTurnaroundTime+0x12c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d906      	bls.n	800af7e <USB_SetTurnaroundTime+0x82>
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	4a2e      	ldr	r2, [pc, #184]	; (800b02c <USB_SetTurnaroundTime+0x130>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d802      	bhi.n	800af7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800af78:	230b      	movs	r3, #11
 800af7a:	617b      	str	r3, [r7, #20]
 800af7c:	e036      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4a2a      	ldr	r2, [pc, #168]	; (800b02c <USB_SetTurnaroundTime+0x130>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d906      	bls.n	800af94 <USB_SetTurnaroundTime+0x98>
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	4a29      	ldr	r2, [pc, #164]	; (800b030 <USB_SetTurnaroundTime+0x134>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d802      	bhi.n	800af94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800af8e:	230a      	movs	r3, #10
 800af90:	617b      	str	r3, [r7, #20]
 800af92:	e02b      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4a26      	ldr	r2, [pc, #152]	; (800b030 <USB_SetTurnaroundTime+0x134>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d906      	bls.n	800afaa <USB_SetTurnaroundTime+0xae>
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	4a25      	ldr	r2, [pc, #148]	; (800b034 <USB_SetTurnaroundTime+0x138>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d202      	bcs.n	800afaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800afa4:	2309      	movs	r3, #9
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e020      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4a21      	ldr	r2, [pc, #132]	; (800b034 <USB_SetTurnaroundTime+0x138>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d306      	bcc.n	800afc0 <USB_SetTurnaroundTime+0xc4>
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	4a20      	ldr	r2, [pc, #128]	; (800b038 <USB_SetTurnaroundTime+0x13c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d802      	bhi.n	800afc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800afba:	2308      	movs	r3, #8
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	e015      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4a1d      	ldr	r2, [pc, #116]	; (800b038 <USB_SetTurnaroundTime+0x13c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d906      	bls.n	800afd6 <USB_SetTurnaroundTime+0xda>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <USB_SetTurnaroundTime+0x140>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d202      	bcs.n	800afd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800afd0:	2307      	movs	r3, #7
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e00a      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800afd6:	2306      	movs	r3, #6
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e007      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800afe2:	2309      	movs	r3, #9
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	e001      	b.n	800afec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800afe8:	2309      	movs	r3, #9
 800afea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68da      	ldr	r2, [r3, #12]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	029b      	lsls	r3, r3, #10
 800b000:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b004:	431a      	orrs	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	00d8acbf 	.word	0x00d8acbf
 800b01c:	00e4e1c0 	.word	0x00e4e1c0
 800b020:	00f42400 	.word	0x00f42400
 800b024:	01067380 	.word	0x01067380
 800b028:	011a499f 	.word	0x011a499f
 800b02c:	01312cff 	.word	0x01312cff
 800b030:	014ca43f 	.word	0x014ca43f
 800b034:	016e3600 	.word	0x016e3600
 800b038:	01a6ab1f 	.word	0x01a6ab1f
 800b03c:	01e84800 	.word	0x01e84800

0800b040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f043 0201 	orr.w	r2, r3, #1
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f023 0201 	bic.w	r2, r3, #1
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d115      	bne.n	800b0d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f7f9 faa4 	bl	8004600 <HAL_Delay>
      ms++;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fa45 	bl	800c54e <USB_GetMode>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d01e      	beq.n	800b108 <USB_SetCurrentMode+0x84>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b31      	cmp	r3, #49	; 0x31
 800b0ce:	d9f0      	bls.n	800b0b2 <USB_SetCurrentMode+0x2e>
 800b0d0:	e01a      	b.n	800b108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b0d2:	78fb      	ldrb	r3, [r7, #3]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f7f9 fa8b 	bl	8004600 <HAL_Delay>
      ms++;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 fa2c 	bl	800c54e <USB_GetMode>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <USB_SetCurrentMode+0x84>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b31      	cmp	r3, #49	; 0x31
 800b100:	d9f0      	bls.n	800b0e4 <USB_SetCurrentMode+0x60>
 800b102:	e001      	b.n	800b108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e005      	b.n	800b114 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b32      	cmp	r3, #50	; 0x32
 800b10c:	d101      	bne.n	800b112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b11c:	b084      	sub	sp, #16
 800b11e:	b580      	push	{r7, lr}
 800b120:	b086      	sub	sp, #24
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	e009      	b.n	800b150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	3340      	adds	r3, #64	; 0x40
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	2200      	movs	r2, #0
 800b148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	3301      	adds	r3, #1
 800b14e:	613b      	str	r3, [r7, #16]
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2b0e      	cmp	r3, #14
 800b154:	d9f2      	bls.n	800b13c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d11c      	bne.n	800b196 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b16a:	f043 0302 	orr.w	r3, r3, #2
 800b16e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b174:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b180:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	639a      	str	r2, [r3, #56]	; 0x38
 800b194:	e00b      	b.n	800b1ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	680b      	ldr	r3, [r1, #0]
 800b1cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d10c      	bne.n	800b1ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f965 	bl	800b4ac <USB_SetDevSpeed>
 800b1e2:	e008      	b.n	800b1f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f960 	bl	800b4ac <USB_SetDevSpeed>
 800b1ec:	e003      	b.n	800b1f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b1ee:	2103      	movs	r1, #3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f95b 	bl	800b4ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1f6:	2110      	movs	r1, #16
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f8f3 	bl	800b3e4 <USB_FlushTxFifo>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f91f 	bl	800b44c <USB_FlushRxFifo>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	461a      	mov	r2, r3
 800b220:	2300      	movs	r3, #0
 800b222:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b22a:	461a      	mov	r2, r3
 800b22c:	2300      	movs	r3, #0
 800b22e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b236:	461a      	mov	r2, r3
 800b238:	2300      	movs	r3, #0
 800b23a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b23c:	2300      	movs	r3, #0
 800b23e:	613b      	str	r3, [r7, #16]
 800b240:	e043      	b.n	800b2ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b258:	d118      	bne.n	800b28c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26c:	461a      	mov	r2, r3
 800b26e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	e013      	b.n	800b29e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b282:	461a      	mov	r2, r3
 800b284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b288:	6013      	str	r3, [r2, #0]
 800b28a:	e008      	b.n	800b29e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	461a      	mov	r2, r3
 800b29a:	2300      	movs	r3, #0
 800b29c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	461a      	mov	r2, r3
 800b2be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	613b      	str	r3, [r7, #16]
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d3b7      	bcc.n	800b242 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	e043      	b.n	800b360 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2ee:	d118      	bne.n	800b322 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b302:	461a      	mov	r2, r3
 800b304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	e013      	b.n	800b334 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b318:	461a      	mov	r2, r3
 800b31a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	e008      	b.n	800b334 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32e:	461a      	mov	r2, r3
 800b330:	2300      	movs	r3, #0
 800b332:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b340:	461a      	mov	r2, r3
 800b342:	2300      	movs	r3, #0
 800b344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b352:	461a      	mov	r2, r3
 800b354:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b358:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	3301      	adds	r3, #1
 800b35e:	613b      	str	r3, [r7, #16]
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	429a      	cmp	r2, r3
 800b366:	d3b7      	bcc.n	800b2d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b37a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b388:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d105      	bne.n	800b39c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	f043 0210 	orr.w	r2, r3, #16
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	4b0f      	ldr	r3, [pc, #60]	; (800b3e0 <USB_DevInit+0x2c4>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	f043 0208 	orr.w	r2, r3, #8
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d107      	bne.n	800b3d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3c8:	f043 0304 	orr.w	r3, r3, #4
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3dc:	b004      	add	sp, #16
 800b3de:	4770      	bx	lr
 800b3e0:	803c3800 	.word	0x803c3800

0800b3e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4a13      	ldr	r2, [pc, #76]	; (800b448 <USB_FlushTxFifo+0x64>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d901      	bls.n	800b404 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e01b      	b.n	800b43c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	daf2      	bge.n	800b3f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	019b      	lsls	r3, r3, #6
 800b414:	f043 0220 	orr.w	r2, r3, #32
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4a08      	ldr	r2, [pc, #32]	; (800b448 <USB_FlushTxFifo+0x64>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d901      	bls.n	800b42e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e006      	b.n	800b43c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	f003 0320 	and.w	r3, r3, #32
 800b436:	2b20      	cmp	r3, #32
 800b438:	d0f0      	beq.n	800b41c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	00030d40 	.word	0x00030d40

0800b44c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4a11      	ldr	r2, [pc, #68]	; (800b4a8 <USB_FlushRxFifo+0x5c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d901      	bls.n	800b46a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e018      	b.n	800b49c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	daf2      	bge.n	800b458 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2210      	movs	r2, #16
 800b47a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4a08      	ldr	r2, [pc, #32]	; (800b4a8 <USB_FlushRxFifo+0x5c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d901      	bls.n	800b48e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e006      	b.n	800b49c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	f003 0310 	and.w	r3, r3, #16
 800b496:	2b10      	cmp	r3, #16
 800b498:	d0f0      	beq.n	800b47c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	00030d40 	.word	0x00030d40

0800b4ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f003 0306 	and.w	r3, r3, #6
 800b4f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	e00a      	b.n	800b51a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d002      	beq.n	800b510 <USB_GetDevSpeed+0x32>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b06      	cmp	r3, #6
 800b50e:	d102      	bne.n	800b516 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b510:	2302      	movs	r3, #2
 800b512:	75fb      	strb	r3, [r7, #23]
 800b514:	e001      	b.n	800b51a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b516:	230f      	movs	r3, #15
 800b518:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	371c      	adds	r7, #28
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d13a      	bne.n	800b5ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54a:	69da      	ldr	r2, [r3, #28]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	2101      	movs	r1, #1
 800b556:	fa01 f303 	lsl.w	r3, r1, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	68f9      	ldr	r1, [r7, #12]
 800b55e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b562:	4313      	orrs	r3, r2
 800b564:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d155      	bne.n	800b628 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	015a      	lsls	r2, r3, #5
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4413      	add	r3, r2
 800b584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	791b      	ldrb	r3, [r3, #4]
 800b596:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b598:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	059b      	lsls	r3, r3, #22
 800b59e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	0151      	lsls	r1, r2, #5
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	440a      	add	r2, r1
 800b5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	e036      	b.n	800b628 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c0:	69da      	ldr	r2, [r3, #28]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f003 030f 	and.w	r3, r3, #15
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d0:	041b      	lsls	r3, r3, #16
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d11a      	bne.n	800b628 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	791b      	ldrb	r3, [r3, #4]
 800b60c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b60e:	430b      	orrs	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	0151      	lsls	r1, r2, #5
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	440a      	add	r2, r1
 800b61a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b61e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b626:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
	...

0800b638 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	785b      	ldrb	r3, [r3, #1]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d161      	bne.n	800b718 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b66a:	d11f      	bne.n	800b6ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b68a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	0151      	lsls	r1, r2, #5
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	440a      	add	r2, r1
 800b6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f003 030f 	and.w	r3, r3, #15
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	43db      	mvns	r3, r3
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d6:	69da      	ldr	r2, [r3, #28]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 030f 	and.w	r3, r3, #15
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	0159      	lsls	r1, r3, #5
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	440b      	add	r3, r1
 800b70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70e:	4619      	mov	r1, r3
 800b710:	4b35      	ldr	r3, [pc, #212]	; (800b7e8 <USB_DeactivateEndpoint+0x1b0>)
 800b712:	4013      	ands	r3, r2
 800b714:	600b      	str	r3, [r1, #0]
 800b716:	e060      	b.n	800b7da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b72a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b72e:	d11f      	bne.n	800b770 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4413      	add	r3, r2
 800b738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	0151      	lsls	r1, r2, #5
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	440a      	add	r2, r1
 800b746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b74a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b74e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	0151      	lsls	r1, r2, #5
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	440a      	add	r2, r1
 800b766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b76e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	2101      	movs	r1, #1
 800b782:	fa01 f303 	lsl.w	r3, r1, r3
 800b786:	041b      	lsls	r3, r3, #16
 800b788:	43db      	mvns	r3, r3
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b790:	4013      	ands	r3, r2
 800b792:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79a:	69da      	ldr	r2, [r3, #28]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	f003 030f 	and.w	r3, r3, #15
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7aa:	041b      	lsls	r3, r3, #16
 800b7ac:	43db      	mvns	r3, r3
 800b7ae:	68f9      	ldr	r1, [r7, #12]
 800b7b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	0159      	lsls	r1, r3, #5
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	440b      	add	r3, r1
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <USB_DeactivateEndpoint+0x1b4>)
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	ec337800 	.word	0xec337800
 800b7ec:	eff37800 	.word	0xeff37800

0800b7f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08a      	sub	sp, #40	; 0x28
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	785b      	ldrb	r3, [r3, #1]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	f040 815c 	bne.w	800baca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d132      	bne.n	800b880 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	0151      	lsls	r1, r2, #5
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	440a      	add	r2, r1
 800b830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b83c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	0151      	lsls	r1, r2, #5
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	440a      	add	r2, r1
 800b854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b85c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	015a      	lsls	r2, r3, #5
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	69ba      	ldr	r2, [r7, #24]
 800b86e:	0151      	lsls	r1, r2, #5
 800b870:	69fa      	ldr	r2, [r7, #28]
 800b872:	440a      	add	r2, r1
 800b874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b878:	0cdb      	lsrs	r3, r3, #19
 800b87a:	04db      	lsls	r3, r3, #19
 800b87c:	6113      	str	r3, [r2, #16]
 800b87e:	e074      	b.n	800b96a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	0151      	lsls	r1, r2, #5
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	440a      	add	r2, r1
 800b896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89a:	0cdb      	lsrs	r3, r3, #19
 800b89c:	04db      	lsls	r3, r3, #19
 800b89e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	0151      	lsls	r1, r2, #5
 800b8b2:	69fa      	ldr	r2, [r7, #28]
 800b8b4:	440a      	add	r2, r1
 800b8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	6999      	ldr	r1, [r3, #24]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	440b      	add	r3, r1
 800b8dc:	1e59      	subs	r1, r3, #1
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b8e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b8e8:	4b9d      	ldr	r3, [pc, #628]	; (800bb60 <USB_EPStartXfer+0x370>)
 800b8ea:	400b      	ands	r3, r1
 800b8ec:	69b9      	ldr	r1, [r7, #24]
 800b8ee:	0148      	lsls	r0, r1, #5
 800b8f0:	69f9      	ldr	r1, [r7, #28]
 800b8f2:	4401      	add	r1, r0
 800b8f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	015a      	lsls	r2, r3, #5
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	4413      	add	r3, r2
 800b904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b908:	691a      	ldr	r2, [r3, #16]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b912:	69b9      	ldr	r1, [r7, #24]
 800b914:	0148      	lsls	r0, r1, #5
 800b916:	69f9      	ldr	r1, [r7, #28]
 800b918:	4401      	add	r1, r0
 800b91a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b91e:	4313      	orrs	r3, r2
 800b920:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	791b      	ldrb	r3, [r3, #4]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d11f      	bne.n	800b96a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b944:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b948:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	0151      	lsls	r1, r2, #5
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	440a      	add	r2, r1
 800b960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b968:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b96a:	79fb      	ldrb	r3, [r7, #7]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d14b      	bne.n	800ba08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b984:	461a      	mov	r2, r3
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	791b      	ldrb	r3, [r3, #4]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d128      	bne.n	800b9e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d110      	bne.n	800b9c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	0151      	lsls	r1, r2, #5
 800b9b6:	69fa      	ldr	r2, [r7, #28]
 800b9b8:	440a      	add	r2, r1
 800b9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	e00f      	b.n	800b9e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69ba      	ldr	r2, [r7, #24]
 800b9d6:	0151      	lsls	r1, r2, #5
 800b9d8:	69fa      	ldr	r2, [r7, #28]
 800b9da:	440a      	add	r2, r1
 800b9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	0151      	lsls	r1, r2, #5
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	440a      	add	r2, r1
 800b9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba04:	6013      	str	r3, [r2, #0]
 800ba06:	e133      	b.n	800bc70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69ba      	ldr	r2, [r7, #24]
 800ba18:	0151      	lsls	r1, r2, #5
 800ba1a:	69fa      	ldr	r2, [r7, #28]
 800ba1c:	440a      	add	r2, r1
 800ba1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	791b      	ldrb	r3, [r3, #4]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d015      	beq.n	800ba5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 811b 	beq.w	800bc70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 030f 	and.w	r3, r3, #15
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba50:	69f9      	ldr	r1, [r7, #28]
 800ba52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba56:	4313      	orrs	r3, r2
 800ba58:	634b      	str	r3, [r1, #52]	; 0x34
 800ba5a:	e109      	b.n	800bc70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d110      	bne.n	800ba8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	0151      	lsls	r1, r2, #5
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	440a      	add	r2, r1
 800ba82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	e00f      	b.n	800baae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	015a      	lsls	r2, r3, #5
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	4413      	add	r3, r2
 800ba96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	69ba      	ldr	r2, [r7, #24]
 800ba9e:	0151      	lsls	r1, r2, #5
 800baa0:	69fa      	ldr	r2, [r7, #28]
 800baa2:	440a      	add	r2, r1
 800baa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	6919      	ldr	r1, [r3, #16]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	781a      	ldrb	r2, [r3, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	b298      	uxth	r0, r3
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	4603      	mov	r3, r0
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 fade 	bl	800c084 <USB_WritePacket>
 800bac8:	e0d2      	b.n	800bc70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	69ba      	ldr	r2, [r7, #24]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae4:	0cdb      	lsrs	r3, r3, #19
 800bae6:	04db      	lsls	r3, r3, #19
 800bae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	0151      	lsls	r1, r2, #5
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	440a      	add	r2, r1
 800bb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d126      	bne.n	800bb64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb2c:	69b9      	ldr	r1, [r7, #24]
 800bb2e:	0148      	lsls	r0, r1, #5
 800bb30:	69f9      	ldr	r1, [r7, #28]
 800bb32:	4401      	add	r1, r0
 800bb34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb5a:	6113      	str	r3, [r2, #16]
 800bb5c:	e03a      	b.n	800bbd4 <USB_EPStartXfer+0x3e4>
 800bb5e:	bf00      	nop
 800bb60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	699a      	ldr	r2, [r3, #24]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	1e5a      	subs	r2, r3, #1
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	8afa      	ldrh	r2, [r7, #22]
 800bb80:	fb03 f202 	mul.w	r2, r3, r2
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb94:	691a      	ldr	r2, [r3, #16]
 800bb96:	8afb      	ldrh	r3, [r7, #22]
 800bb98:	04d9      	lsls	r1, r3, #19
 800bb9a:	4b38      	ldr	r3, [pc, #224]	; (800bc7c <USB_EPStartXfer+0x48c>)
 800bb9c:	400b      	ands	r3, r1
 800bb9e:	69b9      	ldr	r1, [r7, #24]
 800bba0:	0148      	lsls	r0, r1, #5
 800bba2:	69f9      	ldr	r1, [r7, #28]
 800bba4:	4401      	add	r1, r0
 800bba6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbc4:	69b9      	ldr	r1, [r7, #24]
 800bbc6:	0148      	lsls	r0, r1, #5
 800bbc8:	69f9      	ldr	r1, [r7, #28]
 800bbca:	4401      	add	r1, r0
 800bbcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d10d      	bne.n	800bbf6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d009      	beq.n	800bbf6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6919      	ldr	r1, [r3, #16]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	015a      	lsls	r2, r3, #5
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	4413      	add	r3, r2
 800bbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf2:	460a      	mov	r2, r1
 800bbf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d128      	bne.n	800bc50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d110      	bne.n	800bc30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	0151      	lsls	r1, r2, #5
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	440a      	add	r2, r1
 800bc24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	e00f      	b.n	800bc50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	0151      	lsls	r1, r2, #5
 800bc42:	69fa      	ldr	r2, [r7, #28]
 800bc44:	440a      	add	r2, r1
 800bc46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3720      	adds	r7, #32
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	1ff80000 	.word	0x1ff80000

0800bc80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	785b      	ldrb	r3, [r3, #1]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	f040 80ce 	bne.w	800be3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d132      	bne.n	800bd10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	0151      	lsls	r1, r2, #5
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	440a      	add	r2, r1
 800bcc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	0151      	lsls	r1, r2, #5
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	440a      	add	r2, r1
 800bce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	0151      	lsls	r1, r2, #5
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	440a      	add	r2, r1
 800bd04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd08:	0cdb      	lsrs	r3, r3, #19
 800bd0a:	04db      	lsls	r3, r3, #19
 800bd0c:	6113      	str	r3, [r2, #16]
 800bd0e:	e04e      	b.n	800bdae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	0151      	lsls	r1, r2, #5
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	440a      	add	r2, r1
 800bd26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2a:	0cdb      	lsrs	r3, r3, #19
 800bd2c:	04db      	lsls	r3, r3, #19
 800bd2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	0151      	lsls	r1, r2, #5
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	440a      	add	r2, r1
 800bd46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	699a      	ldr	r2, [r3, #24]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d903      	bls.n	800bd68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	0151      	lsls	r1, r2, #5
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd94:	691a      	ldr	r2, [r3, #16]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd9e:	6939      	ldr	r1, [r7, #16]
 800bda0:	0148      	lsls	r0, r1, #5
 800bda2:	6979      	ldr	r1, [r7, #20]
 800bda4:	4401      	add	r1, r0
 800bda6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d11e      	bne.n	800bdf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d009      	beq.n	800bdd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc8:	461a      	mov	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	0151      	lsls	r1, r2, #5
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	440a      	add	r2, r1
 800bde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	e097      	b.n	800bf22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	015a      	lsls	r2, r3, #5
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	0151      	lsls	r1, r2, #5
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	440a      	add	r2, r1
 800be08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8083 	beq.w	800bf22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	f003 030f 	and.w	r3, r3, #15
 800be2c:	2101      	movs	r1, #1
 800be2e:	fa01 f303 	lsl.w	r3, r1, r3
 800be32:	6979      	ldr	r1, [r7, #20]
 800be34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be38:	4313      	orrs	r3, r2
 800be3a:	634b      	str	r3, [r1, #52]	; 0x34
 800be3c:	e071      	b.n	800bf22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	0151      	lsls	r1, r2, #5
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	440a      	add	r2, r1
 800be54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be58:	0cdb      	lsrs	r3, r3, #19
 800be5a:	04db      	lsls	r3, r3, #19
 800be5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	0151      	lsls	r1, r2, #5
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	440a      	add	r2, r1
 800be74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	68da      	ldr	r2, [r3, #12]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	0151      	lsls	r1, r2, #5
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	440a      	add	r2, r1
 800beb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec6:	691a      	ldr	r2, [r3, #16]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bed0:	6939      	ldr	r1, [r7, #16]
 800bed2:	0148      	lsls	r0, r1, #5
 800bed4:	6979      	ldr	r1, [r7, #20]
 800bed6:	4401      	add	r1, r0
 800bed8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bedc:	4313      	orrs	r3, r2
 800bede:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d10d      	bne.n	800bf02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6919      	ldr	r1, [r3, #16]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befe:	460a      	mov	r2, r1
 800bf00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	0151      	lsls	r1, r2, #5
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	440a      	add	r2, r1
 800bf18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	371c      	adds	r7, #28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	785b      	ldrb	r3, [r3, #1]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d14a      	bne.n	800bfe4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf66:	f040 8086 	bne.w	800c076 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	7812      	ldrb	r2, [r2, #0]
 800bfa2:	0151      	lsls	r1, r2, #5
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	440a      	add	r2, r1
 800bfa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f242 7210 	movw	r2, #10000	; 0x2710
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d902      	bls.n	800bfc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bfc6:	e056      	b.n	800c076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfe0:	d0e7      	beq.n	800bfb2 <USB_EPStopXfer+0x82>
 800bfe2:	e048      	b.n	800c076 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bffc:	d13b      	bne.n	800c076 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	7812      	ldrb	r2, [r2, #0]
 800c012:	0151      	lsls	r1, r2, #5
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	440a      	add	r2, r1
 800c018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c01c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c020:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	7812      	ldrb	r2, [r2, #0]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c052:	4293      	cmp	r3, r2
 800c054:	d902      	bls.n	800c05c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
          break;
 800c05a:	e00c      	b.n	800c076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c074:	d0e7      	beq.n	800c046 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	371c      	adds	r7, #28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c084:	b480      	push	{r7}
 800c086:	b089      	sub	sp, #36	; 0x24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	4611      	mov	r1, r2
 800c090:	461a      	mov	r2, r3
 800c092:	460b      	mov	r3, r1
 800c094:	71fb      	strb	r3, [r7, #7]
 800c096:	4613      	mov	r3, r2
 800c098:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c0a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d123      	bne.n	800c0f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c0aa:	88bb      	ldrh	r3, [r7, #4]
 800c0ac:	3303      	adds	r3, #3
 800c0ae:	089b      	lsrs	r3, r3, #2
 800c0b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61bb      	str	r3, [r7, #24]
 800c0b6:	e018      	b.n	800c0ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	031a      	lsls	r2, r3, #12
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	61bb      	str	r3, [r7, #24]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d3e2      	bcc.n	800c0b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3724      	adds	r7, #36	; 0x24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c100:	b480      	push	{r7}
 800c102:	b08b      	sub	sp, #44	; 0x2c
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	089b      	lsrs	r3, r3, #2
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	f003 0303 	and.w	r3, r3, #3
 800c124:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c126:	2300      	movs	r3, #0
 800c128:	623b      	str	r3, [r7, #32]
 800c12a:	e014      	b.n	800c156 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	601a      	str	r2, [r3, #0]
    pDest++;
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	3301      	adds	r3, #1
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	3301      	adds	r3, #1
 800c142:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	3301      	adds	r3, #1
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	3301      	adds	r3, #1
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	3301      	adds	r3, #1
 800c154:	623b      	str	r3, [r7, #32]
 800c156:	6a3a      	ldr	r2, [r7, #32]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d3e6      	bcc.n	800c12c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c15e:	8bfb      	ldrh	r3, [r7, #30]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01e      	beq.n	800c1a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c164:	2300      	movs	r3, #0
 800c166:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16e:	461a      	mov	r2, r3
 800c170:	f107 0310 	add.w	r3, r7, #16
 800c174:	6812      	ldr	r2, [r2, #0]
 800c176:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	fa22 f303 	lsr.w	r3, r2, r3
 800c184:	b2da      	uxtb	r2, r3
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	701a      	strb	r2, [r3, #0]
      i++;
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	3301      	adds	r3, #1
 800c18e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	3301      	adds	r3, #1
 800c194:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c196:	8bfb      	ldrh	r3, [r7, #30]
 800c198:	3b01      	subs	r3, #1
 800c19a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c19c:	8bfb      	ldrh	r3, [r7, #30]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1ea      	bne.n	800c178 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	372c      	adds	r7, #44	; 0x2c
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	785b      	ldrb	r3, [r3, #1]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d12c      	bne.n	800c226 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	015a      	lsls	r2, r3, #5
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db12      	blt.n	800c204 <USB_EPSetStall+0x54>
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00f      	beq.n	800c204 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	015a      	lsls	r2, r3, #5
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	0151      	lsls	r1, r2, #5
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	440a      	add	r2, r1
 800c1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c202:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	0151      	lsls	r1, r2, #5
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	440a      	add	r2, r1
 800c21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c21e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	e02b      	b.n	800c27e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	db12      	blt.n	800c25e <USB_EPSetStall+0xae>
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00f      	beq.n	800c25e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	015a      	lsls	r2, r3, #5
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4413      	add	r3, r2
 800c246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	0151      	lsls	r1, r2, #5
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	440a      	add	r2, r1
 800c254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c25c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	0151      	lsls	r1, r2, #5
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	440a      	add	r2, r1
 800c274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c27c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	785b      	ldrb	r3, [r3, #1]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d128      	bne.n	800c2fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	0151      	lsls	r1, r2, #5
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	440a      	add	r2, r1
 800c2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	791b      	ldrb	r3, [r3, #4]
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d003      	beq.n	800c2d8 <USB_EPClearStall+0x4c>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	791b      	ldrb	r3, [r3, #4]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d138      	bne.n	800c34a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	e027      	b.n	800c34a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	0151      	lsls	r1, r2, #5
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	440a      	add	r2, r1
 800c310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c318:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	791b      	ldrb	r3, [r3, #4]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d003      	beq.n	800c32a <USB_EPClearStall+0x9e>
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	791b      	ldrb	r3, [r3, #4]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d10f      	bne.n	800c34a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	015a      	lsls	r2, r3, #5
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4413      	add	r3, r2
 800c332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	0151      	lsls	r1, r2, #5
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	440a      	add	r2, r1
 800c340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c348:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c376:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c37a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	011b      	lsls	r3, r3, #4
 800c388:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c38c:	68f9      	ldr	r1, [r7, #12]
 800c38e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c392:	4313      	orrs	r3, r2
 800c394:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3be:	f023 0303 	bic.w	r3, r3, #3
 800c3c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3d2:	f023 0302 	bic.w	r3, r3, #2
 800c3d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c414:	f043 0302 	orr.w	r3, r3, #2
 800c418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	4013      	ands	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c440:	68fb      	ldr	r3, [r7, #12]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c44e:	b480      	push	{r7}
 800c450:	b085      	sub	sp, #20
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46a:	69db      	ldr	r3, [r3, #28]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	4013      	ands	r3, r2
 800c470:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	0c1b      	lsrs	r3, r3, #16
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	b29b      	uxth	r3, r3
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c4c6:	78fb      	ldrb	r3, [r7, #3]
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b087      	sub	sp, #28
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	f003 030f 	and.w	r3, r3, #15
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	fa22 f303 	lsr.w	r3, r2, r3
 800c522:	01db      	lsls	r3, r3, #7
 800c524:	b2db      	uxtb	r3, r3
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	4313      	orrs	r3, r2
 800c52a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4013      	ands	r3, r2
 800c53e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c540:	68bb      	ldr	r3, [r7, #8]
}
 800c542:	4618      	mov	r0, r3
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c54e:	b480      	push	{r7}
 800c550:	b083      	sub	sp, #12
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	f003 0301 	and.w	r3, r3, #1
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c584:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c588:	f023 0307 	bic.w	r3, r3, #7
 800c58c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	333c      	adds	r3, #60	; 0x3c
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	4a26      	ldr	r2, [pc, #152]	; (800c668 <USB_EP0_OutStart+0xb8>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d90a      	bls.n	800c5ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e4:	d101      	bne.n	800c5ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e037      	b.n	800c65a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c618:	f043 0318 	orr.w	r3, r3, #24
 800c61c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c630:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d10f      	bne.n	800c658 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63e:	461a      	mov	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c652:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	4f54300a 	.word	0x4f54300a

0800c66c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	4a13      	ldr	r2, [pc, #76]	; (800c6d0 <USB_CoreReset+0x64>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d901      	bls.n	800c68a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e01b      	b.n	800c6c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	daf2      	bge.n	800c678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	f043 0201 	orr.w	r2, r3, #1
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4a09      	ldr	r2, [pc, #36]	; (800c6d0 <USB_CoreReset+0x64>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d901      	bls.n	800c6b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e006      	b.n	800c6c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d0f0      	beq.n	800c6a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	00030d40 	.word	0x00030d40

0800c6d4 <VL53L1X_SensorInit>:

	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800c6ec:	232d      	movs	r3, #45	; 0x2d
 800c6ee:	73bb      	strb	r3, [r7, #14]
 800c6f0:	e011      	b.n	800c716 <VL53L1X_SensorInit+0x42>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	b299      	uxth	r1, r3
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	3b2d      	subs	r3, #45	; 0x2d
 800c6fa:	4a2c      	ldr	r2, [pc, #176]	; (800c7ac <VL53L1X_SensorInit+0xd8>)
 800c6fc:	5cd3      	ldrb	r3, [r2, r3]
 800c6fe:	461a      	mov	r2, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 facd 	bl	800cca0 <VL53L1_WrByte>
 800c706:	4603      	mov	r3, r0
 800c708:	461a      	mov	r2, r3
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	3301      	adds	r3, #1
 800c714:	73bb      	strb	r3, [r7, #14]
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b87      	cmp	r3, #135	; 0x87
 800c71a:	d9ea      	bls.n	800c6f2 <VL53L1X_SensorInit+0x1e>
	}
	status |= VL53L1X_StartRanging(dev, i2cHandle);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f88d 	bl	800c83e <VL53L1X_StartRanging>
 800c724:	4603      	mov	r3, r0
 800c726:	461a      	mov	r2, r3
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800c732:	e00b      	b.n	800c74c <VL53L1X_SensorInit+0x78>
			status |= VL53L1X_CheckForDataReady(dev, i2cHandle, &tmp);
 800c734:	f107 030d 	add.w	r3, r7, #13
 800c738:	461a      	mov	r2, r3
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f8b2 	bl	800c8a6 <VL53L1X_CheckForDataReady>
 800c742:	4603      	mov	r3, r0
 800c744:	461a      	mov	r2, r3
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	4313      	orrs	r3, r2
 800c74a:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 800c74c:	7b7b      	ldrb	r3, [r7, #13]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0f0      	beq.n	800c734 <VL53L1X_SensorInit+0x60>
	}
	status |= VL53L1X_ClearInterrupt(dev, i2cHandle);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f82b 	bl	800c7b0 <VL53L1X_ClearInterrupt>
 800c75a:	4603      	mov	r3, r0
 800c75c:	461a      	mov	r2, r3
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	4313      	orrs	r3, r2
 800c762:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev, i2cHandle);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f883 	bl	800c872 <VL53L1X_StopRanging>
 800c76c:	4603      	mov	r3, r0
 800c76e:	461a      	mov	r2, r3
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	4313      	orrs	r3, r2
 800c774:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 800c776:	2209      	movs	r2, #9
 800c778:	2108      	movs	r1, #8
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa90 	bl	800cca0 <VL53L1_WrByte>
 800c780:	4603      	mov	r3, r0
 800c782:	461a      	mov	r2, r3
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4313      	orrs	r3, r2
 800c788:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 800c78a:	2200      	movs	r2, #0
 800c78c:	210b      	movs	r1, #11
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa86 	bl	800cca0 <VL53L1_WrByte>
 800c794:	4603      	mov	r3, r0
 800c796:	461a      	mov	r2, r3
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	73fb      	strb	r3, [r7, #15]
	return status;
 800c79e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0801367c 	.word	0x0801367c

0800c7b0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	2186      	movs	r1, #134	; 0x86
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fa69 	bl	800cca0 <VL53L1_WrByte>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	73fb      	strb	r3, [r7, #15]

	return status;
 800c7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *pInterruptPolarity)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	601a      	str	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800c7fa:	f107 0316 	add.w	r3, r7, #22
 800c7fe:	461a      	mov	r2, r3
 800c800:	2130      	movs	r1, #48	; 0x30
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 fa8d 	bl	800cd22 <VL53L1_RdByte>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	4313      	orrs	r3, r2
 800c810:	75fb      	strb	r3, [r7, #23]
	Temp = Temp & 0x10;
 800c812:	7dbb      	ldrb	r3, [r7, #22]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	75bb      	strb	r3, [r7, #22]
	*pInterruptPolarity = !(Temp >> 4);
 800c81c:	7dbb      	ldrb	r3, [r7, #22]
 800c81e:	091b      	lsrs	r3, r3, #4
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	bf0c      	ite	eq
 800c826:	2301      	moveq	r3, #1
 800c828:	2300      	movne	r3, #0
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	701a      	strb	r2, [r3, #0]
	return status;
 800c832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800c852:	2240      	movs	r2, #64	; 0x40
 800c854:	2187      	movs	r1, #135	; 0x87
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fa22 	bl	800cca0 <VL53L1_WrByte>
 800c85c:	4603      	mov	r3, r0
 800c85e:	461a      	mov	r2, r3
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	4313      	orrs	r3, r2
 800c864:	73fb      	strb	r3, [r7, #15]
	return status;
 800c866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800c886:	2200      	movs	r2, #0
 800c888:	2187      	movs	r1, #135	; 0x87
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fa08 	bl	800cca0 <VL53L1_WrByte>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4313      	orrs	r3, r2
 800c898:	73fb      	strb	r3, [r7, #15]
	return status;
 800c89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *isDataReady)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b086      	sub	sp, #24
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	601a      	str	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_GetInterruptPolarity(dev, i2cHandle, &IntPol);
 800c8bc:	f107 0315 	add.w	r3, r7, #21
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff ff8d 	bl	800c7e4 <VL53L1X_GetInterruptPolarity>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800c8d4:	f107 0316 	add.w	r3, r7, #22
 800c8d8:	461a      	mov	r2, r3
 800c8da:	2131      	movs	r1, #49	; 0x31
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f000 fa20 	bl	800cd22 <VL53L1_RdByte>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	75fb      	strb	r3, [r7, #23]

	/* Read in the register to check if a new value is available */
	if (status == 0){
 800c8ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10c      	bne.n	800c90e <VL53L1X_CheckForDataReady+0x68>
		if ((Temp & 1) == IntPol)
 800c8f4:	7dbb      	ldrb	r3, [r7, #22]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	7d7a      	ldrb	r2, [r7, #21]
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d103      	bne.n	800c908 <VL53L1X_CheckForDataReady+0x62>
			*isDataReady = 1;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	e002      	b.n	800c90e <VL53L1X_CheckForDataReady+0x68>
		else
			*isDataReady = 0;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800c90e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t TimingBudgetInMs)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b086      	sub	sp, #24
 800c91e:	af00      	add	r7, sp, #0
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	60b9      	str	r1, [r7, #8]
 800c924:	4613      	mov	r3, r2
 800c926:	80fb      	strh	r3, [r7, #6]
	dev -> i2cHandle = i2cHandle;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	601a      	str	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800c92e:	2300      	movs	r3, #0
 800c930:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_GetDistanceMode(dev, i2cHandle, &DM);
 800c932:	f107 0314 	add.w	r3, r7, #20
 800c936:	461a      	mov	r2, r3
 800c938:	68b9      	ldr	r1, [r7, #8]
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 f8ea 	bl	800cb14 <VL53L1X_GetDistanceMode>
 800c940:	4603      	mov	r3, r0
 800c942:	461a      	mov	r2, r3
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	4313      	orrs	r3, r2
 800c948:	75fb      	strb	r3, [r7, #23]
	if (DM == 0)
 800c94a:	8abb      	ldrh	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <VL53L1X_SetTimingBudgetInMs+0x3a>
		return 1;
 800c950:	2301      	movs	r3, #1
 800c952:	e0db      	b.n	800cb0c <VL53L1X_SetTimingBudgetInMs+0x1f2>
	else if (DM == 1) {	/* Short DistanceMode */
 800c954:	8abb      	ldrh	r3, [r7, #20]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d173      	bne.n	800ca42 <VL53L1X_SetTimingBudgetInMs+0x128>
		switch (TimingBudgetInMs) {
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c960:	d05f      	beq.n	800ca22 <VL53L1X_SetTimingBudgetInMs+0x108>
 800c962:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c966:	dc69      	bgt.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
 800c968:	2bc8      	cmp	r3, #200	; 0xc8
 800c96a:	d04d      	beq.n	800ca08 <VL53L1X_SetTimingBudgetInMs+0xee>
 800c96c:	2bc8      	cmp	r3, #200	; 0xc8
 800c96e:	dc65      	bgt.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
 800c970:	2b64      	cmp	r3, #100	; 0x64
 800c972:	d03c      	beq.n	800c9ee <VL53L1X_SetTimingBudgetInMs+0xd4>
 800c974:	2b64      	cmp	r3, #100	; 0x64
 800c976:	dc61      	bgt.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
 800c978:	2b32      	cmp	r3, #50	; 0x32
 800c97a:	d02b      	beq.n	800c9d4 <VL53L1X_SetTimingBudgetInMs+0xba>
 800c97c:	2b32      	cmp	r3, #50	; 0x32
 800c97e:	dc5d      	bgt.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
 800c980:	2b21      	cmp	r3, #33	; 0x21
 800c982:	d01c      	beq.n	800c9be <VL53L1X_SetTimingBudgetInMs+0xa4>
 800c984:	2b21      	cmp	r3, #33	; 0x21
 800c986:	dc59      	bgt.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
 800c988:	2b0f      	cmp	r3, #15
 800c98a:	d002      	beq.n	800c992 <VL53L1X_SetTimingBudgetInMs+0x78>
 800c98c:	2b14      	cmp	r3, #20
 800c98e:	d00b      	beq.n	800c9a8 <VL53L1X_SetTimingBudgetInMs+0x8e>
 800c990:	e054      	b.n	800ca3c <VL53L1X_SetTimingBudgetInMs+0x122>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x01D);
 800c992:	221d      	movs	r2, #29
 800c994:	215e      	movs	r1, #94	; 0x5e
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f99d 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0027);
 800c99c:	2227      	movs	r2, #39	; 0x27
 800c99e:	2161      	movs	r1, #97	; 0x61
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 f998 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800c9a6:	e0af      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0051);
 800c9a8:	2251      	movs	r2, #81	; 0x51
 800c9aa:	215e      	movs	r1, #94	; 0x5e
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 f992 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800c9b2:	226e      	movs	r2, #110	; 0x6e
 800c9b4:	2161      	movs	r1, #97	; 0x61
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f000 f98d 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800c9bc:	e0a4      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x00D6);
 800c9be:	22d6      	movs	r2, #214	; 0xd6
 800c9c0:	215e      	movs	r1, #94	; 0x5e
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 f987 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800c9c8:	226e      	movs	r2, #110	; 0x6e
 800c9ca:	2161      	movs	r1, #97	; 0x61
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f982 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800c9d2:	e099      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x1AE);
 800c9d4:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800c9d8:	215e      	movs	r1, #94	; 0x5e
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f000 f97b 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x01E8);
 800c9e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c9e4:	2161      	movs	r1, #97	; 0x61
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f000 f975 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800c9ec:	e08c      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x02E1);
 800c9ee:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c9f2:	215e      	movs	r1, #94	; 0x5e
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f000 f96e 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0388);
 800c9fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c9fe:	2161      	movs	r1, #97	; 0x61
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 f968 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800ca06:	e07f      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x03E1);
 800ca08:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ca0c:	215e      	movs	r1, #94	; 0x5e
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f000 f961 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0496);
 800ca14:	f240 4296 	movw	r2, #1174	; 0x496
 800ca18:	2161      	movs	r1, #97	; 0x61
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f95b 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800ca20:	e072      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0591);
 800ca22:	f240 5291 	movw	r2, #1425	; 0x591
 800ca26:	215e      	movs	r1, #94	; 0x5e
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 f954 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x05C1);
 800ca2e:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800ca32:	2161      	movs	r1, #97	; 0x61
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f94e 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800ca3a:	e065      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		default:
			status = 1;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	75fb      	strb	r3, [r7, #23]
			break;
 800ca40:	e062      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		}
	} else {
		switch (TimingBudgetInMs) {
 800ca42:	88fb      	ldrh	r3, [r7, #6]
 800ca44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ca48:	d04e      	beq.n	800cae8 <VL53L1X_SetTimingBudgetInMs+0x1ce>
 800ca4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ca4e:	dc58      	bgt.n	800cb02 <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800ca50:	2bc8      	cmp	r3, #200	; 0xc8
 800ca52:	d03c      	beq.n	800cace <VL53L1X_SetTimingBudgetInMs+0x1b4>
 800ca54:	2bc8      	cmp	r3, #200	; 0xc8
 800ca56:	dc54      	bgt.n	800cb02 <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800ca58:	2b64      	cmp	r3, #100	; 0x64
 800ca5a:	d02b      	beq.n	800cab4 <VL53L1X_SetTimingBudgetInMs+0x19a>
 800ca5c:	2b64      	cmp	r3, #100	; 0x64
 800ca5e:	dc50      	bgt.n	800cb02 <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800ca60:	2b32      	cmp	r3, #50	; 0x32
 800ca62:	d01c      	beq.n	800ca9e <VL53L1X_SetTimingBudgetInMs+0x184>
 800ca64:	2b32      	cmp	r3, #50	; 0x32
 800ca66:	dc4c      	bgt.n	800cb02 <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800ca68:	2b14      	cmp	r3, #20
 800ca6a:	d002      	beq.n	800ca72 <VL53L1X_SetTimingBudgetInMs+0x158>
 800ca6c:	2b21      	cmp	r3, #33	; 0x21
 800ca6e:	d00b      	beq.n	800ca88 <VL53L1X_SetTimingBudgetInMs+0x16e>
 800ca70:	e047      	b.n	800cb02 <VL53L1X_SetTimingBudgetInMs+0x1e8>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x001E);
 800ca72:	221e      	movs	r2, #30
 800ca74:	215e      	movs	r1, #94	; 0x5e
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 f92d 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0022);
 800ca7c:	2222      	movs	r2, #34	; 0x22
 800ca7e:	2161      	movs	r1, #97	; 0x61
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f928 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800ca86:	e03f      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0060);
 800ca88:	2260      	movs	r2, #96	; 0x60
 800ca8a:	215e      	movs	r1, #94	; 0x5e
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 f922 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800ca92:	226e      	movs	r2, #110	; 0x6e
 800ca94:	2161      	movs	r1, #97	; 0x61
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f91d 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800ca9c:	e034      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x00AD);
 800ca9e:	22ad      	movs	r2, #173	; 0xad
 800caa0:	215e      	movs	r1, #94	; 0x5e
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 f917 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x00C6);
 800caa8:	22c6      	movs	r2, #198	; 0xc6
 800caaa:	2161      	movs	r1, #97	; 0x61
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 f912 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800cab2:	e029      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x01CC);
 800cab4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cab8:	215e      	movs	r1, #94	; 0x5e
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f000 f90b 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x01EA);
 800cac0:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800cac4:	2161      	movs	r1, #97	; 0x61
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f905 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800cacc:	e01c      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x02D9);
 800cace:	f240 22d9 	movw	r2, #729	; 0x2d9
 800cad2:	215e      	movs	r1, #94	; 0x5e
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 f8fe 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x02F8);
 800cada:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 800cade:	2161      	movs	r1, #97	; 0x61
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f000 f8f8 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800cae6:	e00f      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x048F);
 800cae8:	f240 428f 	movw	r2, #1167	; 0x48f
 800caec:	215e      	movs	r1, #94	; 0x5e
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 f8f1 	bl	800ccd6 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x04A4);
 800caf4:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800caf8:	2161      	movs	r1, #97	; 0x61
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f000 f8eb 	bl	800ccd6 <VL53L1_WrWord>
			break;
 800cb00:	e002      	b.n	800cb08 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		default:
			status = 1;
 800cb02:	2301      	movs	r3, #1
 800cb04:	75fb      	strb	r3, [r7, #23]
			break;
 800cb06:	bf00      	nop
		}
	}
	return status;
 800cb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <VL53L1X_GetDistanceMode>:

	return status;
}

VL53L1X_ERROR VL53L1X_GetDistanceMode(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t *DM)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	601a      	str	r2, [r3, #0]
	uint8_t TempDM, status=0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1_RdByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 800cb2a:	f107 0316 	add.w	r3, r7, #22
 800cb2e:	461a      	mov	r2, r3
 800cb30:	214b      	movs	r1, #75	; 0x4b
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 f8f5 	bl	800cd22 <VL53L1_RdByte>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	b25b      	sxtb	r3, r3
 800cb44:	75fb      	strb	r3, [r7, #23]
	if (TempDM == 0x14)
 800cb46:	7dbb      	ldrb	r3, [r7, #22]
 800cb48:	2b14      	cmp	r3, #20
 800cb4a:	d102      	bne.n	800cb52 <VL53L1X_GetDistanceMode+0x3e>
		*DM=1;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 800cb52:	7dbb      	ldrb	r3, [r7, #22]
 800cb54:	2b0a      	cmp	r3, #10
 800cb56:	d102      	bne.n	800cb5e <VL53L1X_GetDistanceMode+0x4a>
		*DM=2;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	801a      	strh	r2, [r3, #0]
	return status;
 800cb5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <VL53L1X_BootState>:
	*pIM = (uint16_t)(*pIM / (ClockPLL * 1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *state)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b086      	sub	sp, #24
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	75fb      	strb	r3, [r7, #23]
	uint8_t tmp = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	75bb      	strb	r3, [r7, #22]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 800cb84:	f107 0316 	add.w	r3, r7, #22
 800cb88:	461a      	mov	r2, r3
 800cb8a:	21e5      	movs	r1, #229	; 0xe5
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f8c8 	bl	800cd22 <VL53L1_RdByte>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	75fb      	strb	r3, [r7, #23]
	*state = tmp;
 800cb9c:	7dba      	ldrb	r2, [r7, #22]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	701a      	strb	r2, [r3, #0]
	return status;
 800cba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t *distance)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	75fb      	strb	r3, [r7, #23]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev, VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	461a      	mov	r2, r3
 800cbca:	2196      	movs	r1, #150	; 0x96
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 f8c2 	bl	800cd56 <VL53L1_RdWord>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	75fb      	strb	r3, [r7, #23]
	*distance = tmp;
 800cbdc:	8aba      	ldrh	r2, [r7, #20]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	801a      	strh	r2, [r3, #0]
	return status;
 800cbe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, int16_t OffsetValue)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b086      	sub	sp, #24
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80fb      	strh	r3, [r7, #6]
	dev -> i2cHandle = i2cHandle;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]
	int16_t Temp;

	Temp = (OffsetValue*4);
 800cc06:	88fb      	ldrh	r3, [r7, #6]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	82bb      	strh	r3, [r7, #20]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM, (uint16_t)Temp);
 800cc0e:	8abb      	ldrh	r3, [r7, #20]
 800cc10:	461a      	mov	r2, r3
 800cc12:	211e      	movs	r1, #30
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f85e 	bl	800ccd6 <VL53L1_WrWord>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 800cc24:	2200      	movs	r2, #0
 800cc26:	2120      	movs	r1, #32
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 f854 	bl	800ccd6 <VL53L1_WrWord>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2122      	movs	r1, #34	; 0x22
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 f84a 	bl	800ccd6 <VL53L1_WrWord>
 800cc42:	4603      	mov	r3, r0
 800cc44:	461a      	mov	r2, r3
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	75fb      	strb	r3, [r7, #23]
	return status;
 800cc4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <VL53L1X_ReadID>:

	return status;
}

VL53L1X_ERROR VL53L1X_ReadID(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
	uint8_t ID = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, 0x010F, &ID);
 800cc70:	f107 030e 	add.w	r3, r7, #14
 800cc74:	461a      	mov	r2, r3
 800cc76:	f240 110f 	movw	r1, #271	; 0x10f
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f851 	bl	800cd22 <VL53L1_RdByte>
 800cc80:	4603      	mov	r3, r0
 800cc82:	461a      	mov	r2, r3
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	73fb      	strb	r3, [r7, #15]

	if (ID != 0xEA) return 1;
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	2bea      	cmp	r3, #234	; 0xea
 800cc8e:	d001      	beq.n	800cc94 <VL53L1X_ReadID+0x3c>
 800cc90:	2301      	movs	r3, #1
 800cc92:	e001      	b.n	800cc98 <VL53L1X_ReadID+0x40>

	return status;
 800cc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <VL53L1_WrByte>:

	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, data, lenght, 100);
}

int8_t VL53L1_WrByte(VL53L1_DEV *dev, uint16_t reg, uint8_t data)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af04      	add	r7, sp, #16
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	807b      	strh	r3, [r7, #2]
 800ccac:	4613      	mov	r3, r2
 800ccae:	707b      	strb	r3, [r7, #1]

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6818      	ldr	r0, [r3, #0]
 800ccb4:	887a      	ldrh	r2, [r7, #2]
 800ccb6:	2364      	movs	r3, #100	; 0x64
 800ccb8:	9302      	str	r3, [sp, #8]
 800ccba:	2301      	movs	r3, #1
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	1c7b      	adds	r3, r7, #1
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	2152      	movs	r1, #82	; 0x52
 800ccc6:	f7f9 f8df 	bl	8005e88 <HAL_I2C_Mem_Write>
 800ccca:	4603      	mov	r3, r0
 800cccc:	b25b      	sxtb	r3, r3
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(VL53L1_DEV *dev, uint16_t reg, uint16_t data)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b088      	sub	sp, #32
 800ccda:	af04      	add	r7, sp, #16
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	807b      	strh	r3, [r7, #2]
 800cce2:	4613      	mov	r3, r2
 800cce4:	803b      	strh	r3, [r7, #0]
	uint8_t i2cBuff[2] = {0};
 800cce6:	2300      	movs	r3, #0
 800cce8:	81bb      	strh	r3, [r7, #12]

	i2cBuff[0] = (data >> 8) & 0xFF;
 800ccea:	883b      	ldrh	r3, [r7, #0]
 800ccec:	0a1b      	lsrs	r3, r3, #8
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	733b      	strb	r3, [r7, #12]
	i2cBuff[1] = data & 0xFF;
 800ccf4:	883b      	ldrh	r3, [r7, #0]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 2, 100);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	887a      	ldrh	r2, [r7, #2]
 800cd00:	2364      	movs	r3, #100	; 0x64
 800cd02:	9302      	str	r3, [sp, #8]
 800cd04:	2302      	movs	r3, #2
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	f107 030c 	add.w	r3, r7, #12
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	2310      	movs	r3, #16
 800cd10:	2152      	movs	r1, #82	; 0x52
 800cd12:	f7f9 f8b9 	bl	8005e88 <HAL_I2C_Mem_Write>
 800cd16:	4603      	mov	r3, r0
 800cd18:	b25b      	sxtb	r3, r3
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <VL53L1_RdByte>:

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 4, 100);
}

int8_t VL53L1_RdByte(VL53L1_DEV *dev, uint16_t reg, uint8_t *data)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af04      	add	r7, sp, #16
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, data, 1, 100);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6818      	ldr	r0, [r3, #0]
 800cd34:	897a      	ldrh	r2, [r7, #10]
 800cd36:	2364      	movs	r3, #100	; 0x64
 800cd38:	9302      	str	r3, [sp, #8]
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	2310      	movs	r3, #16
 800cd44:	2152      	movs	r1, #82	; 0x52
 800cd46:	f7f9 f999 	bl	800607c <HAL_I2C_Mem_Read>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	b25b      	sxtb	r3, r3
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV *dev, uint16_t reg, uint16_t *data)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b08a      	sub	sp, #40	; 0x28
 800cd5a:	af04      	add	r7, sp, #16
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	607a      	str	r2, [r7, #4]
 800cd62:	817b      	strh	r3, [r7, #10]
	uint8_t i2cBuff[2] = {0};
 800cd64:	2300      	movs	r3, #0
 800cd66:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 2, 100);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6818      	ldr	r0, [r3, #0]
 800cd70:	897a      	ldrh	r2, [r7, #10]
 800cd72:	2364      	movs	r3, #100	; 0x64
 800cd74:	9302      	str	r3, [sp, #8]
 800cd76:	2302      	movs	r3, #2
 800cd78:	9301      	str	r3, [sp, #4]
 800cd7a:	f107 0314 	add.w	r3, r7, #20
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2310      	movs	r3, #16
 800cd82:	2152      	movs	r1, #82	; 0x52
 800cd84:	f7f9 f97a 	bl	800607c <HAL_I2C_Mem_Read>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75fb      	strb	r3, [r7, #23]
	*data = ((uint16_t)i2cBuff[0] << 8) | (uint16_t)i2cBuff[1];
 800cd8c:	7d3b      	ldrb	r3, [r7, #20]
 800cd8e:	021b      	lsls	r3, r3, #8
 800cd90:	b21a      	sxth	r2, r3
 800cd92:	7d7b      	ldrb	r3, [r7, #21]
 800cd94:	b21b      	sxth	r3, r3
 800cd96:	4313      	orrs	r3, r2
 800cd98:	b21b      	sxth	r3, r3
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	801a      	strh	r2, [r3, #0]

	return status;
 800cda0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cdb0:	4904      	ldr	r1, [pc, #16]	; (800cdc4 <MX_FATFS_Init+0x18>)
 800cdb2:	4805      	ldr	r0, [pc, #20]	; (800cdc8 <MX_FATFS_Init+0x1c>)
 800cdb4:	f002 f84e 	bl	800ee54 <FATFS_LinkDriver>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461a      	mov	r2, r3
 800cdbc:	4b03      	ldr	r3, [pc, #12]	; (800cdcc <MX_FATFS_Init+0x20>)
 800cdbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cdc0:	bf00      	nop
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	200008e0 	.word	0x200008e0
 800cdc8:	20000014 	.word	0x20000014
 800cdcc:	200008dc 	.word	0x200008dc

0800cdd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800cdda:	4b06      	ldr	r3, [pc, #24]	; (800cdf4 <USER_initialize+0x24>)
 800cddc:	2201      	movs	r2, #1
 800cdde:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cde0:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <USER_initialize+0x24>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000011 	.word	0x20000011

0800cdf8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ce02:	4b06      	ldr	r3, [pc, #24]	; (800ce1c <USER_status+0x24>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <USER_status+0x24>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20000011 	.word	0x20000011

0800ce20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
 800ce2a:	603b      	str	r3, [r7, #0]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ce30:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3714      	adds	r7, #20
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	b085      	sub	sp, #20
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ce4e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	603a      	str	r2, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
    return res;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
	...

0800ce80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ce90:	f002 fcb4 	bl	800f7fc <USBD_static_malloc>
 800ce94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d109      	bne.n	800ceb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	32b0      	adds	r2, #176	; 0xb0
 800cea6:	2100      	movs	r1, #0
 800cea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ceac:	2302      	movs	r3, #2
 800ceae:	e0d4      	b.n	800d05a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ceb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f003 fdee 	bl	8010a98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	32b0      	adds	r2, #176	; 0xb0
 800cec6:	68f9      	ldr	r1, [r7, #12]
 800cec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	32b0      	adds	r2, #176	; 0xb0
 800ced6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7c1b      	ldrb	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d138      	bne.n	800cf5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cee8:	4b5e      	ldr	r3, [pc, #376]	; (800d064 <USBD_CDC_Init+0x1e4>)
 800ceea:	7819      	ldrb	r1, [r3, #0]
 800ceec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cef0:	2202      	movs	r2, #2
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f002 fb5f 	bl	800f5b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cef8:	4b5a      	ldr	r3, [pc, #360]	; (800d064 <USBD_CDC_Init+0x1e4>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	f003 020f 	and.w	r2, r3, #15
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3324      	adds	r3, #36	; 0x24
 800cf0e:	2201      	movs	r2, #1
 800cf10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf12:	4b55      	ldr	r3, [pc, #340]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800cf14:	7819      	ldrb	r1, [r3, #0]
 800cf16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f002 fb4a 	bl	800f5b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf22:	4b51      	ldr	r3, [pc, #324]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f003 020f 	and.w	r2, r3, #15
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	440b      	add	r3, r1
 800cf36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf3e:	4b4b      	ldr	r3, [pc, #300]	; (800d06c <USBD_CDC_Init+0x1ec>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	f003 020f 	and.w	r2, r3, #15
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	440b      	add	r3, r1
 800cf52:	3326      	adds	r3, #38	; 0x26
 800cf54:	2210      	movs	r2, #16
 800cf56:	801a      	strh	r2, [r3, #0]
 800cf58:	e035      	b.n	800cfc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf5a:	4b42      	ldr	r3, [pc, #264]	; (800d064 <USBD_CDC_Init+0x1e4>)
 800cf5c:	7819      	ldrb	r1, [r3, #0]
 800cf5e:	2340      	movs	r3, #64	; 0x40
 800cf60:	2202      	movs	r2, #2
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f002 fb27 	bl	800f5b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf68:	4b3e      	ldr	r3, [pc, #248]	; (800d064 <USBD_CDC_Init+0x1e4>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	f003 020f 	and.w	r2, r3, #15
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	440b      	add	r3, r1
 800cf7c:	3324      	adds	r3, #36	; 0x24
 800cf7e:	2201      	movs	r2, #1
 800cf80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf82:	4b39      	ldr	r3, [pc, #228]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800cf84:	7819      	ldrb	r1, [r3, #0]
 800cf86:	2340      	movs	r3, #64	; 0x40
 800cf88:	2202      	movs	r2, #2
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f002 fb13 	bl	800f5b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf90:	4b35      	ldr	r3, [pc, #212]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 020f 	and.w	r2, r3, #15
 800cf98:	6879      	ldr	r1, [r7, #4]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	440b      	add	r3, r1
 800cfa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfac:	4b2f      	ldr	r3, [pc, #188]	; (800d06c <USBD_CDC_Init+0x1ec>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	f003 020f 	and.w	r2, r3, #15
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3326      	adds	r3, #38	; 0x26
 800cfc2:	2210      	movs	r2, #16
 800cfc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfc6:	4b29      	ldr	r3, [pc, #164]	; (800d06c <USBD_CDC_Init+0x1ec>)
 800cfc8:	7819      	ldrb	r1, [r3, #0]
 800cfca:	2308      	movs	r3, #8
 800cfcc:	2203      	movs	r2, #3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f002 faf1 	bl	800f5b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cfd4:	4b25      	ldr	r3, [pc, #148]	; (800d06c <USBD_CDC_Init+0x1ec>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	f003 020f 	and.w	r2, r3, #15
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	440b      	add	r3, r1
 800cfe8:	3324      	adds	r3, #36	; 0x24
 800cfea:	2201      	movs	r2, #1
 800cfec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	33b0      	adds	r3, #176	; 0xb0
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d024:	2302      	movs	r3, #2
 800d026:	e018      	b.n	800d05a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	7c1b      	ldrb	r3, [r3, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d030:	4b0d      	ldr	r3, [pc, #52]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800d032:	7819      	ldrb	r1, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d03a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f002 fba8 	bl	800f794 <USBD_LL_PrepareReceive>
 800d044:	e008      	b.n	800d058 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d046:	4b08      	ldr	r3, [pc, #32]	; (800d068 <USBD_CDC_Init+0x1e8>)
 800d048:	7819      	ldrb	r1, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d050:	2340      	movs	r3, #64	; 0x40
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f002 fb9e 	bl	800f794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	200000af 	.word	0x200000af
 800d068:	200000b0 	.word	0x200000b0
 800d06c:	200000b1 	.word	0x200000b1

0800d070 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d07c:	4b3a      	ldr	r3, [pc, #232]	; (800d168 <USBD_CDC_DeInit+0xf8>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f002 fabd 	bl	800f602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d088:	4b37      	ldr	r3, [pc, #220]	; (800d168 <USBD_CDC_DeInit+0xf8>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	f003 020f 	and.w	r2, r3, #15
 800d090:	6879      	ldr	r1, [r7, #4]
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	3324      	adds	r3, #36	; 0x24
 800d09e:	2200      	movs	r2, #0
 800d0a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d0a2:	4b32      	ldr	r3, [pc, #200]	; (800d16c <USBD_CDC_DeInit+0xfc>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f002 faaa 	bl	800f602 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d0ae:	4b2f      	ldr	r3, [pc, #188]	; (800d16c <USBD_CDC_DeInit+0xfc>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	f003 020f 	and.w	r2, r3, #15
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d0ca:	4b29      	ldr	r3, [pc, #164]	; (800d170 <USBD_CDC_DeInit+0x100>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 fa96 	bl	800f602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d0d6:	4b26      	ldr	r3, [pc, #152]	; (800d170 <USBD_CDC_DeInit+0x100>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	f003 020f 	and.w	r2, r3, #15
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	440b      	add	r3, r1
 800d0ea:	3324      	adds	r3, #36	; 0x24
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d0f0:	4b1f      	ldr	r3, [pc, #124]	; (800d170 <USBD_CDC_DeInit+0x100>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f003 020f 	and.w	r2, r3, #15
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	440b      	add	r3, r1
 800d104:	3326      	adds	r3, #38	; 0x26
 800d106:	2200      	movs	r2, #0
 800d108:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	32b0      	adds	r2, #176	; 0xb0
 800d114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d01f      	beq.n	800d15c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	33b0      	adds	r3, #176	; 0xb0
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	32b0      	adds	r2, #176	; 0xb0
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	4618      	mov	r0, r3
 800d140:	f002 fb6a 	bl	800f818 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	32b0      	adds	r2, #176	; 0xb0
 800d14e:	2100      	movs	r1, #0
 800d150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	200000af 	.word	0x200000af
 800d16c:	200000b0 	.word	0x200000b0
 800d170:	200000b1 	.word	0x200000b1

0800d174 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	32b0      	adds	r2, #176	; 0xb0
 800d188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e0bf      	b.n	800d324 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d050      	beq.n	800d252 <USBD_CDC_Setup+0xde>
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	f040 80af 	bne.w	800d314 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d03a      	beq.n	800d234 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	b25b      	sxtb	r3, r3
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	da1b      	bge.n	800d200 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	33b0      	adds	r3, #176	; 0xb0
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d1de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	88d2      	ldrh	r2, [r2, #6]
 800d1e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	88db      	ldrh	r3, [r3, #6]
 800d1ea:	2b07      	cmp	r3, #7
 800d1ec:	bf28      	it	cs
 800d1ee:	2307      	movcs	r3, #7
 800d1f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	89fa      	ldrh	r2, [r7, #14]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 fd5f 	bl	800ecbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d1fe:	e090      	b.n	800d322 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	785a      	ldrb	r2, [r3, #1]
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	88db      	ldrh	r3, [r3, #6]
 800d20e:	2b3f      	cmp	r3, #63	; 0x3f
 800d210:	d803      	bhi.n	800d21a <USBD_CDC_Setup+0xa6>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	88db      	ldrh	r3, [r3, #6]
 800d216:	b2da      	uxtb	r2, r3
 800d218:	e000      	b.n	800d21c <USBD_CDC_Setup+0xa8>
 800d21a:	2240      	movs	r2, #64	; 0x40
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d222:	6939      	ldr	r1, [r7, #16]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d22a:	461a      	mov	r2, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f001 fd71 	bl	800ed14 <USBD_CtlPrepareRx>
      break;
 800d232:	e076      	b.n	800d322 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	33b0      	adds	r3, #176	; 0xb0
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	7850      	ldrb	r0, [r2, #1]
 800d24a:	2200      	movs	r2, #0
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	4798      	blx	r3
      break;
 800d250:	e067      	b.n	800d322 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	785b      	ldrb	r3, [r3, #1]
 800d256:	2b0b      	cmp	r3, #11
 800d258:	d851      	bhi.n	800d2fe <USBD_CDC_Setup+0x18a>
 800d25a:	a201      	add	r2, pc, #4	; (adr r2, 800d260 <USBD_CDC_Setup+0xec>)
 800d25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d260:	0800d291 	.word	0x0800d291
 800d264:	0800d30d 	.word	0x0800d30d
 800d268:	0800d2ff 	.word	0x0800d2ff
 800d26c:	0800d2ff 	.word	0x0800d2ff
 800d270:	0800d2ff 	.word	0x0800d2ff
 800d274:	0800d2ff 	.word	0x0800d2ff
 800d278:	0800d2ff 	.word	0x0800d2ff
 800d27c:	0800d2ff 	.word	0x0800d2ff
 800d280:	0800d2ff 	.word	0x0800d2ff
 800d284:	0800d2ff 	.word	0x0800d2ff
 800d288:	0800d2bb 	.word	0x0800d2bb
 800d28c:	0800d2e5 	.word	0x0800d2e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d107      	bne.n	800d2ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d29c:	f107 030a 	add.w	r3, r7, #10
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f001 fd09 	bl	800ecbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2aa:	e032      	b.n	800d312 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 fc93 	bl	800ebda <USBD_CtlError>
            ret = USBD_FAIL;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	75fb      	strb	r3, [r7, #23]
          break;
 800d2b8:	e02b      	b.n	800d312 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d107      	bne.n	800d2d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2c6:	f107 030d 	add.w	r3, r7, #13
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 fcf4 	bl	800ecbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2d4:	e01d      	b.n	800d312 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 fc7e 	bl	800ebda <USBD_CtlError>
            ret = USBD_FAIL;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	75fb      	strb	r3, [r7, #23]
          break;
 800d2e2:	e016      	b.n	800d312 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d00f      	beq.n	800d310 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 fc71 	bl	800ebda <USBD_CtlError>
            ret = USBD_FAIL;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2fc:	e008      	b.n	800d310 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f001 fc6a 	bl	800ebda <USBD_CtlError>
          ret = USBD_FAIL;
 800d306:	2303      	movs	r3, #3
 800d308:	75fb      	strb	r3, [r7, #23]
          break;
 800d30a:	e002      	b.n	800d312 <USBD_CDC_Setup+0x19e>
          break;
 800d30c:	bf00      	nop
 800d30e:	e008      	b.n	800d322 <USBD_CDC_Setup+0x1ae>
          break;
 800d310:	bf00      	nop
      }
      break;
 800d312:	e006      	b.n	800d322 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f001 fc5f 	bl	800ebda <USBD_CtlError>
      ret = USBD_FAIL;
 800d31c:	2303      	movs	r3, #3
 800d31e:	75fb      	strb	r3, [r7, #23]
      break;
 800d320:	bf00      	nop
  }

  return (uint8_t)ret;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d33e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32b0      	adds	r2, #176	; 0xb0
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d352:	2303      	movs	r3, #3
 800d354:	e065      	b.n	800d422 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	32b0      	adds	r2, #176	; 0xb0
 800d360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d364:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d366:	78fb      	ldrb	r3, [r7, #3]
 800d368:	f003 020f 	and.w	r2, r3, #15
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	4613      	mov	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	440b      	add	r3, r1
 800d378:	3318      	adds	r3, #24
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d02f      	beq.n	800d3e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	f003 020f 	and.w	r2, r3, #15
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	440b      	add	r3, r1
 800d392:	3318      	adds	r3, #24
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	f003 010f 	and.w	r1, r3, #15
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	460b      	mov	r3, r1
 800d3a0:	00db      	lsls	r3, r3, #3
 800d3a2:	440b      	add	r3, r1
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4403      	add	r3, r0
 800d3a8:	3348      	adds	r3, #72	; 0x48
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3b0:	fb01 f303 	mul.w	r3, r1, r3
 800d3b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d112      	bne.n	800d3e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	f003 020f 	and.w	r2, r3, #15
 800d3c0:	6879      	ldr	r1, [r7, #4]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	440b      	add	r3, r1
 800d3cc:	3318      	adds	r3, #24
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3d2:	78f9      	ldrb	r1, [r7, #3]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f002 f9ba 	bl	800f752 <USBD_LL_Transmit>
 800d3de:	e01f      	b.n	800d420 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	33b0      	adds	r3, #176	; 0xb0
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d010      	beq.n	800d420 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	33b0      	adds	r3, #176	; 0xb0
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d41c:	78fa      	ldrb	r2, [r7, #3]
 800d41e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	32b0      	adds	r2, #176	; 0xb0
 800d440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d444:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	32b0      	adds	r2, #176	; 0xb0
 800d450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d458:	2303      	movs	r3, #3
 800d45a:	e01a      	b.n	800d492 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f002 f9b8 	bl	800f7d6 <USBD_LL_GetRxDataSize>
 800d466:	4602      	mov	r2, r0
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	33b0      	adds	r3, #176	; 0xb0
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d48c:	4611      	mov	r1, r2
 800d48e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	32b0      	adds	r2, #176	; 0xb0
 800d4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	e025      	b.n	800d508 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	33b0      	adds	r3, #176	; 0xb0
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4413      	add	r3, r2
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d01a      	beq.n	800d506 <USBD_CDC_EP0_RxReady+0x6c>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d4d6:	2bff      	cmp	r3, #255	; 0xff
 800d4d8:	d015      	beq.n	800d506 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	33b0      	adds	r3, #176	; 0xb0
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d4f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4fa:	b292      	uxth	r2, r2
 800d4fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	22ff      	movs	r2, #255	; 0xff
 800d502:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d518:	2182      	movs	r1, #130	; 0x82
 800d51a:	4818      	ldr	r0, [pc, #96]	; (800d57c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d51c:	f000 fd25 	bl	800df6a <USBD_GetEpDesc>
 800d520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d522:	2101      	movs	r1, #1
 800d524:	4815      	ldr	r0, [pc, #84]	; (800d57c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d526:	f000 fd20 	bl	800df6a <USBD_GetEpDesc>
 800d52a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d52c:	2181      	movs	r1, #129	; 0x81
 800d52e:	4813      	ldr	r0, [pc, #76]	; (800d57c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d530:	f000 fd1b 	bl	800df6a <USBD_GetEpDesc>
 800d534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	2210      	movs	r2, #16
 800d540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d006      	beq.n	800d556 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d550:	711a      	strb	r2, [r3, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d006      	beq.n	800d56a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d564:	711a      	strb	r2, [r3, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2243      	movs	r2, #67	; 0x43
 800d56e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d570:	4b02      	ldr	r3, [pc, #8]	; (800d57c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	2000006c 	.word	0x2000006c

0800d580 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d588:	2182      	movs	r1, #130	; 0x82
 800d58a:	4818      	ldr	r0, [pc, #96]	; (800d5ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d58c:	f000 fced 	bl	800df6a <USBD_GetEpDesc>
 800d590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d592:	2101      	movs	r1, #1
 800d594:	4815      	ldr	r0, [pc, #84]	; (800d5ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d596:	f000 fce8 	bl	800df6a <USBD_GetEpDesc>
 800d59a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d59c:	2181      	movs	r1, #129	; 0x81
 800d59e:	4813      	ldr	r0, [pc, #76]	; (800d5ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5a0:	f000 fce3 	bl	800df6a <USBD_GetEpDesc>
 800d5a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d006      	beq.n	800d5c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	711a      	strb	r2, [r3, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f042 0202 	orr.w	r2, r2, #2
 800d5c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d006      	beq.n	800d5da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	711a      	strb	r2, [r3, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f042 0202 	orr.w	r2, r2, #2
 800d5d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2243      	movs	r2, #67	; 0x43
 800d5de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5e0:	4b02      	ldr	r3, [pc, #8]	; (800d5ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	2000006c 	.word	0x2000006c

0800d5f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5f8:	2182      	movs	r1, #130	; 0x82
 800d5fa:	4818      	ldr	r0, [pc, #96]	; (800d65c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5fc:	f000 fcb5 	bl	800df6a <USBD_GetEpDesc>
 800d600:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d602:	2101      	movs	r1, #1
 800d604:	4815      	ldr	r0, [pc, #84]	; (800d65c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d606:	f000 fcb0 	bl	800df6a <USBD_GetEpDesc>
 800d60a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d60c:	2181      	movs	r1, #129	; 0x81
 800d60e:	4813      	ldr	r0, [pc, #76]	; (800d65c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d610:	f000 fcab 	bl	800df6a <USBD_GetEpDesc>
 800d614:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	2210      	movs	r2, #16
 800d620:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d006      	beq.n	800d636 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d630:	711a      	strb	r2, [r3, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d006      	beq.n	800d64a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2200      	movs	r2, #0
 800d640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d644:	711a      	strb	r2, [r3, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2243      	movs	r2, #67	; 0x43
 800d64e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d650:	4b02      	ldr	r3, [pc, #8]	; (800d65c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d652:	4618      	mov	r0, r3
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	2000006c 	.word	0x2000006c

0800d660 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	220a      	movs	r2, #10
 800d66c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d66e:	4b03      	ldr	r3, [pc, #12]	; (800d67c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	20000028 	.word	0x20000028

0800d680 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d690:	2303      	movs	r3, #3
 800d692:	e009      	b.n	800d6a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	33b0      	adds	r3, #176	; 0xb0
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	32b0      	adds	r2, #176	; 0xb0
 800d6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e008      	b.n	800d6ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	371c      	adds	r7, #28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	32b0      	adds	r2, #176	; 0xb0
 800d70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d710:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	e004      	b.n	800d726 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
	...

0800d734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	32b0      	adds	r2, #176	; 0xb0
 800d746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32b0      	adds	r2, #176	; 0xb0
 800d756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d75e:	2303      	movs	r3, #3
 800d760:	e018      	b.n	800d794 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7c1b      	ldrb	r3, [r3, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d76a:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <USBD_CDC_ReceivePacket+0x68>)
 800d76c:	7819      	ldrb	r1, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d774:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f002 f80b 	bl	800f794 <USBD_LL_PrepareReceive>
 800d77e:	e008      	b.n	800d792 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d780:	4b06      	ldr	r3, [pc, #24]	; (800d79c <USBD_CDC_ReceivePacket+0x68>)
 800d782:	7819      	ldrb	r1, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d78a:	2340      	movs	r3, #64	; 0x40
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f002 f801 	bl	800f794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	200000b0 	.word	0x200000b0

0800d7a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800d7b4:	4817      	ldr	r0, [pc, #92]	; (800d814 <USBD_Init+0x74>)
 800d7b6:	f003 fde1 	bl	801137c <iprintf>
 800d7ba:	4817      	ldr	r0, [pc, #92]	; (800d818 <USBD_Init+0x78>)
 800d7bc:	f003 fdde 	bl	801137c <iprintf>
 800d7c0:	200a      	movs	r0, #10
 800d7c2:	f003 fdf3 	bl	80113ac <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	e01f      	b.n	800d80a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	79fa      	ldrb	r2, [r7, #7]
 800d7fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f001 fe72 	bl	800f4e8 <USBD_LL_Init>
 800d804:	4603      	mov	r3, r0
 800d806:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d808:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	080135d8 	.word	0x080135d8
 800d818:	080135e0 	.word	0x080135e0

0800d81c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d826:	2300      	movs	r3, #0
 800d828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800d830:	481a      	ldr	r0, [pc, #104]	; (800d89c <USBD_RegisterClass+0x80>)
 800d832:	f003 fda3 	bl	801137c <iprintf>
 800d836:	481a      	ldr	r0, [pc, #104]	; (800d8a0 <USBD_RegisterClass+0x84>)
 800d838:	f003 fda0 	bl	801137c <iprintf>
 800d83c:	200a      	movs	r0, #10
 800d83e:	f003 fdb5 	bl	80113ac <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d842:	2303      	movs	r3, #3
 800d844:	e025      	b.n	800d892 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	32ae      	adds	r2, #174	; 0xae
 800d858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00f      	beq.n	800d882 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	32ae      	adds	r2, #174	; 0xae
 800d86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	f107 020e 	add.w	r2, r7, #14
 800d876:	4610      	mov	r0, r2
 800d878:	4798      	blx	r3
 800d87a:	4602      	mov	r2, r0
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	080135d8 	.word	0x080135d8
 800d8a0:	080135f8 	.word	0x080135f8

0800d8a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 fe67 	bl	800f580 <USBD_LL_Start>
 800d8b2:	4603      	mov	r3, r0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d8c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d009      	beq.n	800d900 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	78fa      	ldrb	r2, [r7, #3]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	4798      	blx	r3
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	4611      	mov	r1, r2
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	4798      	blx	r3
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d930:	2303      	movs	r3, #3
 800d932:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d934:	7bfb      	ldrb	r3, [r7, #15]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b084      	sub	sp, #16
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f001 f908 	bl	800eb66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d964:	461a      	mov	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d972:	f003 031f 	and.w	r3, r3, #31
 800d976:	2b02      	cmp	r3, #2
 800d978:	d01a      	beq.n	800d9b0 <USBD_LL_SetupStage+0x72>
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d822      	bhi.n	800d9c4 <USBD_LL_SetupStage+0x86>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d002      	beq.n	800d988 <USBD_LL_SetupStage+0x4a>
 800d982:	2b01      	cmp	r3, #1
 800d984:	d00a      	beq.n	800d99c <USBD_LL_SetupStage+0x5e>
 800d986:	e01d      	b.n	800d9c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fb5f 	bl	800e054 <USBD_StdDevReq>
 800d996:	4603      	mov	r3, r0
 800d998:	73fb      	strb	r3, [r7, #15]
      break;
 800d99a:	e020      	b.n	800d9de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fbc7 	bl	800e138 <USBD_StdItfReq>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ae:	e016      	b.n	800d9de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fc29 	bl	800e210 <USBD_StdEPReq>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d9c2:	e00c      	b.n	800d9de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d9ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 fe34 	bl	800f640 <USBD_LL_StallEP>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
      break;
 800d9dc:	bf00      	nop
  }

  return ret;
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d9fa:	7afb      	ldrb	r3, [r7, #11]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d16e      	bne.n	800dade <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800da06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da0e:	2b03      	cmp	r3, #3
 800da10:	f040 8098 	bne.w	800db44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	689a      	ldr	r2, [r3, #8]
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d913      	bls.n	800da48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	689a      	ldr	r2, [r3, #8]
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	1ad2      	subs	r2, r2, r3
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	4293      	cmp	r3, r2
 800da38:	bf28      	it	cs
 800da3a:	4613      	movcs	r3, r2
 800da3c:	461a      	mov	r2, r3
 800da3e:	6879      	ldr	r1, [r7, #4]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f001 f984 	bl	800ed4e <USBD_CtlContinueRx>
 800da46:	e07d      	b.n	800db44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da4e:	f003 031f 	and.w	r3, r3, #31
 800da52:	2b02      	cmp	r3, #2
 800da54:	d014      	beq.n	800da80 <USBD_LL_DataOutStage+0x98>
 800da56:	2b02      	cmp	r3, #2
 800da58:	d81d      	bhi.n	800da96 <USBD_LL_DataOutStage+0xae>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <USBD_LL_DataOutStage+0x7c>
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d003      	beq.n	800da6a <USBD_LL_DataOutStage+0x82>
 800da62:	e018      	b.n	800da96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800da64:	2300      	movs	r3, #0
 800da66:	75bb      	strb	r3, [r7, #22]
            break;
 800da68:	e018      	b.n	800da9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800da70:	b2db      	uxtb	r3, r3
 800da72:	4619      	mov	r1, r3
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 fa5e 	bl	800df36 <USBD_CoreFindIF>
 800da7a:	4603      	mov	r3, r0
 800da7c:	75bb      	strb	r3, [r7, #22]
            break;
 800da7e:	e00d      	b.n	800da9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800da86:	b2db      	uxtb	r3, r3
 800da88:	4619      	mov	r1, r3
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f000 fa60 	bl	800df50 <USBD_CoreFindEP>
 800da90:	4603      	mov	r3, r0
 800da92:	75bb      	strb	r3, [r7, #22]
            break;
 800da94:	e002      	b.n	800da9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800da96:	2300      	movs	r3, #0
 800da98:	75bb      	strb	r3, [r7, #22]
            break;
 800da9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800da9c:	7dbb      	ldrb	r3, [r7, #22]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d119      	bne.n	800dad6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d113      	bne.n	800dad6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800daae:	7dba      	ldrb	r2, [r7, #22]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	32ae      	adds	r2, #174	; 0xae
 800dab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dabe:	7dba      	ldrb	r2, [r7, #22]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dac6:	7dba      	ldrb	r2, [r7, #22]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	32ae      	adds	r2, #174	; 0xae
 800dacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f001 f94a 	bl	800ed70 <USBD_CtlSendStatus>
 800dadc:	e032      	b.n	800db44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	4619      	mov	r1, r3
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f000 fa31 	bl	800df50 <USBD_CoreFindEP>
 800daee:	4603      	mov	r3, r0
 800daf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800daf2:	7dbb      	ldrb	r3, [r7, #22]
 800daf4:	2bff      	cmp	r3, #255	; 0xff
 800daf6:	d025      	beq.n	800db44 <USBD_LL_DataOutStage+0x15c>
 800daf8:	7dbb      	ldrb	r3, [r7, #22]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d122      	bne.n	800db44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b03      	cmp	r3, #3
 800db08:	d117      	bne.n	800db3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800db0a:	7dba      	ldrb	r2, [r7, #22]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	32ae      	adds	r2, #174	; 0xae
 800db10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00f      	beq.n	800db3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800db1a:	7dba      	ldrb	r2, [r7, #22]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800db22:	7dba      	ldrb	r2, [r7, #22]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	32ae      	adds	r2, #174	; 0xae
 800db28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	7afa      	ldrb	r2, [r7, #11]
 800db30:	4611      	mov	r1, r2
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	4798      	blx	r3
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	e000      	b.n	800db46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b086      	sub	sp, #24
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	460b      	mov	r3, r1
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800db5c:	7afb      	ldrb	r3, [r7, #11]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d16f      	bne.n	800dc42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3314      	adds	r3, #20
 800db66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d15a      	bne.n	800dc28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d914      	bls.n	800dba8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	689a      	ldr	r2, [r3, #8]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	1ad2      	subs	r2, r2, r3
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	461a      	mov	r2, r3
 800db92:	6879      	ldr	r1, [r7, #4]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f001 f8ac 	bl	800ecf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db9a:	2300      	movs	r3, #0
 800db9c:	2200      	movs	r2, #0
 800db9e:	2100      	movs	r1, #0
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f001 fdf7 	bl	800f794 <USBD_LL_PrepareReceive>
 800dba6:	e03f      	b.n	800dc28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d11c      	bne.n	800dbee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d316      	bcc.n	800dbee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d20f      	bcs.n	800dbee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dbce:	2200      	movs	r2, #0
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f001 f88d 	bl	800ecf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f001 fdd4 	bl	800f794 <USBD_LL_PrepareReceive>
 800dbec:	e01c      	b.n	800dc28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d10f      	bne.n	800dc1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d009      	beq.n	800dc1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc1a:	2180      	movs	r1, #128	; 0x80
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f001 fd0f 	bl	800f640 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f001 f8b7 	bl	800ed96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d03a      	beq.n	800dca8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f7ff fe42 	bl	800d8bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dc40:	e032      	b.n	800dca8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dc42:	7afb      	ldrb	r3, [r7, #11]
 800dc44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f000 f97f 	bl	800df50 <USBD_CoreFindEP>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	2bff      	cmp	r3, #255	; 0xff
 800dc5a:	d025      	beq.n	800dca8 <USBD_LL_DataInStage+0x15a>
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d122      	bne.n	800dca8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d11c      	bne.n	800dca8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dc6e:	7dfa      	ldrb	r2, [r7, #23]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	32ae      	adds	r2, #174	; 0xae
 800dc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d014      	beq.n	800dca8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dc7e:	7dfa      	ldrb	r2, [r7, #23]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dc86:	7dfa      	ldrb	r2, [r7, #23]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	32ae      	adds	r2, #174	; 0xae
 800dc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	7afa      	ldrb	r2, [r7, #11]
 800dc94:	4611      	mov	r1, r2
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dc9e:	7dbb      	ldrb	r3, [r7, #22]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dca4:	7dbb      	ldrb	r3, [r7, #22]
 800dca6:	e000      	b.n	800dcaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d014      	beq.n	800dd18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00e      	beq.n	800dd18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	6852      	ldr	r2, [r2, #4]
 800dd06:	b2d2      	uxtb	r2, r2
 800dd08:	4611      	mov	r1, r2
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	4798      	blx	r3
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dd14:	2303      	movs	r3, #3
 800dd16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd18:	2340      	movs	r3, #64	; 0x40
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f001 fc49 	bl	800f5b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2240      	movs	r2, #64	; 0x40
 800dd30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd34:	2340      	movs	r3, #64	; 0x40
 800dd36:	2200      	movs	r2, #0
 800dd38:	2180      	movs	r1, #128	; 0x80
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 fc3b 	bl	800f5b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2240      	movs	r2, #64	; 0x40
 800dd4a:	621a      	str	r2, [r3, #32]

  return ret;
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	460b      	mov	r3, r1
 800dd60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	78fa      	ldrb	r2, [r7, #3]
 800dd66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b083      	sub	sp, #12
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d106      	bne.n	800ddc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d110      	bne.n	800de08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d005      	beq.n	800de08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	32ae      	adds	r2, #174	; 0xae
 800de28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d101      	bne.n	800de34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800de30:	2303      	movs	r3, #3
 800de32:	e01c      	b.n	800de6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d115      	bne.n	800de6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	32ae      	adds	r2, #174	; 0xae
 800de4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00b      	beq.n	800de6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	32ae      	adds	r2, #174	; 0xae
 800de5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	78fa      	ldrb	r2, [r7, #3]
 800de66:	4611      	mov	r1, r2
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	32ae      	adds	r2, #174	; 0xae
 800de8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800de94:	2303      	movs	r3, #3
 800de96:	e01c      	b.n	800ded2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d115      	bne.n	800ded0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	32ae      	adds	r2, #174	; 0xae
 800deae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	32ae      	adds	r2, #174	; 0xae
 800dec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	78fa      	ldrb	r2, [r7, #3]
 800deca:	4611      	mov	r1, r2
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800deda:	b480      	push	{r7}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	6852      	ldr	r2, [r2, #4]
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	4611      	mov	r1, r2
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	4798      	blx	r3
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800df28:	2303      	movs	r3, #3
 800df2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	460b      	mov	r3, r1
 800df74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	885b      	ldrh	r3, [r3, #2]
 800df86:	b29a      	uxth	r2, r3
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d920      	bls.n	800dfd4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	b29b      	uxth	r3, r3
 800df98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df9a:	e013      	b.n	800dfc4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df9c:	f107 030a 	add.w	r3, r7, #10
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6978      	ldr	r0, [r7, #20]
 800dfa4:	f000 f81b 	bl	800dfde <USBD_GetNextDesc>
 800dfa8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	785b      	ldrb	r3, [r3, #1]
 800dfae:	2b05      	cmp	r3, #5
 800dfb0:	d108      	bne.n	800dfc4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	789b      	ldrb	r3, [r3, #2]
 800dfba:	78fa      	ldrb	r2, [r7, #3]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d008      	beq.n	800dfd2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	885b      	ldrh	r3, [r3, #2]
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	897b      	ldrh	r3, [r7, #10]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d8e5      	bhi.n	800df9c <USBD_GetEpDesc+0x32>
 800dfd0:	e000      	b.n	800dfd4 <USBD_GetEpDesc+0x6a>
          break;
 800dfd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dfd4:	693b      	ldr	r3, [r7, #16]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b085      	sub	sp, #20
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	881a      	ldrh	r2, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	4413      	add	r3, r2
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	461a      	mov	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4413      	add	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e00a:	68fb      	ldr	r3, [r7, #12]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e018:	b480      	push	{r7}
 800e01a:	b087      	sub	sp, #28
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	3301      	adds	r3, #1
 800e02e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e036:	8a3b      	ldrh	r3, [r7, #16]
 800e038:	021b      	lsls	r3, r3, #8
 800e03a:	b21a      	sxth	r2, r3
 800e03c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e040:	4313      	orrs	r3, r2
 800e042:	b21b      	sxth	r3, r3
 800e044:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e046:	89fb      	ldrh	r3, [r7, #14]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	371c      	adds	r7, #28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e06a:	2b40      	cmp	r3, #64	; 0x40
 800e06c:	d005      	beq.n	800e07a <USBD_StdDevReq+0x26>
 800e06e:	2b40      	cmp	r3, #64	; 0x40
 800e070:	d857      	bhi.n	800e122 <USBD_StdDevReq+0xce>
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00f      	beq.n	800e096 <USBD_StdDevReq+0x42>
 800e076:	2b20      	cmp	r3, #32
 800e078:	d153      	bne.n	800e122 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	32ae      	adds	r2, #174	; 0xae
 800e084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	4798      	blx	r3
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
      break;
 800e094:	e04a      	b.n	800e12c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	2b09      	cmp	r3, #9
 800e09c:	d83b      	bhi.n	800e116 <USBD_StdDevReq+0xc2>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <USBD_StdDevReq+0x50>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e0f9 	.word	0x0800e0f9
 800e0a8:	0800e10d 	.word	0x0800e10d
 800e0ac:	0800e117 	.word	0x0800e117
 800e0b0:	0800e103 	.word	0x0800e103
 800e0b4:	0800e117 	.word	0x0800e117
 800e0b8:	0800e0d7 	.word	0x0800e0d7
 800e0bc:	0800e0cd 	.word	0x0800e0cd
 800e0c0:	0800e117 	.word	0x0800e117
 800e0c4:	0800e0ef 	.word	0x0800e0ef
 800e0c8:	0800e0e1 	.word	0x0800e0e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fa3c 	bl	800e54c <USBD_GetDescriptor>
          break;
 800e0d4:	e024      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fba1 	bl	800e820 <USBD_SetAddress>
          break;
 800e0de:	e01f      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e0e0:	6839      	ldr	r1, [r7, #0]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fbe0 	bl	800e8a8 <USBD_SetConfig>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73fb      	strb	r3, [r7, #15]
          break;
 800e0ec:	e018      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fc83 	bl	800e9fc <USBD_GetConfig>
          break;
 800e0f6:	e013      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fcb4 	bl	800ea68 <USBD_GetStatus>
          break;
 800e100:	e00e      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fce3 	bl	800ead0 <USBD_SetFeature>
          break;
 800e10a:	e009      	b.n	800e120 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e10c:	6839      	ldr	r1, [r7, #0]
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 fd07 	bl	800eb22 <USBD_ClrFeature>
          break;
 800e114:	e004      	b.n	800e120 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 fd5e 	bl	800ebda <USBD_CtlError>
          break;
 800e11e:	bf00      	nop
      }
      break;
 800e120:	e004      	b.n	800e12c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fd58 	bl	800ebda <USBD_CtlError>
      break;
 800e12a:	bf00      	nop
  }

  return ret;
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop

0800e138 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e14e:	2b40      	cmp	r3, #64	; 0x40
 800e150:	d005      	beq.n	800e15e <USBD_StdItfReq+0x26>
 800e152:	2b40      	cmp	r3, #64	; 0x40
 800e154:	d852      	bhi.n	800e1fc <USBD_StdItfReq+0xc4>
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <USBD_StdItfReq+0x26>
 800e15a:	2b20      	cmp	r3, #32
 800e15c:	d14e      	bne.n	800e1fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e164:	b2db      	uxtb	r3, r3
 800e166:	3b01      	subs	r3, #1
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d840      	bhi.n	800e1ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	889b      	ldrh	r3, [r3, #4]
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b01      	cmp	r3, #1
 800e174:	d836      	bhi.n	800e1e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	889b      	ldrh	r3, [r3, #4]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	4619      	mov	r1, r3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff fed9 	bl	800df36 <USBD_CoreFindIF>
 800e184:	4603      	mov	r3, r0
 800e186:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e188:	7bbb      	ldrb	r3, [r7, #14]
 800e18a:	2bff      	cmp	r3, #255	; 0xff
 800e18c:	d01d      	beq.n	800e1ca <USBD_StdItfReq+0x92>
 800e18e:	7bbb      	ldrb	r3, [r7, #14]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d11a      	bne.n	800e1ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e194:	7bba      	ldrb	r2, [r7, #14]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	32ae      	adds	r2, #174	; 0xae
 800e19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00f      	beq.n	800e1c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e1a4:	7bba      	ldrb	r2, [r7, #14]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e1ac:	7bba      	ldrb	r2, [r7, #14]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	32ae      	adds	r2, #174	; 0xae
 800e1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	4798      	blx	r3
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e1c2:	e004      	b.n	800e1ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e1c8:	e001      	b.n	800e1ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e1ca:	2303      	movs	r3, #3
 800e1cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d110      	bne.n	800e1f8 <USBD_StdItfReq+0xc0>
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10d      	bne.n	800e1f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fdc7 	bl	800ed70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e1e2:	e009      	b.n	800e1f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fcf7 	bl	800ebda <USBD_CtlError>
          break;
 800e1ec:	e004      	b.n	800e1f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 fcf2 	bl	800ebda <USBD_CtlError>
          break;
 800e1f6:	e000      	b.n	800e1fa <USBD_StdItfReq+0xc2>
          break;
 800e1f8:	bf00      	nop
      }
      break;
 800e1fa:	e004      	b.n	800e206 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fceb 	bl	800ebda <USBD_CtlError>
      break;
 800e204:	bf00      	nop
  }

  return ret;
 800e206:	7bfb      	ldrb	r3, [r7, #15]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3710      	adds	r7, #16
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	889b      	ldrh	r3, [r3, #4]
 800e222:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e22c:	2b40      	cmp	r3, #64	; 0x40
 800e22e:	d007      	beq.n	800e240 <USBD_StdEPReq+0x30>
 800e230:	2b40      	cmp	r3, #64	; 0x40
 800e232:	f200 817f 	bhi.w	800e534 <USBD_StdEPReq+0x324>
 800e236:	2b00      	cmp	r3, #0
 800e238:	d02a      	beq.n	800e290 <USBD_StdEPReq+0x80>
 800e23a:	2b20      	cmp	r3, #32
 800e23c:	f040 817a 	bne.w	800e534 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e240:	7bbb      	ldrb	r3, [r7, #14]
 800e242:	4619      	mov	r1, r3
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7ff fe83 	bl	800df50 <USBD_CoreFindEP>
 800e24a:	4603      	mov	r3, r0
 800e24c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e24e:	7b7b      	ldrb	r3, [r7, #13]
 800e250:	2bff      	cmp	r3, #255	; 0xff
 800e252:	f000 8174 	beq.w	800e53e <USBD_StdEPReq+0x32e>
 800e256:	7b7b      	ldrb	r3, [r7, #13]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f040 8170 	bne.w	800e53e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e25e:	7b7a      	ldrb	r2, [r7, #13]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e266:	7b7a      	ldrb	r2, [r7, #13]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	32ae      	adds	r2, #174	; 0xae
 800e26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 8163 	beq.w	800e53e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e278:	7b7a      	ldrb	r2, [r7, #13]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	32ae      	adds	r2, #174	; 0xae
 800e27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	4798      	blx	r3
 800e28a:	4603      	mov	r3, r0
 800e28c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e28e:	e156      	b.n	800e53e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	785b      	ldrb	r3, [r3, #1]
 800e294:	2b03      	cmp	r3, #3
 800e296:	d008      	beq.n	800e2aa <USBD_StdEPReq+0x9a>
 800e298:	2b03      	cmp	r3, #3
 800e29a:	f300 8145 	bgt.w	800e528 <USBD_StdEPReq+0x318>
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f000 809b 	beq.w	800e3da <USBD_StdEPReq+0x1ca>
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d03c      	beq.n	800e322 <USBD_StdEPReq+0x112>
 800e2a8:	e13e      	b.n	800e528 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d002      	beq.n	800e2bc <USBD_StdEPReq+0xac>
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d016      	beq.n	800e2e8 <USBD_StdEPReq+0xd8>
 800e2ba:	e02c      	b.n	800e316 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00d      	beq.n	800e2de <USBD_StdEPReq+0xce>
 800e2c2:	7bbb      	ldrb	r3, [r7, #14]
 800e2c4:	2b80      	cmp	r3, #128	; 0x80
 800e2c6:	d00a      	beq.n	800e2de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 f9b7 	bl	800f640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2d2:	2180      	movs	r1, #128	; 0x80
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f001 f9b3 	bl	800f640 <USBD_LL_StallEP>
 800e2da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2dc:	e020      	b.n	800e320 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fc7a 	bl	800ebda <USBD_CtlError>
              break;
 800e2e6:	e01b      	b.n	800e320 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	885b      	ldrh	r3, [r3, #2]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d10e      	bne.n	800e30e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2f0:	7bbb      	ldrb	r3, [r7, #14]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00b      	beq.n	800e30e <USBD_StdEPReq+0xfe>
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
 800e2f8:	2b80      	cmp	r3, #128	; 0x80
 800e2fa:	d008      	beq.n	800e30e <USBD_StdEPReq+0xfe>
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	88db      	ldrh	r3, [r3, #6]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d104      	bne.n	800e30e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e304:	7bbb      	ldrb	r3, [r7, #14]
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f001 f999 	bl	800f640 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fd2e 	bl	800ed70 <USBD_CtlSendStatus>

              break;
 800e314:	e004      	b.n	800e320 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fc5e 	bl	800ebda <USBD_CtlError>
              break;
 800e31e:	bf00      	nop
          }
          break;
 800e320:	e107      	b.n	800e532 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d002      	beq.n	800e334 <USBD_StdEPReq+0x124>
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d016      	beq.n	800e360 <USBD_StdEPReq+0x150>
 800e332:	e04b      	b.n	800e3cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e334:	7bbb      	ldrb	r3, [r7, #14]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00d      	beq.n	800e356 <USBD_StdEPReq+0x146>
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	2b80      	cmp	r3, #128	; 0x80
 800e33e:	d00a      	beq.n	800e356 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	4619      	mov	r1, r3
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f001 f97b 	bl	800f640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e34a:	2180      	movs	r1, #128	; 0x80
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f001 f977 	bl	800f640 <USBD_LL_StallEP>
 800e352:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e354:	e040      	b.n	800e3d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e356:	6839      	ldr	r1, [r7, #0]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fc3e 	bl	800ebda <USBD_CtlError>
              break;
 800e35e:	e03b      	b.n	800e3d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	885b      	ldrh	r3, [r3, #2]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d136      	bne.n	800e3d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d004      	beq.n	800e37c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e372:	7bbb      	ldrb	r3, [r7, #14]
 800e374:	4619      	mov	r1, r3
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 f981 	bl	800f67e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fcf7 	bl	800ed70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e382:	7bbb      	ldrb	r3, [r7, #14]
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7ff fde2 	bl	800df50 <USBD_CoreFindEP>
 800e38c:	4603      	mov	r3, r0
 800e38e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e390:	7b7b      	ldrb	r3, [r7, #13]
 800e392:	2bff      	cmp	r3, #255	; 0xff
 800e394:	d01f      	beq.n	800e3d6 <USBD_StdEPReq+0x1c6>
 800e396:	7b7b      	ldrb	r3, [r7, #13]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d11c      	bne.n	800e3d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e39c:	7b7a      	ldrb	r2, [r7, #13]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e3a4:	7b7a      	ldrb	r2, [r7, #13]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	32ae      	adds	r2, #174	; 0xae
 800e3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d010      	beq.n	800e3d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e3b4:	7b7a      	ldrb	r2, [r7, #13]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	32ae      	adds	r2, #174	; 0xae
 800e3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	6839      	ldr	r1, [r7, #0]
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	4798      	blx	r3
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e3ca:	e004      	b.n	800e3d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e3cc:	6839      	ldr	r1, [r7, #0]
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fc03 	bl	800ebda <USBD_CtlError>
              break;
 800e3d4:	e000      	b.n	800e3d8 <USBD_StdEPReq+0x1c8>
              break;
 800e3d6:	bf00      	nop
          }
          break;
 800e3d8:	e0ab      	b.n	800e532 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d002      	beq.n	800e3ec <USBD_StdEPReq+0x1dc>
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d032      	beq.n	800e450 <USBD_StdEPReq+0x240>
 800e3ea:	e097      	b.n	800e51c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d007      	beq.n	800e402 <USBD_StdEPReq+0x1f2>
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	2b80      	cmp	r3, #128	; 0x80
 800e3f6:	d004      	beq.n	800e402 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 fbed 	bl	800ebda <USBD_CtlError>
                break;
 800e400:	e091      	b.n	800e526 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e406:	2b00      	cmp	r3, #0
 800e408:	da0b      	bge.n	800e422 <USBD_StdEPReq+0x212>
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	3310      	adds	r3, #16
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	4413      	add	r3, r2
 800e41e:	3304      	adds	r3, #4
 800e420:	e00b      	b.n	800e43a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e422:	7bbb      	ldrb	r3, [r7, #14]
 800e424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e428:	4613      	mov	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	4413      	add	r3, r2
 800e438:	3304      	adds	r3, #4
 800e43a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2202      	movs	r2, #2
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fc37 	bl	800ecbc <USBD_CtlSendData>
              break;
 800e44e:	e06a      	b.n	800e526 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e454:	2b00      	cmp	r3, #0
 800e456:	da11      	bge.n	800e47c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	f003 020f 	and.w	r2, r3, #15
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4613      	mov	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	440b      	add	r3, r1
 800e46a:	3324      	adds	r3, #36	; 0x24
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d117      	bne.n	800e4a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 fbb0 	bl	800ebda <USBD_CtlError>
                  break;
 800e47a:	e054      	b.n	800e526 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e47c:	7bbb      	ldrb	r3, [r7, #14]
 800e47e:	f003 020f 	and.w	r2, r3, #15
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	4613      	mov	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	440b      	add	r3, r1
 800e48e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e492:	881b      	ldrh	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d104      	bne.n	800e4a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e498:	6839      	ldr	r1, [r7, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 fb9d 	bl	800ebda <USBD_CtlError>
                  break;
 800e4a0:	e041      	b.n	800e526 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	da0b      	bge.n	800e4c2 <USBD_StdEPReq+0x2b2>
 800e4aa:	7bbb      	ldrb	r3, [r7, #14]
 800e4ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	3310      	adds	r3, #16
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	4413      	add	r3, r2
 800e4be:	3304      	adds	r3, #4
 800e4c0:	e00b      	b.n	800e4da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	3304      	adds	r3, #4
 800e4da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <USBD_StdEPReq+0x2d8>
 800e4e2:	7bbb      	ldrb	r3, [r7, #14]
 800e4e4:	2b80      	cmp	r3, #128	; 0x80
 800e4e6:	d103      	bne.n	800e4f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	e00e      	b.n	800e50e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f8e1 	bl	800f6bc <USBD_LL_IsStallEP>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d003      	beq.n	800e508 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2201      	movs	r2, #1
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	e002      	b.n	800e50e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	2202      	movs	r2, #2
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fbd1 	bl	800ecbc <USBD_CtlSendData>
              break;
 800e51a:	e004      	b.n	800e526 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fb5b 	bl	800ebda <USBD_CtlError>
              break;
 800e524:	bf00      	nop
          }
          break;
 800e526:	e004      	b.n	800e532 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e528:	6839      	ldr	r1, [r7, #0]
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 fb55 	bl	800ebda <USBD_CtlError>
          break;
 800e530:	bf00      	nop
      }
      break;
 800e532:	e005      	b.n	800e540 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fb4f 	bl	800ebda <USBD_CtlError>
      break;
 800e53c:	e000      	b.n	800e540 <USBD_StdEPReq+0x330>
      break;
 800e53e:	bf00      	nop
  }

  return ret;
 800e540:	7bfb      	ldrb	r3, [r7, #15]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
	...

0800e54c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e556:	2300      	movs	r3, #0
 800e558:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e55a:	2300      	movs	r3, #0
 800e55c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e55e:	2300      	movs	r3, #0
 800e560:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	885b      	ldrh	r3, [r3, #2]
 800e566:	0a1b      	lsrs	r3, r3, #8
 800e568:	b29b      	uxth	r3, r3
 800e56a:	3b01      	subs	r3, #1
 800e56c:	2b06      	cmp	r3, #6
 800e56e:	f200 8128 	bhi.w	800e7c2 <USBD_GetDescriptor+0x276>
 800e572:	a201      	add	r2, pc, #4	; (adr r2, 800e578 <USBD_GetDescriptor+0x2c>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e595 	.word	0x0800e595
 800e57c:	0800e5ad 	.word	0x0800e5ad
 800e580:	0800e5ed 	.word	0x0800e5ed
 800e584:	0800e7c3 	.word	0x0800e7c3
 800e588:	0800e7c3 	.word	0x0800e7c3
 800e58c:	0800e763 	.word	0x0800e763
 800e590:	0800e78f 	.word	0x0800e78f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	7c12      	ldrb	r2, [r2, #16]
 800e5a0:	f107 0108 	add.w	r1, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
      break;
 800e5aa:	e112      	b.n	800e7d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7c1b      	ldrb	r3, [r3, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d10d      	bne.n	800e5d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5bc:	f107 0208 	add.w	r2, r7, #8
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
 800e5c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e5ce:	e100      	b.n	800e7d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d8:	f107 0208 	add.w	r2, r7, #8
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	701a      	strb	r2, [r3, #0]
      break;
 800e5ea:	e0f2      	b.n	800e7d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	885b      	ldrh	r3, [r3, #2]
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2b05      	cmp	r3, #5
 800e5f4:	f200 80ac 	bhi.w	800e750 <USBD_GetDescriptor+0x204>
 800e5f8:	a201      	add	r2, pc, #4	; (adr r2, 800e600 <USBD_GetDescriptor+0xb4>)
 800e5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fe:	bf00      	nop
 800e600:	0800e619 	.word	0x0800e619
 800e604:	0800e64d 	.word	0x0800e64d
 800e608:	0800e681 	.word	0x0800e681
 800e60c:	0800e6b5 	.word	0x0800e6b5
 800e610:	0800e6e9 	.word	0x0800e6e9
 800e614:	0800e71d 	.word	0x0800e71d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00b      	beq.n	800e63c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	7c12      	ldrb	r2, [r2, #16]
 800e630:	f107 0108 	add.w	r1, r7, #8
 800e634:	4610      	mov	r0, r2
 800e636:	4798      	blx	r3
 800e638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e63a:	e091      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 facb 	bl	800ebda <USBD_CtlError>
            err++;
 800e644:	7afb      	ldrb	r3, [r7, #11]
 800e646:	3301      	adds	r3, #1
 800e648:	72fb      	strb	r3, [r7, #11]
          break;
 800e64a:	e089      	b.n	800e760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00b      	beq.n	800e670 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	7c12      	ldrb	r2, [r2, #16]
 800e664:	f107 0108 	add.w	r1, r7, #8
 800e668:	4610      	mov	r0, r2
 800e66a:	4798      	blx	r3
 800e66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e66e:	e077      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e670:	6839      	ldr	r1, [r7, #0]
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fab1 	bl	800ebda <USBD_CtlError>
            err++;
 800e678:	7afb      	ldrb	r3, [r7, #11]
 800e67a:	3301      	adds	r3, #1
 800e67c:	72fb      	strb	r3, [r7, #11]
          break;
 800e67e:	e06f      	b.n	800e760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00b      	beq.n	800e6a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	7c12      	ldrb	r2, [r2, #16]
 800e698:	f107 0108 	add.w	r1, r7, #8
 800e69c:	4610      	mov	r0, r2
 800e69e:	4798      	blx	r3
 800e6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6a2:	e05d      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fa97 	bl	800ebda <USBD_CtlError>
            err++;
 800e6ac:	7afb      	ldrb	r3, [r7, #11]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e6b2:	e055      	b.n	800e760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	7c12      	ldrb	r2, [r2, #16]
 800e6cc:	f107 0108 	add.w	r1, r7, #8
 800e6d0:	4610      	mov	r0, r2
 800e6d2:	4798      	blx	r3
 800e6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6d6:	e043      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fa7d 	bl	800ebda <USBD_CtlError>
            err++;
 800e6e0:	7afb      	ldrb	r3, [r7, #11]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e6e6:	e03b      	b.n	800e760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00b      	beq.n	800e70c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	7c12      	ldrb	r2, [r2, #16]
 800e700:	f107 0108 	add.w	r1, r7, #8
 800e704:	4610      	mov	r0, r2
 800e706:	4798      	blx	r3
 800e708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e70a:	e029      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 fa63 	bl	800ebda <USBD_CtlError>
            err++;
 800e714:	7afb      	ldrb	r3, [r7, #11]
 800e716:	3301      	adds	r3, #1
 800e718:	72fb      	strb	r3, [r7, #11]
          break;
 800e71a:	e021      	b.n	800e760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00b      	beq.n	800e740 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	7c12      	ldrb	r2, [r2, #16]
 800e734:	f107 0108 	add.w	r1, r7, #8
 800e738:	4610      	mov	r0, r2
 800e73a:	4798      	blx	r3
 800e73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e73e:	e00f      	b.n	800e760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fa49 	bl	800ebda <USBD_CtlError>
            err++;
 800e748:	7afb      	ldrb	r3, [r7, #11]
 800e74a:	3301      	adds	r3, #1
 800e74c:	72fb      	strb	r3, [r7, #11]
          break;
 800e74e:	e007      	b.n	800e760 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fa41 	bl	800ebda <USBD_CtlError>
          err++;
 800e758:	7afb      	ldrb	r3, [r7, #11]
 800e75a:	3301      	adds	r3, #1
 800e75c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e75e:	bf00      	nop
      }
      break;
 800e760:	e037      	b.n	800e7d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7c1b      	ldrb	r3, [r3, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e772:	f107 0208 	add.w	r2, r7, #8
 800e776:	4610      	mov	r0, r2
 800e778:	4798      	blx	r3
 800e77a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e77c:	e029      	b.n	800e7d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fa2a 	bl	800ebda <USBD_CtlError>
        err++;
 800e786:	7afb      	ldrb	r3, [r7, #11]
 800e788:	3301      	adds	r3, #1
 800e78a:	72fb      	strb	r3, [r7, #11]
      break;
 800e78c:	e021      	b.n	800e7d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7c1b      	ldrb	r3, [r3, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10d      	bne.n	800e7b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79e:	f107 0208 	add.w	r2, r7, #8
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
 800e7a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	2207      	movs	r2, #7
 800e7ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7b0:	e00f      	b.n	800e7d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fa10 	bl	800ebda <USBD_CtlError>
        err++;
 800e7ba:	7afb      	ldrb	r3, [r7, #11]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	72fb      	strb	r3, [r7, #11]
      break;
 800e7c0:	e007      	b.n	800e7d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e7c2:	6839      	ldr	r1, [r7, #0]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fa08 	bl	800ebda <USBD_CtlError>
      err++;
 800e7ca:	7afb      	ldrb	r3, [r7, #11]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	72fb      	strb	r3, [r7, #11]
      break;
 800e7d0:	bf00      	nop
  }

  if (err != 0U)
 800e7d2:	7afb      	ldrb	r3, [r7, #11]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d11e      	bne.n	800e816 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	88db      	ldrh	r3, [r3, #6]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d016      	beq.n	800e80e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e7e0:	893b      	ldrh	r3, [r7, #8]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00e      	beq.n	800e804 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	88da      	ldrh	r2, [r3, #6]
 800e7ea:	893b      	ldrh	r3, [r7, #8]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	bf28      	it	cs
 800e7f0:	4613      	movcs	r3, r2
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e7f6:	893b      	ldrh	r3, [r7, #8]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	68f9      	ldr	r1, [r7, #12]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fa5d 	bl	800ecbc <USBD_CtlSendData>
 800e802:	e009      	b.n	800e818 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f9e7 	bl	800ebda <USBD_CtlError>
 800e80c:	e004      	b.n	800e818 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 faae 	bl	800ed70 <USBD_CtlSendStatus>
 800e814:	e000      	b.n	800e818 <USBD_GetDescriptor+0x2cc>
    return;
 800e816:	bf00      	nop
  }
}
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop

0800e820 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	889b      	ldrh	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d131      	bne.n	800e896 <USBD_SetAddress+0x76>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	88db      	ldrh	r3, [r3, #6]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d12d      	bne.n	800e896 <USBD_SetAddress+0x76>
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	885b      	ldrh	r3, [r3, #2]
 800e83e:	2b7f      	cmp	r3, #127	; 0x7f
 800e840:	d829      	bhi.n	800e896 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	885b      	ldrh	r3, [r3, #2]
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e84c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b03      	cmp	r3, #3
 800e858:	d104      	bne.n	800e864 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f9bc 	bl	800ebda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e862:	e01d      	b.n	800e8a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	7bfa      	ldrb	r2, [r7, #15]
 800e868:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 ff4f 	bl	800f714 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fa7a 	bl	800ed70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d004      	beq.n	800e88c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2202      	movs	r2, #2
 800e886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e88a:	e009      	b.n	800e8a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e894:	e004      	b.n	800e8a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f99e 	bl	800ebda <USBD_CtlError>
  }
}
 800e89e:	bf00      	nop
 800e8a0:	bf00      	nop
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	885b      	ldrh	r3, [r3, #2]
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	4b4e      	ldr	r3, [pc, #312]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e8be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8c0:	4b4d      	ldr	r3, [pc, #308]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d905      	bls.n	800e8d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e8c8:	6839      	ldr	r1, [r7, #0]
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f985 	bl	800ebda <USBD_CtlError>
    return USBD_FAIL;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	e08c      	b.n	800e9ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d002      	beq.n	800e8e6 <USBD_SetConfig+0x3e>
 800e8e0:	2b03      	cmp	r3, #3
 800e8e2:	d029      	beq.n	800e938 <USBD_SetConfig+0x90>
 800e8e4:	e075      	b.n	800e9d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e8e6:	4b44      	ldr	r3, [pc, #272]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d020      	beq.n	800e930 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e8ee:	4b42      	ldr	r3, [pc, #264]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8f8:	4b3f      	ldr	r3, [pc, #252]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7fe ffe7 	bl	800d8d2 <USBD_SetClassConfig>
 800e904:	4603      	mov	r3, r0
 800e906:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f962 	bl	800ebda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2202      	movs	r2, #2
 800e91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e91e:	e065      	b.n	800e9ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fa25 	bl	800ed70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2203      	movs	r2, #3
 800e92a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e92e:	e05d      	b.n	800e9ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 fa1d 	bl	800ed70 <USBD_CtlSendStatus>
      break;
 800e936:	e059      	b.n	800e9ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e938:	4b2f      	ldr	r3, [pc, #188]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d112      	bne.n	800e966 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2202      	movs	r2, #2
 800e944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e948:	4b2b      	ldr	r3, [pc, #172]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	461a      	mov	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e952:	4b29      	ldr	r3, [pc, #164]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	4619      	mov	r1, r3
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7fe ffd6 	bl	800d90a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa06 	bl	800ed70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e964:	e042      	b.n	800e9ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e966:	4b24      	ldr	r3, [pc, #144]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	429a      	cmp	r2, r3
 800e972:	d02a      	beq.n	800e9ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7fe ffc4 	bl	800d90a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e982:	4b1d      	ldr	r3, [pc, #116]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e98c:	4b1a      	ldr	r3, [pc, #104]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fe ff9d 	bl	800d8d2 <USBD_SetClassConfig>
 800e998:	4603      	mov	r3, r0
 800e99a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00f      	beq.n	800e9c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f918 	bl	800ebda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fe ffa9 	bl	800d90a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e9c0:	e014      	b.n	800e9ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f9d4 	bl	800ed70 <USBD_CtlSendStatus>
      break;
 800e9c8:	e010      	b.n	800e9ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f9d0 	bl	800ed70 <USBD_CtlSendStatus>
      break;
 800e9d0:	e00c      	b.n	800e9ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f900 	bl	800ebda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9da:	4b07      	ldr	r3, [pc, #28]	; (800e9f8 <USBD_SetConfig+0x150>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7fe ff92 	bl	800d90a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ea:	bf00      	nop
  }

  return ret;
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	200008e4 	.word	0x200008e4

0800e9fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	88db      	ldrh	r3, [r3, #6]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d004      	beq.n	800ea18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f000 f8e2 	bl	800ebda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea16:	e023      	b.n	800ea60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	dc02      	bgt.n	800ea2a <USBD_GetConfig+0x2e>
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dc03      	bgt.n	800ea30 <USBD_GetConfig+0x34>
 800ea28:	e015      	b.n	800ea56 <USBD_GetConfig+0x5a>
 800ea2a:	2b03      	cmp	r3, #3
 800ea2c:	d00b      	beq.n	800ea46 <USBD_GetConfig+0x4a>
 800ea2e:	e012      	b.n	800ea56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3308      	adds	r3, #8
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f93c 	bl	800ecbc <USBD_CtlSendData>
        break;
 800ea44:	e00c      	b.n	800ea60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f934 	bl	800ecbc <USBD_CtlSendData>
        break;
 800ea54:	e004      	b.n	800ea60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 f8be 	bl	800ebda <USBD_CtlError>
        break;
 800ea5e:	bf00      	nop
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d81e      	bhi.n	800eabe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	88db      	ldrh	r3, [r3, #6]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d004      	beq.n	800ea92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f8a5 	bl	800ebda <USBD_CtlError>
        break;
 800ea90:	e01a      	b.n	800eac8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d005      	beq.n	800eaae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	f043 0202 	orr.w	r2, r3, #2
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	330c      	adds	r3, #12
 800eab2:	2202      	movs	r2, #2
 800eab4:	4619      	mov	r1, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f900 	bl	800ecbc <USBD_CtlSendData>
      break;
 800eabc:	e004      	b.n	800eac8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f88a 	bl	800ebda <USBD_CtlError>
      break;
 800eac6:	bf00      	nop
  }
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	885b      	ldrh	r3, [r3, #2]
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d107      	bne.n	800eaf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f940 	bl	800ed70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eaf0:	e013      	b.n	800eb1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	885b      	ldrh	r3, [r3, #2]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d10b      	bne.n	800eb12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	889b      	ldrh	r3, [r3, #4]
 800eafe:	0a1b      	lsrs	r3, r3, #8
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 f930 	bl	800ed70 <USBD_CtlSendStatus>
}
 800eb10:	e003      	b.n	800eb1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f860 	bl	800ebda <USBD_CtlError>
}
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	3b01      	subs	r3, #1
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d80b      	bhi.n	800eb52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	885b      	ldrh	r3, [r3, #2]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d10c      	bne.n	800eb5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f910 	bl	800ed70 <USBD_CtlSendStatus>
      }
      break;
 800eb50:	e004      	b.n	800eb5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb52:	6839      	ldr	r1, [r7, #0]
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 f840 	bl	800ebda <USBD_CtlError>
      break;
 800eb5a:	e000      	b.n	800eb5e <USBD_ClrFeature+0x3c>
      break;
 800eb5c:	bf00      	nop
  }
}
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b084      	sub	sp, #16
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	781a      	ldrb	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff fa41 	bl	800e018 <SWAPBYTE>
 800eb96:	4603      	mov	r3, r0
 800eb98:	461a      	mov	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	3301      	adds	r3, #1
 800eba2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3301      	adds	r3, #1
 800eba8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f7ff fa34 	bl	800e018 <SWAPBYTE>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7ff fa27 	bl	800e018 <SWAPBYTE>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	80da      	strh	r2, [r3, #6]
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b082      	sub	sp, #8
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebe4:	2180      	movs	r1, #128	; 0x80
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fd2a 	bl	800f640 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ebec:	2100      	movs	r1, #0
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fd26 	bl	800f640 <USBD_LL_StallEP>
}
 800ebf4:	bf00      	nop
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d036      	beq.n	800ec80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec16:	6938      	ldr	r0, [r7, #16]
 800ec18:	f000 f836 	bl	800ec88 <USBD_GetLen>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	3301      	adds	r3, #1
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	4413      	add	r3, r2
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	7812      	ldrb	r2, [r2, #0]
 800ec34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	4413      	add	r3, r2
 800ec42:	2203      	movs	r2, #3
 800ec44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec4c:	e013      	b.n	800ec76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec4e:	7dfb      	ldrb	r3, [r7, #23]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	4413      	add	r3, r2
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	7812      	ldrb	r2, [r2, #0]
 800ec58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	613b      	str	r3, [r7, #16]
    idx++;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	3301      	adds	r3, #1
 800ec64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec66:	7dfb      	ldrb	r3, [r7, #23]
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec70:	7dfb      	ldrb	r3, [r7, #23]
 800ec72:	3301      	adds	r3, #1
 800ec74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1e7      	bne.n	800ec4e <USBD_GetString+0x52>
 800ec7e:	e000      	b.n	800ec82 <USBD_GetString+0x86>
    return;
 800ec80:	bf00      	nop
  }
}
 800ec82:	3718      	adds	r7, #24
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec90:	2300      	movs	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ec98:	e005      	b.n	800eca6 <USBD_GetLen+0x1e>
  {
    len++;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	3301      	adds	r3, #1
 800eca4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1f5      	bne.n	800ec9a <USBD_GetLen+0x12>
  }

  return len;
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2202      	movs	r2, #2
 800eccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	2100      	movs	r1, #0
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 fd35 	bl	800f752 <USBD_LL_Transmit>

  return USBD_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b084      	sub	sp, #16
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	60f8      	str	r0, [r7, #12]
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	2100      	movs	r1, #0
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f000 fd24 	bl	800f752 <USBD_LL_Transmit>

  return USBD_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2203      	movs	r2, #3
 800ed24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 fd28 	bl	800f794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60f8      	str	r0, [r7, #12]
 800ed56:	60b9      	str	r1, [r7, #8]
 800ed58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	2100      	movs	r1, #0
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f000 fd17 	bl	800f794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2204      	movs	r2, #4
 800ed7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed80:	2300      	movs	r3, #0
 800ed82:	2200      	movs	r2, #0
 800ed84:	2100      	movs	r1, #0
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fce3 	bl	800f752 <USBD_LL_Transmit>

  return USBD_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b082      	sub	sp, #8
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2205      	movs	r2, #5
 800eda2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eda6:	2300      	movs	r3, #0
 800eda8:	2200      	movs	r2, #0
 800edaa:	2100      	movs	r1, #0
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 fcf1 	bl	800f794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	4613      	mov	r3, r2
 800edc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800edca:	2301      	movs	r3, #1
 800edcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800edd2:	4b1f      	ldr	r3, [pc, #124]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800edd4:	7a5b      	ldrb	r3, [r3, #9]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d131      	bne.n	800ee40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eddc:	4b1c      	ldr	r3, [pc, #112]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800edde:	7a5b      	ldrb	r3, [r3, #9]
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	461a      	mov	r2, r3
 800ede4:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800ede6:	2100      	movs	r1, #0
 800ede8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800edea:	4b19      	ldr	r3, [pc, #100]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800edec:	7a5b      	ldrb	r3, [r3, #9]
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	4a17      	ldr	r2, [pc, #92]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4413      	add	r3, r2
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800edfc:	7a5b      	ldrb	r3, [r3, #9]
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	461a      	mov	r2, r3
 800ee02:	4b13      	ldr	r3, [pc, #76]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800ee04:	4413      	add	r3, r2
 800ee06:	79fa      	ldrb	r2, [r7, #7]
 800ee08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee0a:	4b11      	ldr	r3, [pc, #68]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800ee0c:	7a5b      	ldrb	r3, [r3, #9]
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	1c5a      	adds	r2, r3, #1
 800ee12:	b2d1      	uxtb	r1, r2
 800ee14:	4a0e      	ldr	r2, [pc, #56]	; (800ee50 <FATFS_LinkDriverEx+0x94>)
 800ee16:	7251      	strb	r1, [r2, #9]
 800ee18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee1a:	7dbb      	ldrb	r3, [r7, #22]
 800ee1c:	3330      	adds	r3, #48	; 0x30
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	3301      	adds	r3, #1
 800ee28:	223a      	movs	r2, #58	; 0x3a
 800ee2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	3302      	adds	r3, #2
 800ee30:	222f      	movs	r2, #47	; 0x2f
 800ee32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	3303      	adds	r3, #3
 800ee38:	2200      	movs	r2, #0
 800ee3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	200008e8 	.word	0x200008e8

0800ee54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee5e:	2200      	movs	r2, #0
 800ee60:	6839      	ldr	r1, [r7, #0]
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff ffaa 	bl	800edbc <FATFS_LinkDriverEx>
 800ee68:	4603      	mov	r3, r0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4912      	ldr	r1, [pc, #72]	; (800eec4 <MX_USB_DEVICE_Init+0x50>)
 800ee7c:	4812      	ldr	r0, [pc, #72]	; (800eec8 <MX_USB_DEVICE_Init+0x54>)
 800ee7e:	f7fe fc8f 	bl	800d7a0 <USBD_Init>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee88:	f7f4 feba 	bl	8003c00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ee8c:	490f      	ldr	r1, [pc, #60]	; (800eecc <MX_USB_DEVICE_Init+0x58>)
 800ee8e:	480e      	ldr	r0, [pc, #56]	; (800eec8 <MX_USB_DEVICE_Init+0x54>)
 800ee90:	f7fe fcc4 	bl	800d81c <USBD_RegisterClass>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee9a:	f7f4 feb1 	bl	8003c00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ee9e:	490c      	ldr	r1, [pc, #48]	; (800eed0 <MX_USB_DEVICE_Init+0x5c>)
 800eea0:	4809      	ldr	r0, [pc, #36]	; (800eec8 <MX_USB_DEVICE_Init+0x54>)
 800eea2:	f7fe fbed 	bl	800d680 <USBD_CDC_RegisterInterface>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eeac:	f7f4 fea8 	bl	8003c00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eeb0:	4805      	ldr	r0, [pc, #20]	; (800eec8 <MX_USB_DEVICE_Init+0x54>)
 800eeb2:	f7fe fcf7 	bl	800d8a4 <USBD_Start>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eebc:	f7f4 fea0 	bl	8003c00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eec0:	bf00      	nop
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	200000d0 	.word	0x200000d0
 800eec8:	200008f4 	.word	0x200008f4
 800eecc:	20000034 	.word	0x20000034
 800eed0:	200000bc 	.word	0x200000bc

0800eed4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eed8:	2200      	movs	r2, #0
 800eeda:	4905      	ldr	r1, [pc, #20]	; (800eef0 <CDC_Init_FS+0x1c>)
 800eedc:	4805      	ldr	r0, [pc, #20]	; (800eef4 <CDC_Init_FS+0x20>)
 800eede:	f7fe fbe9 	bl	800d6b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eee2:	4905      	ldr	r1, [pc, #20]	; (800eef8 <CDC_Init_FS+0x24>)
 800eee4:	4803      	ldr	r0, [pc, #12]	; (800eef4 <CDC_Init_FS+0x20>)
 800eee6:	f7fe fc07 	bl	800d6f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eeea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	200013d0 	.word	0x200013d0
 800eef4:	200008f4 	.word	0x200008f4
 800eef8:	20000bd0 	.word	0x20000bd0

0800eefc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	4603      	mov	r3, r0
 800ef14:	6039      	str	r1, [r7, #0]
 800ef16:	71fb      	strb	r3, [r7, #7]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	2b23      	cmp	r3, #35	; 0x23
 800ef20:	d85c      	bhi.n	800efdc <CDC_Control_FS+0xd0>
 800ef22:	a201      	add	r2, pc, #4	; (adr r2, 800ef28 <CDC_Control_FS+0x1c>)
 800ef24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef28:	0800efdd 	.word	0x0800efdd
 800ef2c:	0800efdd 	.word	0x0800efdd
 800ef30:	0800efdd 	.word	0x0800efdd
 800ef34:	0800efdd 	.word	0x0800efdd
 800ef38:	0800efdd 	.word	0x0800efdd
 800ef3c:	0800efdd 	.word	0x0800efdd
 800ef40:	0800efdd 	.word	0x0800efdd
 800ef44:	0800efdd 	.word	0x0800efdd
 800ef48:	0800efdd 	.word	0x0800efdd
 800ef4c:	0800efdd 	.word	0x0800efdd
 800ef50:	0800efdd 	.word	0x0800efdd
 800ef54:	0800efdd 	.word	0x0800efdd
 800ef58:	0800efdd 	.word	0x0800efdd
 800ef5c:	0800efdd 	.word	0x0800efdd
 800ef60:	0800efdd 	.word	0x0800efdd
 800ef64:	0800efdd 	.word	0x0800efdd
 800ef68:	0800efdd 	.word	0x0800efdd
 800ef6c:	0800efdd 	.word	0x0800efdd
 800ef70:	0800efdd 	.word	0x0800efdd
 800ef74:	0800efdd 	.word	0x0800efdd
 800ef78:	0800efdd 	.word	0x0800efdd
 800ef7c:	0800efdd 	.word	0x0800efdd
 800ef80:	0800efdd 	.word	0x0800efdd
 800ef84:	0800efdd 	.word	0x0800efdd
 800ef88:	0800efdd 	.word	0x0800efdd
 800ef8c:	0800efdd 	.word	0x0800efdd
 800ef90:	0800efdd 	.word	0x0800efdd
 800ef94:	0800efdd 	.word	0x0800efdd
 800ef98:	0800efdd 	.word	0x0800efdd
 800ef9c:	0800efdd 	.word	0x0800efdd
 800efa0:	0800efdd 	.word	0x0800efdd
 800efa4:	0800efdd 	.word	0x0800efdd
 800efa8:	0800efb9 	.word	0x0800efb9
 800efac:	0800efcb 	.word	0x0800efcb
 800efb0:	0800efdd 	.word	0x0800efdd
 800efb4:	0800efdd 	.word	0x0800efdd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	  memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800efb8:	4b0c      	ldr	r3, [pc, #48]	; (800efec <CDC_Control_FS+0xe0>)
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	6810      	ldr	r0, [r2, #0]
 800efbe:	6018      	str	r0, [r3, #0]
 800efc0:	8891      	ldrh	r1, [r2, #4]
 800efc2:	7992      	ldrb	r2, [r2, #6]
 800efc4:	8099      	strh	r1, [r3, #4]
 800efc6:	719a      	strb	r2, [r3, #6]
    break;
 800efc8:	e009      	b.n	800efde <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	  memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	4a07      	ldr	r2, [pc, #28]	; (800efec <CDC_Control_FS+0xe0>)
 800efce:	6810      	ldr	r0, [r2, #0]
 800efd0:	6018      	str	r0, [r3, #0]
 800efd2:	8891      	ldrh	r1, [r2, #4]
 800efd4:	7992      	ldrb	r2, [r2, #6]
 800efd6:	8099      	strh	r1, [r3, #4]
 800efd8:	719a      	strb	r2, [r3, #6]
    break;
 800efda:	e000      	b.n	800efde <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800efdc:	bf00      	nop
  }

  return (USBD_OK);
 800efde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	200000b4 	.word	0x200000b4

0800eff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800effa:	6879      	ldr	r1, [r7, #4]
 800effc:	4805      	ldr	r0, [pc, #20]	; (800f014 <CDC_Receive_FS+0x24>)
 800effe:	f7fe fb7b 	bl	800d6f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f002:	4804      	ldr	r0, [pc, #16]	; (800f014 <CDC_Receive_FS+0x24>)
 800f004:	f7fe fb96 	bl	800d734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f008:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	200008f4 	.word	0x200008f4

0800f018 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f018:	b480      	push	{r7}
 800f01a:	b087      	sub	sp, #28
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	4613      	mov	r3, r2
 800f024:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f02a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	371c      	adds	r7, #28
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
	...

0800f03c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	4603      	mov	r3, r0
 800f044:	6039      	str	r1, [r7, #0]
 800f046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	2212      	movs	r2, #18
 800f04c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f04e:	4b03      	ldr	r3, [pc, #12]	; (800f05c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	200000ec 	.word	0x200000ec

0800f060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	4603      	mov	r3, r0
 800f068:	6039      	str	r1, [r7, #0]
 800f06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2204      	movs	r2, #4
 800f070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f072:	4b03      	ldr	r3, [pc, #12]	; (800f080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f074:	4618      	mov	r0, r3
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr
 800f080:	20000100 	.word	0x20000100

0800f084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	6039      	str	r1, [r7, #0]
 800f08e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f090:	79fb      	ldrb	r3, [r7, #7]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d105      	bne.n	800f0a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f09a:	4808      	ldr	r0, [pc, #32]	; (800f0bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f09c:	f7ff fdae 	bl	800ebfc <USBD_GetString>
 800f0a0:	e004      	b.n	800f0ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	4904      	ldr	r1, [pc, #16]	; (800f0b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f0a6:	4805      	ldr	r0, [pc, #20]	; (800f0bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f0a8:	f7ff fda8 	bl	800ebfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0ac:	4b02      	ldr	r3, [pc, #8]	; (800f0b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	20001bd0 	.word	0x20001bd0
 800f0bc:	08013610 	.word	0x08013610

0800f0c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	6039      	str	r1, [r7, #0]
 800f0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0cc:	683a      	ldr	r2, [r7, #0]
 800f0ce:	4904      	ldr	r1, [pc, #16]	; (800f0e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0d0:	4804      	ldr	r0, [pc, #16]	; (800f0e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0d2:	f7ff fd93 	bl	800ebfc <USBD_GetString>
  return USBD_StrDesc;
 800f0d6:	4b02      	ldr	r3, [pc, #8]	; (800f0e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20001bd0 	.word	0x20001bd0
 800f0e4:	08013628 	.word	0x08013628

0800f0e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6039      	str	r1, [r7, #0]
 800f0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	221a      	movs	r2, #26
 800f0f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0fa:	f000 f843 	bl	800f184 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f0fe:	4b02      	ldr	r3, [pc, #8]	; (800f108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f100:	4618      	mov	r0, r3
 800f102:	3708      	adds	r7, #8
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	20000104 	.word	0x20000104

0800f10c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	6039      	str	r1, [r7, #0]
 800f116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d105      	bne.n	800f12a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	4907      	ldr	r1, [pc, #28]	; (800f140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f122:	4808      	ldr	r0, [pc, #32]	; (800f144 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f124:	f7ff fd6a 	bl	800ebfc <USBD_GetString>
 800f128:	e004      	b.n	800f134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	4904      	ldr	r1, [pc, #16]	; (800f140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f12e:	4805      	ldr	r0, [pc, #20]	; (800f144 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f130:	f7ff fd64 	bl	800ebfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f134:	4b02      	ldr	r3, [pc, #8]	; (800f140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20001bd0 	.word	0x20001bd0
 800f144:	0801363c 	.word	0x0801363c

0800f148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	6039      	str	r1, [r7, #0]
 800f152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d105      	bne.n	800f166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	4907      	ldr	r1, [pc, #28]	; (800f17c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f15e:	4808      	ldr	r0, [pc, #32]	; (800f180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f160:	f7ff fd4c 	bl	800ebfc <USBD_GetString>
 800f164:	e004      	b.n	800f170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f166:	683a      	ldr	r2, [r7, #0]
 800f168:	4904      	ldr	r1, [pc, #16]	; (800f17c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f16a:	4805      	ldr	r0, [pc, #20]	; (800f180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f16c:	f7ff fd46 	bl	800ebfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f170:	4b02      	ldr	r3, [pc, #8]	; (800f17c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	20001bd0 	.word	0x20001bd0
 800f180:	08013648 	.word	0x08013648

0800f184 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f18a:	4b0f      	ldr	r3, [pc, #60]	; (800f1c8 <Get_SerialNum+0x44>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f190:	4b0e      	ldr	r3, [pc, #56]	; (800f1cc <Get_SerialNum+0x48>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f196:	4b0e      	ldr	r3, [pc, #56]	; (800f1d0 <Get_SerialNum+0x4c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d009      	beq.n	800f1be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f1aa:	2208      	movs	r2, #8
 800f1ac:	4909      	ldr	r1, [pc, #36]	; (800f1d4 <Get_SerialNum+0x50>)
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f000 f814 	bl	800f1dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1b4:	2204      	movs	r2, #4
 800f1b6:	4908      	ldr	r1, [pc, #32]	; (800f1d8 <Get_SerialNum+0x54>)
 800f1b8:	68b8      	ldr	r0, [r7, #8]
 800f1ba:	f000 f80f 	bl	800f1dc <IntToUnicode>
  }
}
 800f1be:	bf00      	nop
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	1fff7a10 	.word	0x1fff7a10
 800f1cc:	1fff7a14 	.word	0x1fff7a14
 800f1d0:	1fff7a18 	.word	0x1fff7a18
 800f1d4:	20000106 	.word	0x20000106
 800f1d8:	20000116 	.word	0x20000116

0800f1dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	75fb      	strb	r3, [r7, #23]
 800f1f2:	e027      	b.n	800f244 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	0f1b      	lsrs	r3, r3, #28
 800f1f8:	2b09      	cmp	r3, #9
 800f1fa:	d80b      	bhi.n	800f214 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	0f1b      	lsrs	r3, r3, #28
 800f200:	b2da      	uxtb	r2, r3
 800f202:	7dfb      	ldrb	r3, [r7, #23]
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	4619      	mov	r1, r3
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	440b      	add	r3, r1
 800f20c:	3230      	adds	r2, #48	; 0x30
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	e00a      	b.n	800f22a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	0f1b      	lsrs	r3, r3, #28
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	7dfb      	ldrb	r3, [r7, #23]
 800f21c:	005b      	lsls	r3, r3, #1
 800f21e:	4619      	mov	r1, r3
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	440b      	add	r3, r1
 800f224:	3237      	adds	r2, #55	; 0x37
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	011b      	lsls	r3, r3, #4
 800f22e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f230:	7dfb      	ldrb	r3, [r7, #23]
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	3301      	adds	r3, #1
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	4413      	add	r3, r2
 800f23a:	2200      	movs	r2, #0
 800f23c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f23e:	7dfb      	ldrb	r3, [r7, #23]
 800f240:	3301      	adds	r3, #1
 800f242:	75fb      	strb	r3, [r7, #23]
 800f244:	7dfa      	ldrb	r2, [r7, #23]
 800f246:	79fb      	ldrb	r3, [r7, #7]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d3d3      	bcc.n	800f1f4 <IntToUnicode+0x18>
  }
}
 800f24c:	bf00      	nop
 800f24e:	bf00      	nop
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
	...

0800f25c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08a      	sub	sp, #40	; 0x28
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f264:	f107 0314 	add.w	r3, r7, #20
 800f268:	2200      	movs	r2, #0
 800f26a:	601a      	str	r2, [r3, #0]
 800f26c:	605a      	str	r2, [r3, #4]
 800f26e:	609a      	str	r2, [r3, #8]
 800f270:	60da      	str	r2, [r3, #12]
 800f272:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f27c:	d13a      	bne.n	800f2f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f27e:	2300      	movs	r3, #0
 800f280:	613b      	str	r3, [r7, #16]
 800f282:	4b1e      	ldr	r3, [pc, #120]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f286:	4a1d      	ldr	r2, [pc, #116]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f288:	f043 0301 	orr.w	r3, r3, #1
 800f28c:	6313      	str	r3, [r2, #48]	; 0x30
 800f28e:	4b1b      	ldr	r3, [pc, #108]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f292:	f003 0301 	and.w	r3, r3, #1
 800f296:	613b      	str	r3, [r7, #16]
 800f298:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f29a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f29e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2a0:	2302      	movs	r3, #2
 800f2a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f2ac:	230a      	movs	r3, #10
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2b0:	f107 0314 	add.w	r3, r7, #20
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	4812      	ldr	r0, [pc, #72]	; (800f300 <HAL_PCD_MspInit+0xa4>)
 800f2b8:	f7f6 faec 	bl	8005894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f2bc:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c0:	4a0e      	ldr	r2, [pc, #56]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c6:	6353      	str	r3, [r2, #52]	; 0x34
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	4b0b      	ldr	r3, [pc, #44]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d0:	4a0a      	ldr	r2, [pc, #40]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f2d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f2d6:	6453      	str	r3, [r2, #68]	; 0x44
 800f2d8:	4b08      	ldr	r3, [pc, #32]	; (800f2fc <HAL_PCD_MspInit+0xa0>)
 800f2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2e0:	60fb      	str	r3, [r7, #12]
 800f2e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2104      	movs	r1, #4
 800f2e8:	2043      	movs	r0, #67	; 0x43
 800f2ea:	f7f5 fe9a 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f2ee:	2043      	movs	r0, #67	; 0x43
 800f2f0:	f7f5 feb3 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	3728      	adds	r7, #40	; 0x28
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	40023800 	.word	0x40023800
 800f300:	40020000 	.word	0x40020000

0800f304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f318:	4619      	mov	r1, r3
 800f31a:	4610      	mov	r0, r2
 800f31c:	f7fe fb0f 	bl	800d93e <USBD_LL_SetupStage>
}
 800f320:	bf00      	nop
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f33a:	78fa      	ldrb	r2, [r7, #3]
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	4613      	mov	r3, r2
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	4413      	add	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	440b      	add	r3, r1
 800f348:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	78fb      	ldrb	r3, [r7, #3]
 800f350:	4619      	mov	r1, r3
 800f352:	f7fe fb49 	bl	800d9e8 <USBD_LL_DataOutStage>
}
 800f356:	bf00      	nop
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	460b      	mov	r3, r1
 800f368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f370:	78fa      	ldrb	r2, [r7, #3]
 800f372:	6879      	ldr	r1, [r7, #4]
 800f374:	4613      	mov	r3, r2
 800f376:	00db      	lsls	r3, r3, #3
 800f378:	4413      	add	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	440b      	add	r3, r1
 800f37e:	334c      	adds	r3, #76	; 0x4c
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	78fb      	ldrb	r3, [r7, #3]
 800f384:	4619      	mov	r1, r3
 800f386:	f7fe fbe2 	bl	800db4e <USBD_LL_DataInStage>
}
 800f38a:	bf00      	nop
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b082      	sub	sp, #8
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe fd16 	bl	800ddd2 <USBD_LL_SOF>
}
 800f3a6:	bf00      	nop
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b084      	sub	sp, #16
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d102      	bne.n	800f3c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
 800f3c6:	e008      	b.n	800f3da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d102      	bne.n	800f3d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	73fb      	strb	r3, [r7, #15]
 800f3d4:	e001      	b.n	800f3da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f3d6:	f7f4 fc13 	bl	8003c00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3e0:	7bfa      	ldrb	r2, [r7, #15]
 800f3e2:	4611      	mov	r1, r2
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe fcb6 	bl	800dd56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fe fc5e 	bl	800dcb2 <USBD_LL_Reset>
}
 800f3f6:	bf00      	nop
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe fcb1 	bl	800dd76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	6812      	ldr	r2, [r2, #0]
 800f422:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f426:	f043 0301 	orr.w	r3, r3, #1
 800f42a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a1b      	ldr	r3, [r3, #32]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d005      	beq.n	800f440 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f434:	4b04      	ldr	r3, [pc, #16]	; (800f448 <HAL_PCD_SuspendCallback+0x48>)
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	4a03      	ldr	r2, [pc, #12]	; (800f448 <HAL_PCD_SuspendCallback+0x48>)
 800f43a:	f043 0306 	orr.w	r3, r3, #6
 800f43e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	e000ed00 	.word	0xe000ed00

0800f44c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fca1 	bl	800dda2 <USBD_LL_Resume>
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f47a:	78fa      	ldrb	r2, [r7, #3]
 800f47c:	4611      	mov	r1, r2
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe fcf9 	bl	800de76 <USBD_LL_IsoOUTIncomplete>
}
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	460b      	mov	r3, r1
 800f496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f49e:	78fa      	ldrb	r2, [r7, #3]
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fe fcb5 	bl	800de12 <USBD_LL_IsoINIncomplete>
}
 800f4a8:	bf00      	nop
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe fd0b 	bl	800deda <USBD_LL_DevConnected>
}
 800f4c4:	bf00      	nop
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fd08 	bl	800def0 <USBD_LL_DevDisconnected>
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d13c      	bne.n	800f572 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f4f8:	4a20      	ldr	r2, [pc, #128]	; (800f57c <USBD_LL_Init+0x94>)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a1e      	ldr	r2, [pc, #120]	; (800f57c <USBD_LL_Init+0x94>)
 800f504:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f508:	4b1c      	ldr	r3, [pc, #112]	; (800f57c <USBD_LL_Init+0x94>)
 800f50a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f50e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f510:	4b1a      	ldr	r3, [pc, #104]	; (800f57c <USBD_LL_Init+0x94>)
 800f512:	2204      	movs	r2, #4
 800f514:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f516:	4b19      	ldr	r3, [pc, #100]	; (800f57c <USBD_LL_Init+0x94>)
 800f518:	2202      	movs	r2, #2
 800f51a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f51c:	4b17      	ldr	r3, [pc, #92]	; (800f57c <USBD_LL_Init+0x94>)
 800f51e:	2200      	movs	r2, #0
 800f520:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f522:	4b16      	ldr	r3, [pc, #88]	; (800f57c <USBD_LL_Init+0x94>)
 800f524:	2202      	movs	r2, #2
 800f526:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f528:	4b14      	ldr	r3, [pc, #80]	; (800f57c <USBD_LL_Init+0x94>)
 800f52a:	2200      	movs	r2, #0
 800f52c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f52e:	4b13      	ldr	r3, [pc, #76]	; (800f57c <USBD_LL_Init+0x94>)
 800f530:	2200      	movs	r2, #0
 800f532:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f534:	4b11      	ldr	r3, [pc, #68]	; (800f57c <USBD_LL_Init+0x94>)
 800f536:	2200      	movs	r2, #0
 800f538:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f53a:	4b10      	ldr	r3, [pc, #64]	; (800f57c <USBD_LL_Init+0x94>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f540:	4b0e      	ldr	r3, [pc, #56]	; (800f57c <USBD_LL_Init+0x94>)
 800f542:	2200      	movs	r2, #0
 800f544:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f546:	480d      	ldr	r0, [pc, #52]	; (800f57c <USBD_LL_Init+0x94>)
 800f548:	f7f7 fb19 	bl	8006b7e <HAL_PCD_Init>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f552:	f7f4 fb55 	bl	8003c00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f556:	2180      	movs	r1, #128	; 0x80
 800f558:	4808      	ldr	r0, [pc, #32]	; (800f57c <USBD_LL_Init+0x94>)
 800f55a:	f7f8 fd70 	bl	800803e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f55e:	2240      	movs	r2, #64	; 0x40
 800f560:	2100      	movs	r1, #0
 800f562:	4806      	ldr	r0, [pc, #24]	; (800f57c <USBD_LL_Init+0x94>)
 800f564:	f7f8 fd24 	bl	8007fb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f568:	2280      	movs	r2, #128	; 0x80
 800f56a:	2101      	movs	r1, #1
 800f56c:	4803      	ldr	r0, [pc, #12]	; (800f57c <USBD_LL_Init+0x94>)
 800f56e:	f7f8 fd1f 	bl	8007fb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	20001dd0 	.word	0x20001dd0

0800f580 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f588:	2300      	movs	r3, #0
 800f58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f58c:	2300      	movs	r3, #0
 800f58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f596:	4618      	mov	r0, r3
 800f598:	f7f7 fc0e 	bl	8006db8 <HAL_PCD_Start>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f000 f942 	bl	800f82c <USBD_Get_USB_Status>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b084      	sub	sp, #16
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	4608      	mov	r0, r1
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	70fb      	strb	r3, [r7, #3]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	70bb      	strb	r3, [r7, #2]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f5de:	78bb      	ldrb	r3, [r7, #2]
 800f5e0:	883a      	ldrh	r2, [r7, #0]
 800f5e2:	78f9      	ldrb	r1, [r7, #3]
 800f5e4:	f7f8 f8df 	bl	80077a6 <HAL_PCD_EP_Open>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ec:	7bfb      	ldrb	r3, [r7, #15]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 f91c 	bl	800f82c <USBD_Get_USB_Status>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b084      	sub	sp, #16
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
 800f60a:	460b      	mov	r3, r1
 800f60c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f61c:	78fa      	ldrb	r2, [r7, #3]
 800f61e:	4611      	mov	r1, r2
 800f620:	4618      	mov	r0, r3
 800f622:	f7f8 f928 	bl	8007876 <HAL_PCD_EP_Close>
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 f8fd 	bl	800f82c <USBD_Get_USB_Status>
 800f632:	4603      	mov	r3, r0
 800f634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f636:	7bbb      	ldrb	r3, [r7, #14]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f64c:	2300      	movs	r3, #0
 800f64e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f65a:	78fa      	ldrb	r2, [r7, #3]
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f8 fa00 	bl	8007a64 <HAL_PCD_EP_SetStall>
 800f664:	4603      	mov	r3, r0
 800f666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f668:	7bfb      	ldrb	r3, [r7, #15]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 f8de 	bl	800f82c <USBD_Get_USB_Status>
 800f670:	4603      	mov	r3, r0
 800f672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f674:	7bbb      	ldrb	r3, [r7, #14]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b084      	sub	sp, #16
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
 800f686:	460b      	mov	r3, r1
 800f688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f698:	78fa      	ldrb	r2, [r7, #3]
 800f69a:	4611      	mov	r1, r2
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7f8 fa45 	bl	8007b2c <HAL_PCD_EP_ClrStall>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6a6:	7bfb      	ldrb	r3, [r7, #15]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 f8bf 	bl	800f82c <USBD_Get_USB_Status>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b085      	sub	sp, #20
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	da0b      	bge.n	800f6f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6de:	68f9      	ldr	r1, [r7, #12]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	4413      	add	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	440b      	add	r3, r1
 800f6ea:	333e      	adds	r3, #62	; 0x3e
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	e00b      	b.n	800f708 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6f6:	68f9      	ldr	r1, [r7, #12]
 800f6f8:	4613      	mov	r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	4413      	add	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	440b      	add	r3, r1
 800f702:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f706:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3714      	adds	r7, #20
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	460b      	mov	r3, r1
 800f71e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f720:	2300      	movs	r3, #0
 800f722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f72e:	78fa      	ldrb	r2, [r7, #3]
 800f730:	4611      	mov	r1, r2
 800f732:	4618      	mov	r0, r3
 800f734:	f7f8 f812 	bl	800775c <HAL_PCD_SetAddress>
 800f738:	4603      	mov	r3, r0
 800f73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	4618      	mov	r0, r3
 800f740:	f000 f874 	bl	800f82c <USBD_Get_USB_Status>
 800f744:	4603      	mov	r3, r0
 800f746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f748:	7bbb      	ldrb	r3, [r7, #14]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b086      	sub	sp, #24
 800f756:	af00      	add	r7, sp, #0
 800f758:	60f8      	str	r0, [r7, #12]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	603b      	str	r3, [r7, #0]
 800f75e:	460b      	mov	r3, r1
 800f760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f762:	2300      	movs	r3, #0
 800f764:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f766:	2300      	movs	r3, #0
 800f768:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f770:	7af9      	ldrb	r1, [r7, #11]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	f7f8 f92b 	bl	80079d0 <HAL_PCD_EP_Transmit>
 800f77a:	4603      	mov	r3, r0
 800f77c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	4618      	mov	r0, r3
 800f782:	f000 f853 	bl	800f82c <USBD_Get_USB_Status>
 800f786:	4603      	mov	r3, r0
 800f788:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f78a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3718      	adds	r7, #24
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	607a      	str	r2, [r7, #4]
 800f79e:	603b      	str	r3, [r7, #0]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7b2:	7af9      	ldrb	r1, [r7, #11]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	f7f8 f8a7 	bl	800790a <HAL_PCD_EP_Receive>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7c0:	7dfb      	ldrb	r3, [r7, #23]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f000 f832 	bl	800f82c <USBD_Get_USB_Status>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b082      	sub	sp, #8
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	460b      	mov	r3, r1
 800f7e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7e8:	78fa      	ldrb	r2, [r7, #3]
 800f7ea:	4611      	mov	r1, r2
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7f8 f8d7 	bl	80079a0 <HAL_PCD_EP_GetRxCount>
 800f7f2:	4603      	mov	r3, r0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f804:	4b03      	ldr	r3, [pc, #12]	; (800f814 <USBD_static_malloc+0x18>)
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	200022dc 	.word	0x200022dc

0800f818 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]

}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d817      	bhi.n	800f870 <USBD_Get_USB_Status+0x44>
 800f840:	a201      	add	r2, pc, #4	; (adr r2, 800f848 <USBD_Get_USB_Status+0x1c>)
 800f842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f846:	bf00      	nop
 800f848:	0800f859 	.word	0x0800f859
 800f84c:	0800f85f 	.word	0x0800f85f
 800f850:	0800f865 	.word	0x0800f865
 800f854:	0800f86b 	.word	0x0800f86b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	73fb      	strb	r3, [r7, #15]
    break;
 800f85c:	e00b      	b.n	800f876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f85e:	2303      	movs	r3, #3
 800f860:	73fb      	strb	r3, [r7, #15]
    break;
 800f862:	e008      	b.n	800f876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f864:	2301      	movs	r3, #1
 800f866:	73fb      	strb	r3, [r7, #15]
    break;
 800f868:	e005      	b.n	800f876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f86a:	2303      	movs	r3, #3
 800f86c:	73fb      	strb	r3, [r7, #15]
    break;
 800f86e:	e002      	b.n	800f876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f870:	2303      	movs	r3, #3
 800f872:	73fb      	strb	r3, [r7, #15]
    break;
 800f874:	bf00      	nop
  }
  return usb_status;
 800f876:	7bfb      	ldrb	r3, [r7, #15]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3714      	adds	r7, #20
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr
 800f884:	0000      	movs	r0, r0
	...

0800f888 <atan>:
 800f888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	ec55 4b10 	vmov	r4, r5, d0
 800f890:	4bc3      	ldr	r3, [pc, #780]	; (800fba0 <atan+0x318>)
 800f892:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f896:	429e      	cmp	r6, r3
 800f898:	46ab      	mov	fp, r5
 800f89a:	dd18      	ble.n	800f8ce <atan+0x46>
 800f89c:	4bc1      	ldr	r3, [pc, #772]	; (800fba4 <atan+0x31c>)
 800f89e:	429e      	cmp	r6, r3
 800f8a0:	dc01      	bgt.n	800f8a6 <atan+0x1e>
 800f8a2:	d109      	bne.n	800f8b8 <atan+0x30>
 800f8a4:	b144      	cbz	r4, 800f8b8 <atan+0x30>
 800f8a6:	4622      	mov	r2, r4
 800f8a8:	462b      	mov	r3, r5
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	f7f0 fced 	bl	800028c <__adddf3>
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	460d      	mov	r5, r1
 800f8b6:	e006      	b.n	800f8c6 <atan+0x3e>
 800f8b8:	f1bb 0f00 	cmp.w	fp, #0
 800f8bc:	f300 8131 	bgt.w	800fb22 <atan+0x29a>
 800f8c0:	a59b      	add	r5, pc, #620	; (adr r5, 800fb30 <atan+0x2a8>)
 800f8c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f8c6:	ec45 4b10 	vmov	d0, r4, r5
 800f8ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ce:	4bb6      	ldr	r3, [pc, #728]	; (800fba8 <atan+0x320>)
 800f8d0:	429e      	cmp	r6, r3
 800f8d2:	dc14      	bgt.n	800f8fe <atan+0x76>
 800f8d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f8d8:	429e      	cmp	r6, r3
 800f8da:	dc0d      	bgt.n	800f8f8 <atan+0x70>
 800f8dc:	a396      	add	r3, pc, #600	; (adr r3, 800fb38 <atan+0x2b0>)
 800f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e2:	ee10 0a10 	vmov	r0, s0
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	f7f0 fcd0 	bl	800028c <__adddf3>
 800f8ec:	4baf      	ldr	r3, [pc, #700]	; (800fbac <atan+0x324>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f7f1 f912 	bl	8000b18 <__aeabi_dcmpgt>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d1e6      	bne.n	800f8c6 <atan+0x3e>
 800f8f8:	f04f 3aff 	mov.w	sl, #4294967295
 800f8fc:	e02b      	b.n	800f956 <atan+0xce>
 800f8fe:	f000 f963 	bl	800fbc8 <fabs>
 800f902:	4bab      	ldr	r3, [pc, #684]	; (800fbb0 <atan+0x328>)
 800f904:	429e      	cmp	r6, r3
 800f906:	ec55 4b10 	vmov	r4, r5, d0
 800f90a:	f300 80bf 	bgt.w	800fa8c <atan+0x204>
 800f90e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f912:	429e      	cmp	r6, r3
 800f914:	f300 80a0 	bgt.w	800fa58 <atan+0x1d0>
 800f918:	ee10 2a10 	vmov	r2, s0
 800f91c:	ee10 0a10 	vmov	r0, s0
 800f920:	462b      	mov	r3, r5
 800f922:	4629      	mov	r1, r5
 800f924:	f7f0 fcb2 	bl	800028c <__adddf3>
 800f928:	4ba0      	ldr	r3, [pc, #640]	; (800fbac <atan+0x324>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	f7f0 fcac 	bl	8000288 <__aeabi_dsub>
 800f930:	2200      	movs	r2, #0
 800f932:	4606      	mov	r6, r0
 800f934:	460f      	mov	r7, r1
 800f936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f93a:	4620      	mov	r0, r4
 800f93c:	4629      	mov	r1, r5
 800f93e:	f7f0 fca5 	bl	800028c <__adddf3>
 800f942:	4602      	mov	r2, r0
 800f944:	460b      	mov	r3, r1
 800f946:	4630      	mov	r0, r6
 800f948:	4639      	mov	r1, r7
 800f94a:	f7f0 ff7f 	bl	800084c <__aeabi_ddiv>
 800f94e:	f04f 0a00 	mov.w	sl, #0
 800f952:	4604      	mov	r4, r0
 800f954:	460d      	mov	r5, r1
 800f956:	4622      	mov	r2, r4
 800f958:	462b      	mov	r3, r5
 800f95a:	4620      	mov	r0, r4
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f0 fe4b 	bl	80005f8 <__aeabi_dmul>
 800f962:	4602      	mov	r2, r0
 800f964:	460b      	mov	r3, r1
 800f966:	4680      	mov	r8, r0
 800f968:	4689      	mov	r9, r1
 800f96a:	f7f0 fe45 	bl	80005f8 <__aeabi_dmul>
 800f96e:	a374      	add	r3, pc, #464	; (adr r3, 800fb40 <atan+0x2b8>)
 800f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f974:	4606      	mov	r6, r0
 800f976:	460f      	mov	r7, r1
 800f978:	f7f0 fe3e 	bl	80005f8 <__aeabi_dmul>
 800f97c:	a372      	add	r3, pc, #456	; (adr r3, 800fb48 <atan+0x2c0>)
 800f97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f982:	f7f0 fc83 	bl	800028c <__adddf3>
 800f986:	4632      	mov	r2, r6
 800f988:	463b      	mov	r3, r7
 800f98a:	f7f0 fe35 	bl	80005f8 <__aeabi_dmul>
 800f98e:	a370      	add	r3, pc, #448	; (adr r3, 800fb50 <atan+0x2c8>)
 800f990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f994:	f7f0 fc7a 	bl	800028c <__adddf3>
 800f998:	4632      	mov	r2, r6
 800f99a:	463b      	mov	r3, r7
 800f99c:	f7f0 fe2c 	bl	80005f8 <__aeabi_dmul>
 800f9a0:	a36d      	add	r3, pc, #436	; (adr r3, 800fb58 <atan+0x2d0>)
 800f9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a6:	f7f0 fc71 	bl	800028c <__adddf3>
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	463b      	mov	r3, r7
 800f9ae:	f7f0 fe23 	bl	80005f8 <__aeabi_dmul>
 800f9b2:	a36b      	add	r3, pc, #428	; (adr r3, 800fb60 <atan+0x2d8>)
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	f7f0 fc68 	bl	800028c <__adddf3>
 800f9bc:	4632      	mov	r2, r6
 800f9be:	463b      	mov	r3, r7
 800f9c0:	f7f0 fe1a 	bl	80005f8 <__aeabi_dmul>
 800f9c4:	a368      	add	r3, pc, #416	; (adr r3, 800fb68 <atan+0x2e0>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fc5f 	bl	800028c <__adddf3>
 800f9ce:	4642      	mov	r2, r8
 800f9d0:	464b      	mov	r3, r9
 800f9d2:	f7f0 fe11 	bl	80005f8 <__aeabi_dmul>
 800f9d6:	a366      	add	r3, pc, #408	; (adr r3, 800fb70 <atan+0x2e8>)
 800f9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9dc:	4680      	mov	r8, r0
 800f9de:	4689      	mov	r9, r1
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f0 fe08 	bl	80005f8 <__aeabi_dmul>
 800f9e8:	a363      	add	r3, pc, #396	; (adr r3, 800fb78 <atan+0x2f0>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fc4b 	bl	8000288 <__aeabi_dsub>
 800f9f2:	4632      	mov	r2, r6
 800f9f4:	463b      	mov	r3, r7
 800f9f6:	f7f0 fdff 	bl	80005f8 <__aeabi_dmul>
 800f9fa:	a361      	add	r3, pc, #388	; (adr r3, 800fb80 <atan+0x2f8>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 fc42 	bl	8000288 <__aeabi_dsub>
 800fa04:	4632      	mov	r2, r6
 800fa06:	463b      	mov	r3, r7
 800fa08:	f7f0 fdf6 	bl	80005f8 <__aeabi_dmul>
 800fa0c:	a35e      	add	r3, pc, #376	; (adr r3, 800fb88 <atan+0x300>)
 800fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa12:	f7f0 fc39 	bl	8000288 <__aeabi_dsub>
 800fa16:	4632      	mov	r2, r6
 800fa18:	463b      	mov	r3, r7
 800fa1a:	f7f0 fded 	bl	80005f8 <__aeabi_dmul>
 800fa1e:	a35c      	add	r3, pc, #368	; (adr r3, 800fb90 <atan+0x308>)
 800fa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa24:	f7f0 fc30 	bl	8000288 <__aeabi_dsub>
 800fa28:	4632      	mov	r2, r6
 800fa2a:	463b      	mov	r3, r7
 800fa2c:	f7f0 fde4 	bl	80005f8 <__aeabi_dmul>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4640      	mov	r0, r8
 800fa36:	4649      	mov	r1, r9
 800fa38:	f7f0 fc28 	bl	800028c <__adddf3>
 800fa3c:	4622      	mov	r2, r4
 800fa3e:	462b      	mov	r3, r5
 800fa40:	f7f0 fdda 	bl	80005f8 <__aeabi_dmul>
 800fa44:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	d14b      	bne.n	800fae6 <atan+0x25e>
 800fa4e:	4620      	mov	r0, r4
 800fa50:	4629      	mov	r1, r5
 800fa52:	f7f0 fc19 	bl	8000288 <__aeabi_dsub>
 800fa56:	e72c      	b.n	800f8b2 <atan+0x2a>
 800fa58:	ee10 0a10 	vmov	r0, s0
 800fa5c:	4b53      	ldr	r3, [pc, #332]	; (800fbac <atan+0x324>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	4629      	mov	r1, r5
 800fa62:	f7f0 fc11 	bl	8000288 <__aeabi_dsub>
 800fa66:	4b51      	ldr	r3, [pc, #324]	; (800fbac <atan+0x324>)
 800fa68:	4606      	mov	r6, r0
 800fa6a:	460f      	mov	r7, r1
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	4620      	mov	r0, r4
 800fa70:	4629      	mov	r1, r5
 800fa72:	f7f0 fc0b 	bl	800028c <__adddf3>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f0 fee5 	bl	800084c <__aeabi_ddiv>
 800fa82:	f04f 0a01 	mov.w	sl, #1
 800fa86:	4604      	mov	r4, r0
 800fa88:	460d      	mov	r5, r1
 800fa8a:	e764      	b.n	800f956 <atan+0xce>
 800fa8c:	4b49      	ldr	r3, [pc, #292]	; (800fbb4 <atan+0x32c>)
 800fa8e:	429e      	cmp	r6, r3
 800fa90:	da1d      	bge.n	800face <atan+0x246>
 800fa92:	ee10 0a10 	vmov	r0, s0
 800fa96:	4b48      	ldr	r3, [pc, #288]	; (800fbb8 <atan+0x330>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	f7f0 fbf4 	bl	8000288 <__aeabi_dsub>
 800faa0:	4b45      	ldr	r3, [pc, #276]	; (800fbb8 <atan+0x330>)
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	2200      	movs	r2, #0
 800faa8:	4620      	mov	r0, r4
 800faaa:	4629      	mov	r1, r5
 800faac:	f7f0 fda4 	bl	80005f8 <__aeabi_dmul>
 800fab0:	4b3e      	ldr	r3, [pc, #248]	; (800fbac <atan+0x324>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	f7f0 fbea 	bl	800028c <__adddf3>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4630      	mov	r0, r6
 800fabe:	4639      	mov	r1, r7
 800fac0:	f7f0 fec4 	bl	800084c <__aeabi_ddiv>
 800fac4:	f04f 0a02 	mov.w	sl, #2
 800fac8:	4604      	mov	r4, r0
 800faca:	460d      	mov	r5, r1
 800facc:	e743      	b.n	800f956 <atan+0xce>
 800face:	462b      	mov	r3, r5
 800fad0:	ee10 2a10 	vmov	r2, s0
 800fad4:	4939      	ldr	r1, [pc, #228]	; (800fbbc <atan+0x334>)
 800fad6:	2000      	movs	r0, #0
 800fad8:	f7f0 feb8 	bl	800084c <__aeabi_ddiv>
 800fadc:	f04f 0a03 	mov.w	sl, #3
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	e737      	b.n	800f956 <atan+0xce>
 800fae6:	4b36      	ldr	r3, [pc, #216]	; (800fbc0 <atan+0x338>)
 800fae8:	4e36      	ldr	r6, [pc, #216]	; (800fbc4 <atan+0x33c>)
 800faea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800faee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800faf2:	e9da 2300 	ldrd	r2, r3, [sl]
 800faf6:	f7f0 fbc7 	bl	8000288 <__aeabi_dsub>
 800fafa:	4622      	mov	r2, r4
 800fafc:	462b      	mov	r3, r5
 800fafe:	f7f0 fbc3 	bl	8000288 <__aeabi_dsub>
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fb0a:	f7f0 fbbd 	bl	8000288 <__aeabi_dsub>
 800fb0e:	f1bb 0f00 	cmp.w	fp, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	460d      	mov	r5, r1
 800fb16:	f6bf aed6 	bge.w	800f8c6 <atan+0x3e>
 800fb1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb1e:	461d      	mov	r5, r3
 800fb20:	e6d1      	b.n	800f8c6 <atan+0x3e>
 800fb22:	a51d      	add	r5, pc, #116	; (adr r5, 800fb98 <atan+0x310>)
 800fb24:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fb28:	e6cd      	b.n	800f8c6 <atan+0x3e>
 800fb2a:	bf00      	nop
 800fb2c:	f3af 8000 	nop.w
 800fb30:	54442d18 	.word	0x54442d18
 800fb34:	bff921fb 	.word	0xbff921fb
 800fb38:	8800759c 	.word	0x8800759c
 800fb3c:	7e37e43c 	.word	0x7e37e43c
 800fb40:	e322da11 	.word	0xe322da11
 800fb44:	3f90ad3a 	.word	0x3f90ad3a
 800fb48:	24760deb 	.word	0x24760deb
 800fb4c:	3fa97b4b 	.word	0x3fa97b4b
 800fb50:	a0d03d51 	.word	0xa0d03d51
 800fb54:	3fb10d66 	.word	0x3fb10d66
 800fb58:	c54c206e 	.word	0xc54c206e
 800fb5c:	3fb745cd 	.word	0x3fb745cd
 800fb60:	920083ff 	.word	0x920083ff
 800fb64:	3fc24924 	.word	0x3fc24924
 800fb68:	5555550d 	.word	0x5555550d
 800fb6c:	3fd55555 	.word	0x3fd55555
 800fb70:	2c6a6c2f 	.word	0x2c6a6c2f
 800fb74:	bfa2b444 	.word	0xbfa2b444
 800fb78:	52defd9a 	.word	0x52defd9a
 800fb7c:	3fadde2d 	.word	0x3fadde2d
 800fb80:	af749a6d 	.word	0xaf749a6d
 800fb84:	3fb3b0f2 	.word	0x3fb3b0f2
 800fb88:	fe231671 	.word	0xfe231671
 800fb8c:	3fbc71c6 	.word	0x3fbc71c6
 800fb90:	9998ebc4 	.word	0x9998ebc4
 800fb94:	3fc99999 	.word	0x3fc99999
 800fb98:	54442d18 	.word	0x54442d18
 800fb9c:	3ff921fb 	.word	0x3ff921fb
 800fba0:	440fffff 	.word	0x440fffff
 800fba4:	7ff00000 	.word	0x7ff00000
 800fba8:	3fdbffff 	.word	0x3fdbffff
 800fbac:	3ff00000 	.word	0x3ff00000
 800fbb0:	3ff2ffff 	.word	0x3ff2ffff
 800fbb4:	40038000 	.word	0x40038000
 800fbb8:	3ff80000 	.word	0x3ff80000
 800fbbc:	bff00000 	.word	0xbff00000
 800fbc0:	080136f8 	.word	0x080136f8
 800fbc4:	080136d8 	.word	0x080136d8

0800fbc8 <fabs>:
 800fbc8:	ec51 0b10 	vmov	r0, r1, d0
 800fbcc:	ee10 2a10 	vmov	r2, s0
 800fbd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fbd4:	ec43 2b10 	vmov	d0, r2, r3
 800fbd8:	4770      	bx	lr
	...

0800fbdc <pow>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	ed2d 8b02 	vpush	{d8}
 800fbe2:	eeb0 8a40 	vmov.f32	s16, s0
 800fbe6:	eef0 8a60 	vmov.f32	s17, s1
 800fbea:	ec55 4b11 	vmov	r4, r5, d1
 800fbee:	f000 f883 	bl	800fcf8 <__ieee754_pow>
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	462b      	mov	r3, r5
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	ec57 6b10 	vmov	r6, r7, d0
 800fbfe:	f7f0 ff95 	bl	8000b2c <__aeabi_dcmpun>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d13b      	bne.n	800fc7e <pow+0xa2>
 800fc06:	ec51 0b18 	vmov	r0, r1, d8
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f7f0 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc12:	b1b8      	cbz	r0, 800fc44 <pow+0x68>
 800fc14:	2200      	movs	r2, #0
 800fc16:	2300      	movs	r3, #0
 800fc18:	4620      	mov	r0, r4
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	f7f0 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	d146      	bne.n	800fcb2 <pow+0xd6>
 800fc24:	ec45 4b10 	vmov	d0, r4, r5
 800fc28:	f000 fe79 	bl	801091e <finite>
 800fc2c:	b338      	cbz	r0, 800fc7e <pow+0xa2>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2300      	movs	r3, #0
 800fc32:	4620      	mov	r0, r4
 800fc34:	4629      	mov	r1, r5
 800fc36:	f7f0 ff51 	bl	8000adc <__aeabi_dcmplt>
 800fc3a:	b300      	cbz	r0, 800fc7e <pow+0xa2>
 800fc3c:	f000 ff02 	bl	8010a44 <__errno>
 800fc40:	2322      	movs	r3, #34	; 0x22
 800fc42:	e01b      	b.n	800fc7c <pow+0xa0>
 800fc44:	ec47 6b10 	vmov	d0, r6, r7
 800fc48:	f000 fe69 	bl	801091e <finite>
 800fc4c:	b9e0      	cbnz	r0, 800fc88 <pow+0xac>
 800fc4e:	eeb0 0a48 	vmov.f32	s0, s16
 800fc52:	eef0 0a68 	vmov.f32	s1, s17
 800fc56:	f000 fe62 	bl	801091e <finite>
 800fc5a:	b1a8      	cbz	r0, 800fc88 <pow+0xac>
 800fc5c:	ec45 4b10 	vmov	d0, r4, r5
 800fc60:	f000 fe5d 	bl	801091e <finite>
 800fc64:	b180      	cbz	r0, 800fc88 <pow+0xac>
 800fc66:	4632      	mov	r2, r6
 800fc68:	463b      	mov	r3, r7
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	f7f0 ff5d 	bl	8000b2c <__aeabi_dcmpun>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d0e2      	beq.n	800fc3c <pow+0x60>
 800fc76:	f000 fee5 	bl	8010a44 <__errno>
 800fc7a:	2321      	movs	r3, #33	; 0x21
 800fc7c:	6003      	str	r3, [r0, #0]
 800fc7e:	ecbd 8b02 	vpop	{d8}
 800fc82:	ec47 6b10 	vmov	d0, r6, r7
 800fc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	4639      	mov	r1, r7
 800fc90:	f7f0 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d0f2      	beq.n	800fc7e <pow+0xa2>
 800fc98:	eeb0 0a48 	vmov.f32	s0, s16
 800fc9c:	eef0 0a68 	vmov.f32	s1, s17
 800fca0:	f000 fe3d 	bl	801091e <finite>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0ea      	beq.n	800fc7e <pow+0xa2>
 800fca8:	ec45 4b10 	vmov	d0, r4, r5
 800fcac:	f000 fe37 	bl	801091e <finite>
 800fcb0:	e7c3      	b.n	800fc3a <pow+0x5e>
 800fcb2:	4f01      	ldr	r7, [pc, #4]	; (800fcb8 <pow+0xdc>)
 800fcb4:	2600      	movs	r6, #0
 800fcb6:	e7e2      	b.n	800fc7e <pow+0xa2>
 800fcb8:	3ff00000 	.word	0x3ff00000

0800fcbc <sqrtf>:
 800fcbc:	b508      	push	{r3, lr}
 800fcbe:	ed2d 8b02 	vpush	{d8}
 800fcc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fcc6:	f000 fdf7 	bl	80108b8 <__ieee754_sqrtf>
 800fcca:	eeb4 8a48 	vcmp.f32	s16, s16
 800fcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd2:	d60c      	bvs.n	800fcee <sqrtf+0x32>
 800fcd4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800fcf4 <sqrtf+0x38>
 800fcd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce0:	d505      	bpl.n	800fcee <sqrtf+0x32>
 800fce2:	f000 feaf 	bl	8010a44 <__errno>
 800fce6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fcea:	2321      	movs	r3, #33	; 0x21
 800fcec:	6003      	str	r3, [r0, #0]
 800fcee:	ecbd 8b02 	vpop	{d8}
 800fcf2:	bd08      	pop	{r3, pc}
 800fcf4:	00000000 	.word	0x00000000

0800fcf8 <__ieee754_pow>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	ed2d 8b06 	vpush	{d8-d10}
 800fd00:	b089      	sub	sp, #36	; 0x24
 800fd02:	ed8d 1b00 	vstr	d1, [sp]
 800fd06:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fd0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fd0e:	ea58 0102 	orrs.w	r1, r8, r2
 800fd12:	ec57 6b10 	vmov	r6, r7, d0
 800fd16:	d115      	bne.n	800fd44 <__ieee754_pow+0x4c>
 800fd18:	19b3      	adds	r3, r6, r6
 800fd1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fd1e:	4152      	adcs	r2, r2
 800fd20:	4299      	cmp	r1, r3
 800fd22:	4b89      	ldr	r3, [pc, #548]	; (800ff48 <__ieee754_pow+0x250>)
 800fd24:	4193      	sbcs	r3, r2
 800fd26:	f080 84d2 	bcs.w	80106ce <__ieee754_pow+0x9d6>
 800fd2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd2e:	4630      	mov	r0, r6
 800fd30:	4639      	mov	r1, r7
 800fd32:	f7f0 faab 	bl	800028c <__adddf3>
 800fd36:	ec41 0b10 	vmov	d0, r0, r1
 800fd3a:	b009      	add	sp, #36	; 0x24
 800fd3c:	ecbd 8b06 	vpop	{d8-d10}
 800fd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	4b81      	ldr	r3, [pc, #516]	; (800ff4c <__ieee754_pow+0x254>)
 800fd46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fd4a:	429c      	cmp	r4, r3
 800fd4c:	ee10 aa10 	vmov	sl, s0
 800fd50:	463d      	mov	r5, r7
 800fd52:	dc06      	bgt.n	800fd62 <__ieee754_pow+0x6a>
 800fd54:	d101      	bne.n	800fd5a <__ieee754_pow+0x62>
 800fd56:	2e00      	cmp	r6, #0
 800fd58:	d1e7      	bne.n	800fd2a <__ieee754_pow+0x32>
 800fd5a:	4598      	cmp	r8, r3
 800fd5c:	dc01      	bgt.n	800fd62 <__ieee754_pow+0x6a>
 800fd5e:	d10f      	bne.n	800fd80 <__ieee754_pow+0x88>
 800fd60:	b172      	cbz	r2, 800fd80 <__ieee754_pow+0x88>
 800fd62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fd66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fd6a:	ea55 050a 	orrs.w	r5, r5, sl
 800fd6e:	d1dc      	bne.n	800fd2a <__ieee754_pow+0x32>
 800fd70:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd74:	18db      	adds	r3, r3, r3
 800fd76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fd7a:	4152      	adcs	r2, r2
 800fd7c:	429d      	cmp	r5, r3
 800fd7e:	e7d0      	b.n	800fd22 <__ieee754_pow+0x2a>
 800fd80:	2d00      	cmp	r5, #0
 800fd82:	da3b      	bge.n	800fdfc <__ieee754_pow+0x104>
 800fd84:	4b72      	ldr	r3, [pc, #456]	; (800ff50 <__ieee754_pow+0x258>)
 800fd86:	4598      	cmp	r8, r3
 800fd88:	dc51      	bgt.n	800fe2e <__ieee754_pow+0x136>
 800fd8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fd8e:	4598      	cmp	r8, r3
 800fd90:	f340 84ac 	ble.w	80106ec <__ieee754_pow+0x9f4>
 800fd94:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fd98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd9c:	2b14      	cmp	r3, #20
 800fd9e:	dd0f      	ble.n	800fdc0 <__ieee754_pow+0xc8>
 800fda0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fda4:	fa22 f103 	lsr.w	r1, r2, r3
 800fda8:	fa01 f303 	lsl.w	r3, r1, r3
 800fdac:	4293      	cmp	r3, r2
 800fdae:	f040 849d 	bne.w	80106ec <__ieee754_pow+0x9f4>
 800fdb2:	f001 0101 	and.w	r1, r1, #1
 800fdb6:	f1c1 0302 	rsb	r3, r1, #2
 800fdba:	9304      	str	r3, [sp, #16]
 800fdbc:	b182      	cbz	r2, 800fde0 <__ieee754_pow+0xe8>
 800fdbe:	e05f      	b.n	800fe80 <__ieee754_pow+0x188>
 800fdc0:	2a00      	cmp	r2, #0
 800fdc2:	d15b      	bne.n	800fe7c <__ieee754_pow+0x184>
 800fdc4:	f1c3 0314 	rsb	r3, r3, #20
 800fdc8:	fa48 f103 	asr.w	r1, r8, r3
 800fdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800fdd0:	4543      	cmp	r3, r8
 800fdd2:	f040 8488 	bne.w	80106e6 <__ieee754_pow+0x9ee>
 800fdd6:	f001 0101 	and.w	r1, r1, #1
 800fdda:	f1c1 0302 	rsb	r3, r1, #2
 800fdde:	9304      	str	r3, [sp, #16]
 800fde0:	4b5c      	ldr	r3, [pc, #368]	; (800ff54 <__ieee754_pow+0x25c>)
 800fde2:	4598      	cmp	r8, r3
 800fde4:	d132      	bne.n	800fe4c <__ieee754_pow+0x154>
 800fde6:	f1b9 0f00 	cmp.w	r9, #0
 800fdea:	f280 8478 	bge.w	80106de <__ieee754_pow+0x9e6>
 800fdee:	4959      	ldr	r1, [pc, #356]	; (800ff54 <__ieee754_pow+0x25c>)
 800fdf0:	4632      	mov	r2, r6
 800fdf2:	463b      	mov	r3, r7
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	f7f0 fd29 	bl	800084c <__aeabi_ddiv>
 800fdfa:	e79c      	b.n	800fd36 <__ieee754_pow+0x3e>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	9304      	str	r3, [sp, #16]
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	d13d      	bne.n	800fe80 <__ieee754_pow+0x188>
 800fe04:	4b51      	ldr	r3, [pc, #324]	; (800ff4c <__ieee754_pow+0x254>)
 800fe06:	4598      	cmp	r8, r3
 800fe08:	d1ea      	bne.n	800fde0 <__ieee754_pow+0xe8>
 800fe0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fe0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fe12:	ea53 030a 	orrs.w	r3, r3, sl
 800fe16:	f000 845a 	beq.w	80106ce <__ieee754_pow+0x9d6>
 800fe1a:	4b4f      	ldr	r3, [pc, #316]	; (800ff58 <__ieee754_pow+0x260>)
 800fe1c:	429c      	cmp	r4, r3
 800fe1e:	dd08      	ble.n	800fe32 <__ieee754_pow+0x13a>
 800fe20:	f1b9 0f00 	cmp.w	r9, #0
 800fe24:	f2c0 8457 	blt.w	80106d6 <__ieee754_pow+0x9de>
 800fe28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe2c:	e783      	b.n	800fd36 <__ieee754_pow+0x3e>
 800fe2e:	2302      	movs	r3, #2
 800fe30:	e7e5      	b.n	800fdfe <__ieee754_pow+0x106>
 800fe32:	f1b9 0f00 	cmp.w	r9, #0
 800fe36:	f04f 0000 	mov.w	r0, #0
 800fe3a:	f04f 0100 	mov.w	r1, #0
 800fe3e:	f6bf af7a 	bge.w	800fd36 <__ieee754_pow+0x3e>
 800fe42:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fe46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe4a:	e774      	b.n	800fd36 <__ieee754_pow+0x3e>
 800fe4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fe50:	d106      	bne.n	800fe60 <__ieee754_pow+0x168>
 800fe52:	4632      	mov	r2, r6
 800fe54:	463b      	mov	r3, r7
 800fe56:	4630      	mov	r0, r6
 800fe58:	4639      	mov	r1, r7
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	e76a      	b.n	800fd36 <__ieee754_pow+0x3e>
 800fe60:	4b3e      	ldr	r3, [pc, #248]	; (800ff5c <__ieee754_pow+0x264>)
 800fe62:	4599      	cmp	r9, r3
 800fe64:	d10c      	bne.n	800fe80 <__ieee754_pow+0x188>
 800fe66:	2d00      	cmp	r5, #0
 800fe68:	db0a      	blt.n	800fe80 <__ieee754_pow+0x188>
 800fe6a:	ec47 6b10 	vmov	d0, r6, r7
 800fe6e:	b009      	add	sp, #36	; 0x24
 800fe70:	ecbd 8b06 	vpop	{d8-d10}
 800fe74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe78:	f000 bc6c 	b.w	8010754 <__ieee754_sqrt>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	ec47 6b10 	vmov	d0, r6, r7
 800fe84:	f7ff fea0 	bl	800fbc8 <fabs>
 800fe88:	ec51 0b10 	vmov	r0, r1, d0
 800fe8c:	f1ba 0f00 	cmp.w	sl, #0
 800fe90:	d129      	bne.n	800fee6 <__ieee754_pow+0x1ee>
 800fe92:	b124      	cbz	r4, 800fe9e <__ieee754_pow+0x1a6>
 800fe94:	4b2f      	ldr	r3, [pc, #188]	; (800ff54 <__ieee754_pow+0x25c>)
 800fe96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d123      	bne.n	800fee6 <__ieee754_pow+0x1ee>
 800fe9e:	f1b9 0f00 	cmp.w	r9, #0
 800fea2:	da05      	bge.n	800feb0 <__ieee754_pow+0x1b8>
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	2000      	movs	r0, #0
 800feaa:	492a      	ldr	r1, [pc, #168]	; (800ff54 <__ieee754_pow+0x25c>)
 800feac:	f7f0 fcce 	bl	800084c <__aeabi_ddiv>
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	f6bf af40 	bge.w	800fd36 <__ieee754_pow+0x3e>
 800feb6:	9b04      	ldr	r3, [sp, #16]
 800feb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800febc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fec0:	4323      	orrs	r3, r4
 800fec2:	d108      	bne.n	800fed6 <__ieee754_pow+0x1de>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4610      	mov	r0, r2
 800feca:	4619      	mov	r1, r3
 800fecc:	f7f0 f9dc 	bl	8000288 <__aeabi_dsub>
 800fed0:	4602      	mov	r2, r0
 800fed2:	460b      	mov	r3, r1
 800fed4:	e78f      	b.n	800fdf6 <__ieee754_pow+0xfe>
 800fed6:	9b04      	ldr	r3, [sp, #16]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	f47f af2c 	bne.w	800fd36 <__ieee754_pow+0x3e>
 800fede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fee2:	4619      	mov	r1, r3
 800fee4:	e727      	b.n	800fd36 <__ieee754_pow+0x3e>
 800fee6:	0feb      	lsrs	r3, r5, #31
 800fee8:	3b01      	subs	r3, #1
 800feea:	9306      	str	r3, [sp, #24]
 800feec:	9a06      	ldr	r2, [sp, #24]
 800feee:	9b04      	ldr	r3, [sp, #16]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	d102      	bne.n	800fefa <__ieee754_pow+0x202>
 800fef4:	4632      	mov	r2, r6
 800fef6:	463b      	mov	r3, r7
 800fef8:	e7e6      	b.n	800fec8 <__ieee754_pow+0x1d0>
 800fefa:	4b19      	ldr	r3, [pc, #100]	; (800ff60 <__ieee754_pow+0x268>)
 800fefc:	4598      	cmp	r8, r3
 800fefe:	f340 80fb 	ble.w	80100f8 <__ieee754_pow+0x400>
 800ff02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ff06:	4598      	cmp	r8, r3
 800ff08:	4b13      	ldr	r3, [pc, #76]	; (800ff58 <__ieee754_pow+0x260>)
 800ff0a:	dd0c      	ble.n	800ff26 <__ieee754_pow+0x22e>
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	dc0f      	bgt.n	800ff30 <__ieee754_pow+0x238>
 800ff10:	f1b9 0f00 	cmp.w	r9, #0
 800ff14:	da0f      	bge.n	800ff36 <__ieee754_pow+0x23e>
 800ff16:	2000      	movs	r0, #0
 800ff18:	b009      	add	sp, #36	; 0x24
 800ff1a:	ecbd 8b06 	vpop	{d8-d10}
 800ff1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff22:	f000 bcf3 	b.w	801090c <__math_oflow>
 800ff26:	429c      	cmp	r4, r3
 800ff28:	dbf2      	blt.n	800ff10 <__ieee754_pow+0x218>
 800ff2a:	4b0a      	ldr	r3, [pc, #40]	; (800ff54 <__ieee754_pow+0x25c>)
 800ff2c:	429c      	cmp	r4, r3
 800ff2e:	dd19      	ble.n	800ff64 <__ieee754_pow+0x26c>
 800ff30:	f1b9 0f00 	cmp.w	r9, #0
 800ff34:	dcef      	bgt.n	800ff16 <__ieee754_pow+0x21e>
 800ff36:	2000      	movs	r0, #0
 800ff38:	b009      	add	sp, #36	; 0x24
 800ff3a:	ecbd 8b06 	vpop	{d8-d10}
 800ff3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff42:	f000 bcda 	b.w	80108fa <__math_uflow>
 800ff46:	bf00      	nop
 800ff48:	fff00000 	.word	0xfff00000
 800ff4c:	7ff00000 	.word	0x7ff00000
 800ff50:	433fffff 	.word	0x433fffff
 800ff54:	3ff00000 	.word	0x3ff00000
 800ff58:	3fefffff 	.word	0x3fefffff
 800ff5c:	3fe00000 	.word	0x3fe00000
 800ff60:	41e00000 	.word	0x41e00000
 800ff64:	4b60      	ldr	r3, [pc, #384]	; (80100e8 <__ieee754_pow+0x3f0>)
 800ff66:	2200      	movs	r2, #0
 800ff68:	f7f0 f98e 	bl	8000288 <__aeabi_dsub>
 800ff6c:	a354      	add	r3, pc, #336	; (adr r3, 80100c0 <__ieee754_pow+0x3c8>)
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	4604      	mov	r4, r0
 800ff74:	460d      	mov	r5, r1
 800ff76:	f7f0 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ff7a:	a353      	add	r3, pc, #332	; (adr r3, 80100c8 <__ieee754_pow+0x3d0>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	4606      	mov	r6, r0
 800ff82:	460f      	mov	r7, r1
 800ff84:	4620      	mov	r0, r4
 800ff86:	4629      	mov	r1, r5
 800ff88:	f7f0 fb36 	bl	80005f8 <__aeabi_dmul>
 800ff8c:	4b57      	ldr	r3, [pc, #348]	; (80100ec <__ieee754_pow+0x3f4>)
 800ff8e:	4682      	mov	sl, r0
 800ff90:	468b      	mov	fp, r1
 800ff92:	2200      	movs	r2, #0
 800ff94:	4620      	mov	r0, r4
 800ff96:	4629      	mov	r1, r5
 800ff98:	f7f0 fb2e 	bl	80005f8 <__aeabi_dmul>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	a14b      	add	r1, pc, #300	; (adr r1, 80100d0 <__ieee754_pow+0x3d8>)
 800ffa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffa6:	f7f0 f96f 	bl	8000288 <__aeabi_dsub>
 800ffaa:	4622      	mov	r2, r4
 800ffac:	462b      	mov	r3, r5
 800ffae:	f7f0 fb23 	bl	80005f8 <__aeabi_dmul>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	494d      	ldr	r1, [pc, #308]	; (80100f0 <__ieee754_pow+0x3f8>)
 800ffba:	f7f0 f965 	bl	8000288 <__aeabi_dsub>
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	4680      	mov	r8, r0
 800ffc2:	4689      	mov	r9, r1
 800ffc4:	462b      	mov	r3, r5
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f7f0 fb15 	bl	80005f8 <__aeabi_dmul>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	a33f      	add	r3, pc, #252	; (adr r3, 80100d8 <__ieee754_pow+0x3e0>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	f7f0 fb0a 	bl	80005f8 <__aeabi_dmul>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	4650      	mov	r0, sl
 800ffea:	4659      	mov	r1, fp
 800ffec:	f7f0 f94c 	bl	8000288 <__aeabi_dsub>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	4680      	mov	r8, r0
 800fff6:	4689      	mov	r9, r1
 800fff8:	4630      	mov	r0, r6
 800fffa:	4639      	mov	r1, r7
 800fffc:	f7f0 f946 	bl	800028c <__adddf3>
 8010000:	2000      	movs	r0, #0
 8010002:	4632      	mov	r2, r6
 8010004:	463b      	mov	r3, r7
 8010006:	4604      	mov	r4, r0
 8010008:	460d      	mov	r5, r1
 801000a:	f7f0 f93d 	bl	8000288 <__aeabi_dsub>
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	4640      	mov	r0, r8
 8010014:	4649      	mov	r1, r9
 8010016:	f7f0 f937 	bl	8000288 <__aeabi_dsub>
 801001a:	9b04      	ldr	r3, [sp, #16]
 801001c:	9a06      	ldr	r2, [sp, #24]
 801001e:	3b01      	subs	r3, #1
 8010020:	4313      	orrs	r3, r2
 8010022:	4682      	mov	sl, r0
 8010024:	468b      	mov	fp, r1
 8010026:	f040 81e7 	bne.w	80103f8 <__ieee754_pow+0x700>
 801002a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80100e0 <__ieee754_pow+0x3e8>
 801002e:	eeb0 8a47 	vmov.f32	s16, s14
 8010032:	eef0 8a67 	vmov.f32	s17, s15
 8010036:	e9dd 6700 	ldrd	r6, r7, [sp]
 801003a:	2600      	movs	r6, #0
 801003c:	4632      	mov	r2, r6
 801003e:	463b      	mov	r3, r7
 8010040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010044:	f7f0 f920 	bl	8000288 <__aeabi_dsub>
 8010048:	4622      	mov	r2, r4
 801004a:	462b      	mov	r3, r5
 801004c:	f7f0 fad4 	bl	80005f8 <__aeabi_dmul>
 8010050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010054:	4680      	mov	r8, r0
 8010056:	4689      	mov	r9, r1
 8010058:	4650      	mov	r0, sl
 801005a:	4659      	mov	r1, fp
 801005c:	f7f0 facc 	bl	80005f8 <__aeabi_dmul>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4640      	mov	r0, r8
 8010066:	4649      	mov	r1, r9
 8010068:	f7f0 f910 	bl	800028c <__adddf3>
 801006c:	4632      	mov	r2, r6
 801006e:	463b      	mov	r3, r7
 8010070:	4680      	mov	r8, r0
 8010072:	4689      	mov	r9, r1
 8010074:	4620      	mov	r0, r4
 8010076:	4629      	mov	r1, r5
 8010078:	f7f0 fabe 	bl	80005f8 <__aeabi_dmul>
 801007c:	460b      	mov	r3, r1
 801007e:	4604      	mov	r4, r0
 8010080:	460d      	mov	r5, r1
 8010082:	4602      	mov	r2, r0
 8010084:	4649      	mov	r1, r9
 8010086:	4640      	mov	r0, r8
 8010088:	f7f0 f900 	bl	800028c <__adddf3>
 801008c:	4b19      	ldr	r3, [pc, #100]	; (80100f4 <__ieee754_pow+0x3fc>)
 801008e:	4299      	cmp	r1, r3
 8010090:	ec45 4b19 	vmov	d9, r4, r5
 8010094:	4606      	mov	r6, r0
 8010096:	460f      	mov	r7, r1
 8010098:	468b      	mov	fp, r1
 801009a:	f340 82f1 	ble.w	8010680 <__ieee754_pow+0x988>
 801009e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80100a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80100a6:	4303      	orrs	r3, r0
 80100a8:	f000 81e4 	beq.w	8010474 <__ieee754_pow+0x77c>
 80100ac:	ec51 0b18 	vmov	r0, r1, d8
 80100b0:	2200      	movs	r2, #0
 80100b2:	2300      	movs	r3, #0
 80100b4:	f7f0 fd12 	bl	8000adc <__aeabi_dcmplt>
 80100b8:	3800      	subs	r0, #0
 80100ba:	bf18      	it	ne
 80100bc:	2001      	movne	r0, #1
 80100be:	e72b      	b.n	800ff18 <__ieee754_pow+0x220>
 80100c0:	60000000 	.word	0x60000000
 80100c4:	3ff71547 	.word	0x3ff71547
 80100c8:	f85ddf44 	.word	0xf85ddf44
 80100cc:	3e54ae0b 	.word	0x3e54ae0b
 80100d0:	55555555 	.word	0x55555555
 80100d4:	3fd55555 	.word	0x3fd55555
 80100d8:	652b82fe 	.word	0x652b82fe
 80100dc:	3ff71547 	.word	0x3ff71547
 80100e0:	00000000 	.word	0x00000000
 80100e4:	bff00000 	.word	0xbff00000
 80100e8:	3ff00000 	.word	0x3ff00000
 80100ec:	3fd00000 	.word	0x3fd00000
 80100f0:	3fe00000 	.word	0x3fe00000
 80100f4:	408fffff 	.word	0x408fffff
 80100f8:	4bd5      	ldr	r3, [pc, #852]	; (8010450 <__ieee754_pow+0x758>)
 80100fa:	402b      	ands	r3, r5
 80100fc:	2200      	movs	r2, #0
 80100fe:	b92b      	cbnz	r3, 801010c <__ieee754_pow+0x414>
 8010100:	4bd4      	ldr	r3, [pc, #848]	; (8010454 <__ieee754_pow+0x75c>)
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801010a:	460c      	mov	r4, r1
 801010c:	1523      	asrs	r3, r4, #20
 801010e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010112:	4413      	add	r3, r2
 8010114:	9305      	str	r3, [sp, #20]
 8010116:	4bd0      	ldr	r3, [pc, #832]	; (8010458 <__ieee754_pow+0x760>)
 8010118:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801011c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010120:	429c      	cmp	r4, r3
 8010122:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010126:	dd08      	ble.n	801013a <__ieee754_pow+0x442>
 8010128:	4bcc      	ldr	r3, [pc, #816]	; (801045c <__ieee754_pow+0x764>)
 801012a:	429c      	cmp	r4, r3
 801012c:	f340 8162 	ble.w	80103f4 <__ieee754_pow+0x6fc>
 8010130:	9b05      	ldr	r3, [sp, #20]
 8010132:	3301      	adds	r3, #1
 8010134:	9305      	str	r3, [sp, #20]
 8010136:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801013a:	2400      	movs	r4, #0
 801013c:	00e3      	lsls	r3, r4, #3
 801013e:	9307      	str	r3, [sp, #28]
 8010140:	4bc7      	ldr	r3, [pc, #796]	; (8010460 <__ieee754_pow+0x768>)
 8010142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010146:	ed93 7b00 	vldr	d7, [r3]
 801014a:	4629      	mov	r1, r5
 801014c:	ec53 2b17 	vmov	r2, r3, d7
 8010150:	eeb0 9a47 	vmov.f32	s18, s14
 8010154:	eef0 9a67 	vmov.f32	s19, s15
 8010158:	4682      	mov	sl, r0
 801015a:	f7f0 f895 	bl	8000288 <__aeabi_dsub>
 801015e:	4652      	mov	r2, sl
 8010160:	4606      	mov	r6, r0
 8010162:	460f      	mov	r7, r1
 8010164:	462b      	mov	r3, r5
 8010166:	ec51 0b19 	vmov	r0, r1, d9
 801016a:	f7f0 f88f 	bl	800028c <__adddf3>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	2000      	movs	r0, #0
 8010174:	49bb      	ldr	r1, [pc, #748]	; (8010464 <__ieee754_pow+0x76c>)
 8010176:	f7f0 fb69 	bl	800084c <__aeabi_ddiv>
 801017a:	ec41 0b1a 	vmov	d10, r0, r1
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	4630      	mov	r0, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f7f0 fa37 	bl	80005f8 <__aeabi_dmul>
 801018a:	2300      	movs	r3, #0
 801018c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010190:	9302      	str	r3, [sp, #8]
 8010192:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010196:	46ab      	mov	fp, r5
 8010198:	106d      	asrs	r5, r5, #1
 801019a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801019e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80101a2:	ec41 0b18 	vmov	d8, r0, r1
 80101a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80101aa:	2200      	movs	r2, #0
 80101ac:	4640      	mov	r0, r8
 80101ae:	4649      	mov	r1, r9
 80101b0:	4614      	mov	r4, r2
 80101b2:	461d      	mov	r5, r3
 80101b4:	f7f0 fa20 	bl	80005f8 <__aeabi_dmul>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4630      	mov	r0, r6
 80101be:	4639      	mov	r1, r7
 80101c0:	f7f0 f862 	bl	8000288 <__aeabi_dsub>
 80101c4:	ec53 2b19 	vmov	r2, r3, d9
 80101c8:	4606      	mov	r6, r0
 80101ca:	460f      	mov	r7, r1
 80101cc:	4620      	mov	r0, r4
 80101ce:	4629      	mov	r1, r5
 80101d0:	f7f0 f85a 	bl	8000288 <__aeabi_dsub>
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	4650      	mov	r0, sl
 80101da:	4659      	mov	r1, fp
 80101dc:	f7f0 f854 	bl	8000288 <__aeabi_dsub>
 80101e0:	4642      	mov	r2, r8
 80101e2:	464b      	mov	r3, r9
 80101e4:	f7f0 fa08 	bl	80005f8 <__aeabi_dmul>
 80101e8:	4602      	mov	r2, r0
 80101ea:	460b      	mov	r3, r1
 80101ec:	4630      	mov	r0, r6
 80101ee:	4639      	mov	r1, r7
 80101f0:	f7f0 f84a 	bl	8000288 <__aeabi_dsub>
 80101f4:	ec53 2b1a 	vmov	r2, r3, d10
 80101f8:	f7f0 f9fe 	bl	80005f8 <__aeabi_dmul>
 80101fc:	ec53 2b18 	vmov	r2, r3, d8
 8010200:	ec41 0b19 	vmov	d9, r0, r1
 8010204:	ec51 0b18 	vmov	r0, r1, d8
 8010208:	f7f0 f9f6 	bl	80005f8 <__aeabi_dmul>
 801020c:	a37c      	add	r3, pc, #496	; (adr r3, 8010400 <__ieee754_pow+0x708>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	4604      	mov	r4, r0
 8010214:	460d      	mov	r5, r1
 8010216:	f7f0 f9ef 	bl	80005f8 <__aeabi_dmul>
 801021a:	a37b      	add	r3, pc, #492	; (adr r3, 8010408 <__ieee754_pow+0x710>)
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f834 	bl	800028c <__adddf3>
 8010224:	4622      	mov	r2, r4
 8010226:	462b      	mov	r3, r5
 8010228:	f7f0 f9e6 	bl	80005f8 <__aeabi_dmul>
 801022c:	a378      	add	r3, pc, #480	; (adr r3, 8010410 <__ieee754_pow+0x718>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	f7f0 f82b 	bl	800028c <__adddf3>
 8010236:	4622      	mov	r2, r4
 8010238:	462b      	mov	r3, r5
 801023a:	f7f0 f9dd 	bl	80005f8 <__aeabi_dmul>
 801023e:	a376      	add	r3, pc, #472	; (adr r3, 8010418 <__ieee754_pow+0x720>)
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	f7f0 f822 	bl	800028c <__adddf3>
 8010248:	4622      	mov	r2, r4
 801024a:	462b      	mov	r3, r5
 801024c:	f7f0 f9d4 	bl	80005f8 <__aeabi_dmul>
 8010250:	a373      	add	r3, pc, #460	; (adr r3, 8010420 <__ieee754_pow+0x728>)
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	f7f0 f819 	bl	800028c <__adddf3>
 801025a:	4622      	mov	r2, r4
 801025c:	462b      	mov	r3, r5
 801025e:	f7f0 f9cb 	bl	80005f8 <__aeabi_dmul>
 8010262:	a371      	add	r3, pc, #452	; (adr r3, 8010428 <__ieee754_pow+0x730>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	f7f0 f810 	bl	800028c <__adddf3>
 801026c:	4622      	mov	r2, r4
 801026e:	4606      	mov	r6, r0
 8010270:	460f      	mov	r7, r1
 8010272:	462b      	mov	r3, r5
 8010274:	4620      	mov	r0, r4
 8010276:	4629      	mov	r1, r5
 8010278:	f7f0 f9be 	bl	80005f8 <__aeabi_dmul>
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	4630      	mov	r0, r6
 8010282:	4639      	mov	r1, r7
 8010284:	f7f0 f9b8 	bl	80005f8 <__aeabi_dmul>
 8010288:	4642      	mov	r2, r8
 801028a:	4604      	mov	r4, r0
 801028c:	460d      	mov	r5, r1
 801028e:	464b      	mov	r3, r9
 8010290:	ec51 0b18 	vmov	r0, r1, d8
 8010294:	f7ef fffa 	bl	800028c <__adddf3>
 8010298:	ec53 2b19 	vmov	r2, r3, d9
 801029c:	f7f0 f9ac 	bl	80005f8 <__aeabi_dmul>
 80102a0:	4622      	mov	r2, r4
 80102a2:	462b      	mov	r3, r5
 80102a4:	f7ef fff2 	bl	800028c <__adddf3>
 80102a8:	4642      	mov	r2, r8
 80102aa:	4682      	mov	sl, r0
 80102ac:	468b      	mov	fp, r1
 80102ae:	464b      	mov	r3, r9
 80102b0:	4640      	mov	r0, r8
 80102b2:	4649      	mov	r1, r9
 80102b4:	f7f0 f9a0 	bl	80005f8 <__aeabi_dmul>
 80102b8:	4b6b      	ldr	r3, [pc, #428]	; (8010468 <__ieee754_pow+0x770>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	f7ef ffe4 	bl	800028c <__adddf3>
 80102c4:	4652      	mov	r2, sl
 80102c6:	465b      	mov	r3, fp
 80102c8:	f7ef ffe0 	bl	800028c <__adddf3>
 80102cc:	2000      	movs	r0, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	460d      	mov	r5, r1
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	4640      	mov	r0, r8
 80102d8:	4649      	mov	r1, r9
 80102da:	f7f0 f98d 	bl	80005f8 <__aeabi_dmul>
 80102de:	4b62      	ldr	r3, [pc, #392]	; (8010468 <__ieee754_pow+0x770>)
 80102e0:	4680      	mov	r8, r0
 80102e2:	4689      	mov	r9, r1
 80102e4:	2200      	movs	r2, #0
 80102e6:	4620      	mov	r0, r4
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7ef ffcd 	bl	8000288 <__aeabi_dsub>
 80102ee:	4632      	mov	r2, r6
 80102f0:	463b      	mov	r3, r7
 80102f2:	f7ef ffc9 	bl	8000288 <__aeabi_dsub>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	4650      	mov	r0, sl
 80102fc:	4659      	mov	r1, fp
 80102fe:	f7ef ffc3 	bl	8000288 <__aeabi_dsub>
 8010302:	ec53 2b18 	vmov	r2, r3, d8
 8010306:	f7f0 f977 	bl	80005f8 <__aeabi_dmul>
 801030a:	4622      	mov	r2, r4
 801030c:	4606      	mov	r6, r0
 801030e:	460f      	mov	r7, r1
 8010310:	462b      	mov	r3, r5
 8010312:	ec51 0b19 	vmov	r0, r1, d9
 8010316:	f7f0 f96f 	bl	80005f8 <__aeabi_dmul>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	4630      	mov	r0, r6
 8010320:	4639      	mov	r1, r7
 8010322:	f7ef ffb3 	bl	800028c <__adddf3>
 8010326:	4606      	mov	r6, r0
 8010328:	460f      	mov	r7, r1
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	4640      	mov	r0, r8
 8010330:	4649      	mov	r1, r9
 8010332:	f7ef ffab 	bl	800028c <__adddf3>
 8010336:	a33e      	add	r3, pc, #248	; (adr r3, 8010430 <__ieee754_pow+0x738>)
 8010338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033c:	2000      	movs	r0, #0
 801033e:	4604      	mov	r4, r0
 8010340:	460d      	mov	r5, r1
 8010342:	f7f0 f959 	bl	80005f8 <__aeabi_dmul>
 8010346:	4642      	mov	r2, r8
 8010348:	ec41 0b18 	vmov	d8, r0, r1
 801034c:	464b      	mov	r3, r9
 801034e:	4620      	mov	r0, r4
 8010350:	4629      	mov	r1, r5
 8010352:	f7ef ff99 	bl	8000288 <__aeabi_dsub>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4630      	mov	r0, r6
 801035c:	4639      	mov	r1, r7
 801035e:	f7ef ff93 	bl	8000288 <__aeabi_dsub>
 8010362:	a335      	add	r3, pc, #212	; (adr r3, 8010438 <__ieee754_pow+0x740>)
 8010364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010368:	f7f0 f946 	bl	80005f8 <__aeabi_dmul>
 801036c:	a334      	add	r3, pc, #208	; (adr r3, 8010440 <__ieee754_pow+0x748>)
 801036e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010372:	4606      	mov	r6, r0
 8010374:	460f      	mov	r7, r1
 8010376:	4620      	mov	r0, r4
 8010378:	4629      	mov	r1, r5
 801037a:	f7f0 f93d 	bl	80005f8 <__aeabi_dmul>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	4630      	mov	r0, r6
 8010384:	4639      	mov	r1, r7
 8010386:	f7ef ff81 	bl	800028c <__adddf3>
 801038a:	9a07      	ldr	r2, [sp, #28]
 801038c:	4b37      	ldr	r3, [pc, #220]	; (801046c <__ieee754_pow+0x774>)
 801038e:	4413      	add	r3, r2
 8010390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010394:	f7ef ff7a 	bl	800028c <__adddf3>
 8010398:	4682      	mov	sl, r0
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	468b      	mov	fp, r1
 801039e:	f7f0 f8c1 	bl	8000524 <__aeabi_i2d>
 80103a2:	9a07      	ldr	r2, [sp, #28]
 80103a4:	4b32      	ldr	r3, [pc, #200]	; (8010470 <__ieee754_pow+0x778>)
 80103a6:	4413      	add	r3, r2
 80103a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80103ac:	4606      	mov	r6, r0
 80103ae:	460f      	mov	r7, r1
 80103b0:	4652      	mov	r2, sl
 80103b2:	465b      	mov	r3, fp
 80103b4:	ec51 0b18 	vmov	r0, r1, d8
 80103b8:	f7ef ff68 	bl	800028c <__adddf3>
 80103bc:	4642      	mov	r2, r8
 80103be:	464b      	mov	r3, r9
 80103c0:	f7ef ff64 	bl	800028c <__adddf3>
 80103c4:	4632      	mov	r2, r6
 80103c6:	463b      	mov	r3, r7
 80103c8:	f7ef ff60 	bl	800028c <__adddf3>
 80103cc:	2000      	movs	r0, #0
 80103ce:	4632      	mov	r2, r6
 80103d0:	463b      	mov	r3, r7
 80103d2:	4604      	mov	r4, r0
 80103d4:	460d      	mov	r5, r1
 80103d6:	f7ef ff57 	bl	8000288 <__aeabi_dsub>
 80103da:	4642      	mov	r2, r8
 80103dc:	464b      	mov	r3, r9
 80103de:	f7ef ff53 	bl	8000288 <__aeabi_dsub>
 80103e2:	ec53 2b18 	vmov	r2, r3, d8
 80103e6:	f7ef ff4f 	bl	8000288 <__aeabi_dsub>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4650      	mov	r0, sl
 80103f0:	4659      	mov	r1, fp
 80103f2:	e610      	b.n	8010016 <__ieee754_pow+0x31e>
 80103f4:	2401      	movs	r4, #1
 80103f6:	e6a1      	b.n	801013c <__ieee754_pow+0x444>
 80103f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010448 <__ieee754_pow+0x750>
 80103fc:	e617      	b.n	801002e <__ieee754_pow+0x336>
 80103fe:	bf00      	nop
 8010400:	4a454eef 	.word	0x4a454eef
 8010404:	3fca7e28 	.word	0x3fca7e28
 8010408:	93c9db65 	.word	0x93c9db65
 801040c:	3fcd864a 	.word	0x3fcd864a
 8010410:	a91d4101 	.word	0xa91d4101
 8010414:	3fd17460 	.word	0x3fd17460
 8010418:	518f264d 	.word	0x518f264d
 801041c:	3fd55555 	.word	0x3fd55555
 8010420:	db6fabff 	.word	0xdb6fabff
 8010424:	3fdb6db6 	.word	0x3fdb6db6
 8010428:	33333303 	.word	0x33333303
 801042c:	3fe33333 	.word	0x3fe33333
 8010430:	e0000000 	.word	0xe0000000
 8010434:	3feec709 	.word	0x3feec709
 8010438:	dc3a03fd 	.word	0xdc3a03fd
 801043c:	3feec709 	.word	0x3feec709
 8010440:	145b01f5 	.word	0x145b01f5
 8010444:	be3e2fe0 	.word	0xbe3e2fe0
 8010448:	00000000 	.word	0x00000000
 801044c:	3ff00000 	.word	0x3ff00000
 8010450:	7ff00000 	.word	0x7ff00000
 8010454:	43400000 	.word	0x43400000
 8010458:	0003988e 	.word	0x0003988e
 801045c:	000bb679 	.word	0x000bb679
 8010460:	08013718 	.word	0x08013718
 8010464:	3ff00000 	.word	0x3ff00000
 8010468:	40080000 	.word	0x40080000
 801046c:	08013738 	.word	0x08013738
 8010470:	08013728 	.word	0x08013728
 8010474:	a3b5      	add	r3, pc, #724	; (adr r3, 801074c <__ieee754_pow+0xa54>)
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	4640      	mov	r0, r8
 801047c:	4649      	mov	r1, r9
 801047e:	f7ef ff05 	bl	800028c <__adddf3>
 8010482:	4622      	mov	r2, r4
 8010484:	ec41 0b1a 	vmov	d10, r0, r1
 8010488:	462b      	mov	r3, r5
 801048a:	4630      	mov	r0, r6
 801048c:	4639      	mov	r1, r7
 801048e:	f7ef fefb 	bl	8000288 <__aeabi_dsub>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	ec51 0b1a 	vmov	r0, r1, d10
 801049a:	f7f0 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 801049e:	2800      	cmp	r0, #0
 80104a0:	f47f ae04 	bne.w	80100ac <__ieee754_pow+0x3b4>
 80104a4:	4aa4      	ldr	r2, [pc, #656]	; (8010738 <__ieee754_pow+0xa40>)
 80104a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104aa:	4293      	cmp	r3, r2
 80104ac:	f340 8108 	ble.w	80106c0 <__ieee754_pow+0x9c8>
 80104b0:	151b      	asrs	r3, r3, #20
 80104b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80104b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80104ba:	fa4a f303 	asr.w	r3, sl, r3
 80104be:	445b      	add	r3, fp
 80104c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80104c4:	4e9d      	ldr	r6, [pc, #628]	; (801073c <__ieee754_pow+0xa44>)
 80104c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80104ca:	4116      	asrs	r6, r2
 80104cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80104d0:	2000      	movs	r0, #0
 80104d2:	ea23 0106 	bic.w	r1, r3, r6
 80104d6:	f1c2 0214 	rsb	r2, r2, #20
 80104da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80104de:	fa4a fa02 	asr.w	sl, sl, r2
 80104e2:	f1bb 0f00 	cmp.w	fp, #0
 80104e6:	4602      	mov	r2, r0
 80104e8:	460b      	mov	r3, r1
 80104ea:	4620      	mov	r0, r4
 80104ec:	4629      	mov	r1, r5
 80104ee:	bfb8      	it	lt
 80104f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80104f4:	f7ef fec8 	bl	8000288 <__aeabi_dsub>
 80104f8:	ec41 0b19 	vmov	d9, r0, r1
 80104fc:	4642      	mov	r2, r8
 80104fe:	464b      	mov	r3, r9
 8010500:	ec51 0b19 	vmov	r0, r1, d9
 8010504:	f7ef fec2 	bl	800028c <__adddf3>
 8010508:	a37b      	add	r3, pc, #492	; (adr r3, 80106f8 <__ieee754_pow+0xa00>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	2000      	movs	r0, #0
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	f7f0 f870 	bl	80005f8 <__aeabi_dmul>
 8010518:	ec53 2b19 	vmov	r2, r3, d9
 801051c:	4606      	mov	r6, r0
 801051e:	460f      	mov	r7, r1
 8010520:	4620      	mov	r0, r4
 8010522:	4629      	mov	r1, r5
 8010524:	f7ef feb0 	bl	8000288 <__aeabi_dsub>
 8010528:	4602      	mov	r2, r0
 801052a:	460b      	mov	r3, r1
 801052c:	4640      	mov	r0, r8
 801052e:	4649      	mov	r1, r9
 8010530:	f7ef feaa 	bl	8000288 <__aeabi_dsub>
 8010534:	a372      	add	r3, pc, #456	; (adr r3, 8010700 <__ieee754_pow+0xa08>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	f7f0 f85d 	bl	80005f8 <__aeabi_dmul>
 801053e:	a372      	add	r3, pc, #456	; (adr r3, 8010708 <__ieee754_pow+0xa10>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	4680      	mov	r8, r0
 8010546:	4689      	mov	r9, r1
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	f7f0 f854 	bl	80005f8 <__aeabi_dmul>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4640      	mov	r0, r8
 8010556:	4649      	mov	r1, r9
 8010558:	f7ef fe98 	bl	800028c <__adddf3>
 801055c:	4604      	mov	r4, r0
 801055e:	460d      	mov	r5, r1
 8010560:	4602      	mov	r2, r0
 8010562:	460b      	mov	r3, r1
 8010564:	4630      	mov	r0, r6
 8010566:	4639      	mov	r1, r7
 8010568:	f7ef fe90 	bl	800028c <__adddf3>
 801056c:	4632      	mov	r2, r6
 801056e:	463b      	mov	r3, r7
 8010570:	4680      	mov	r8, r0
 8010572:	4689      	mov	r9, r1
 8010574:	f7ef fe88 	bl	8000288 <__aeabi_dsub>
 8010578:	4602      	mov	r2, r0
 801057a:	460b      	mov	r3, r1
 801057c:	4620      	mov	r0, r4
 801057e:	4629      	mov	r1, r5
 8010580:	f7ef fe82 	bl	8000288 <__aeabi_dsub>
 8010584:	4642      	mov	r2, r8
 8010586:	4606      	mov	r6, r0
 8010588:	460f      	mov	r7, r1
 801058a:	464b      	mov	r3, r9
 801058c:	4640      	mov	r0, r8
 801058e:	4649      	mov	r1, r9
 8010590:	f7f0 f832 	bl	80005f8 <__aeabi_dmul>
 8010594:	a35e      	add	r3, pc, #376	; (adr r3, 8010710 <__ieee754_pow+0xa18>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	4604      	mov	r4, r0
 801059c:	460d      	mov	r5, r1
 801059e:	f7f0 f82b 	bl	80005f8 <__aeabi_dmul>
 80105a2:	a35d      	add	r3, pc, #372	; (adr r3, 8010718 <__ieee754_pow+0xa20>)
 80105a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a8:	f7ef fe6e 	bl	8000288 <__aeabi_dsub>
 80105ac:	4622      	mov	r2, r4
 80105ae:	462b      	mov	r3, r5
 80105b0:	f7f0 f822 	bl	80005f8 <__aeabi_dmul>
 80105b4:	a35a      	add	r3, pc, #360	; (adr r3, 8010720 <__ieee754_pow+0xa28>)
 80105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ba:	f7ef fe67 	bl	800028c <__adddf3>
 80105be:	4622      	mov	r2, r4
 80105c0:	462b      	mov	r3, r5
 80105c2:	f7f0 f819 	bl	80005f8 <__aeabi_dmul>
 80105c6:	a358      	add	r3, pc, #352	; (adr r3, 8010728 <__ieee754_pow+0xa30>)
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	f7ef fe5c 	bl	8000288 <__aeabi_dsub>
 80105d0:	4622      	mov	r2, r4
 80105d2:	462b      	mov	r3, r5
 80105d4:	f7f0 f810 	bl	80005f8 <__aeabi_dmul>
 80105d8:	a355      	add	r3, pc, #340	; (adr r3, 8010730 <__ieee754_pow+0xa38>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	f7ef fe55 	bl	800028c <__adddf3>
 80105e2:	4622      	mov	r2, r4
 80105e4:	462b      	mov	r3, r5
 80105e6:	f7f0 f807 	bl	80005f8 <__aeabi_dmul>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4640      	mov	r0, r8
 80105f0:	4649      	mov	r1, r9
 80105f2:	f7ef fe49 	bl	8000288 <__aeabi_dsub>
 80105f6:	4604      	mov	r4, r0
 80105f8:	460d      	mov	r5, r1
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
 80105fe:	4640      	mov	r0, r8
 8010600:	4649      	mov	r1, r9
 8010602:	f7ef fff9 	bl	80005f8 <__aeabi_dmul>
 8010606:	2200      	movs	r2, #0
 8010608:	ec41 0b19 	vmov	d9, r0, r1
 801060c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef fe38 	bl	8000288 <__aeabi_dsub>
 8010618:	4602      	mov	r2, r0
 801061a:	460b      	mov	r3, r1
 801061c:	ec51 0b19 	vmov	r0, r1, d9
 8010620:	f7f0 f914 	bl	800084c <__aeabi_ddiv>
 8010624:	4632      	mov	r2, r6
 8010626:	4604      	mov	r4, r0
 8010628:	460d      	mov	r5, r1
 801062a:	463b      	mov	r3, r7
 801062c:	4640      	mov	r0, r8
 801062e:	4649      	mov	r1, r9
 8010630:	f7ef ffe2 	bl	80005f8 <__aeabi_dmul>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	f7ef fe28 	bl	800028c <__adddf3>
 801063c:	4602      	mov	r2, r0
 801063e:	460b      	mov	r3, r1
 8010640:	4620      	mov	r0, r4
 8010642:	4629      	mov	r1, r5
 8010644:	f7ef fe20 	bl	8000288 <__aeabi_dsub>
 8010648:	4642      	mov	r2, r8
 801064a:	464b      	mov	r3, r9
 801064c:	f7ef fe1c 	bl	8000288 <__aeabi_dsub>
 8010650:	460b      	mov	r3, r1
 8010652:	4602      	mov	r2, r0
 8010654:	493a      	ldr	r1, [pc, #232]	; (8010740 <__ieee754_pow+0xa48>)
 8010656:	2000      	movs	r0, #0
 8010658:	f7ef fe16 	bl	8000288 <__aeabi_dsub>
 801065c:	ec41 0b10 	vmov	d0, r0, r1
 8010660:	ee10 3a90 	vmov	r3, s1
 8010664:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801066c:	da2b      	bge.n	80106c6 <__ieee754_pow+0x9ce>
 801066e:	4650      	mov	r0, sl
 8010670:	f000 f962 	bl	8010938 <scalbn>
 8010674:	ec51 0b10 	vmov	r0, r1, d0
 8010678:	ec53 2b18 	vmov	r2, r3, d8
 801067c:	f7ff bbed 	b.w	800fe5a <__ieee754_pow+0x162>
 8010680:	4b30      	ldr	r3, [pc, #192]	; (8010744 <__ieee754_pow+0xa4c>)
 8010682:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010686:	429e      	cmp	r6, r3
 8010688:	f77f af0c 	ble.w	80104a4 <__ieee754_pow+0x7ac>
 801068c:	4b2e      	ldr	r3, [pc, #184]	; (8010748 <__ieee754_pow+0xa50>)
 801068e:	440b      	add	r3, r1
 8010690:	4303      	orrs	r3, r0
 8010692:	d009      	beq.n	80106a8 <__ieee754_pow+0x9b0>
 8010694:	ec51 0b18 	vmov	r0, r1, d8
 8010698:	2200      	movs	r2, #0
 801069a:	2300      	movs	r3, #0
 801069c:	f7f0 fa1e 	bl	8000adc <__aeabi_dcmplt>
 80106a0:	3800      	subs	r0, #0
 80106a2:	bf18      	it	ne
 80106a4:	2001      	movne	r0, #1
 80106a6:	e447      	b.n	800ff38 <__ieee754_pow+0x240>
 80106a8:	4622      	mov	r2, r4
 80106aa:	462b      	mov	r3, r5
 80106ac:	f7ef fdec 	bl	8000288 <__aeabi_dsub>
 80106b0:	4642      	mov	r2, r8
 80106b2:	464b      	mov	r3, r9
 80106b4:	f7f0 fa26 	bl	8000b04 <__aeabi_dcmpge>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	f43f aef3 	beq.w	80104a4 <__ieee754_pow+0x7ac>
 80106be:	e7e9      	b.n	8010694 <__ieee754_pow+0x99c>
 80106c0:	f04f 0a00 	mov.w	sl, #0
 80106c4:	e71a      	b.n	80104fc <__ieee754_pow+0x804>
 80106c6:	ec51 0b10 	vmov	r0, r1, d0
 80106ca:	4619      	mov	r1, r3
 80106cc:	e7d4      	b.n	8010678 <__ieee754_pow+0x980>
 80106ce:	491c      	ldr	r1, [pc, #112]	; (8010740 <__ieee754_pow+0xa48>)
 80106d0:	2000      	movs	r0, #0
 80106d2:	f7ff bb30 	b.w	800fd36 <__ieee754_pow+0x3e>
 80106d6:	2000      	movs	r0, #0
 80106d8:	2100      	movs	r1, #0
 80106da:	f7ff bb2c 	b.w	800fd36 <__ieee754_pow+0x3e>
 80106de:	4630      	mov	r0, r6
 80106e0:	4639      	mov	r1, r7
 80106e2:	f7ff bb28 	b.w	800fd36 <__ieee754_pow+0x3e>
 80106e6:	9204      	str	r2, [sp, #16]
 80106e8:	f7ff bb7a 	b.w	800fde0 <__ieee754_pow+0xe8>
 80106ec:	2300      	movs	r3, #0
 80106ee:	f7ff bb64 	b.w	800fdba <__ieee754_pow+0xc2>
 80106f2:	bf00      	nop
 80106f4:	f3af 8000 	nop.w
 80106f8:	00000000 	.word	0x00000000
 80106fc:	3fe62e43 	.word	0x3fe62e43
 8010700:	fefa39ef 	.word	0xfefa39ef
 8010704:	3fe62e42 	.word	0x3fe62e42
 8010708:	0ca86c39 	.word	0x0ca86c39
 801070c:	be205c61 	.word	0xbe205c61
 8010710:	72bea4d0 	.word	0x72bea4d0
 8010714:	3e663769 	.word	0x3e663769
 8010718:	c5d26bf1 	.word	0xc5d26bf1
 801071c:	3ebbbd41 	.word	0x3ebbbd41
 8010720:	af25de2c 	.word	0xaf25de2c
 8010724:	3f11566a 	.word	0x3f11566a
 8010728:	16bebd93 	.word	0x16bebd93
 801072c:	3f66c16c 	.word	0x3f66c16c
 8010730:	5555553e 	.word	0x5555553e
 8010734:	3fc55555 	.word	0x3fc55555
 8010738:	3fe00000 	.word	0x3fe00000
 801073c:	000fffff 	.word	0x000fffff
 8010740:	3ff00000 	.word	0x3ff00000
 8010744:	4090cbff 	.word	0x4090cbff
 8010748:	3f6f3400 	.word	0x3f6f3400
 801074c:	652b82fe 	.word	0x652b82fe
 8010750:	3c971547 	.word	0x3c971547

08010754 <__ieee754_sqrt>:
 8010754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	ec55 4b10 	vmov	r4, r5, d0
 801075c:	4e55      	ldr	r6, [pc, #340]	; (80108b4 <__ieee754_sqrt+0x160>)
 801075e:	43ae      	bics	r6, r5
 8010760:	ee10 0a10 	vmov	r0, s0
 8010764:	ee10 3a10 	vmov	r3, s0
 8010768:	462a      	mov	r2, r5
 801076a:	4629      	mov	r1, r5
 801076c:	d110      	bne.n	8010790 <__ieee754_sqrt+0x3c>
 801076e:	ee10 2a10 	vmov	r2, s0
 8010772:	462b      	mov	r3, r5
 8010774:	f7ef ff40 	bl	80005f8 <__aeabi_dmul>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	4620      	mov	r0, r4
 801077e:	4629      	mov	r1, r5
 8010780:	f7ef fd84 	bl	800028c <__adddf3>
 8010784:	4604      	mov	r4, r0
 8010786:	460d      	mov	r5, r1
 8010788:	ec45 4b10 	vmov	d0, r4, r5
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	2d00      	cmp	r5, #0
 8010792:	dc10      	bgt.n	80107b6 <__ieee754_sqrt+0x62>
 8010794:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010798:	4330      	orrs	r0, r6
 801079a:	d0f5      	beq.n	8010788 <__ieee754_sqrt+0x34>
 801079c:	b15d      	cbz	r5, 80107b6 <__ieee754_sqrt+0x62>
 801079e:	ee10 2a10 	vmov	r2, s0
 80107a2:	462b      	mov	r3, r5
 80107a4:	ee10 0a10 	vmov	r0, s0
 80107a8:	f7ef fd6e 	bl	8000288 <__aeabi_dsub>
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	f7f0 f84c 	bl	800084c <__aeabi_ddiv>
 80107b4:	e7e6      	b.n	8010784 <__ieee754_sqrt+0x30>
 80107b6:	1512      	asrs	r2, r2, #20
 80107b8:	d074      	beq.n	80108a4 <__ieee754_sqrt+0x150>
 80107ba:	07d4      	lsls	r4, r2, #31
 80107bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80107c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80107c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80107c8:	bf5e      	ittt	pl
 80107ca:	0fda      	lsrpl	r2, r3, #31
 80107cc:	005b      	lslpl	r3, r3, #1
 80107ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80107d2:	2400      	movs	r4, #0
 80107d4:	0fda      	lsrs	r2, r3, #31
 80107d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80107da:	107f      	asrs	r7, r7, #1
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	2516      	movs	r5, #22
 80107e0:	4620      	mov	r0, r4
 80107e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80107e6:	1886      	adds	r6, r0, r2
 80107e8:	428e      	cmp	r6, r1
 80107ea:	bfde      	ittt	le
 80107ec:	1b89      	suble	r1, r1, r6
 80107ee:	18b0      	addle	r0, r6, r2
 80107f0:	18a4      	addle	r4, r4, r2
 80107f2:	0049      	lsls	r1, r1, #1
 80107f4:	3d01      	subs	r5, #1
 80107f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80107fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80107fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010802:	d1f0      	bne.n	80107e6 <__ieee754_sqrt+0x92>
 8010804:	462a      	mov	r2, r5
 8010806:	f04f 0e20 	mov.w	lr, #32
 801080a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801080e:	4281      	cmp	r1, r0
 8010810:	eb06 0c05 	add.w	ip, r6, r5
 8010814:	dc02      	bgt.n	801081c <__ieee754_sqrt+0xc8>
 8010816:	d113      	bne.n	8010840 <__ieee754_sqrt+0xec>
 8010818:	459c      	cmp	ip, r3
 801081a:	d811      	bhi.n	8010840 <__ieee754_sqrt+0xec>
 801081c:	f1bc 0f00 	cmp.w	ip, #0
 8010820:	eb0c 0506 	add.w	r5, ip, r6
 8010824:	da43      	bge.n	80108ae <__ieee754_sqrt+0x15a>
 8010826:	2d00      	cmp	r5, #0
 8010828:	db41      	blt.n	80108ae <__ieee754_sqrt+0x15a>
 801082a:	f100 0801 	add.w	r8, r0, #1
 801082e:	1a09      	subs	r1, r1, r0
 8010830:	459c      	cmp	ip, r3
 8010832:	bf88      	it	hi
 8010834:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010838:	eba3 030c 	sub.w	r3, r3, ip
 801083c:	4432      	add	r2, r6
 801083e:	4640      	mov	r0, r8
 8010840:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010844:	f1be 0e01 	subs.w	lr, lr, #1
 8010848:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801084c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010850:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010854:	d1db      	bne.n	801080e <__ieee754_sqrt+0xba>
 8010856:	430b      	orrs	r3, r1
 8010858:	d006      	beq.n	8010868 <__ieee754_sqrt+0x114>
 801085a:	1c50      	adds	r0, r2, #1
 801085c:	bf13      	iteet	ne
 801085e:	3201      	addne	r2, #1
 8010860:	3401      	addeq	r4, #1
 8010862:	4672      	moveq	r2, lr
 8010864:	f022 0201 	bicne.w	r2, r2, #1
 8010868:	1063      	asrs	r3, r4, #1
 801086a:	0852      	lsrs	r2, r2, #1
 801086c:	07e1      	lsls	r1, r4, #31
 801086e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010872:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010876:	bf48      	it	mi
 8010878:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801087c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010880:	4614      	mov	r4, r2
 8010882:	e781      	b.n	8010788 <__ieee754_sqrt+0x34>
 8010884:	0ad9      	lsrs	r1, r3, #11
 8010886:	3815      	subs	r0, #21
 8010888:	055b      	lsls	r3, r3, #21
 801088a:	2900      	cmp	r1, #0
 801088c:	d0fa      	beq.n	8010884 <__ieee754_sqrt+0x130>
 801088e:	02cd      	lsls	r5, r1, #11
 8010890:	d50a      	bpl.n	80108a8 <__ieee754_sqrt+0x154>
 8010892:	f1c2 0420 	rsb	r4, r2, #32
 8010896:	fa23 f404 	lsr.w	r4, r3, r4
 801089a:	1e55      	subs	r5, r2, #1
 801089c:	4093      	lsls	r3, r2
 801089e:	4321      	orrs	r1, r4
 80108a0:	1b42      	subs	r2, r0, r5
 80108a2:	e78a      	b.n	80107ba <__ieee754_sqrt+0x66>
 80108a4:	4610      	mov	r0, r2
 80108a6:	e7f0      	b.n	801088a <__ieee754_sqrt+0x136>
 80108a8:	0049      	lsls	r1, r1, #1
 80108aa:	3201      	adds	r2, #1
 80108ac:	e7ef      	b.n	801088e <__ieee754_sqrt+0x13a>
 80108ae:	4680      	mov	r8, r0
 80108b0:	e7bd      	b.n	801082e <__ieee754_sqrt+0xda>
 80108b2:	bf00      	nop
 80108b4:	7ff00000 	.word	0x7ff00000

080108b8 <__ieee754_sqrtf>:
 80108b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80108bc:	4770      	bx	lr

080108be <with_errno>:
 80108be:	b570      	push	{r4, r5, r6, lr}
 80108c0:	4604      	mov	r4, r0
 80108c2:	460d      	mov	r5, r1
 80108c4:	4616      	mov	r6, r2
 80108c6:	f000 f8bd 	bl	8010a44 <__errno>
 80108ca:	4629      	mov	r1, r5
 80108cc:	6006      	str	r6, [r0, #0]
 80108ce:	4620      	mov	r0, r4
 80108d0:	bd70      	pop	{r4, r5, r6, pc}

080108d2 <xflow>:
 80108d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108d4:	4614      	mov	r4, r2
 80108d6:	461d      	mov	r5, r3
 80108d8:	b108      	cbz	r0, 80108de <xflow+0xc>
 80108da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80108de:	e9cd 2300 	strd	r2, r3, [sp]
 80108e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e6:	4620      	mov	r0, r4
 80108e8:	4629      	mov	r1, r5
 80108ea:	f7ef fe85 	bl	80005f8 <__aeabi_dmul>
 80108ee:	2222      	movs	r2, #34	; 0x22
 80108f0:	b003      	add	sp, #12
 80108f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108f6:	f7ff bfe2 	b.w	80108be <with_errno>

080108fa <__math_uflow>:
 80108fa:	b508      	push	{r3, lr}
 80108fc:	2200      	movs	r2, #0
 80108fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010902:	f7ff ffe6 	bl	80108d2 <xflow>
 8010906:	ec41 0b10 	vmov	d0, r0, r1
 801090a:	bd08      	pop	{r3, pc}

0801090c <__math_oflow>:
 801090c:	b508      	push	{r3, lr}
 801090e:	2200      	movs	r2, #0
 8010910:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010914:	f7ff ffdd 	bl	80108d2 <xflow>
 8010918:	ec41 0b10 	vmov	d0, r0, r1
 801091c:	bd08      	pop	{r3, pc}

0801091e <finite>:
 801091e:	b082      	sub	sp, #8
 8010920:	ed8d 0b00 	vstr	d0, [sp]
 8010924:	9801      	ldr	r0, [sp, #4]
 8010926:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801092a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801092e:	0fc0      	lsrs	r0, r0, #31
 8010930:	b002      	add	sp, #8
 8010932:	4770      	bx	lr
 8010934:	0000      	movs	r0, r0
	...

08010938 <scalbn>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	ec55 4b10 	vmov	r4, r5, d0
 801093e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010942:	4606      	mov	r6, r0
 8010944:	462b      	mov	r3, r5
 8010946:	b99a      	cbnz	r2, 8010970 <scalbn+0x38>
 8010948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801094c:	4323      	orrs	r3, r4
 801094e:	d036      	beq.n	80109be <scalbn+0x86>
 8010950:	4b39      	ldr	r3, [pc, #228]	; (8010a38 <scalbn+0x100>)
 8010952:	4629      	mov	r1, r5
 8010954:	ee10 0a10 	vmov	r0, s0
 8010958:	2200      	movs	r2, #0
 801095a:	f7ef fe4d 	bl	80005f8 <__aeabi_dmul>
 801095e:	4b37      	ldr	r3, [pc, #220]	; (8010a3c <scalbn+0x104>)
 8010960:	429e      	cmp	r6, r3
 8010962:	4604      	mov	r4, r0
 8010964:	460d      	mov	r5, r1
 8010966:	da10      	bge.n	801098a <scalbn+0x52>
 8010968:	a32b      	add	r3, pc, #172	; (adr r3, 8010a18 <scalbn+0xe0>)
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	e03a      	b.n	80109e6 <scalbn+0xae>
 8010970:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010974:	428a      	cmp	r2, r1
 8010976:	d10c      	bne.n	8010992 <scalbn+0x5a>
 8010978:	ee10 2a10 	vmov	r2, s0
 801097c:	4620      	mov	r0, r4
 801097e:	4629      	mov	r1, r5
 8010980:	f7ef fc84 	bl	800028c <__adddf3>
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	e019      	b.n	80109be <scalbn+0x86>
 801098a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801098e:	460b      	mov	r3, r1
 8010990:	3a36      	subs	r2, #54	; 0x36
 8010992:	4432      	add	r2, r6
 8010994:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010998:	428a      	cmp	r2, r1
 801099a:	dd08      	ble.n	80109ae <scalbn+0x76>
 801099c:	2d00      	cmp	r5, #0
 801099e:	a120      	add	r1, pc, #128	; (adr r1, 8010a20 <scalbn+0xe8>)
 80109a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109a4:	da1c      	bge.n	80109e0 <scalbn+0xa8>
 80109a6:	a120      	add	r1, pc, #128	; (adr r1, 8010a28 <scalbn+0xf0>)
 80109a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ac:	e018      	b.n	80109e0 <scalbn+0xa8>
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	dd08      	ble.n	80109c4 <scalbn+0x8c>
 80109b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80109ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80109be:	ec45 4b10 	vmov	d0, r4, r5
 80109c2:	bd70      	pop	{r4, r5, r6, pc}
 80109c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80109c8:	da19      	bge.n	80109fe <scalbn+0xc6>
 80109ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80109ce:	429e      	cmp	r6, r3
 80109d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80109d4:	dd0a      	ble.n	80109ec <scalbn+0xb4>
 80109d6:	a112      	add	r1, pc, #72	; (adr r1, 8010a20 <scalbn+0xe8>)
 80109d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1e2      	bne.n	80109a6 <scalbn+0x6e>
 80109e0:	a30f      	add	r3, pc, #60	; (adr r3, 8010a20 <scalbn+0xe8>)
 80109e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e6:	f7ef fe07 	bl	80005f8 <__aeabi_dmul>
 80109ea:	e7cb      	b.n	8010984 <scalbn+0x4c>
 80109ec:	a10a      	add	r1, pc, #40	; (adr r1, 8010a18 <scalbn+0xe0>)
 80109ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d0b8      	beq.n	8010968 <scalbn+0x30>
 80109f6:	a10e      	add	r1, pc, #56	; (adr r1, 8010a30 <scalbn+0xf8>)
 80109f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109fc:	e7b4      	b.n	8010968 <scalbn+0x30>
 80109fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a02:	3236      	adds	r2, #54	; 0x36
 8010a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	4b0c      	ldr	r3, [pc, #48]	; (8010a40 <scalbn+0x108>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	e7e8      	b.n	80109e6 <scalbn+0xae>
 8010a14:	f3af 8000 	nop.w
 8010a18:	c2f8f359 	.word	0xc2f8f359
 8010a1c:	01a56e1f 	.word	0x01a56e1f
 8010a20:	8800759c 	.word	0x8800759c
 8010a24:	7e37e43c 	.word	0x7e37e43c
 8010a28:	8800759c 	.word	0x8800759c
 8010a2c:	fe37e43c 	.word	0xfe37e43c
 8010a30:	c2f8f359 	.word	0xc2f8f359
 8010a34:	81a56e1f 	.word	0x81a56e1f
 8010a38:	43500000 	.word	0x43500000
 8010a3c:	ffff3cb0 	.word	0xffff3cb0
 8010a40:	3c900000 	.word	0x3c900000

08010a44 <__errno>:
 8010a44:	4b01      	ldr	r3, [pc, #4]	; (8010a4c <__errno+0x8>)
 8010a46:	6818      	ldr	r0, [r3, #0]
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	20000120 	.word	0x20000120

08010a50 <__libc_init_array>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	4d0d      	ldr	r5, [pc, #52]	; (8010a88 <__libc_init_array+0x38>)
 8010a54:	4c0d      	ldr	r4, [pc, #52]	; (8010a8c <__libc_init_array+0x3c>)
 8010a56:	1b64      	subs	r4, r4, r5
 8010a58:	10a4      	asrs	r4, r4, #2
 8010a5a:	2600      	movs	r6, #0
 8010a5c:	42a6      	cmp	r6, r4
 8010a5e:	d109      	bne.n	8010a74 <__libc_init_array+0x24>
 8010a60:	4d0b      	ldr	r5, [pc, #44]	; (8010a90 <__libc_init_array+0x40>)
 8010a62:	4c0c      	ldr	r4, [pc, #48]	; (8010a94 <__libc_init_array+0x44>)
 8010a64:	f002 fdac 	bl	80135c0 <_init>
 8010a68:	1b64      	subs	r4, r4, r5
 8010a6a:	10a4      	asrs	r4, r4, #2
 8010a6c:	2600      	movs	r6, #0
 8010a6e:	42a6      	cmp	r6, r4
 8010a70:	d105      	bne.n	8010a7e <__libc_init_array+0x2e>
 8010a72:	bd70      	pop	{r4, r5, r6, pc}
 8010a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a78:	4798      	blx	r3
 8010a7a:	3601      	adds	r6, #1
 8010a7c:	e7ee      	b.n	8010a5c <__libc_init_array+0xc>
 8010a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a82:	4798      	blx	r3
 8010a84:	3601      	adds	r6, #1
 8010a86:	e7f2      	b.n	8010a6e <__libc_init_array+0x1e>
 8010a88:	08013b2c 	.word	0x08013b2c
 8010a8c:	08013b2c 	.word	0x08013b2c
 8010a90:	08013b2c 	.word	0x08013b2c
 8010a94:	08013b30 	.word	0x08013b30

08010a98 <memset>:
 8010a98:	4402      	add	r2, r0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d100      	bne.n	8010aa2 <memset+0xa>
 8010aa0:	4770      	bx	lr
 8010aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8010aa6:	e7f9      	b.n	8010a9c <memset+0x4>

08010aa8 <__cvt>:
 8010aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	ec55 4b10 	vmov	r4, r5, d0
 8010ab0:	2d00      	cmp	r5, #0
 8010ab2:	460e      	mov	r6, r1
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	bfbb      	ittet	lt
 8010aba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010abe:	461d      	movlt	r5, r3
 8010ac0:	2300      	movge	r3, #0
 8010ac2:	232d      	movlt	r3, #45	; 0x2d
 8010ac4:	700b      	strb	r3, [r1, #0]
 8010ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010acc:	4691      	mov	r9, r2
 8010ace:	f023 0820 	bic.w	r8, r3, #32
 8010ad2:	bfbc      	itt	lt
 8010ad4:	4622      	movlt	r2, r4
 8010ad6:	4614      	movlt	r4, r2
 8010ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010adc:	d005      	beq.n	8010aea <__cvt+0x42>
 8010ade:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ae2:	d100      	bne.n	8010ae6 <__cvt+0x3e>
 8010ae4:	3601      	adds	r6, #1
 8010ae6:	2102      	movs	r1, #2
 8010ae8:	e000      	b.n	8010aec <__cvt+0x44>
 8010aea:	2103      	movs	r1, #3
 8010aec:	ab03      	add	r3, sp, #12
 8010aee:	9301      	str	r3, [sp, #4]
 8010af0:	ab02      	add	r3, sp, #8
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	ec45 4b10 	vmov	d0, r4, r5
 8010af8:	4653      	mov	r3, sl
 8010afa:	4632      	mov	r2, r6
 8010afc:	f000 fcf8 	bl	80114f0 <_dtoa_r>
 8010b00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010b04:	4607      	mov	r7, r0
 8010b06:	d102      	bne.n	8010b0e <__cvt+0x66>
 8010b08:	f019 0f01 	tst.w	r9, #1
 8010b0c:	d022      	beq.n	8010b54 <__cvt+0xac>
 8010b0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b12:	eb07 0906 	add.w	r9, r7, r6
 8010b16:	d110      	bne.n	8010b3a <__cvt+0x92>
 8010b18:	783b      	ldrb	r3, [r7, #0]
 8010b1a:	2b30      	cmp	r3, #48	; 0x30
 8010b1c:	d10a      	bne.n	8010b34 <__cvt+0x8c>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	2300      	movs	r3, #0
 8010b22:	4620      	mov	r0, r4
 8010b24:	4629      	mov	r1, r5
 8010b26:	f7ef ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b2a:	b918      	cbnz	r0, 8010b34 <__cvt+0x8c>
 8010b2c:	f1c6 0601 	rsb	r6, r6, #1
 8010b30:	f8ca 6000 	str.w	r6, [sl]
 8010b34:	f8da 3000 	ldr.w	r3, [sl]
 8010b38:	4499      	add	r9, r3
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4620      	mov	r0, r4
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7ef ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b46:	b108      	cbz	r0, 8010b4c <__cvt+0xa4>
 8010b48:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b4c:	2230      	movs	r2, #48	; 0x30
 8010b4e:	9b03      	ldr	r3, [sp, #12]
 8010b50:	454b      	cmp	r3, r9
 8010b52:	d307      	bcc.n	8010b64 <__cvt+0xbc>
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b58:	1bdb      	subs	r3, r3, r7
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	6013      	str	r3, [r2, #0]
 8010b5e:	b004      	add	sp, #16
 8010b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b64:	1c59      	adds	r1, r3, #1
 8010b66:	9103      	str	r1, [sp, #12]
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	e7f0      	b.n	8010b4e <__cvt+0xa6>

08010b6c <__exponent>:
 8010b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2900      	cmp	r1, #0
 8010b72:	bfb8      	it	lt
 8010b74:	4249      	neglt	r1, r1
 8010b76:	f803 2b02 	strb.w	r2, [r3], #2
 8010b7a:	bfb4      	ite	lt
 8010b7c:	222d      	movlt	r2, #45	; 0x2d
 8010b7e:	222b      	movge	r2, #43	; 0x2b
 8010b80:	2909      	cmp	r1, #9
 8010b82:	7042      	strb	r2, [r0, #1]
 8010b84:	dd2a      	ble.n	8010bdc <__exponent+0x70>
 8010b86:	f10d 0407 	add.w	r4, sp, #7
 8010b8a:	46a4      	mov	ip, r4
 8010b8c:	270a      	movs	r7, #10
 8010b8e:	46a6      	mov	lr, r4
 8010b90:	460a      	mov	r2, r1
 8010b92:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b96:	fb07 1516 	mls	r5, r7, r6, r1
 8010b9a:	3530      	adds	r5, #48	; 0x30
 8010b9c:	2a63      	cmp	r2, #99	; 0x63
 8010b9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ba2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010ba6:	4631      	mov	r1, r6
 8010ba8:	dcf1      	bgt.n	8010b8e <__exponent+0x22>
 8010baa:	3130      	adds	r1, #48	; 0x30
 8010bac:	f1ae 0502 	sub.w	r5, lr, #2
 8010bb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010bb4:	1c44      	adds	r4, r0, #1
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	4561      	cmp	r1, ip
 8010bba:	d30a      	bcc.n	8010bd2 <__exponent+0x66>
 8010bbc:	f10d 0209 	add.w	r2, sp, #9
 8010bc0:	eba2 020e 	sub.w	r2, r2, lr
 8010bc4:	4565      	cmp	r5, ip
 8010bc6:	bf88      	it	hi
 8010bc8:	2200      	movhi	r2, #0
 8010bca:	4413      	add	r3, r2
 8010bcc:	1a18      	subs	r0, r3, r0
 8010bce:	b003      	add	sp, #12
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010bda:	e7ed      	b.n	8010bb8 <__exponent+0x4c>
 8010bdc:	2330      	movs	r3, #48	; 0x30
 8010bde:	3130      	adds	r1, #48	; 0x30
 8010be0:	7083      	strb	r3, [r0, #2]
 8010be2:	70c1      	strb	r1, [r0, #3]
 8010be4:	1d03      	adds	r3, r0, #4
 8010be6:	e7f1      	b.n	8010bcc <__exponent+0x60>

08010be8 <_printf_float>:
 8010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	ed2d 8b02 	vpush	{d8}
 8010bf0:	b08d      	sub	sp, #52	; 0x34
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010bf8:	4616      	mov	r6, r2
 8010bfa:	461f      	mov	r7, r3
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	f001 fb5b 	bl	80122b8 <_localeconv_r>
 8010c02:	f8d0 a000 	ldr.w	sl, [r0]
 8010c06:	4650      	mov	r0, sl
 8010c08:	f7ef fae2 	bl	80001d0 <strlen>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	9305      	str	r3, [sp, #20]
 8010c14:	f8d8 3000 	ldr.w	r3, [r8]
 8010c18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c1c:	3307      	adds	r3, #7
 8010c1e:	f023 0307 	bic.w	r3, r3, #7
 8010c22:	f103 0208 	add.w	r2, r3, #8
 8010c26:	f8c8 2000 	str.w	r2, [r8]
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c3a:	9307      	str	r3, [sp, #28]
 8010c3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c40:	ee08 0a10 	vmov	s16, r0
 8010c44:	4b9f      	ldr	r3, [pc, #636]	; (8010ec4 <_printf_float+0x2dc>)
 8010c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c4e:	f7ef ff6d 	bl	8000b2c <__aeabi_dcmpun>
 8010c52:	bb88      	cbnz	r0, 8010cb8 <_printf_float+0xd0>
 8010c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c58:	4b9a      	ldr	r3, [pc, #616]	; (8010ec4 <_printf_float+0x2dc>)
 8010c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c5e:	f7ef ff47 	bl	8000af0 <__aeabi_dcmple>
 8010c62:	bb48      	cbnz	r0, 8010cb8 <_printf_float+0xd0>
 8010c64:	2200      	movs	r2, #0
 8010c66:	2300      	movs	r3, #0
 8010c68:	4640      	mov	r0, r8
 8010c6a:	4649      	mov	r1, r9
 8010c6c:	f7ef ff36 	bl	8000adc <__aeabi_dcmplt>
 8010c70:	b110      	cbz	r0, 8010c78 <_printf_float+0x90>
 8010c72:	232d      	movs	r3, #45	; 0x2d
 8010c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c78:	4b93      	ldr	r3, [pc, #588]	; (8010ec8 <_printf_float+0x2e0>)
 8010c7a:	4894      	ldr	r0, [pc, #592]	; (8010ecc <_printf_float+0x2e4>)
 8010c7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c80:	bf94      	ite	ls
 8010c82:	4698      	movls	r8, r3
 8010c84:	4680      	movhi	r8, r0
 8010c86:	2303      	movs	r3, #3
 8010c88:	6123      	str	r3, [r4, #16]
 8010c8a:	9b05      	ldr	r3, [sp, #20]
 8010c8c:	f023 0204 	bic.w	r2, r3, #4
 8010c90:	6022      	str	r2, [r4, #0]
 8010c92:	f04f 0900 	mov.w	r9, #0
 8010c96:	9700      	str	r7, [sp, #0]
 8010c98:	4633      	mov	r3, r6
 8010c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c9c:	4621      	mov	r1, r4
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	f000 f9d8 	bl	8011054 <_printf_common>
 8010ca4:	3001      	adds	r0, #1
 8010ca6:	f040 8090 	bne.w	8010dca <_printf_float+0x1e2>
 8010caa:	f04f 30ff 	mov.w	r0, #4294967295
 8010cae:	b00d      	add	sp, #52	; 0x34
 8010cb0:	ecbd 8b02 	vpop	{d8}
 8010cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb8:	4642      	mov	r2, r8
 8010cba:	464b      	mov	r3, r9
 8010cbc:	4640      	mov	r0, r8
 8010cbe:	4649      	mov	r1, r9
 8010cc0:	f7ef ff34 	bl	8000b2c <__aeabi_dcmpun>
 8010cc4:	b140      	cbz	r0, 8010cd8 <_printf_float+0xf0>
 8010cc6:	464b      	mov	r3, r9
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	bfbc      	itt	lt
 8010ccc:	232d      	movlt	r3, #45	; 0x2d
 8010cce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cd2:	487f      	ldr	r0, [pc, #508]	; (8010ed0 <_printf_float+0x2e8>)
 8010cd4:	4b7f      	ldr	r3, [pc, #508]	; (8010ed4 <_printf_float+0x2ec>)
 8010cd6:	e7d1      	b.n	8010c7c <_printf_float+0x94>
 8010cd8:	6863      	ldr	r3, [r4, #4]
 8010cda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010cde:	9206      	str	r2, [sp, #24]
 8010ce0:	1c5a      	adds	r2, r3, #1
 8010ce2:	d13f      	bne.n	8010d64 <_printf_float+0x17c>
 8010ce4:	2306      	movs	r3, #6
 8010ce6:	6063      	str	r3, [r4, #4]
 8010ce8:	9b05      	ldr	r3, [sp, #20]
 8010cea:	6861      	ldr	r1, [r4, #4]
 8010cec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9303      	str	r3, [sp, #12]
 8010cf4:	ab0a      	add	r3, sp, #40	; 0x28
 8010cf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010cfa:	ab09      	add	r3, sp, #36	; 0x24
 8010cfc:	ec49 8b10 	vmov	d0, r8, r9
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	6022      	str	r2, [r4, #0]
 8010d04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f7ff fecd 	bl	8010aa8 <__cvt>
 8010d0e:	9b06      	ldr	r3, [sp, #24]
 8010d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d12:	2b47      	cmp	r3, #71	; 0x47
 8010d14:	4680      	mov	r8, r0
 8010d16:	d108      	bne.n	8010d2a <_printf_float+0x142>
 8010d18:	1cc8      	adds	r0, r1, #3
 8010d1a:	db02      	blt.n	8010d22 <_printf_float+0x13a>
 8010d1c:	6863      	ldr	r3, [r4, #4]
 8010d1e:	4299      	cmp	r1, r3
 8010d20:	dd41      	ble.n	8010da6 <_printf_float+0x1be>
 8010d22:	f1ab 0b02 	sub.w	fp, fp, #2
 8010d26:	fa5f fb8b 	uxtb.w	fp, fp
 8010d2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d2e:	d820      	bhi.n	8010d72 <_printf_float+0x18a>
 8010d30:	3901      	subs	r1, #1
 8010d32:	465a      	mov	r2, fp
 8010d34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d38:	9109      	str	r1, [sp, #36]	; 0x24
 8010d3a:	f7ff ff17 	bl	8010b6c <__exponent>
 8010d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d40:	1813      	adds	r3, r2, r0
 8010d42:	2a01      	cmp	r2, #1
 8010d44:	4681      	mov	r9, r0
 8010d46:	6123      	str	r3, [r4, #16]
 8010d48:	dc02      	bgt.n	8010d50 <_printf_float+0x168>
 8010d4a:	6822      	ldr	r2, [r4, #0]
 8010d4c:	07d2      	lsls	r2, r2, #31
 8010d4e:	d501      	bpl.n	8010d54 <_printf_float+0x16c>
 8010d50:	3301      	adds	r3, #1
 8010d52:	6123      	str	r3, [r4, #16]
 8010d54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d09c      	beq.n	8010c96 <_printf_float+0xae>
 8010d5c:	232d      	movs	r3, #45	; 0x2d
 8010d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d62:	e798      	b.n	8010c96 <_printf_float+0xae>
 8010d64:	9a06      	ldr	r2, [sp, #24]
 8010d66:	2a47      	cmp	r2, #71	; 0x47
 8010d68:	d1be      	bne.n	8010ce8 <_printf_float+0x100>
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d1bc      	bne.n	8010ce8 <_printf_float+0x100>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	e7b9      	b.n	8010ce6 <_printf_float+0xfe>
 8010d72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d76:	d118      	bne.n	8010daa <_printf_float+0x1c2>
 8010d78:	2900      	cmp	r1, #0
 8010d7a:	6863      	ldr	r3, [r4, #4]
 8010d7c:	dd0b      	ble.n	8010d96 <_printf_float+0x1ae>
 8010d7e:	6121      	str	r1, [r4, #16]
 8010d80:	b913      	cbnz	r3, 8010d88 <_printf_float+0x1a0>
 8010d82:	6822      	ldr	r2, [r4, #0]
 8010d84:	07d0      	lsls	r0, r2, #31
 8010d86:	d502      	bpl.n	8010d8e <_printf_float+0x1a6>
 8010d88:	3301      	adds	r3, #1
 8010d8a:	440b      	add	r3, r1
 8010d8c:	6123      	str	r3, [r4, #16]
 8010d8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d90:	f04f 0900 	mov.w	r9, #0
 8010d94:	e7de      	b.n	8010d54 <_printf_float+0x16c>
 8010d96:	b913      	cbnz	r3, 8010d9e <_printf_float+0x1b6>
 8010d98:	6822      	ldr	r2, [r4, #0]
 8010d9a:	07d2      	lsls	r2, r2, #31
 8010d9c:	d501      	bpl.n	8010da2 <_printf_float+0x1ba>
 8010d9e:	3302      	adds	r3, #2
 8010da0:	e7f4      	b.n	8010d8c <_printf_float+0x1a4>
 8010da2:	2301      	movs	r3, #1
 8010da4:	e7f2      	b.n	8010d8c <_printf_float+0x1a4>
 8010da6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dac:	4299      	cmp	r1, r3
 8010dae:	db05      	blt.n	8010dbc <_printf_float+0x1d4>
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	6121      	str	r1, [r4, #16]
 8010db4:	07d8      	lsls	r0, r3, #31
 8010db6:	d5ea      	bpl.n	8010d8e <_printf_float+0x1a6>
 8010db8:	1c4b      	adds	r3, r1, #1
 8010dba:	e7e7      	b.n	8010d8c <_printf_float+0x1a4>
 8010dbc:	2900      	cmp	r1, #0
 8010dbe:	bfd4      	ite	le
 8010dc0:	f1c1 0202 	rsble	r2, r1, #2
 8010dc4:	2201      	movgt	r2, #1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	e7e0      	b.n	8010d8c <_printf_float+0x1a4>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	055a      	lsls	r2, r3, #21
 8010dce:	d407      	bmi.n	8010de0 <_printf_float+0x1f8>
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	4642      	mov	r2, r8
 8010dd4:	4631      	mov	r1, r6
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	d12c      	bne.n	8010e38 <_printf_float+0x250>
 8010dde:	e764      	b.n	8010caa <_printf_float+0xc2>
 8010de0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010de4:	f240 80e0 	bls.w	8010fa8 <_printf_float+0x3c0>
 8010de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010dec:	2200      	movs	r2, #0
 8010dee:	2300      	movs	r3, #0
 8010df0:	f7ef fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d034      	beq.n	8010e62 <_printf_float+0x27a>
 8010df8:	4a37      	ldr	r2, [pc, #220]	; (8010ed8 <_printf_float+0x2f0>)
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4628      	mov	r0, r5
 8010e00:	47b8      	blx	r7
 8010e02:	3001      	adds	r0, #1
 8010e04:	f43f af51 	beq.w	8010caa <_printf_float+0xc2>
 8010e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	db02      	blt.n	8010e16 <_printf_float+0x22e>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	07d8      	lsls	r0, r3, #31
 8010e14:	d510      	bpl.n	8010e38 <_printf_float+0x250>
 8010e16:	ee18 3a10 	vmov	r3, s16
 8010e1a:	4652      	mov	r2, sl
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4628      	mov	r0, r5
 8010e20:	47b8      	blx	r7
 8010e22:	3001      	adds	r0, #1
 8010e24:	f43f af41 	beq.w	8010caa <_printf_float+0xc2>
 8010e28:	f04f 0800 	mov.w	r8, #0
 8010e2c:	f104 091a 	add.w	r9, r4, #26
 8010e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e32:	3b01      	subs	r3, #1
 8010e34:	4543      	cmp	r3, r8
 8010e36:	dc09      	bgt.n	8010e4c <_printf_float+0x264>
 8010e38:	6823      	ldr	r3, [r4, #0]
 8010e3a:	079b      	lsls	r3, r3, #30
 8010e3c:	f100 8105 	bmi.w	801104a <_printf_float+0x462>
 8010e40:	68e0      	ldr	r0, [r4, #12]
 8010e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e44:	4298      	cmp	r0, r3
 8010e46:	bfb8      	it	lt
 8010e48:	4618      	movlt	r0, r3
 8010e4a:	e730      	b.n	8010cae <_printf_float+0xc6>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	464a      	mov	r2, r9
 8010e50:	4631      	mov	r1, r6
 8010e52:	4628      	mov	r0, r5
 8010e54:	47b8      	blx	r7
 8010e56:	3001      	adds	r0, #1
 8010e58:	f43f af27 	beq.w	8010caa <_printf_float+0xc2>
 8010e5c:	f108 0801 	add.w	r8, r8, #1
 8010e60:	e7e6      	b.n	8010e30 <_printf_float+0x248>
 8010e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	dc39      	bgt.n	8010edc <_printf_float+0x2f4>
 8010e68:	4a1b      	ldr	r2, [pc, #108]	; (8010ed8 <_printf_float+0x2f0>)
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	47b8      	blx	r7
 8010e72:	3001      	adds	r0, #1
 8010e74:	f43f af19 	beq.w	8010caa <_printf_float+0xc2>
 8010e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	d102      	bne.n	8010e86 <_printf_float+0x29e>
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	07d9      	lsls	r1, r3, #31
 8010e84:	d5d8      	bpl.n	8010e38 <_printf_float+0x250>
 8010e86:	ee18 3a10 	vmov	r3, s16
 8010e8a:	4652      	mov	r2, sl
 8010e8c:	4631      	mov	r1, r6
 8010e8e:	4628      	mov	r0, r5
 8010e90:	47b8      	blx	r7
 8010e92:	3001      	adds	r0, #1
 8010e94:	f43f af09 	beq.w	8010caa <_printf_float+0xc2>
 8010e98:	f04f 0900 	mov.w	r9, #0
 8010e9c:	f104 0a1a 	add.w	sl, r4, #26
 8010ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea2:	425b      	negs	r3, r3
 8010ea4:	454b      	cmp	r3, r9
 8010ea6:	dc01      	bgt.n	8010eac <_printf_float+0x2c4>
 8010ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eaa:	e792      	b.n	8010dd2 <_printf_float+0x1ea>
 8010eac:	2301      	movs	r3, #1
 8010eae:	4652      	mov	r2, sl
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	47b8      	blx	r7
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	f43f aef7 	beq.w	8010caa <_printf_float+0xc2>
 8010ebc:	f109 0901 	add.w	r9, r9, #1
 8010ec0:	e7ee      	b.n	8010ea0 <_printf_float+0x2b8>
 8010ec2:	bf00      	nop
 8010ec4:	7fefffff 	.word	0x7fefffff
 8010ec8:	0801374c 	.word	0x0801374c
 8010ecc:	08013750 	.word	0x08013750
 8010ed0:	08013758 	.word	0x08013758
 8010ed4:	08013754 	.word	0x08013754
 8010ed8:	0801375c 	.word	0x0801375c
 8010edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	bfa8      	it	ge
 8010ee4:	461a      	movge	r2, r3
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	4691      	mov	r9, r2
 8010eea:	dc37      	bgt.n	8010f5c <_printf_float+0x374>
 8010eec:	f04f 0b00 	mov.w	fp, #0
 8010ef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ef4:	f104 021a 	add.w	r2, r4, #26
 8010ef8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010efa:	9305      	str	r3, [sp, #20]
 8010efc:	eba3 0309 	sub.w	r3, r3, r9
 8010f00:	455b      	cmp	r3, fp
 8010f02:	dc33      	bgt.n	8010f6c <_printf_float+0x384>
 8010f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	db3b      	blt.n	8010f84 <_printf_float+0x39c>
 8010f0c:	6823      	ldr	r3, [r4, #0]
 8010f0e:	07da      	lsls	r2, r3, #31
 8010f10:	d438      	bmi.n	8010f84 <_printf_float+0x39c>
 8010f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f14:	9a05      	ldr	r2, [sp, #20]
 8010f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f18:	1a9a      	subs	r2, r3, r2
 8010f1a:	eba3 0901 	sub.w	r9, r3, r1
 8010f1e:	4591      	cmp	r9, r2
 8010f20:	bfa8      	it	ge
 8010f22:	4691      	movge	r9, r2
 8010f24:	f1b9 0f00 	cmp.w	r9, #0
 8010f28:	dc35      	bgt.n	8010f96 <_printf_float+0x3ae>
 8010f2a:	f04f 0800 	mov.w	r8, #0
 8010f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f32:	f104 0a1a 	add.w	sl, r4, #26
 8010f36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f3a:	1a9b      	subs	r3, r3, r2
 8010f3c:	eba3 0309 	sub.w	r3, r3, r9
 8010f40:	4543      	cmp	r3, r8
 8010f42:	f77f af79 	ble.w	8010e38 <_printf_float+0x250>
 8010f46:	2301      	movs	r3, #1
 8010f48:	4652      	mov	r2, sl
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	47b8      	blx	r7
 8010f50:	3001      	adds	r0, #1
 8010f52:	f43f aeaa 	beq.w	8010caa <_printf_float+0xc2>
 8010f56:	f108 0801 	add.w	r8, r8, #1
 8010f5a:	e7ec      	b.n	8010f36 <_printf_float+0x34e>
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	4631      	mov	r1, r6
 8010f60:	4642      	mov	r2, r8
 8010f62:	4628      	mov	r0, r5
 8010f64:	47b8      	blx	r7
 8010f66:	3001      	adds	r0, #1
 8010f68:	d1c0      	bne.n	8010eec <_printf_float+0x304>
 8010f6a:	e69e      	b.n	8010caa <_printf_float+0xc2>
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	4631      	mov	r1, r6
 8010f70:	4628      	mov	r0, r5
 8010f72:	9205      	str	r2, [sp, #20]
 8010f74:	47b8      	blx	r7
 8010f76:	3001      	adds	r0, #1
 8010f78:	f43f ae97 	beq.w	8010caa <_printf_float+0xc2>
 8010f7c:	9a05      	ldr	r2, [sp, #20]
 8010f7e:	f10b 0b01 	add.w	fp, fp, #1
 8010f82:	e7b9      	b.n	8010ef8 <_printf_float+0x310>
 8010f84:	ee18 3a10 	vmov	r3, s16
 8010f88:	4652      	mov	r2, sl
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	47b8      	blx	r7
 8010f90:	3001      	adds	r0, #1
 8010f92:	d1be      	bne.n	8010f12 <_printf_float+0x32a>
 8010f94:	e689      	b.n	8010caa <_printf_float+0xc2>
 8010f96:	9a05      	ldr	r2, [sp, #20]
 8010f98:	464b      	mov	r3, r9
 8010f9a:	4442      	add	r2, r8
 8010f9c:	4631      	mov	r1, r6
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	47b8      	blx	r7
 8010fa2:	3001      	adds	r0, #1
 8010fa4:	d1c1      	bne.n	8010f2a <_printf_float+0x342>
 8010fa6:	e680      	b.n	8010caa <_printf_float+0xc2>
 8010fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010faa:	2a01      	cmp	r2, #1
 8010fac:	dc01      	bgt.n	8010fb2 <_printf_float+0x3ca>
 8010fae:	07db      	lsls	r3, r3, #31
 8010fb0:	d538      	bpl.n	8011024 <_printf_float+0x43c>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	4642      	mov	r2, r8
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	4628      	mov	r0, r5
 8010fba:	47b8      	blx	r7
 8010fbc:	3001      	adds	r0, #1
 8010fbe:	f43f ae74 	beq.w	8010caa <_printf_float+0xc2>
 8010fc2:	ee18 3a10 	vmov	r3, s16
 8010fc6:	4652      	mov	r2, sl
 8010fc8:	4631      	mov	r1, r6
 8010fca:	4628      	mov	r0, r5
 8010fcc:	47b8      	blx	r7
 8010fce:	3001      	adds	r0, #1
 8010fd0:	f43f ae6b 	beq.w	8010caa <_printf_float+0xc2>
 8010fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f7ef fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fe0:	b9d8      	cbnz	r0, 801101a <_printf_float+0x432>
 8010fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fe4:	f108 0201 	add.w	r2, r8, #1
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	4631      	mov	r1, r6
 8010fec:	4628      	mov	r0, r5
 8010fee:	47b8      	blx	r7
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d10e      	bne.n	8011012 <_printf_float+0x42a>
 8010ff4:	e659      	b.n	8010caa <_printf_float+0xc2>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	4652      	mov	r2, sl
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	47b8      	blx	r7
 8011000:	3001      	adds	r0, #1
 8011002:	f43f ae52 	beq.w	8010caa <_printf_float+0xc2>
 8011006:	f108 0801 	add.w	r8, r8, #1
 801100a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801100c:	3b01      	subs	r3, #1
 801100e:	4543      	cmp	r3, r8
 8011010:	dcf1      	bgt.n	8010ff6 <_printf_float+0x40e>
 8011012:	464b      	mov	r3, r9
 8011014:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011018:	e6dc      	b.n	8010dd4 <_printf_float+0x1ec>
 801101a:	f04f 0800 	mov.w	r8, #0
 801101e:	f104 0a1a 	add.w	sl, r4, #26
 8011022:	e7f2      	b.n	801100a <_printf_float+0x422>
 8011024:	2301      	movs	r3, #1
 8011026:	4642      	mov	r2, r8
 8011028:	e7df      	b.n	8010fea <_printf_float+0x402>
 801102a:	2301      	movs	r3, #1
 801102c:	464a      	mov	r2, r9
 801102e:	4631      	mov	r1, r6
 8011030:	4628      	mov	r0, r5
 8011032:	47b8      	blx	r7
 8011034:	3001      	adds	r0, #1
 8011036:	f43f ae38 	beq.w	8010caa <_printf_float+0xc2>
 801103a:	f108 0801 	add.w	r8, r8, #1
 801103e:	68e3      	ldr	r3, [r4, #12]
 8011040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011042:	1a5b      	subs	r3, r3, r1
 8011044:	4543      	cmp	r3, r8
 8011046:	dcf0      	bgt.n	801102a <_printf_float+0x442>
 8011048:	e6fa      	b.n	8010e40 <_printf_float+0x258>
 801104a:	f04f 0800 	mov.w	r8, #0
 801104e:	f104 0919 	add.w	r9, r4, #25
 8011052:	e7f4      	b.n	801103e <_printf_float+0x456>

08011054 <_printf_common>:
 8011054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011058:	4616      	mov	r6, r2
 801105a:	4699      	mov	r9, r3
 801105c:	688a      	ldr	r2, [r1, #8]
 801105e:	690b      	ldr	r3, [r1, #16]
 8011060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011064:	4293      	cmp	r3, r2
 8011066:	bfb8      	it	lt
 8011068:	4613      	movlt	r3, r2
 801106a:	6033      	str	r3, [r6, #0]
 801106c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011070:	4607      	mov	r7, r0
 8011072:	460c      	mov	r4, r1
 8011074:	b10a      	cbz	r2, 801107a <_printf_common+0x26>
 8011076:	3301      	adds	r3, #1
 8011078:	6033      	str	r3, [r6, #0]
 801107a:	6823      	ldr	r3, [r4, #0]
 801107c:	0699      	lsls	r1, r3, #26
 801107e:	bf42      	ittt	mi
 8011080:	6833      	ldrmi	r3, [r6, #0]
 8011082:	3302      	addmi	r3, #2
 8011084:	6033      	strmi	r3, [r6, #0]
 8011086:	6825      	ldr	r5, [r4, #0]
 8011088:	f015 0506 	ands.w	r5, r5, #6
 801108c:	d106      	bne.n	801109c <_printf_common+0x48>
 801108e:	f104 0a19 	add.w	sl, r4, #25
 8011092:	68e3      	ldr	r3, [r4, #12]
 8011094:	6832      	ldr	r2, [r6, #0]
 8011096:	1a9b      	subs	r3, r3, r2
 8011098:	42ab      	cmp	r3, r5
 801109a:	dc26      	bgt.n	80110ea <_printf_common+0x96>
 801109c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110a0:	1e13      	subs	r3, r2, #0
 80110a2:	6822      	ldr	r2, [r4, #0]
 80110a4:	bf18      	it	ne
 80110a6:	2301      	movne	r3, #1
 80110a8:	0692      	lsls	r2, r2, #26
 80110aa:	d42b      	bmi.n	8011104 <_printf_common+0xb0>
 80110ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110b0:	4649      	mov	r1, r9
 80110b2:	4638      	mov	r0, r7
 80110b4:	47c0      	blx	r8
 80110b6:	3001      	adds	r0, #1
 80110b8:	d01e      	beq.n	80110f8 <_printf_common+0xa4>
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	68e5      	ldr	r5, [r4, #12]
 80110be:	6832      	ldr	r2, [r6, #0]
 80110c0:	f003 0306 	and.w	r3, r3, #6
 80110c4:	2b04      	cmp	r3, #4
 80110c6:	bf08      	it	eq
 80110c8:	1aad      	subeq	r5, r5, r2
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	6922      	ldr	r2, [r4, #16]
 80110ce:	bf0c      	ite	eq
 80110d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110d4:	2500      	movne	r5, #0
 80110d6:	4293      	cmp	r3, r2
 80110d8:	bfc4      	itt	gt
 80110da:	1a9b      	subgt	r3, r3, r2
 80110dc:	18ed      	addgt	r5, r5, r3
 80110de:	2600      	movs	r6, #0
 80110e0:	341a      	adds	r4, #26
 80110e2:	42b5      	cmp	r5, r6
 80110e4:	d11a      	bne.n	801111c <_printf_common+0xc8>
 80110e6:	2000      	movs	r0, #0
 80110e8:	e008      	b.n	80110fc <_printf_common+0xa8>
 80110ea:	2301      	movs	r3, #1
 80110ec:	4652      	mov	r2, sl
 80110ee:	4649      	mov	r1, r9
 80110f0:	4638      	mov	r0, r7
 80110f2:	47c0      	blx	r8
 80110f4:	3001      	adds	r0, #1
 80110f6:	d103      	bne.n	8011100 <_printf_common+0xac>
 80110f8:	f04f 30ff 	mov.w	r0, #4294967295
 80110fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011100:	3501      	adds	r5, #1
 8011102:	e7c6      	b.n	8011092 <_printf_common+0x3e>
 8011104:	18e1      	adds	r1, r4, r3
 8011106:	1c5a      	adds	r2, r3, #1
 8011108:	2030      	movs	r0, #48	; 0x30
 801110a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801110e:	4422      	add	r2, r4
 8011110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011118:	3302      	adds	r3, #2
 801111a:	e7c7      	b.n	80110ac <_printf_common+0x58>
 801111c:	2301      	movs	r3, #1
 801111e:	4622      	mov	r2, r4
 8011120:	4649      	mov	r1, r9
 8011122:	4638      	mov	r0, r7
 8011124:	47c0      	blx	r8
 8011126:	3001      	adds	r0, #1
 8011128:	d0e6      	beq.n	80110f8 <_printf_common+0xa4>
 801112a:	3601      	adds	r6, #1
 801112c:	e7d9      	b.n	80110e2 <_printf_common+0x8e>
	...

08011130 <_printf_i>:
 8011130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011134:	7e0f      	ldrb	r7, [r1, #24]
 8011136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011138:	2f78      	cmp	r7, #120	; 0x78
 801113a:	4691      	mov	r9, r2
 801113c:	4680      	mov	r8, r0
 801113e:	460c      	mov	r4, r1
 8011140:	469a      	mov	sl, r3
 8011142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011146:	d807      	bhi.n	8011158 <_printf_i+0x28>
 8011148:	2f62      	cmp	r7, #98	; 0x62
 801114a:	d80a      	bhi.n	8011162 <_printf_i+0x32>
 801114c:	2f00      	cmp	r7, #0
 801114e:	f000 80d8 	beq.w	8011302 <_printf_i+0x1d2>
 8011152:	2f58      	cmp	r7, #88	; 0x58
 8011154:	f000 80a3 	beq.w	801129e <_printf_i+0x16e>
 8011158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801115c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011160:	e03a      	b.n	80111d8 <_printf_i+0xa8>
 8011162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011166:	2b15      	cmp	r3, #21
 8011168:	d8f6      	bhi.n	8011158 <_printf_i+0x28>
 801116a:	a101      	add	r1, pc, #4	; (adr r1, 8011170 <_printf_i+0x40>)
 801116c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011170:	080111c9 	.word	0x080111c9
 8011174:	080111dd 	.word	0x080111dd
 8011178:	08011159 	.word	0x08011159
 801117c:	08011159 	.word	0x08011159
 8011180:	08011159 	.word	0x08011159
 8011184:	08011159 	.word	0x08011159
 8011188:	080111dd 	.word	0x080111dd
 801118c:	08011159 	.word	0x08011159
 8011190:	08011159 	.word	0x08011159
 8011194:	08011159 	.word	0x08011159
 8011198:	08011159 	.word	0x08011159
 801119c:	080112e9 	.word	0x080112e9
 80111a0:	0801120d 	.word	0x0801120d
 80111a4:	080112cb 	.word	0x080112cb
 80111a8:	08011159 	.word	0x08011159
 80111ac:	08011159 	.word	0x08011159
 80111b0:	0801130b 	.word	0x0801130b
 80111b4:	08011159 	.word	0x08011159
 80111b8:	0801120d 	.word	0x0801120d
 80111bc:	08011159 	.word	0x08011159
 80111c0:	08011159 	.word	0x08011159
 80111c4:	080112d3 	.word	0x080112d3
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	1d1a      	adds	r2, r3, #4
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	602a      	str	r2, [r5, #0]
 80111d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d8:	2301      	movs	r3, #1
 80111da:	e0a3      	b.n	8011324 <_printf_i+0x1f4>
 80111dc:	6820      	ldr	r0, [r4, #0]
 80111de:	6829      	ldr	r1, [r5, #0]
 80111e0:	0606      	lsls	r6, r0, #24
 80111e2:	f101 0304 	add.w	r3, r1, #4
 80111e6:	d50a      	bpl.n	80111fe <_printf_i+0xce>
 80111e8:	680e      	ldr	r6, [r1, #0]
 80111ea:	602b      	str	r3, [r5, #0]
 80111ec:	2e00      	cmp	r6, #0
 80111ee:	da03      	bge.n	80111f8 <_printf_i+0xc8>
 80111f0:	232d      	movs	r3, #45	; 0x2d
 80111f2:	4276      	negs	r6, r6
 80111f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111f8:	485e      	ldr	r0, [pc, #376]	; (8011374 <_printf_i+0x244>)
 80111fa:	230a      	movs	r3, #10
 80111fc:	e019      	b.n	8011232 <_printf_i+0x102>
 80111fe:	680e      	ldr	r6, [r1, #0]
 8011200:	602b      	str	r3, [r5, #0]
 8011202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011206:	bf18      	it	ne
 8011208:	b236      	sxthne	r6, r6
 801120a:	e7ef      	b.n	80111ec <_printf_i+0xbc>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	6820      	ldr	r0, [r4, #0]
 8011210:	1d19      	adds	r1, r3, #4
 8011212:	6029      	str	r1, [r5, #0]
 8011214:	0601      	lsls	r1, r0, #24
 8011216:	d501      	bpl.n	801121c <_printf_i+0xec>
 8011218:	681e      	ldr	r6, [r3, #0]
 801121a:	e002      	b.n	8011222 <_printf_i+0xf2>
 801121c:	0646      	lsls	r6, r0, #25
 801121e:	d5fb      	bpl.n	8011218 <_printf_i+0xe8>
 8011220:	881e      	ldrh	r6, [r3, #0]
 8011222:	4854      	ldr	r0, [pc, #336]	; (8011374 <_printf_i+0x244>)
 8011224:	2f6f      	cmp	r7, #111	; 0x6f
 8011226:	bf0c      	ite	eq
 8011228:	2308      	moveq	r3, #8
 801122a:	230a      	movne	r3, #10
 801122c:	2100      	movs	r1, #0
 801122e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011232:	6865      	ldr	r5, [r4, #4]
 8011234:	60a5      	str	r5, [r4, #8]
 8011236:	2d00      	cmp	r5, #0
 8011238:	bfa2      	ittt	ge
 801123a:	6821      	ldrge	r1, [r4, #0]
 801123c:	f021 0104 	bicge.w	r1, r1, #4
 8011240:	6021      	strge	r1, [r4, #0]
 8011242:	b90e      	cbnz	r6, 8011248 <_printf_i+0x118>
 8011244:	2d00      	cmp	r5, #0
 8011246:	d04d      	beq.n	80112e4 <_printf_i+0x1b4>
 8011248:	4615      	mov	r5, r2
 801124a:	fbb6 f1f3 	udiv	r1, r6, r3
 801124e:	fb03 6711 	mls	r7, r3, r1, r6
 8011252:	5dc7      	ldrb	r7, [r0, r7]
 8011254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011258:	4637      	mov	r7, r6
 801125a:	42bb      	cmp	r3, r7
 801125c:	460e      	mov	r6, r1
 801125e:	d9f4      	bls.n	801124a <_printf_i+0x11a>
 8011260:	2b08      	cmp	r3, #8
 8011262:	d10b      	bne.n	801127c <_printf_i+0x14c>
 8011264:	6823      	ldr	r3, [r4, #0]
 8011266:	07de      	lsls	r6, r3, #31
 8011268:	d508      	bpl.n	801127c <_printf_i+0x14c>
 801126a:	6923      	ldr	r3, [r4, #16]
 801126c:	6861      	ldr	r1, [r4, #4]
 801126e:	4299      	cmp	r1, r3
 8011270:	bfde      	ittt	le
 8011272:	2330      	movle	r3, #48	; 0x30
 8011274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011278:	f105 35ff 	addle.w	r5, r5, #4294967295
 801127c:	1b52      	subs	r2, r2, r5
 801127e:	6122      	str	r2, [r4, #16]
 8011280:	f8cd a000 	str.w	sl, [sp]
 8011284:	464b      	mov	r3, r9
 8011286:	aa03      	add	r2, sp, #12
 8011288:	4621      	mov	r1, r4
 801128a:	4640      	mov	r0, r8
 801128c:	f7ff fee2 	bl	8011054 <_printf_common>
 8011290:	3001      	adds	r0, #1
 8011292:	d14c      	bne.n	801132e <_printf_i+0x1fe>
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	b004      	add	sp, #16
 801129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129e:	4835      	ldr	r0, [pc, #212]	; (8011374 <_printf_i+0x244>)
 80112a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80112a4:	6829      	ldr	r1, [r5, #0]
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80112ac:	6029      	str	r1, [r5, #0]
 80112ae:	061d      	lsls	r5, r3, #24
 80112b0:	d514      	bpl.n	80112dc <_printf_i+0x1ac>
 80112b2:	07df      	lsls	r7, r3, #31
 80112b4:	bf44      	itt	mi
 80112b6:	f043 0320 	orrmi.w	r3, r3, #32
 80112ba:	6023      	strmi	r3, [r4, #0]
 80112bc:	b91e      	cbnz	r6, 80112c6 <_printf_i+0x196>
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	f023 0320 	bic.w	r3, r3, #32
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	2310      	movs	r3, #16
 80112c8:	e7b0      	b.n	801122c <_printf_i+0xfc>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	f043 0320 	orr.w	r3, r3, #32
 80112d0:	6023      	str	r3, [r4, #0]
 80112d2:	2378      	movs	r3, #120	; 0x78
 80112d4:	4828      	ldr	r0, [pc, #160]	; (8011378 <_printf_i+0x248>)
 80112d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112da:	e7e3      	b.n	80112a4 <_printf_i+0x174>
 80112dc:	0659      	lsls	r1, r3, #25
 80112de:	bf48      	it	mi
 80112e0:	b2b6      	uxthmi	r6, r6
 80112e2:	e7e6      	b.n	80112b2 <_printf_i+0x182>
 80112e4:	4615      	mov	r5, r2
 80112e6:	e7bb      	b.n	8011260 <_printf_i+0x130>
 80112e8:	682b      	ldr	r3, [r5, #0]
 80112ea:	6826      	ldr	r6, [r4, #0]
 80112ec:	6961      	ldr	r1, [r4, #20]
 80112ee:	1d18      	adds	r0, r3, #4
 80112f0:	6028      	str	r0, [r5, #0]
 80112f2:	0635      	lsls	r5, r6, #24
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	d501      	bpl.n	80112fc <_printf_i+0x1cc>
 80112f8:	6019      	str	r1, [r3, #0]
 80112fa:	e002      	b.n	8011302 <_printf_i+0x1d2>
 80112fc:	0670      	lsls	r0, r6, #25
 80112fe:	d5fb      	bpl.n	80112f8 <_printf_i+0x1c8>
 8011300:	8019      	strh	r1, [r3, #0]
 8011302:	2300      	movs	r3, #0
 8011304:	6123      	str	r3, [r4, #16]
 8011306:	4615      	mov	r5, r2
 8011308:	e7ba      	b.n	8011280 <_printf_i+0x150>
 801130a:	682b      	ldr	r3, [r5, #0]
 801130c:	1d1a      	adds	r2, r3, #4
 801130e:	602a      	str	r2, [r5, #0]
 8011310:	681d      	ldr	r5, [r3, #0]
 8011312:	6862      	ldr	r2, [r4, #4]
 8011314:	2100      	movs	r1, #0
 8011316:	4628      	mov	r0, r5
 8011318:	f7ee ff62 	bl	80001e0 <memchr>
 801131c:	b108      	cbz	r0, 8011322 <_printf_i+0x1f2>
 801131e:	1b40      	subs	r0, r0, r5
 8011320:	6060      	str	r0, [r4, #4]
 8011322:	6863      	ldr	r3, [r4, #4]
 8011324:	6123      	str	r3, [r4, #16]
 8011326:	2300      	movs	r3, #0
 8011328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801132c:	e7a8      	b.n	8011280 <_printf_i+0x150>
 801132e:	6923      	ldr	r3, [r4, #16]
 8011330:	462a      	mov	r2, r5
 8011332:	4649      	mov	r1, r9
 8011334:	4640      	mov	r0, r8
 8011336:	47d0      	blx	sl
 8011338:	3001      	adds	r0, #1
 801133a:	d0ab      	beq.n	8011294 <_printf_i+0x164>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	079b      	lsls	r3, r3, #30
 8011340:	d413      	bmi.n	801136a <_printf_i+0x23a>
 8011342:	68e0      	ldr	r0, [r4, #12]
 8011344:	9b03      	ldr	r3, [sp, #12]
 8011346:	4298      	cmp	r0, r3
 8011348:	bfb8      	it	lt
 801134a:	4618      	movlt	r0, r3
 801134c:	e7a4      	b.n	8011298 <_printf_i+0x168>
 801134e:	2301      	movs	r3, #1
 8011350:	4632      	mov	r2, r6
 8011352:	4649      	mov	r1, r9
 8011354:	4640      	mov	r0, r8
 8011356:	47d0      	blx	sl
 8011358:	3001      	adds	r0, #1
 801135a:	d09b      	beq.n	8011294 <_printf_i+0x164>
 801135c:	3501      	adds	r5, #1
 801135e:	68e3      	ldr	r3, [r4, #12]
 8011360:	9903      	ldr	r1, [sp, #12]
 8011362:	1a5b      	subs	r3, r3, r1
 8011364:	42ab      	cmp	r3, r5
 8011366:	dcf2      	bgt.n	801134e <_printf_i+0x21e>
 8011368:	e7eb      	b.n	8011342 <_printf_i+0x212>
 801136a:	2500      	movs	r5, #0
 801136c:	f104 0619 	add.w	r6, r4, #25
 8011370:	e7f5      	b.n	801135e <_printf_i+0x22e>
 8011372:	bf00      	nop
 8011374:	0801375e 	.word	0x0801375e
 8011378:	0801376f 	.word	0x0801376f

0801137c <iprintf>:
 801137c:	b40f      	push	{r0, r1, r2, r3}
 801137e:	4b0a      	ldr	r3, [pc, #40]	; (80113a8 <iprintf+0x2c>)
 8011380:	b513      	push	{r0, r1, r4, lr}
 8011382:	681c      	ldr	r4, [r3, #0]
 8011384:	b124      	cbz	r4, 8011390 <iprintf+0x14>
 8011386:	69a3      	ldr	r3, [r4, #24]
 8011388:	b913      	cbnz	r3, 8011390 <iprintf+0x14>
 801138a:	4620      	mov	r0, r4
 801138c:	f000 fef6 	bl	801217c <__sinit>
 8011390:	ab05      	add	r3, sp, #20
 8011392:	9a04      	ldr	r2, [sp, #16]
 8011394:	68a1      	ldr	r1, [r4, #8]
 8011396:	9301      	str	r3, [sp, #4]
 8011398:	4620      	mov	r0, r4
 801139a:	f001 fc4f 	bl	8012c3c <_vfiprintf_r>
 801139e:	b002      	add	sp, #8
 80113a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a4:	b004      	add	sp, #16
 80113a6:	4770      	bx	lr
 80113a8:	20000120 	.word	0x20000120

080113ac <putchar>:
 80113ac:	4b09      	ldr	r3, [pc, #36]	; (80113d4 <putchar+0x28>)
 80113ae:	b513      	push	{r0, r1, r4, lr}
 80113b0:	681c      	ldr	r4, [r3, #0]
 80113b2:	4601      	mov	r1, r0
 80113b4:	b134      	cbz	r4, 80113c4 <putchar+0x18>
 80113b6:	69a3      	ldr	r3, [r4, #24]
 80113b8:	b923      	cbnz	r3, 80113c4 <putchar+0x18>
 80113ba:	9001      	str	r0, [sp, #4]
 80113bc:	4620      	mov	r0, r4
 80113be:	f000 fedd 	bl	801217c <__sinit>
 80113c2:	9901      	ldr	r1, [sp, #4]
 80113c4:	68a2      	ldr	r2, [r4, #8]
 80113c6:	4620      	mov	r0, r4
 80113c8:	b002      	add	sp, #8
 80113ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113ce:	f001 bd65 	b.w	8012e9c <_putc_r>
 80113d2:	bf00      	nop
 80113d4:	20000120 	.word	0x20000120

080113d8 <quorem>:
 80113d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	6903      	ldr	r3, [r0, #16]
 80113de:	690c      	ldr	r4, [r1, #16]
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	4607      	mov	r7, r0
 80113e4:	f2c0 8081 	blt.w	80114ea <quorem+0x112>
 80113e8:	3c01      	subs	r4, #1
 80113ea:	f101 0814 	add.w	r8, r1, #20
 80113ee:	f100 0514 	add.w	r5, r0, #20
 80113f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011400:	3301      	adds	r3, #1
 8011402:	429a      	cmp	r2, r3
 8011404:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801140c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011410:	d331      	bcc.n	8011476 <quorem+0x9e>
 8011412:	f04f 0e00 	mov.w	lr, #0
 8011416:	4640      	mov	r0, r8
 8011418:	46ac      	mov	ip, r5
 801141a:	46f2      	mov	sl, lr
 801141c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011420:	b293      	uxth	r3, r2
 8011422:	fb06 e303 	mla	r3, r6, r3, lr
 8011426:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801142a:	b29b      	uxth	r3, r3
 801142c:	ebaa 0303 	sub.w	r3, sl, r3
 8011430:	f8dc a000 	ldr.w	sl, [ip]
 8011434:	0c12      	lsrs	r2, r2, #16
 8011436:	fa13 f38a 	uxtah	r3, r3, sl
 801143a:	fb06 e202 	mla	r2, r6, r2, lr
 801143e:	9300      	str	r3, [sp, #0]
 8011440:	9b00      	ldr	r3, [sp, #0]
 8011442:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011446:	b292      	uxth	r2, r2
 8011448:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801144c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011450:	f8bd 3000 	ldrh.w	r3, [sp]
 8011454:	4581      	cmp	r9, r0
 8011456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801145a:	f84c 3b04 	str.w	r3, [ip], #4
 801145e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011462:	d2db      	bcs.n	801141c <quorem+0x44>
 8011464:	f855 300b 	ldr.w	r3, [r5, fp]
 8011468:	b92b      	cbnz	r3, 8011476 <quorem+0x9e>
 801146a:	9b01      	ldr	r3, [sp, #4]
 801146c:	3b04      	subs	r3, #4
 801146e:	429d      	cmp	r5, r3
 8011470:	461a      	mov	r2, r3
 8011472:	d32e      	bcc.n	80114d2 <quorem+0xfa>
 8011474:	613c      	str	r4, [r7, #16]
 8011476:	4638      	mov	r0, r7
 8011478:	f001 f9be 	bl	80127f8 <__mcmp>
 801147c:	2800      	cmp	r0, #0
 801147e:	db24      	blt.n	80114ca <quorem+0xf2>
 8011480:	3601      	adds	r6, #1
 8011482:	4628      	mov	r0, r5
 8011484:	f04f 0c00 	mov.w	ip, #0
 8011488:	f858 2b04 	ldr.w	r2, [r8], #4
 801148c:	f8d0 e000 	ldr.w	lr, [r0]
 8011490:	b293      	uxth	r3, r2
 8011492:	ebac 0303 	sub.w	r3, ip, r3
 8011496:	0c12      	lsrs	r2, r2, #16
 8011498:	fa13 f38e 	uxtah	r3, r3, lr
 801149c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80114a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114aa:	45c1      	cmp	r9, r8
 80114ac:	f840 3b04 	str.w	r3, [r0], #4
 80114b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80114b4:	d2e8      	bcs.n	8011488 <quorem+0xb0>
 80114b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114be:	b922      	cbnz	r2, 80114ca <quorem+0xf2>
 80114c0:	3b04      	subs	r3, #4
 80114c2:	429d      	cmp	r5, r3
 80114c4:	461a      	mov	r2, r3
 80114c6:	d30a      	bcc.n	80114de <quorem+0x106>
 80114c8:	613c      	str	r4, [r7, #16]
 80114ca:	4630      	mov	r0, r6
 80114cc:	b003      	add	sp, #12
 80114ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d2:	6812      	ldr	r2, [r2, #0]
 80114d4:	3b04      	subs	r3, #4
 80114d6:	2a00      	cmp	r2, #0
 80114d8:	d1cc      	bne.n	8011474 <quorem+0x9c>
 80114da:	3c01      	subs	r4, #1
 80114dc:	e7c7      	b.n	801146e <quorem+0x96>
 80114de:	6812      	ldr	r2, [r2, #0]
 80114e0:	3b04      	subs	r3, #4
 80114e2:	2a00      	cmp	r2, #0
 80114e4:	d1f0      	bne.n	80114c8 <quorem+0xf0>
 80114e6:	3c01      	subs	r4, #1
 80114e8:	e7eb      	b.n	80114c2 <quorem+0xea>
 80114ea:	2000      	movs	r0, #0
 80114ec:	e7ee      	b.n	80114cc <quorem+0xf4>
	...

080114f0 <_dtoa_r>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	ed2d 8b04 	vpush	{d8-d9}
 80114f8:	ec57 6b10 	vmov	r6, r7, d0
 80114fc:	b093      	sub	sp, #76	; 0x4c
 80114fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011500:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011504:	9106      	str	r1, [sp, #24]
 8011506:	ee10 aa10 	vmov	sl, s0
 801150a:	4604      	mov	r4, r0
 801150c:	9209      	str	r2, [sp, #36]	; 0x24
 801150e:	930c      	str	r3, [sp, #48]	; 0x30
 8011510:	46bb      	mov	fp, r7
 8011512:	b975      	cbnz	r5, 8011532 <_dtoa_r+0x42>
 8011514:	2010      	movs	r0, #16
 8011516:	f000 fed7 	bl	80122c8 <malloc>
 801151a:	4602      	mov	r2, r0
 801151c:	6260      	str	r0, [r4, #36]	; 0x24
 801151e:	b920      	cbnz	r0, 801152a <_dtoa_r+0x3a>
 8011520:	4ba7      	ldr	r3, [pc, #668]	; (80117c0 <_dtoa_r+0x2d0>)
 8011522:	21ea      	movs	r1, #234	; 0xea
 8011524:	48a7      	ldr	r0, [pc, #668]	; (80117c4 <_dtoa_r+0x2d4>)
 8011526:	f001 fe27 	bl	8013178 <__assert_func>
 801152a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801152e:	6005      	str	r5, [r0, #0]
 8011530:	60c5      	str	r5, [r0, #12]
 8011532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011534:	6819      	ldr	r1, [r3, #0]
 8011536:	b151      	cbz	r1, 801154e <_dtoa_r+0x5e>
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	604a      	str	r2, [r1, #4]
 801153c:	2301      	movs	r3, #1
 801153e:	4093      	lsls	r3, r2
 8011540:	608b      	str	r3, [r1, #8]
 8011542:	4620      	mov	r0, r4
 8011544:	f000 ff16 	bl	8012374 <_Bfree>
 8011548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801154a:	2200      	movs	r2, #0
 801154c:	601a      	str	r2, [r3, #0]
 801154e:	1e3b      	subs	r3, r7, #0
 8011550:	bfaa      	itet	ge
 8011552:	2300      	movge	r3, #0
 8011554:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011558:	f8c8 3000 	strge.w	r3, [r8]
 801155c:	4b9a      	ldr	r3, [pc, #616]	; (80117c8 <_dtoa_r+0x2d8>)
 801155e:	bfbc      	itt	lt
 8011560:	2201      	movlt	r2, #1
 8011562:	f8c8 2000 	strlt.w	r2, [r8]
 8011566:	ea33 030b 	bics.w	r3, r3, fp
 801156a:	d11b      	bne.n	80115a4 <_dtoa_r+0xb4>
 801156c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801156e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011572:	6013      	str	r3, [r2, #0]
 8011574:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011578:	4333      	orrs	r3, r6
 801157a:	f000 8592 	beq.w	80120a2 <_dtoa_r+0xbb2>
 801157e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011580:	b963      	cbnz	r3, 801159c <_dtoa_r+0xac>
 8011582:	4b92      	ldr	r3, [pc, #584]	; (80117cc <_dtoa_r+0x2dc>)
 8011584:	e022      	b.n	80115cc <_dtoa_r+0xdc>
 8011586:	4b92      	ldr	r3, [pc, #584]	; (80117d0 <_dtoa_r+0x2e0>)
 8011588:	9301      	str	r3, [sp, #4]
 801158a:	3308      	adds	r3, #8
 801158c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801158e:	6013      	str	r3, [r2, #0]
 8011590:	9801      	ldr	r0, [sp, #4]
 8011592:	b013      	add	sp, #76	; 0x4c
 8011594:	ecbd 8b04 	vpop	{d8-d9}
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	4b8b      	ldr	r3, [pc, #556]	; (80117cc <_dtoa_r+0x2dc>)
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	3303      	adds	r3, #3
 80115a2:	e7f3      	b.n	801158c <_dtoa_r+0x9c>
 80115a4:	2200      	movs	r2, #0
 80115a6:	2300      	movs	r3, #0
 80115a8:	4650      	mov	r0, sl
 80115aa:	4659      	mov	r1, fp
 80115ac:	f7ef fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80115b0:	ec4b ab19 	vmov	d9, sl, fp
 80115b4:	4680      	mov	r8, r0
 80115b6:	b158      	cbz	r0, 80115d0 <_dtoa_r+0xe0>
 80115b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115ba:	2301      	movs	r3, #1
 80115bc:	6013      	str	r3, [r2, #0]
 80115be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f000 856b 	beq.w	801209c <_dtoa_r+0xbac>
 80115c6:	4883      	ldr	r0, [pc, #524]	; (80117d4 <_dtoa_r+0x2e4>)
 80115c8:	6018      	str	r0, [r3, #0]
 80115ca:	1e43      	subs	r3, r0, #1
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	e7df      	b.n	8011590 <_dtoa_r+0xa0>
 80115d0:	ec4b ab10 	vmov	d0, sl, fp
 80115d4:	aa10      	add	r2, sp, #64	; 0x40
 80115d6:	a911      	add	r1, sp, #68	; 0x44
 80115d8:	4620      	mov	r0, r4
 80115da:	f001 f9b3 	bl	8012944 <__d2b>
 80115de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80115e2:	ee08 0a10 	vmov	s16, r0
 80115e6:	2d00      	cmp	r5, #0
 80115e8:	f000 8084 	beq.w	80116f4 <_dtoa_r+0x204>
 80115ec:	ee19 3a90 	vmov	r3, s19
 80115f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80115f8:	4656      	mov	r6, sl
 80115fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80115fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011602:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011606:	4b74      	ldr	r3, [pc, #464]	; (80117d8 <_dtoa_r+0x2e8>)
 8011608:	2200      	movs	r2, #0
 801160a:	4630      	mov	r0, r6
 801160c:	4639      	mov	r1, r7
 801160e:	f7ee fe3b 	bl	8000288 <__aeabi_dsub>
 8011612:	a365      	add	r3, pc, #404	; (adr r3, 80117a8 <_dtoa_r+0x2b8>)
 8011614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011618:	f7ee ffee 	bl	80005f8 <__aeabi_dmul>
 801161c:	a364      	add	r3, pc, #400	; (adr r3, 80117b0 <_dtoa_r+0x2c0>)
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	f7ee fe33 	bl	800028c <__adddf3>
 8011626:	4606      	mov	r6, r0
 8011628:	4628      	mov	r0, r5
 801162a:	460f      	mov	r7, r1
 801162c:	f7ee ff7a 	bl	8000524 <__aeabi_i2d>
 8011630:	a361      	add	r3, pc, #388	; (adr r3, 80117b8 <_dtoa_r+0x2c8>)
 8011632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011636:	f7ee ffdf 	bl	80005f8 <__aeabi_dmul>
 801163a:	4602      	mov	r2, r0
 801163c:	460b      	mov	r3, r1
 801163e:	4630      	mov	r0, r6
 8011640:	4639      	mov	r1, r7
 8011642:	f7ee fe23 	bl	800028c <__adddf3>
 8011646:	4606      	mov	r6, r0
 8011648:	460f      	mov	r7, r1
 801164a:	f7ef fa85 	bl	8000b58 <__aeabi_d2iz>
 801164e:	2200      	movs	r2, #0
 8011650:	9000      	str	r0, [sp, #0]
 8011652:	2300      	movs	r3, #0
 8011654:	4630      	mov	r0, r6
 8011656:	4639      	mov	r1, r7
 8011658:	f7ef fa40 	bl	8000adc <__aeabi_dcmplt>
 801165c:	b150      	cbz	r0, 8011674 <_dtoa_r+0x184>
 801165e:	9800      	ldr	r0, [sp, #0]
 8011660:	f7ee ff60 	bl	8000524 <__aeabi_i2d>
 8011664:	4632      	mov	r2, r6
 8011666:	463b      	mov	r3, r7
 8011668:	f7ef fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801166c:	b910      	cbnz	r0, 8011674 <_dtoa_r+0x184>
 801166e:	9b00      	ldr	r3, [sp, #0]
 8011670:	3b01      	subs	r3, #1
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	9b00      	ldr	r3, [sp, #0]
 8011676:	2b16      	cmp	r3, #22
 8011678:	d85a      	bhi.n	8011730 <_dtoa_r+0x240>
 801167a:	9a00      	ldr	r2, [sp, #0]
 801167c:	4b57      	ldr	r3, [pc, #348]	; (80117dc <_dtoa_r+0x2ec>)
 801167e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	ec51 0b19 	vmov	r0, r1, d9
 801168a:	f7ef fa27 	bl	8000adc <__aeabi_dcmplt>
 801168e:	2800      	cmp	r0, #0
 8011690:	d050      	beq.n	8011734 <_dtoa_r+0x244>
 8011692:	9b00      	ldr	r3, [sp, #0]
 8011694:	3b01      	subs	r3, #1
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	2300      	movs	r3, #0
 801169a:	930b      	str	r3, [sp, #44]	; 0x2c
 801169c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801169e:	1b5d      	subs	r5, r3, r5
 80116a0:	1e6b      	subs	r3, r5, #1
 80116a2:	9305      	str	r3, [sp, #20]
 80116a4:	bf45      	ittet	mi
 80116a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80116aa:	9304      	strmi	r3, [sp, #16]
 80116ac:	2300      	movpl	r3, #0
 80116ae:	2300      	movmi	r3, #0
 80116b0:	bf4c      	ite	mi
 80116b2:	9305      	strmi	r3, [sp, #20]
 80116b4:	9304      	strpl	r3, [sp, #16]
 80116b6:	9b00      	ldr	r3, [sp, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	db3d      	blt.n	8011738 <_dtoa_r+0x248>
 80116bc:	9b05      	ldr	r3, [sp, #20]
 80116be:	9a00      	ldr	r2, [sp, #0]
 80116c0:	920a      	str	r2, [sp, #40]	; 0x28
 80116c2:	4413      	add	r3, r2
 80116c4:	9305      	str	r3, [sp, #20]
 80116c6:	2300      	movs	r3, #0
 80116c8:	9307      	str	r3, [sp, #28]
 80116ca:	9b06      	ldr	r3, [sp, #24]
 80116cc:	2b09      	cmp	r3, #9
 80116ce:	f200 8089 	bhi.w	80117e4 <_dtoa_r+0x2f4>
 80116d2:	2b05      	cmp	r3, #5
 80116d4:	bfc4      	itt	gt
 80116d6:	3b04      	subgt	r3, #4
 80116d8:	9306      	strgt	r3, [sp, #24]
 80116da:	9b06      	ldr	r3, [sp, #24]
 80116dc:	f1a3 0302 	sub.w	r3, r3, #2
 80116e0:	bfcc      	ite	gt
 80116e2:	2500      	movgt	r5, #0
 80116e4:	2501      	movle	r5, #1
 80116e6:	2b03      	cmp	r3, #3
 80116e8:	f200 8087 	bhi.w	80117fa <_dtoa_r+0x30a>
 80116ec:	e8df f003 	tbb	[pc, r3]
 80116f0:	59383a2d 	.word	0x59383a2d
 80116f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80116f8:	441d      	add	r5, r3
 80116fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116fe:	2b20      	cmp	r3, #32
 8011700:	bfc1      	itttt	gt
 8011702:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011706:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801170a:	fa0b f303 	lslgt.w	r3, fp, r3
 801170e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011712:	bfda      	itte	le
 8011714:	f1c3 0320 	rsble	r3, r3, #32
 8011718:	fa06 f003 	lslle.w	r0, r6, r3
 801171c:	4318      	orrgt	r0, r3
 801171e:	f7ee fef1 	bl	8000504 <__aeabi_ui2d>
 8011722:	2301      	movs	r3, #1
 8011724:	4606      	mov	r6, r0
 8011726:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801172a:	3d01      	subs	r5, #1
 801172c:	930e      	str	r3, [sp, #56]	; 0x38
 801172e:	e76a      	b.n	8011606 <_dtoa_r+0x116>
 8011730:	2301      	movs	r3, #1
 8011732:	e7b2      	b.n	801169a <_dtoa_r+0x1aa>
 8011734:	900b      	str	r0, [sp, #44]	; 0x2c
 8011736:	e7b1      	b.n	801169c <_dtoa_r+0x1ac>
 8011738:	9b04      	ldr	r3, [sp, #16]
 801173a:	9a00      	ldr	r2, [sp, #0]
 801173c:	1a9b      	subs	r3, r3, r2
 801173e:	9304      	str	r3, [sp, #16]
 8011740:	4253      	negs	r3, r2
 8011742:	9307      	str	r3, [sp, #28]
 8011744:	2300      	movs	r3, #0
 8011746:	930a      	str	r3, [sp, #40]	; 0x28
 8011748:	e7bf      	b.n	80116ca <_dtoa_r+0x1da>
 801174a:	2300      	movs	r3, #0
 801174c:	9308      	str	r3, [sp, #32]
 801174e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011750:	2b00      	cmp	r3, #0
 8011752:	dc55      	bgt.n	8011800 <_dtoa_r+0x310>
 8011754:	2301      	movs	r3, #1
 8011756:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801175a:	461a      	mov	r2, r3
 801175c:	9209      	str	r2, [sp, #36]	; 0x24
 801175e:	e00c      	b.n	801177a <_dtoa_r+0x28a>
 8011760:	2301      	movs	r3, #1
 8011762:	e7f3      	b.n	801174c <_dtoa_r+0x25c>
 8011764:	2300      	movs	r3, #0
 8011766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011768:	9308      	str	r3, [sp, #32]
 801176a:	9b00      	ldr	r3, [sp, #0]
 801176c:	4413      	add	r3, r2
 801176e:	9302      	str	r3, [sp, #8]
 8011770:	3301      	adds	r3, #1
 8011772:	2b01      	cmp	r3, #1
 8011774:	9303      	str	r3, [sp, #12]
 8011776:	bfb8      	it	lt
 8011778:	2301      	movlt	r3, #1
 801177a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801177c:	2200      	movs	r2, #0
 801177e:	6042      	str	r2, [r0, #4]
 8011780:	2204      	movs	r2, #4
 8011782:	f102 0614 	add.w	r6, r2, #20
 8011786:	429e      	cmp	r6, r3
 8011788:	6841      	ldr	r1, [r0, #4]
 801178a:	d93d      	bls.n	8011808 <_dtoa_r+0x318>
 801178c:	4620      	mov	r0, r4
 801178e:	f000 fdb1 	bl	80122f4 <_Balloc>
 8011792:	9001      	str	r0, [sp, #4]
 8011794:	2800      	cmp	r0, #0
 8011796:	d13b      	bne.n	8011810 <_dtoa_r+0x320>
 8011798:	4b11      	ldr	r3, [pc, #68]	; (80117e0 <_dtoa_r+0x2f0>)
 801179a:	4602      	mov	r2, r0
 801179c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80117a0:	e6c0      	b.n	8011524 <_dtoa_r+0x34>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e7df      	b.n	8011766 <_dtoa_r+0x276>
 80117a6:	bf00      	nop
 80117a8:	636f4361 	.word	0x636f4361
 80117ac:	3fd287a7 	.word	0x3fd287a7
 80117b0:	8b60c8b3 	.word	0x8b60c8b3
 80117b4:	3fc68a28 	.word	0x3fc68a28
 80117b8:	509f79fb 	.word	0x509f79fb
 80117bc:	3fd34413 	.word	0x3fd34413
 80117c0:	0801378d 	.word	0x0801378d
 80117c4:	080137a4 	.word	0x080137a4
 80117c8:	7ff00000 	.word	0x7ff00000
 80117cc:	08013789 	.word	0x08013789
 80117d0:	08013780 	.word	0x08013780
 80117d4:	0801375d 	.word	0x0801375d
 80117d8:	3ff80000 	.word	0x3ff80000
 80117dc:	080138f8 	.word	0x080138f8
 80117e0:	080137ff 	.word	0x080137ff
 80117e4:	2501      	movs	r5, #1
 80117e6:	2300      	movs	r3, #0
 80117e8:	9306      	str	r3, [sp, #24]
 80117ea:	9508      	str	r5, [sp, #32]
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295
 80117f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117f4:	2200      	movs	r2, #0
 80117f6:	2312      	movs	r3, #18
 80117f8:	e7b0      	b.n	801175c <_dtoa_r+0x26c>
 80117fa:	2301      	movs	r3, #1
 80117fc:	9308      	str	r3, [sp, #32]
 80117fe:	e7f5      	b.n	80117ec <_dtoa_r+0x2fc>
 8011800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011802:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011806:	e7b8      	b.n	801177a <_dtoa_r+0x28a>
 8011808:	3101      	adds	r1, #1
 801180a:	6041      	str	r1, [r0, #4]
 801180c:	0052      	lsls	r2, r2, #1
 801180e:	e7b8      	b.n	8011782 <_dtoa_r+0x292>
 8011810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011812:	9a01      	ldr	r2, [sp, #4]
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	2b0e      	cmp	r3, #14
 801181a:	f200 809d 	bhi.w	8011958 <_dtoa_r+0x468>
 801181e:	2d00      	cmp	r5, #0
 8011820:	f000 809a 	beq.w	8011958 <_dtoa_r+0x468>
 8011824:	9b00      	ldr	r3, [sp, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	dd32      	ble.n	8011890 <_dtoa_r+0x3a0>
 801182a:	4ab7      	ldr	r2, [pc, #732]	; (8011b08 <_dtoa_r+0x618>)
 801182c:	f003 030f 	and.w	r3, r3, #15
 8011830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011834:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011838:	9b00      	ldr	r3, [sp, #0]
 801183a:	05d8      	lsls	r0, r3, #23
 801183c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011840:	d516      	bpl.n	8011870 <_dtoa_r+0x380>
 8011842:	4bb2      	ldr	r3, [pc, #712]	; (8011b0c <_dtoa_r+0x61c>)
 8011844:	ec51 0b19 	vmov	r0, r1, d9
 8011848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801184c:	f7ee fffe 	bl	800084c <__aeabi_ddiv>
 8011850:	f007 070f 	and.w	r7, r7, #15
 8011854:	4682      	mov	sl, r0
 8011856:	468b      	mov	fp, r1
 8011858:	2503      	movs	r5, #3
 801185a:	4eac      	ldr	r6, [pc, #688]	; (8011b0c <_dtoa_r+0x61c>)
 801185c:	b957      	cbnz	r7, 8011874 <_dtoa_r+0x384>
 801185e:	4642      	mov	r2, r8
 8011860:	464b      	mov	r3, r9
 8011862:	4650      	mov	r0, sl
 8011864:	4659      	mov	r1, fp
 8011866:	f7ee fff1 	bl	800084c <__aeabi_ddiv>
 801186a:	4682      	mov	sl, r0
 801186c:	468b      	mov	fp, r1
 801186e:	e028      	b.n	80118c2 <_dtoa_r+0x3d2>
 8011870:	2502      	movs	r5, #2
 8011872:	e7f2      	b.n	801185a <_dtoa_r+0x36a>
 8011874:	07f9      	lsls	r1, r7, #31
 8011876:	d508      	bpl.n	801188a <_dtoa_r+0x39a>
 8011878:	4640      	mov	r0, r8
 801187a:	4649      	mov	r1, r9
 801187c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011880:	f7ee feba 	bl	80005f8 <__aeabi_dmul>
 8011884:	3501      	adds	r5, #1
 8011886:	4680      	mov	r8, r0
 8011888:	4689      	mov	r9, r1
 801188a:	107f      	asrs	r7, r7, #1
 801188c:	3608      	adds	r6, #8
 801188e:	e7e5      	b.n	801185c <_dtoa_r+0x36c>
 8011890:	f000 809b 	beq.w	80119ca <_dtoa_r+0x4da>
 8011894:	9b00      	ldr	r3, [sp, #0]
 8011896:	4f9d      	ldr	r7, [pc, #628]	; (8011b0c <_dtoa_r+0x61c>)
 8011898:	425e      	negs	r6, r3
 801189a:	4b9b      	ldr	r3, [pc, #620]	; (8011b08 <_dtoa_r+0x618>)
 801189c:	f006 020f 	and.w	r2, r6, #15
 80118a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	ec51 0b19 	vmov	r0, r1, d9
 80118ac:	f7ee fea4 	bl	80005f8 <__aeabi_dmul>
 80118b0:	1136      	asrs	r6, r6, #4
 80118b2:	4682      	mov	sl, r0
 80118b4:	468b      	mov	fp, r1
 80118b6:	2300      	movs	r3, #0
 80118b8:	2502      	movs	r5, #2
 80118ba:	2e00      	cmp	r6, #0
 80118bc:	d17a      	bne.n	80119b4 <_dtoa_r+0x4c4>
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1d3      	bne.n	801186a <_dtoa_r+0x37a>
 80118c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f000 8082 	beq.w	80119ce <_dtoa_r+0x4de>
 80118ca:	4b91      	ldr	r3, [pc, #580]	; (8011b10 <_dtoa_r+0x620>)
 80118cc:	2200      	movs	r2, #0
 80118ce:	4650      	mov	r0, sl
 80118d0:	4659      	mov	r1, fp
 80118d2:	f7ef f903 	bl	8000adc <__aeabi_dcmplt>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d079      	beq.n	80119ce <_dtoa_r+0x4de>
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d076      	beq.n	80119ce <_dtoa_r+0x4de>
 80118e0:	9b02      	ldr	r3, [sp, #8]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	dd36      	ble.n	8011954 <_dtoa_r+0x464>
 80118e6:	9b00      	ldr	r3, [sp, #0]
 80118e8:	4650      	mov	r0, sl
 80118ea:	4659      	mov	r1, fp
 80118ec:	1e5f      	subs	r7, r3, #1
 80118ee:	2200      	movs	r2, #0
 80118f0:	4b88      	ldr	r3, [pc, #544]	; (8011b14 <_dtoa_r+0x624>)
 80118f2:	f7ee fe81 	bl	80005f8 <__aeabi_dmul>
 80118f6:	9e02      	ldr	r6, [sp, #8]
 80118f8:	4682      	mov	sl, r0
 80118fa:	468b      	mov	fp, r1
 80118fc:	3501      	adds	r5, #1
 80118fe:	4628      	mov	r0, r5
 8011900:	f7ee fe10 	bl	8000524 <__aeabi_i2d>
 8011904:	4652      	mov	r2, sl
 8011906:	465b      	mov	r3, fp
 8011908:	f7ee fe76 	bl	80005f8 <__aeabi_dmul>
 801190c:	4b82      	ldr	r3, [pc, #520]	; (8011b18 <_dtoa_r+0x628>)
 801190e:	2200      	movs	r2, #0
 8011910:	f7ee fcbc 	bl	800028c <__adddf3>
 8011914:	46d0      	mov	r8, sl
 8011916:	46d9      	mov	r9, fp
 8011918:	4682      	mov	sl, r0
 801191a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801191e:	2e00      	cmp	r6, #0
 8011920:	d158      	bne.n	80119d4 <_dtoa_r+0x4e4>
 8011922:	4b7e      	ldr	r3, [pc, #504]	; (8011b1c <_dtoa_r+0x62c>)
 8011924:	2200      	movs	r2, #0
 8011926:	4640      	mov	r0, r8
 8011928:	4649      	mov	r1, r9
 801192a:	f7ee fcad 	bl	8000288 <__aeabi_dsub>
 801192e:	4652      	mov	r2, sl
 8011930:	465b      	mov	r3, fp
 8011932:	4680      	mov	r8, r0
 8011934:	4689      	mov	r9, r1
 8011936:	f7ef f8ef 	bl	8000b18 <__aeabi_dcmpgt>
 801193a:	2800      	cmp	r0, #0
 801193c:	f040 8295 	bne.w	8011e6a <_dtoa_r+0x97a>
 8011940:	4652      	mov	r2, sl
 8011942:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011946:	4640      	mov	r0, r8
 8011948:	4649      	mov	r1, r9
 801194a:	f7ef f8c7 	bl	8000adc <__aeabi_dcmplt>
 801194e:	2800      	cmp	r0, #0
 8011950:	f040 8289 	bne.w	8011e66 <_dtoa_r+0x976>
 8011954:	ec5b ab19 	vmov	sl, fp, d9
 8011958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801195a:	2b00      	cmp	r3, #0
 801195c:	f2c0 8148 	blt.w	8011bf0 <_dtoa_r+0x700>
 8011960:	9a00      	ldr	r2, [sp, #0]
 8011962:	2a0e      	cmp	r2, #14
 8011964:	f300 8144 	bgt.w	8011bf0 <_dtoa_r+0x700>
 8011968:	4b67      	ldr	r3, [pc, #412]	; (8011b08 <_dtoa_r+0x618>)
 801196a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801196e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011974:	2b00      	cmp	r3, #0
 8011976:	f280 80d5 	bge.w	8011b24 <_dtoa_r+0x634>
 801197a:	9b03      	ldr	r3, [sp, #12]
 801197c:	2b00      	cmp	r3, #0
 801197e:	f300 80d1 	bgt.w	8011b24 <_dtoa_r+0x634>
 8011982:	f040 826f 	bne.w	8011e64 <_dtoa_r+0x974>
 8011986:	4b65      	ldr	r3, [pc, #404]	; (8011b1c <_dtoa_r+0x62c>)
 8011988:	2200      	movs	r2, #0
 801198a:	4640      	mov	r0, r8
 801198c:	4649      	mov	r1, r9
 801198e:	f7ee fe33 	bl	80005f8 <__aeabi_dmul>
 8011992:	4652      	mov	r2, sl
 8011994:	465b      	mov	r3, fp
 8011996:	f7ef f8b5 	bl	8000b04 <__aeabi_dcmpge>
 801199a:	9e03      	ldr	r6, [sp, #12]
 801199c:	4637      	mov	r7, r6
 801199e:	2800      	cmp	r0, #0
 80119a0:	f040 8245 	bne.w	8011e2e <_dtoa_r+0x93e>
 80119a4:	9d01      	ldr	r5, [sp, #4]
 80119a6:	2331      	movs	r3, #49	; 0x31
 80119a8:	f805 3b01 	strb.w	r3, [r5], #1
 80119ac:	9b00      	ldr	r3, [sp, #0]
 80119ae:	3301      	adds	r3, #1
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	e240      	b.n	8011e36 <_dtoa_r+0x946>
 80119b4:	07f2      	lsls	r2, r6, #31
 80119b6:	d505      	bpl.n	80119c4 <_dtoa_r+0x4d4>
 80119b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119bc:	f7ee fe1c 	bl	80005f8 <__aeabi_dmul>
 80119c0:	3501      	adds	r5, #1
 80119c2:	2301      	movs	r3, #1
 80119c4:	1076      	asrs	r6, r6, #1
 80119c6:	3708      	adds	r7, #8
 80119c8:	e777      	b.n	80118ba <_dtoa_r+0x3ca>
 80119ca:	2502      	movs	r5, #2
 80119cc:	e779      	b.n	80118c2 <_dtoa_r+0x3d2>
 80119ce:	9f00      	ldr	r7, [sp, #0]
 80119d0:	9e03      	ldr	r6, [sp, #12]
 80119d2:	e794      	b.n	80118fe <_dtoa_r+0x40e>
 80119d4:	9901      	ldr	r1, [sp, #4]
 80119d6:	4b4c      	ldr	r3, [pc, #304]	; (8011b08 <_dtoa_r+0x618>)
 80119d8:	4431      	add	r1, r6
 80119da:	910d      	str	r1, [sp, #52]	; 0x34
 80119dc:	9908      	ldr	r1, [sp, #32]
 80119de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80119e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80119e6:	2900      	cmp	r1, #0
 80119e8:	d043      	beq.n	8011a72 <_dtoa_r+0x582>
 80119ea:	494d      	ldr	r1, [pc, #308]	; (8011b20 <_dtoa_r+0x630>)
 80119ec:	2000      	movs	r0, #0
 80119ee:	f7ee ff2d 	bl	800084c <__aeabi_ddiv>
 80119f2:	4652      	mov	r2, sl
 80119f4:	465b      	mov	r3, fp
 80119f6:	f7ee fc47 	bl	8000288 <__aeabi_dsub>
 80119fa:	9d01      	ldr	r5, [sp, #4]
 80119fc:	4682      	mov	sl, r0
 80119fe:	468b      	mov	fp, r1
 8011a00:	4649      	mov	r1, r9
 8011a02:	4640      	mov	r0, r8
 8011a04:	f7ef f8a8 	bl	8000b58 <__aeabi_d2iz>
 8011a08:	4606      	mov	r6, r0
 8011a0a:	f7ee fd8b 	bl	8000524 <__aeabi_i2d>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	460b      	mov	r3, r1
 8011a12:	4640      	mov	r0, r8
 8011a14:	4649      	mov	r1, r9
 8011a16:	f7ee fc37 	bl	8000288 <__aeabi_dsub>
 8011a1a:	3630      	adds	r6, #48	; 0x30
 8011a1c:	f805 6b01 	strb.w	r6, [r5], #1
 8011a20:	4652      	mov	r2, sl
 8011a22:	465b      	mov	r3, fp
 8011a24:	4680      	mov	r8, r0
 8011a26:	4689      	mov	r9, r1
 8011a28:	f7ef f858 	bl	8000adc <__aeabi_dcmplt>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d163      	bne.n	8011af8 <_dtoa_r+0x608>
 8011a30:	4642      	mov	r2, r8
 8011a32:	464b      	mov	r3, r9
 8011a34:	4936      	ldr	r1, [pc, #216]	; (8011b10 <_dtoa_r+0x620>)
 8011a36:	2000      	movs	r0, #0
 8011a38:	f7ee fc26 	bl	8000288 <__aeabi_dsub>
 8011a3c:	4652      	mov	r2, sl
 8011a3e:	465b      	mov	r3, fp
 8011a40:	f7ef f84c 	bl	8000adc <__aeabi_dcmplt>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	f040 80b5 	bne.w	8011bb4 <_dtoa_r+0x6c4>
 8011a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a4c:	429d      	cmp	r5, r3
 8011a4e:	d081      	beq.n	8011954 <_dtoa_r+0x464>
 8011a50:	4b30      	ldr	r3, [pc, #192]	; (8011b14 <_dtoa_r+0x624>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	4650      	mov	r0, sl
 8011a56:	4659      	mov	r1, fp
 8011a58:	f7ee fdce 	bl	80005f8 <__aeabi_dmul>
 8011a5c:	4b2d      	ldr	r3, [pc, #180]	; (8011b14 <_dtoa_r+0x624>)
 8011a5e:	4682      	mov	sl, r0
 8011a60:	468b      	mov	fp, r1
 8011a62:	4640      	mov	r0, r8
 8011a64:	4649      	mov	r1, r9
 8011a66:	2200      	movs	r2, #0
 8011a68:	f7ee fdc6 	bl	80005f8 <__aeabi_dmul>
 8011a6c:	4680      	mov	r8, r0
 8011a6e:	4689      	mov	r9, r1
 8011a70:	e7c6      	b.n	8011a00 <_dtoa_r+0x510>
 8011a72:	4650      	mov	r0, sl
 8011a74:	4659      	mov	r1, fp
 8011a76:	f7ee fdbf 	bl	80005f8 <__aeabi_dmul>
 8011a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a7c:	9d01      	ldr	r5, [sp, #4]
 8011a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a80:	4682      	mov	sl, r0
 8011a82:	468b      	mov	fp, r1
 8011a84:	4649      	mov	r1, r9
 8011a86:	4640      	mov	r0, r8
 8011a88:	f7ef f866 	bl	8000b58 <__aeabi_d2iz>
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	f7ee fd49 	bl	8000524 <__aeabi_i2d>
 8011a92:	3630      	adds	r6, #48	; 0x30
 8011a94:	4602      	mov	r2, r0
 8011a96:	460b      	mov	r3, r1
 8011a98:	4640      	mov	r0, r8
 8011a9a:	4649      	mov	r1, r9
 8011a9c:	f7ee fbf4 	bl	8000288 <__aeabi_dsub>
 8011aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8011aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa6:	429d      	cmp	r5, r3
 8011aa8:	4680      	mov	r8, r0
 8011aaa:	4689      	mov	r9, r1
 8011aac:	f04f 0200 	mov.w	r2, #0
 8011ab0:	d124      	bne.n	8011afc <_dtoa_r+0x60c>
 8011ab2:	4b1b      	ldr	r3, [pc, #108]	; (8011b20 <_dtoa_r+0x630>)
 8011ab4:	4650      	mov	r0, sl
 8011ab6:	4659      	mov	r1, fp
 8011ab8:	f7ee fbe8 	bl	800028c <__adddf3>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4640      	mov	r0, r8
 8011ac2:	4649      	mov	r1, r9
 8011ac4:	f7ef f828 	bl	8000b18 <__aeabi_dcmpgt>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d173      	bne.n	8011bb4 <_dtoa_r+0x6c4>
 8011acc:	4652      	mov	r2, sl
 8011ace:	465b      	mov	r3, fp
 8011ad0:	4913      	ldr	r1, [pc, #76]	; (8011b20 <_dtoa_r+0x630>)
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	f7ee fbd8 	bl	8000288 <__aeabi_dsub>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	460b      	mov	r3, r1
 8011adc:	4640      	mov	r0, r8
 8011ade:	4649      	mov	r1, r9
 8011ae0:	f7ee fffc 	bl	8000adc <__aeabi_dcmplt>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	f43f af35 	beq.w	8011954 <_dtoa_r+0x464>
 8011aea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011aec:	1e6b      	subs	r3, r5, #1
 8011aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8011af0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011af4:	2b30      	cmp	r3, #48	; 0x30
 8011af6:	d0f8      	beq.n	8011aea <_dtoa_r+0x5fa>
 8011af8:	9700      	str	r7, [sp, #0]
 8011afa:	e049      	b.n	8011b90 <_dtoa_r+0x6a0>
 8011afc:	4b05      	ldr	r3, [pc, #20]	; (8011b14 <_dtoa_r+0x624>)
 8011afe:	f7ee fd7b 	bl	80005f8 <__aeabi_dmul>
 8011b02:	4680      	mov	r8, r0
 8011b04:	4689      	mov	r9, r1
 8011b06:	e7bd      	b.n	8011a84 <_dtoa_r+0x594>
 8011b08:	080138f8 	.word	0x080138f8
 8011b0c:	080138d0 	.word	0x080138d0
 8011b10:	3ff00000 	.word	0x3ff00000
 8011b14:	40240000 	.word	0x40240000
 8011b18:	401c0000 	.word	0x401c0000
 8011b1c:	40140000 	.word	0x40140000
 8011b20:	3fe00000 	.word	0x3fe00000
 8011b24:	9d01      	ldr	r5, [sp, #4]
 8011b26:	4656      	mov	r6, sl
 8011b28:	465f      	mov	r7, fp
 8011b2a:	4642      	mov	r2, r8
 8011b2c:	464b      	mov	r3, r9
 8011b2e:	4630      	mov	r0, r6
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee fe8b 	bl	800084c <__aeabi_ddiv>
 8011b36:	f7ef f80f 	bl	8000b58 <__aeabi_d2iz>
 8011b3a:	4682      	mov	sl, r0
 8011b3c:	f7ee fcf2 	bl	8000524 <__aeabi_i2d>
 8011b40:	4642      	mov	r2, r8
 8011b42:	464b      	mov	r3, r9
 8011b44:	f7ee fd58 	bl	80005f8 <__aeabi_dmul>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	4639      	mov	r1, r7
 8011b50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011b54:	f7ee fb98 	bl	8000288 <__aeabi_dsub>
 8011b58:	f805 6b01 	strb.w	r6, [r5], #1
 8011b5c:	9e01      	ldr	r6, [sp, #4]
 8011b5e:	9f03      	ldr	r7, [sp, #12]
 8011b60:	1bae      	subs	r6, r5, r6
 8011b62:	42b7      	cmp	r7, r6
 8011b64:	4602      	mov	r2, r0
 8011b66:	460b      	mov	r3, r1
 8011b68:	d135      	bne.n	8011bd6 <_dtoa_r+0x6e6>
 8011b6a:	f7ee fb8f 	bl	800028c <__adddf3>
 8011b6e:	4642      	mov	r2, r8
 8011b70:	464b      	mov	r3, r9
 8011b72:	4606      	mov	r6, r0
 8011b74:	460f      	mov	r7, r1
 8011b76:	f7ee ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 8011b7a:	b9d0      	cbnz	r0, 8011bb2 <_dtoa_r+0x6c2>
 8011b7c:	4642      	mov	r2, r8
 8011b7e:	464b      	mov	r3, r9
 8011b80:	4630      	mov	r0, r6
 8011b82:	4639      	mov	r1, r7
 8011b84:	f7ee ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b88:	b110      	cbz	r0, 8011b90 <_dtoa_r+0x6a0>
 8011b8a:	f01a 0f01 	tst.w	sl, #1
 8011b8e:	d110      	bne.n	8011bb2 <_dtoa_r+0x6c2>
 8011b90:	4620      	mov	r0, r4
 8011b92:	ee18 1a10 	vmov	r1, s16
 8011b96:	f000 fbed 	bl	8012374 <_Bfree>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	9800      	ldr	r0, [sp, #0]
 8011b9e:	702b      	strb	r3, [r5, #0]
 8011ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	6018      	str	r0, [r3, #0]
 8011ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f43f acf1 	beq.w	8011590 <_dtoa_r+0xa0>
 8011bae:	601d      	str	r5, [r3, #0]
 8011bb0:	e4ee      	b.n	8011590 <_dtoa_r+0xa0>
 8011bb2:	9f00      	ldr	r7, [sp, #0]
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	461d      	mov	r5, r3
 8011bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bbc:	2a39      	cmp	r2, #57	; 0x39
 8011bbe:	d106      	bne.n	8011bce <_dtoa_r+0x6de>
 8011bc0:	9a01      	ldr	r2, [sp, #4]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d1f7      	bne.n	8011bb6 <_dtoa_r+0x6c6>
 8011bc6:	9901      	ldr	r1, [sp, #4]
 8011bc8:	2230      	movs	r2, #48	; 0x30
 8011bca:	3701      	adds	r7, #1
 8011bcc:	700a      	strb	r2, [r1, #0]
 8011bce:	781a      	ldrb	r2, [r3, #0]
 8011bd0:	3201      	adds	r2, #1
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	e790      	b.n	8011af8 <_dtoa_r+0x608>
 8011bd6:	4ba6      	ldr	r3, [pc, #664]	; (8011e70 <_dtoa_r+0x980>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f7ee fd0d 	bl	80005f8 <__aeabi_dmul>
 8011bde:	2200      	movs	r2, #0
 8011be0:	2300      	movs	r3, #0
 8011be2:	4606      	mov	r6, r0
 8011be4:	460f      	mov	r7, r1
 8011be6:	f7ee ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	d09d      	beq.n	8011b2a <_dtoa_r+0x63a>
 8011bee:	e7cf      	b.n	8011b90 <_dtoa_r+0x6a0>
 8011bf0:	9a08      	ldr	r2, [sp, #32]
 8011bf2:	2a00      	cmp	r2, #0
 8011bf4:	f000 80d7 	beq.w	8011da6 <_dtoa_r+0x8b6>
 8011bf8:	9a06      	ldr	r2, [sp, #24]
 8011bfa:	2a01      	cmp	r2, #1
 8011bfc:	f300 80ba 	bgt.w	8011d74 <_dtoa_r+0x884>
 8011c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c02:	2a00      	cmp	r2, #0
 8011c04:	f000 80b2 	beq.w	8011d6c <_dtoa_r+0x87c>
 8011c08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c0c:	9e07      	ldr	r6, [sp, #28]
 8011c0e:	9d04      	ldr	r5, [sp, #16]
 8011c10:	9a04      	ldr	r2, [sp, #16]
 8011c12:	441a      	add	r2, r3
 8011c14:	9204      	str	r2, [sp, #16]
 8011c16:	9a05      	ldr	r2, [sp, #20]
 8011c18:	2101      	movs	r1, #1
 8011c1a:	441a      	add	r2, r3
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	9205      	str	r2, [sp, #20]
 8011c20:	f000 fc60 	bl	80124e4 <__i2b>
 8011c24:	4607      	mov	r7, r0
 8011c26:	2d00      	cmp	r5, #0
 8011c28:	dd0c      	ble.n	8011c44 <_dtoa_r+0x754>
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	dd09      	ble.n	8011c44 <_dtoa_r+0x754>
 8011c30:	42ab      	cmp	r3, r5
 8011c32:	9a04      	ldr	r2, [sp, #16]
 8011c34:	bfa8      	it	ge
 8011c36:	462b      	movge	r3, r5
 8011c38:	1ad2      	subs	r2, r2, r3
 8011c3a:	9204      	str	r2, [sp, #16]
 8011c3c:	9a05      	ldr	r2, [sp, #20]
 8011c3e:	1aed      	subs	r5, r5, r3
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	9b07      	ldr	r3, [sp, #28]
 8011c46:	b31b      	cbz	r3, 8011c90 <_dtoa_r+0x7a0>
 8011c48:	9b08      	ldr	r3, [sp, #32]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 80af 	beq.w	8011dae <_dtoa_r+0x8be>
 8011c50:	2e00      	cmp	r6, #0
 8011c52:	dd13      	ble.n	8011c7c <_dtoa_r+0x78c>
 8011c54:	4639      	mov	r1, r7
 8011c56:	4632      	mov	r2, r6
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f000 fd03 	bl	8012664 <__pow5mult>
 8011c5e:	ee18 2a10 	vmov	r2, s16
 8011c62:	4601      	mov	r1, r0
 8011c64:	4607      	mov	r7, r0
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 fc52 	bl	8012510 <__multiply>
 8011c6c:	ee18 1a10 	vmov	r1, s16
 8011c70:	4680      	mov	r8, r0
 8011c72:	4620      	mov	r0, r4
 8011c74:	f000 fb7e 	bl	8012374 <_Bfree>
 8011c78:	ee08 8a10 	vmov	s16, r8
 8011c7c:	9b07      	ldr	r3, [sp, #28]
 8011c7e:	1b9a      	subs	r2, r3, r6
 8011c80:	d006      	beq.n	8011c90 <_dtoa_r+0x7a0>
 8011c82:	ee18 1a10 	vmov	r1, s16
 8011c86:	4620      	mov	r0, r4
 8011c88:	f000 fcec 	bl	8012664 <__pow5mult>
 8011c8c:	ee08 0a10 	vmov	s16, r0
 8011c90:	2101      	movs	r1, #1
 8011c92:	4620      	mov	r0, r4
 8011c94:	f000 fc26 	bl	80124e4 <__i2b>
 8011c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	f340 8088 	ble.w	8011db2 <_dtoa_r+0x8c2>
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4601      	mov	r1, r0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 fcdc 	bl	8012664 <__pow5mult>
 8011cac:	9b06      	ldr	r3, [sp, #24]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	f340 8081 	ble.w	8011db8 <_dtoa_r+0x8c8>
 8011cb6:	f04f 0800 	mov.w	r8, #0
 8011cba:	6933      	ldr	r3, [r6, #16]
 8011cbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011cc0:	6918      	ldr	r0, [r3, #16]
 8011cc2:	f000 fbbf 	bl	8012444 <__hi0bits>
 8011cc6:	f1c0 0020 	rsb	r0, r0, #32
 8011cca:	9b05      	ldr	r3, [sp, #20]
 8011ccc:	4418      	add	r0, r3
 8011cce:	f010 001f 	ands.w	r0, r0, #31
 8011cd2:	f000 8092 	beq.w	8011dfa <_dtoa_r+0x90a>
 8011cd6:	f1c0 0320 	rsb	r3, r0, #32
 8011cda:	2b04      	cmp	r3, #4
 8011cdc:	f340 808a 	ble.w	8011df4 <_dtoa_r+0x904>
 8011ce0:	f1c0 001c 	rsb	r0, r0, #28
 8011ce4:	9b04      	ldr	r3, [sp, #16]
 8011ce6:	4403      	add	r3, r0
 8011ce8:	9304      	str	r3, [sp, #16]
 8011cea:	9b05      	ldr	r3, [sp, #20]
 8011cec:	4403      	add	r3, r0
 8011cee:	4405      	add	r5, r0
 8011cf0:	9305      	str	r3, [sp, #20]
 8011cf2:	9b04      	ldr	r3, [sp, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	dd07      	ble.n	8011d08 <_dtoa_r+0x818>
 8011cf8:	ee18 1a10 	vmov	r1, s16
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f000 fd0a 	bl	8012718 <__lshift>
 8011d04:	ee08 0a10 	vmov	s16, r0
 8011d08:	9b05      	ldr	r3, [sp, #20]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	dd05      	ble.n	8011d1a <_dtoa_r+0x82a>
 8011d0e:	4631      	mov	r1, r6
 8011d10:	461a      	mov	r2, r3
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 fd00 	bl	8012718 <__lshift>
 8011d18:	4606      	mov	r6, r0
 8011d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d06e      	beq.n	8011dfe <_dtoa_r+0x90e>
 8011d20:	ee18 0a10 	vmov	r0, s16
 8011d24:	4631      	mov	r1, r6
 8011d26:	f000 fd67 	bl	80127f8 <__mcmp>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	da67      	bge.n	8011dfe <_dtoa_r+0x90e>
 8011d2e:	9b00      	ldr	r3, [sp, #0]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	ee18 1a10 	vmov	r1, s16
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	220a      	movs	r2, #10
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f000 fb3b 	bl	80123b8 <__multadd>
 8011d42:	9b08      	ldr	r3, [sp, #32]
 8011d44:	ee08 0a10 	vmov	s16, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f000 81b1 	beq.w	80120b0 <_dtoa_r+0xbc0>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	4639      	mov	r1, r7
 8011d52:	220a      	movs	r2, #10
 8011d54:	4620      	mov	r0, r4
 8011d56:	f000 fb2f 	bl	80123b8 <__multadd>
 8011d5a:	9b02      	ldr	r3, [sp, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	4607      	mov	r7, r0
 8011d60:	f300 808e 	bgt.w	8011e80 <_dtoa_r+0x990>
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	dc51      	bgt.n	8011e0e <_dtoa_r+0x91e>
 8011d6a:	e089      	b.n	8011e80 <_dtoa_r+0x990>
 8011d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d72:	e74b      	b.n	8011c0c <_dtoa_r+0x71c>
 8011d74:	9b03      	ldr	r3, [sp, #12]
 8011d76:	1e5e      	subs	r6, r3, #1
 8011d78:	9b07      	ldr	r3, [sp, #28]
 8011d7a:	42b3      	cmp	r3, r6
 8011d7c:	bfbf      	itttt	lt
 8011d7e:	9b07      	ldrlt	r3, [sp, #28]
 8011d80:	9607      	strlt	r6, [sp, #28]
 8011d82:	1af2      	sublt	r2, r6, r3
 8011d84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011d86:	bfb6      	itet	lt
 8011d88:	189b      	addlt	r3, r3, r2
 8011d8a:	1b9e      	subge	r6, r3, r6
 8011d8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011d8e:	9b03      	ldr	r3, [sp, #12]
 8011d90:	bfb8      	it	lt
 8011d92:	2600      	movlt	r6, #0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	bfb7      	itett	lt
 8011d98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011d9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011da0:	1a9d      	sublt	r5, r3, r2
 8011da2:	2300      	movlt	r3, #0
 8011da4:	e734      	b.n	8011c10 <_dtoa_r+0x720>
 8011da6:	9e07      	ldr	r6, [sp, #28]
 8011da8:	9d04      	ldr	r5, [sp, #16]
 8011daa:	9f08      	ldr	r7, [sp, #32]
 8011dac:	e73b      	b.n	8011c26 <_dtoa_r+0x736>
 8011dae:	9a07      	ldr	r2, [sp, #28]
 8011db0:	e767      	b.n	8011c82 <_dtoa_r+0x792>
 8011db2:	9b06      	ldr	r3, [sp, #24]
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	dc18      	bgt.n	8011dea <_dtoa_r+0x8fa>
 8011db8:	f1ba 0f00 	cmp.w	sl, #0
 8011dbc:	d115      	bne.n	8011dea <_dtoa_r+0x8fa>
 8011dbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011dc2:	b993      	cbnz	r3, 8011dea <_dtoa_r+0x8fa>
 8011dc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011dc8:	0d1b      	lsrs	r3, r3, #20
 8011dca:	051b      	lsls	r3, r3, #20
 8011dcc:	b183      	cbz	r3, 8011df0 <_dtoa_r+0x900>
 8011dce:	9b04      	ldr	r3, [sp, #16]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	9304      	str	r3, [sp, #16]
 8011dd4:	9b05      	ldr	r3, [sp, #20]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	9305      	str	r3, [sp, #20]
 8011dda:	f04f 0801 	mov.w	r8, #1
 8011dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f47f af6a 	bne.w	8011cba <_dtoa_r+0x7ca>
 8011de6:	2001      	movs	r0, #1
 8011de8:	e76f      	b.n	8011cca <_dtoa_r+0x7da>
 8011dea:	f04f 0800 	mov.w	r8, #0
 8011dee:	e7f6      	b.n	8011dde <_dtoa_r+0x8ee>
 8011df0:	4698      	mov	r8, r3
 8011df2:	e7f4      	b.n	8011dde <_dtoa_r+0x8ee>
 8011df4:	f43f af7d 	beq.w	8011cf2 <_dtoa_r+0x802>
 8011df8:	4618      	mov	r0, r3
 8011dfa:	301c      	adds	r0, #28
 8011dfc:	e772      	b.n	8011ce4 <_dtoa_r+0x7f4>
 8011dfe:	9b03      	ldr	r3, [sp, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	dc37      	bgt.n	8011e74 <_dtoa_r+0x984>
 8011e04:	9b06      	ldr	r3, [sp, #24]
 8011e06:	2b02      	cmp	r3, #2
 8011e08:	dd34      	ble.n	8011e74 <_dtoa_r+0x984>
 8011e0a:	9b03      	ldr	r3, [sp, #12]
 8011e0c:	9302      	str	r3, [sp, #8]
 8011e0e:	9b02      	ldr	r3, [sp, #8]
 8011e10:	b96b      	cbnz	r3, 8011e2e <_dtoa_r+0x93e>
 8011e12:	4631      	mov	r1, r6
 8011e14:	2205      	movs	r2, #5
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 face 	bl	80123b8 <__multadd>
 8011e1c:	4601      	mov	r1, r0
 8011e1e:	4606      	mov	r6, r0
 8011e20:	ee18 0a10 	vmov	r0, s16
 8011e24:	f000 fce8 	bl	80127f8 <__mcmp>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	f73f adbb 	bgt.w	80119a4 <_dtoa_r+0x4b4>
 8011e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e30:	9d01      	ldr	r5, [sp, #4]
 8011e32:	43db      	mvns	r3, r3
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	f04f 0800 	mov.w	r8, #0
 8011e3a:	4631      	mov	r1, r6
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f000 fa99 	bl	8012374 <_Bfree>
 8011e42:	2f00      	cmp	r7, #0
 8011e44:	f43f aea4 	beq.w	8011b90 <_dtoa_r+0x6a0>
 8011e48:	f1b8 0f00 	cmp.w	r8, #0
 8011e4c:	d005      	beq.n	8011e5a <_dtoa_r+0x96a>
 8011e4e:	45b8      	cmp	r8, r7
 8011e50:	d003      	beq.n	8011e5a <_dtoa_r+0x96a>
 8011e52:	4641      	mov	r1, r8
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 fa8d 	bl	8012374 <_Bfree>
 8011e5a:	4639      	mov	r1, r7
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 fa89 	bl	8012374 <_Bfree>
 8011e62:	e695      	b.n	8011b90 <_dtoa_r+0x6a0>
 8011e64:	2600      	movs	r6, #0
 8011e66:	4637      	mov	r7, r6
 8011e68:	e7e1      	b.n	8011e2e <_dtoa_r+0x93e>
 8011e6a:	9700      	str	r7, [sp, #0]
 8011e6c:	4637      	mov	r7, r6
 8011e6e:	e599      	b.n	80119a4 <_dtoa_r+0x4b4>
 8011e70:	40240000 	.word	0x40240000
 8011e74:	9b08      	ldr	r3, [sp, #32]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f000 80ca 	beq.w	8012010 <_dtoa_r+0xb20>
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	9302      	str	r3, [sp, #8]
 8011e80:	2d00      	cmp	r5, #0
 8011e82:	dd05      	ble.n	8011e90 <_dtoa_r+0x9a0>
 8011e84:	4639      	mov	r1, r7
 8011e86:	462a      	mov	r2, r5
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f000 fc45 	bl	8012718 <__lshift>
 8011e8e:	4607      	mov	r7, r0
 8011e90:	f1b8 0f00 	cmp.w	r8, #0
 8011e94:	d05b      	beq.n	8011f4e <_dtoa_r+0xa5e>
 8011e96:	6879      	ldr	r1, [r7, #4]
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f000 fa2b 	bl	80122f4 <_Balloc>
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	b928      	cbnz	r0, 8011eae <_dtoa_r+0x9be>
 8011ea2:	4b87      	ldr	r3, [pc, #540]	; (80120c0 <_dtoa_r+0xbd0>)
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011eaa:	f7ff bb3b 	b.w	8011524 <_dtoa_r+0x34>
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	3202      	adds	r2, #2
 8011eb2:	0092      	lsls	r2, r2, #2
 8011eb4:	f107 010c 	add.w	r1, r7, #12
 8011eb8:	300c      	adds	r0, #12
 8011eba:	f000 fa0d 	bl	80122d8 <memcpy>
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f000 fc28 	bl	8012718 <__lshift>
 8011ec8:	9b01      	ldr	r3, [sp, #4]
 8011eca:	f103 0901 	add.w	r9, r3, #1
 8011ece:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	9305      	str	r3, [sp, #20]
 8011ed6:	f00a 0301 	and.w	r3, sl, #1
 8011eda:	46b8      	mov	r8, r7
 8011edc:	9304      	str	r3, [sp, #16]
 8011ede:	4607      	mov	r7, r0
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	ee18 0a10 	vmov	r0, s16
 8011ee6:	f7ff fa77 	bl	80113d8 <quorem>
 8011eea:	4641      	mov	r1, r8
 8011eec:	9002      	str	r0, [sp, #8]
 8011eee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011ef2:	ee18 0a10 	vmov	r0, s16
 8011ef6:	f000 fc7f 	bl	80127f8 <__mcmp>
 8011efa:	463a      	mov	r2, r7
 8011efc:	9003      	str	r0, [sp, #12]
 8011efe:	4631      	mov	r1, r6
 8011f00:	4620      	mov	r0, r4
 8011f02:	f000 fc95 	bl	8012830 <__mdiff>
 8011f06:	68c2      	ldr	r2, [r0, #12]
 8011f08:	f109 3bff 	add.w	fp, r9, #4294967295
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	bb02      	cbnz	r2, 8011f52 <_dtoa_r+0xa62>
 8011f10:	4601      	mov	r1, r0
 8011f12:	ee18 0a10 	vmov	r0, s16
 8011f16:	f000 fc6f 	bl	80127f8 <__mcmp>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	4620      	mov	r0, r4
 8011f20:	9207      	str	r2, [sp, #28]
 8011f22:	f000 fa27 	bl	8012374 <_Bfree>
 8011f26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f2a:	ea43 0102 	orr.w	r1, r3, r2
 8011f2e:	9b04      	ldr	r3, [sp, #16]
 8011f30:	430b      	orrs	r3, r1
 8011f32:	464d      	mov	r5, r9
 8011f34:	d10f      	bne.n	8011f56 <_dtoa_r+0xa66>
 8011f36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f3a:	d02a      	beq.n	8011f92 <_dtoa_r+0xaa2>
 8011f3c:	9b03      	ldr	r3, [sp, #12]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dd02      	ble.n	8011f48 <_dtoa_r+0xa58>
 8011f42:	9b02      	ldr	r3, [sp, #8]
 8011f44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011f48:	f88b a000 	strb.w	sl, [fp]
 8011f4c:	e775      	b.n	8011e3a <_dtoa_r+0x94a>
 8011f4e:	4638      	mov	r0, r7
 8011f50:	e7ba      	b.n	8011ec8 <_dtoa_r+0x9d8>
 8011f52:	2201      	movs	r2, #1
 8011f54:	e7e2      	b.n	8011f1c <_dtoa_r+0xa2c>
 8011f56:	9b03      	ldr	r3, [sp, #12]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	db04      	blt.n	8011f66 <_dtoa_r+0xa76>
 8011f5c:	9906      	ldr	r1, [sp, #24]
 8011f5e:	430b      	orrs	r3, r1
 8011f60:	9904      	ldr	r1, [sp, #16]
 8011f62:	430b      	orrs	r3, r1
 8011f64:	d122      	bne.n	8011fac <_dtoa_r+0xabc>
 8011f66:	2a00      	cmp	r2, #0
 8011f68:	ddee      	ble.n	8011f48 <_dtoa_r+0xa58>
 8011f6a:	ee18 1a10 	vmov	r1, s16
 8011f6e:	2201      	movs	r2, #1
 8011f70:	4620      	mov	r0, r4
 8011f72:	f000 fbd1 	bl	8012718 <__lshift>
 8011f76:	4631      	mov	r1, r6
 8011f78:	ee08 0a10 	vmov	s16, r0
 8011f7c:	f000 fc3c 	bl	80127f8 <__mcmp>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	dc03      	bgt.n	8011f8c <_dtoa_r+0xa9c>
 8011f84:	d1e0      	bne.n	8011f48 <_dtoa_r+0xa58>
 8011f86:	f01a 0f01 	tst.w	sl, #1
 8011f8a:	d0dd      	beq.n	8011f48 <_dtoa_r+0xa58>
 8011f8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f90:	d1d7      	bne.n	8011f42 <_dtoa_r+0xa52>
 8011f92:	2339      	movs	r3, #57	; 0x39
 8011f94:	f88b 3000 	strb.w	r3, [fp]
 8011f98:	462b      	mov	r3, r5
 8011f9a:	461d      	mov	r5, r3
 8011f9c:	3b01      	subs	r3, #1
 8011f9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011fa2:	2a39      	cmp	r2, #57	; 0x39
 8011fa4:	d071      	beq.n	801208a <_dtoa_r+0xb9a>
 8011fa6:	3201      	adds	r2, #1
 8011fa8:	701a      	strb	r2, [r3, #0]
 8011faa:	e746      	b.n	8011e3a <_dtoa_r+0x94a>
 8011fac:	2a00      	cmp	r2, #0
 8011fae:	dd07      	ble.n	8011fc0 <_dtoa_r+0xad0>
 8011fb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011fb4:	d0ed      	beq.n	8011f92 <_dtoa_r+0xaa2>
 8011fb6:	f10a 0301 	add.w	r3, sl, #1
 8011fba:	f88b 3000 	strb.w	r3, [fp]
 8011fbe:	e73c      	b.n	8011e3a <_dtoa_r+0x94a>
 8011fc0:	9b05      	ldr	r3, [sp, #20]
 8011fc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011fc6:	4599      	cmp	r9, r3
 8011fc8:	d047      	beq.n	801205a <_dtoa_r+0xb6a>
 8011fca:	ee18 1a10 	vmov	r1, s16
 8011fce:	2300      	movs	r3, #0
 8011fd0:	220a      	movs	r2, #10
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f000 f9f0 	bl	80123b8 <__multadd>
 8011fd8:	45b8      	cmp	r8, r7
 8011fda:	ee08 0a10 	vmov	s16, r0
 8011fde:	f04f 0300 	mov.w	r3, #0
 8011fe2:	f04f 020a 	mov.w	r2, #10
 8011fe6:	4641      	mov	r1, r8
 8011fe8:	4620      	mov	r0, r4
 8011fea:	d106      	bne.n	8011ffa <_dtoa_r+0xb0a>
 8011fec:	f000 f9e4 	bl	80123b8 <__multadd>
 8011ff0:	4680      	mov	r8, r0
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	f109 0901 	add.w	r9, r9, #1
 8011ff8:	e772      	b.n	8011ee0 <_dtoa_r+0x9f0>
 8011ffa:	f000 f9dd 	bl	80123b8 <__multadd>
 8011ffe:	4639      	mov	r1, r7
 8012000:	4680      	mov	r8, r0
 8012002:	2300      	movs	r3, #0
 8012004:	220a      	movs	r2, #10
 8012006:	4620      	mov	r0, r4
 8012008:	f000 f9d6 	bl	80123b8 <__multadd>
 801200c:	4607      	mov	r7, r0
 801200e:	e7f1      	b.n	8011ff4 <_dtoa_r+0xb04>
 8012010:	9b03      	ldr	r3, [sp, #12]
 8012012:	9302      	str	r3, [sp, #8]
 8012014:	9d01      	ldr	r5, [sp, #4]
 8012016:	ee18 0a10 	vmov	r0, s16
 801201a:	4631      	mov	r1, r6
 801201c:	f7ff f9dc 	bl	80113d8 <quorem>
 8012020:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012024:	9b01      	ldr	r3, [sp, #4]
 8012026:	f805 ab01 	strb.w	sl, [r5], #1
 801202a:	1aea      	subs	r2, r5, r3
 801202c:	9b02      	ldr	r3, [sp, #8]
 801202e:	4293      	cmp	r3, r2
 8012030:	dd09      	ble.n	8012046 <_dtoa_r+0xb56>
 8012032:	ee18 1a10 	vmov	r1, s16
 8012036:	2300      	movs	r3, #0
 8012038:	220a      	movs	r2, #10
 801203a:	4620      	mov	r0, r4
 801203c:	f000 f9bc 	bl	80123b8 <__multadd>
 8012040:	ee08 0a10 	vmov	s16, r0
 8012044:	e7e7      	b.n	8012016 <_dtoa_r+0xb26>
 8012046:	9b02      	ldr	r3, [sp, #8]
 8012048:	2b00      	cmp	r3, #0
 801204a:	bfc8      	it	gt
 801204c:	461d      	movgt	r5, r3
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	bfd8      	it	le
 8012052:	2501      	movle	r5, #1
 8012054:	441d      	add	r5, r3
 8012056:	f04f 0800 	mov.w	r8, #0
 801205a:	ee18 1a10 	vmov	r1, s16
 801205e:	2201      	movs	r2, #1
 8012060:	4620      	mov	r0, r4
 8012062:	f000 fb59 	bl	8012718 <__lshift>
 8012066:	4631      	mov	r1, r6
 8012068:	ee08 0a10 	vmov	s16, r0
 801206c:	f000 fbc4 	bl	80127f8 <__mcmp>
 8012070:	2800      	cmp	r0, #0
 8012072:	dc91      	bgt.n	8011f98 <_dtoa_r+0xaa8>
 8012074:	d102      	bne.n	801207c <_dtoa_r+0xb8c>
 8012076:	f01a 0f01 	tst.w	sl, #1
 801207a:	d18d      	bne.n	8011f98 <_dtoa_r+0xaa8>
 801207c:	462b      	mov	r3, r5
 801207e:	461d      	mov	r5, r3
 8012080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012084:	2a30      	cmp	r2, #48	; 0x30
 8012086:	d0fa      	beq.n	801207e <_dtoa_r+0xb8e>
 8012088:	e6d7      	b.n	8011e3a <_dtoa_r+0x94a>
 801208a:	9a01      	ldr	r2, [sp, #4]
 801208c:	429a      	cmp	r2, r3
 801208e:	d184      	bne.n	8011f9a <_dtoa_r+0xaaa>
 8012090:	9b00      	ldr	r3, [sp, #0]
 8012092:	3301      	adds	r3, #1
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	2331      	movs	r3, #49	; 0x31
 8012098:	7013      	strb	r3, [r2, #0]
 801209a:	e6ce      	b.n	8011e3a <_dtoa_r+0x94a>
 801209c:	4b09      	ldr	r3, [pc, #36]	; (80120c4 <_dtoa_r+0xbd4>)
 801209e:	f7ff ba95 	b.w	80115cc <_dtoa_r+0xdc>
 80120a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f47f aa6e 	bne.w	8011586 <_dtoa_r+0x96>
 80120aa:	4b07      	ldr	r3, [pc, #28]	; (80120c8 <_dtoa_r+0xbd8>)
 80120ac:	f7ff ba8e 	b.w	80115cc <_dtoa_r+0xdc>
 80120b0:	9b02      	ldr	r3, [sp, #8]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	dcae      	bgt.n	8012014 <_dtoa_r+0xb24>
 80120b6:	9b06      	ldr	r3, [sp, #24]
 80120b8:	2b02      	cmp	r3, #2
 80120ba:	f73f aea8 	bgt.w	8011e0e <_dtoa_r+0x91e>
 80120be:	e7a9      	b.n	8012014 <_dtoa_r+0xb24>
 80120c0:	080137ff 	.word	0x080137ff
 80120c4:	0801375c 	.word	0x0801375c
 80120c8:	08013780 	.word	0x08013780

080120cc <std>:
 80120cc:	2300      	movs	r3, #0
 80120ce:	b510      	push	{r4, lr}
 80120d0:	4604      	mov	r4, r0
 80120d2:	e9c0 3300 	strd	r3, r3, [r0]
 80120d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120da:	6083      	str	r3, [r0, #8]
 80120dc:	8181      	strh	r1, [r0, #12]
 80120de:	6643      	str	r3, [r0, #100]	; 0x64
 80120e0:	81c2      	strh	r2, [r0, #14]
 80120e2:	6183      	str	r3, [r0, #24]
 80120e4:	4619      	mov	r1, r3
 80120e6:	2208      	movs	r2, #8
 80120e8:	305c      	adds	r0, #92	; 0x5c
 80120ea:	f7fe fcd5 	bl	8010a98 <memset>
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <std+0x38>)
 80120f0:	6263      	str	r3, [r4, #36]	; 0x24
 80120f2:	4b05      	ldr	r3, [pc, #20]	; (8012108 <std+0x3c>)
 80120f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80120f6:	4b05      	ldr	r3, [pc, #20]	; (801210c <std+0x40>)
 80120f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120fa:	4b05      	ldr	r3, [pc, #20]	; (8012110 <std+0x44>)
 80120fc:	6224      	str	r4, [r4, #32]
 80120fe:	6323      	str	r3, [r4, #48]	; 0x30
 8012100:	bd10      	pop	{r4, pc}
 8012102:	bf00      	nop
 8012104:	08012f4d 	.word	0x08012f4d
 8012108:	08012f6f 	.word	0x08012f6f
 801210c:	08012fa7 	.word	0x08012fa7
 8012110:	08012fcb 	.word	0x08012fcb

08012114 <_cleanup_r>:
 8012114:	4901      	ldr	r1, [pc, #4]	; (801211c <_cleanup_r+0x8>)
 8012116:	f000 b8af 	b.w	8012278 <_fwalk_reent>
 801211a:	bf00      	nop
 801211c:	080132e1 	.word	0x080132e1

08012120 <__sfmoreglue>:
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	2268      	movs	r2, #104	; 0x68
 8012124:	1e4d      	subs	r5, r1, #1
 8012126:	4355      	muls	r5, r2
 8012128:	460e      	mov	r6, r1
 801212a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801212e:	f000 fce7 	bl	8012b00 <_malloc_r>
 8012132:	4604      	mov	r4, r0
 8012134:	b140      	cbz	r0, 8012148 <__sfmoreglue+0x28>
 8012136:	2100      	movs	r1, #0
 8012138:	e9c0 1600 	strd	r1, r6, [r0]
 801213c:	300c      	adds	r0, #12
 801213e:	60a0      	str	r0, [r4, #8]
 8012140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012144:	f7fe fca8 	bl	8010a98 <memset>
 8012148:	4620      	mov	r0, r4
 801214a:	bd70      	pop	{r4, r5, r6, pc}

0801214c <__sfp_lock_acquire>:
 801214c:	4801      	ldr	r0, [pc, #4]	; (8012154 <__sfp_lock_acquire+0x8>)
 801214e:	f000 b8b8 	b.w	80122c2 <__retarget_lock_acquire_recursive>
 8012152:	bf00      	nop
 8012154:	200024fd 	.word	0x200024fd

08012158 <__sfp_lock_release>:
 8012158:	4801      	ldr	r0, [pc, #4]	; (8012160 <__sfp_lock_release+0x8>)
 801215a:	f000 b8b3 	b.w	80122c4 <__retarget_lock_release_recursive>
 801215e:	bf00      	nop
 8012160:	200024fd 	.word	0x200024fd

08012164 <__sinit_lock_acquire>:
 8012164:	4801      	ldr	r0, [pc, #4]	; (801216c <__sinit_lock_acquire+0x8>)
 8012166:	f000 b8ac 	b.w	80122c2 <__retarget_lock_acquire_recursive>
 801216a:	bf00      	nop
 801216c:	200024fe 	.word	0x200024fe

08012170 <__sinit_lock_release>:
 8012170:	4801      	ldr	r0, [pc, #4]	; (8012178 <__sinit_lock_release+0x8>)
 8012172:	f000 b8a7 	b.w	80122c4 <__retarget_lock_release_recursive>
 8012176:	bf00      	nop
 8012178:	200024fe 	.word	0x200024fe

0801217c <__sinit>:
 801217c:	b510      	push	{r4, lr}
 801217e:	4604      	mov	r4, r0
 8012180:	f7ff fff0 	bl	8012164 <__sinit_lock_acquire>
 8012184:	69a3      	ldr	r3, [r4, #24]
 8012186:	b11b      	cbz	r3, 8012190 <__sinit+0x14>
 8012188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801218c:	f7ff bff0 	b.w	8012170 <__sinit_lock_release>
 8012190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012194:	6523      	str	r3, [r4, #80]	; 0x50
 8012196:	4b13      	ldr	r3, [pc, #76]	; (80121e4 <__sinit+0x68>)
 8012198:	4a13      	ldr	r2, [pc, #76]	; (80121e8 <__sinit+0x6c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	62a2      	str	r2, [r4, #40]	; 0x28
 801219e:	42a3      	cmp	r3, r4
 80121a0:	bf04      	itt	eq
 80121a2:	2301      	moveq	r3, #1
 80121a4:	61a3      	streq	r3, [r4, #24]
 80121a6:	4620      	mov	r0, r4
 80121a8:	f000 f820 	bl	80121ec <__sfp>
 80121ac:	6060      	str	r0, [r4, #4]
 80121ae:	4620      	mov	r0, r4
 80121b0:	f000 f81c 	bl	80121ec <__sfp>
 80121b4:	60a0      	str	r0, [r4, #8]
 80121b6:	4620      	mov	r0, r4
 80121b8:	f000 f818 	bl	80121ec <__sfp>
 80121bc:	2200      	movs	r2, #0
 80121be:	60e0      	str	r0, [r4, #12]
 80121c0:	2104      	movs	r1, #4
 80121c2:	6860      	ldr	r0, [r4, #4]
 80121c4:	f7ff ff82 	bl	80120cc <std>
 80121c8:	68a0      	ldr	r0, [r4, #8]
 80121ca:	2201      	movs	r2, #1
 80121cc:	2109      	movs	r1, #9
 80121ce:	f7ff ff7d 	bl	80120cc <std>
 80121d2:	68e0      	ldr	r0, [r4, #12]
 80121d4:	2202      	movs	r2, #2
 80121d6:	2112      	movs	r1, #18
 80121d8:	f7ff ff78 	bl	80120cc <std>
 80121dc:	2301      	movs	r3, #1
 80121de:	61a3      	str	r3, [r4, #24]
 80121e0:	e7d2      	b.n	8012188 <__sinit+0xc>
 80121e2:	bf00      	nop
 80121e4:	08013748 	.word	0x08013748
 80121e8:	08012115 	.word	0x08012115

080121ec <__sfp>:
 80121ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ee:	4607      	mov	r7, r0
 80121f0:	f7ff ffac 	bl	801214c <__sfp_lock_acquire>
 80121f4:	4b1e      	ldr	r3, [pc, #120]	; (8012270 <__sfp+0x84>)
 80121f6:	681e      	ldr	r6, [r3, #0]
 80121f8:	69b3      	ldr	r3, [r6, #24]
 80121fa:	b913      	cbnz	r3, 8012202 <__sfp+0x16>
 80121fc:	4630      	mov	r0, r6
 80121fe:	f7ff ffbd 	bl	801217c <__sinit>
 8012202:	3648      	adds	r6, #72	; 0x48
 8012204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012208:	3b01      	subs	r3, #1
 801220a:	d503      	bpl.n	8012214 <__sfp+0x28>
 801220c:	6833      	ldr	r3, [r6, #0]
 801220e:	b30b      	cbz	r3, 8012254 <__sfp+0x68>
 8012210:	6836      	ldr	r6, [r6, #0]
 8012212:	e7f7      	b.n	8012204 <__sfp+0x18>
 8012214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012218:	b9d5      	cbnz	r5, 8012250 <__sfp+0x64>
 801221a:	4b16      	ldr	r3, [pc, #88]	; (8012274 <__sfp+0x88>)
 801221c:	60e3      	str	r3, [r4, #12]
 801221e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012222:	6665      	str	r5, [r4, #100]	; 0x64
 8012224:	f000 f84c 	bl	80122c0 <__retarget_lock_init_recursive>
 8012228:	f7ff ff96 	bl	8012158 <__sfp_lock_release>
 801222c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012234:	6025      	str	r5, [r4, #0]
 8012236:	61a5      	str	r5, [r4, #24]
 8012238:	2208      	movs	r2, #8
 801223a:	4629      	mov	r1, r5
 801223c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012240:	f7fe fc2a 	bl	8010a98 <memset>
 8012244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801224c:	4620      	mov	r0, r4
 801224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012250:	3468      	adds	r4, #104	; 0x68
 8012252:	e7d9      	b.n	8012208 <__sfp+0x1c>
 8012254:	2104      	movs	r1, #4
 8012256:	4638      	mov	r0, r7
 8012258:	f7ff ff62 	bl	8012120 <__sfmoreglue>
 801225c:	4604      	mov	r4, r0
 801225e:	6030      	str	r0, [r6, #0]
 8012260:	2800      	cmp	r0, #0
 8012262:	d1d5      	bne.n	8012210 <__sfp+0x24>
 8012264:	f7ff ff78 	bl	8012158 <__sfp_lock_release>
 8012268:	230c      	movs	r3, #12
 801226a:	603b      	str	r3, [r7, #0]
 801226c:	e7ee      	b.n	801224c <__sfp+0x60>
 801226e:	bf00      	nop
 8012270:	08013748 	.word	0x08013748
 8012274:	ffff0001 	.word	0xffff0001

08012278 <_fwalk_reent>:
 8012278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801227c:	4606      	mov	r6, r0
 801227e:	4688      	mov	r8, r1
 8012280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012284:	2700      	movs	r7, #0
 8012286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801228a:	f1b9 0901 	subs.w	r9, r9, #1
 801228e:	d505      	bpl.n	801229c <_fwalk_reent+0x24>
 8012290:	6824      	ldr	r4, [r4, #0]
 8012292:	2c00      	cmp	r4, #0
 8012294:	d1f7      	bne.n	8012286 <_fwalk_reent+0xe>
 8012296:	4638      	mov	r0, r7
 8012298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229c:	89ab      	ldrh	r3, [r5, #12]
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d907      	bls.n	80122b2 <_fwalk_reent+0x3a>
 80122a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122a6:	3301      	adds	r3, #1
 80122a8:	d003      	beq.n	80122b2 <_fwalk_reent+0x3a>
 80122aa:	4629      	mov	r1, r5
 80122ac:	4630      	mov	r0, r6
 80122ae:	47c0      	blx	r8
 80122b0:	4307      	orrs	r7, r0
 80122b2:	3568      	adds	r5, #104	; 0x68
 80122b4:	e7e9      	b.n	801228a <_fwalk_reent+0x12>
	...

080122b8 <_localeconv_r>:
 80122b8:	4800      	ldr	r0, [pc, #0]	; (80122bc <_localeconv_r+0x4>)
 80122ba:	4770      	bx	lr
 80122bc:	20000274 	.word	0x20000274

080122c0 <__retarget_lock_init_recursive>:
 80122c0:	4770      	bx	lr

080122c2 <__retarget_lock_acquire_recursive>:
 80122c2:	4770      	bx	lr

080122c4 <__retarget_lock_release_recursive>:
 80122c4:	4770      	bx	lr
	...

080122c8 <malloc>:
 80122c8:	4b02      	ldr	r3, [pc, #8]	; (80122d4 <malloc+0xc>)
 80122ca:	4601      	mov	r1, r0
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f000 bc17 	b.w	8012b00 <_malloc_r>
 80122d2:	bf00      	nop
 80122d4:	20000120 	.word	0x20000120

080122d8 <memcpy>:
 80122d8:	440a      	add	r2, r1
 80122da:	4291      	cmp	r1, r2
 80122dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80122e0:	d100      	bne.n	80122e4 <memcpy+0xc>
 80122e2:	4770      	bx	lr
 80122e4:	b510      	push	{r4, lr}
 80122e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122ee:	4291      	cmp	r1, r2
 80122f0:	d1f9      	bne.n	80122e6 <memcpy+0xe>
 80122f2:	bd10      	pop	{r4, pc}

080122f4 <_Balloc>:
 80122f4:	b570      	push	{r4, r5, r6, lr}
 80122f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122f8:	4604      	mov	r4, r0
 80122fa:	460d      	mov	r5, r1
 80122fc:	b976      	cbnz	r6, 801231c <_Balloc+0x28>
 80122fe:	2010      	movs	r0, #16
 8012300:	f7ff ffe2 	bl	80122c8 <malloc>
 8012304:	4602      	mov	r2, r0
 8012306:	6260      	str	r0, [r4, #36]	; 0x24
 8012308:	b920      	cbnz	r0, 8012314 <_Balloc+0x20>
 801230a:	4b18      	ldr	r3, [pc, #96]	; (801236c <_Balloc+0x78>)
 801230c:	4818      	ldr	r0, [pc, #96]	; (8012370 <_Balloc+0x7c>)
 801230e:	2166      	movs	r1, #102	; 0x66
 8012310:	f000 ff32 	bl	8013178 <__assert_func>
 8012314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012318:	6006      	str	r6, [r0, #0]
 801231a:	60c6      	str	r6, [r0, #12]
 801231c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801231e:	68f3      	ldr	r3, [r6, #12]
 8012320:	b183      	cbz	r3, 8012344 <_Balloc+0x50>
 8012322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801232a:	b9b8      	cbnz	r0, 801235c <_Balloc+0x68>
 801232c:	2101      	movs	r1, #1
 801232e:	fa01 f605 	lsl.w	r6, r1, r5
 8012332:	1d72      	adds	r2, r6, #5
 8012334:	0092      	lsls	r2, r2, #2
 8012336:	4620      	mov	r0, r4
 8012338:	f000 fb60 	bl	80129fc <_calloc_r>
 801233c:	b160      	cbz	r0, 8012358 <_Balloc+0x64>
 801233e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012342:	e00e      	b.n	8012362 <_Balloc+0x6e>
 8012344:	2221      	movs	r2, #33	; 0x21
 8012346:	2104      	movs	r1, #4
 8012348:	4620      	mov	r0, r4
 801234a:	f000 fb57 	bl	80129fc <_calloc_r>
 801234e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012350:	60f0      	str	r0, [r6, #12]
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1e4      	bne.n	8012322 <_Balloc+0x2e>
 8012358:	2000      	movs	r0, #0
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	6802      	ldr	r2, [r0, #0]
 801235e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012362:	2300      	movs	r3, #0
 8012364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012368:	e7f7      	b.n	801235a <_Balloc+0x66>
 801236a:	bf00      	nop
 801236c:	0801378d 	.word	0x0801378d
 8012370:	08013870 	.word	0x08013870

08012374 <_Bfree>:
 8012374:	b570      	push	{r4, r5, r6, lr}
 8012376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012378:	4605      	mov	r5, r0
 801237a:	460c      	mov	r4, r1
 801237c:	b976      	cbnz	r6, 801239c <_Bfree+0x28>
 801237e:	2010      	movs	r0, #16
 8012380:	f7ff ffa2 	bl	80122c8 <malloc>
 8012384:	4602      	mov	r2, r0
 8012386:	6268      	str	r0, [r5, #36]	; 0x24
 8012388:	b920      	cbnz	r0, 8012394 <_Bfree+0x20>
 801238a:	4b09      	ldr	r3, [pc, #36]	; (80123b0 <_Bfree+0x3c>)
 801238c:	4809      	ldr	r0, [pc, #36]	; (80123b4 <_Bfree+0x40>)
 801238e:	218a      	movs	r1, #138	; 0x8a
 8012390:	f000 fef2 	bl	8013178 <__assert_func>
 8012394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012398:	6006      	str	r6, [r0, #0]
 801239a:	60c6      	str	r6, [r0, #12]
 801239c:	b13c      	cbz	r4, 80123ae <_Bfree+0x3a>
 801239e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80123a0:	6862      	ldr	r2, [r4, #4]
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123a8:	6021      	str	r1, [r4, #0]
 80123aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80123ae:	bd70      	pop	{r4, r5, r6, pc}
 80123b0:	0801378d 	.word	0x0801378d
 80123b4:	08013870 	.word	0x08013870

080123b8 <__multadd>:
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	690d      	ldr	r5, [r1, #16]
 80123be:	4607      	mov	r7, r0
 80123c0:	460c      	mov	r4, r1
 80123c2:	461e      	mov	r6, r3
 80123c4:	f101 0c14 	add.w	ip, r1, #20
 80123c8:	2000      	movs	r0, #0
 80123ca:	f8dc 3000 	ldr.w	r3, [ip]
 80123ce:	b299      	uxth	r1, r3
 80123d0:	fb02 6101 	mla	r1, r2, r1, r6
 80123d4:	0c1e      	lsrs	r6, r3, #16
 80123d6:	0c0b      	lsrs	r3, r1, #16
 80123d8:	fb02 3306 	mla	r3, r2, r6, r3
 80123dc:	b289      	uxth	r1, r1
 80123de:	3001      	adds	r0, #1
 80123e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80123e4:	4285      	cmp	r5, r0
 80123e6:	f84c 1b04 	str.w	r1, [ip], #4
 80123ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123ee:	dcec      	bgt.n	80123ca <__multadd+0x12>
 80123f0:	b30e      	cbz	r6, 8012436 <__multadd+0x7e>
 80123f2:	68a3      	ldr	r3, [r4, #8]
 80123f4:	42ab      	cmp	r3, r5
 80123f6:	dc19      	bgt.n	801242c <__multadd+0x74>
 80123f8:	6861      	ldr	r1, [r4, #4]
 80123fa:	4638      	mov	r0, r7
 80123fc:	3101      	adds	r1, #1
 80123fe:	f7ff ff79 	bl	80122f4 <_Balloc>
 8012402:	4680      	mov	r8, r0
 8012404:	b928      	cbnz	r0, 8012412 <__multadd+0x5a>
 8012406:	4602      	mov	r2, r0
 8012408:	4b0c      	ldr	r3, [pc, #48]	; (801243c <__multadd+0x84>)
 801240a:	480d      	ldr	r0, [pc, #52]	; (8012440 <__multadd+0x88>)
 801240c:	21b5      	movs	r1, #181	; 0xb5
 801240e:	f000 feb3 	bl	8013178 <__assert_func>
 8012412:	6922      	ldr	r2, [r4, #16]
 8012414:	3202      	adds	r2, #2
 8012416:	f104 010c 	add.w	r1, r4, #12
 801241a:	0092      	lsls	r2, r2, #2
 801241c:	300c      	adds	r0, #12
 801241e:	f7ff ff5b 	bl	80122d8 <memcpy>
 8012422:	4621      	mov	r1, r4
 8012424:	4638      	mov	r0, r7
 8012426:	f7ff ffa5 	bl	8012374 <_Bfree>
 801242a:	4644      	mov	r4, r8
 801242c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012430:	3501      	adds	r5, #1
 8012432:	615e      	str	r6, [r3, #20]
 8012434:	6125      	str	r5, [r4, #16]
 8012436:	4620      	mov	r0, r4
 8012438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801243c:	080137ff 	.word	0x080137ff
 8012440:	08013870 	.word	0x08013870

08012444 <__hi0bits>:
 8012444:	0c03      	lsrs	r3, r0, #16
 8012446:	041b      	lsls	r3, r3, #16
 8012448:	b9d3      	cbnz	r3, 8012480 <__hi0bits+0x3c>
 801244a:	0400      	lsls	r0, r0, #16
 801244c:	2310      	movs	r3, #16
 801244e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012452:	bf04      	itt	eq
 8012454:	0200      	lsleq	r0, r0, #8
 8012456:	3308      	addeq	r3, #8
 8012458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801245c:	bf04      	itt	eq
 801245e:	0100      	lsleq	r0, r0, #4
 8012460:	3304      	addeq	r3, #4
 8012462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012466:	bf04      	itt	eq
 8012468:	0080      	lsleq	r0, r0, #2
 801246a:	3302      	addeq	r3, #2
 801246c:	2800      	cmp	r0, #0
 801246e:	db05      	blt.n	801247c <__hi0bits+0x38>
 8012470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012474:	f103 0301 	add.w	r3, r3, #1
 8012478:	bf08      	it	eq
 801247a:	2320      	moveq	r3, #32
 801247c:	4618      	mov	r0, r3
 801247e:	4770      	bx	lr
 8012480:	2300      	movs	r3, #0
 8012482:	e7e4      	b.n	801244e <__hi0bits+0xa>

08012484 <__lo0bits>:
 8012484:	6803      	ldr	r3, [r0, #0]
 8012486:	f013 0207 	ands.w	r2, r3, #7
 801248a:	4601      	mov	r1, r0
 801248c:	d00b      	beq.n	80124a6 <__lo0bits+0x22>
 801248e:	07da      	lsls	r2, r3, #31
 8012490:	d423      	bmi.n	80124da <__lo0bits+0x56>
 8012492:	0798      	lsls	r0, r3, #30
 8012494:	bf49      	itett	mi
 8012496:	085b      	lsrmi	r3, r3, #1
 8012498:	089b      	lsrpl	r3, r3, #2
 801249a:	2001      	movmi	r0, #1
 801249c:	600b      	strmi	r3, [r1, #0]
 801249e:	bf5c      	itt	pl
 80124a0:	600b      	strpl	r3, [r1, #0]
 80124a2:	2002      	movpl	r0, #2
 80124a4:	4770      	bx	lr
 80124a6:	b298      	uxth	r0, r3
 80124a8:	b9a8      	cbnz	r0, 80124d6 <__lo0bits+0x52>
 80124aa:	0c1b      	lsrs	r3, r3, #16
 80124ac:	2010      	movs	r0, #16
 80124ae:	b2da      	uxtb	r2, r3
 80124b0:	b90a      	cbnz	r2, 80124b6 <__lo0bits+0x32>
 80124b2:	3008      	adds	r0, #8
 80124b4:	0a1b      	lsrs	r3, r3, #8
 80124b6:	071a      	lsls	r2, r3, #28
 80124b8:	bf04      	itt	eq
 80124ba:	091b      	lsreq	r3, r3, #4
 80124bc:	3004      	addeq	r0, #4
 80124be:	079a      	lsls	r2, r3, #30
 80124c0:	bf04      	itt	eq
 80124c2:	089b      	lsreq	r3, r3, #2
 80124c4:	3002      	addeq	r0, #2
 80124c6:	07da      	lsls	r2, r3, #31
 80124c8:	d403      	bmi.n	80124d2 <__lo0bits+0x4e>
 80124ca:	085b      	lsrs	r3, r3, #1
 80124cc:	f100 0001 	add.w	r0, r0, #1
 80124d0:	d005      	beq.n	80124de <__lo0bits+0x5a>
 80124d2:	600b      	str	r3, [r1, #0]
 80124d4:	4770      	bx	lr
 80124d6:	4610      	mov	r0, r2
 80124d8:	e7e9      	b.n	80124ae <__lo0bits+0x2a>
 80124da:	2000      	movs	r0, #0
 80124dc:	4770      	bx	lr
 80124de:	2020      	movs	r0, #32
 80124e0:	4770      	bx	lr
	...

080124e4 <__i2b>:
 80124e4:	b510      	push	{r4, lr}
 80124e6:	460c      	mov	r4, r1
 80124e8:	2101      	movs	r1, #1
 80124ea:	f7ff ff03 	bl	80122f4 <_Balloc>
 80124ee:	4602      	mov	r2, r0
 80124f0:	b928      	cbnz	r0, 80124fe <__i2b+0x1a>
 80124f2:	4b05      	ldr	r3, [pc, #20]	; (8012508 <__i2b+0x24>)
 80124f4:	4805      	ldr	r0, [pc, #20]	; (801250c <__i2b+0x28>)
 80124f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80124fa:	f000 fe3d 	bl	8013178 <__assert_func>
 80124fe:	2301      	movs	r3, #1
 8012500:	6144      	str	r4, [r0, #20]
 8012502:	6103      	str	r3, [r0, #16]
 8012504:	bd10      	pop	{r4, pc}
 8012506:	bf00      	nop
 8012508:	080137ff 	.word	0x080137ff
 801250c:	08013870 	.word	0x08013870

08012510 <__multiply>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	4691      	mov	r9, r2
 8012516:	690a      	ldr	r2, [r1, #16]
 8012518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801251c:	429a      	cmp	r2, r3
 801251e:	bfb8      	it	lt
 8012520:	460b      	movlt	r3, r1
 8012522:	460c      	mov	r4, r1
 8012524:	bfbc      	itt	lt
 8012526:	464c      	movlt	r4, r9
 8012528:	4699      	movlt	r9, r3
 801252a:	6927      	ldr	r7, [r4, #16]
 801252c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012530:	68a3      	ldr	r3, [r4, #8]
 8012532:	6861      	ldr	r1, [r4, #4]
 8012534:	eb07 060a 	add.w	r6, r7, sl
 8012538:	42b3      	cmp	r3, r6
 801253a:	b085      	sub	sp, #20
 801253c:	bfb8      	it	lt
 801253e:	3101      	addlt	r1, #1
 8012540:	f7ff fed8 	bl	80122f4 <_Balloc>
 8012544:	b930      	cbnz	r0, 8012554 <__multiply+0x44>
 8012546:	4602      	mov	r2, r0
 8012548:	4b44      	ldr	r3, [pc, #272]	; (801265c <__multiply+0x14c>)
 801254a:	4845      	ldr	r0, [pc, #276]	; (8012660 <__multiply+0x150>)
 801254c:	f240 115d 	movw	r1, #349	; 0x15d
 8012550:	f000 fe12 	bl	8013178 <__assert_func>
 8012554:	f100 0514 	add.w	r5, r0, #20
 8012558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801255c:	462b      	mov	r3, r5
 801255e:	2200      	movs	r2, #0
 8012560:	4543      	cmp	r3, r8
 8012562:	d321      	bcc.n	80125a8 <__multiply+0x98>
 8012564:	f104 0314 	add.w	r3, r4, #20
 8012568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801256c:	f109 0314 	add.w	r3, r9, #20
 8012570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012574:	9202      	str	r2, [sp, #8]
 8012576:	1b3a      	subs	r2, r7, r4
 8012578:	3a15      	subs	r2, #21
 801257a:	f022 0203 	bic.w	r2, r2, #3
 801257e:	3204      	adds	r2, #4
 8012580:	f104 0115 	add.w	r1, r4, #21
 8012584:	428f      	cmp	r7, r1
 8012586:	bf38      	it	cc
 8012588:	2204      	movcc	r2, #4
 801258a:	9201      	str	r2, [sp, #4]
 801258c:	9a02      	ldr	r2, [sp, #8]
 801258e:	9303      	str	r3, [sp, #12]
 8012590:	429a      	cmp	r2, r3
 8012592:	d80c      	bhi.n	80125ae <__multiply+0x9e>
 8012594:	2e00      	cmp	r6, #0
 8012596:	dd03      	ble.n	80125a0 <__multiply+0x90>
 8012598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801259c:	2b00      	cmp	r3, #0
 801259e:	d05a      	beq.n	8012656 <__multiply+0x146>
 80125a0:	6106      	str	r6, [r0, #16]
 80125a2:	b005      	add	sp, #20
 80125a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a8:	f843 2b04 	str.w	r2, [r3], #4
 80125ac:	e7d8      	b.n	8012560 <__multiply+0x50>
 80125ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80125b2:	f1ba 0f00 	cmp.w	sl, #0
 80125b6:	d024      	beq.n	8012602 <__multiply+0xf2>
 80125b8:	f104 0e14 	add.w	lr, r4, #20
 80125bc:	46a9      	mov	r9, r5
 80125be:	f04f 0c00 	mov.w	ip, #0
 80125c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80125c6:	f8d9 1000 	ldr.w	r1, [r9]
 80125ca:	fa1f fb82 	uxth.w	fp, r2
 80125ce:	b289      	uxth	r1, r1
 80125d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80125d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80125d8:	f8d9 2000 	ldr.w	r2, [r9]
 80125dc:	4461      	add	r1, ip
 80125de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80125e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80125ea:	b289      	uxth	r1, r1
 80125ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125f0:	4577      	cmp	r7, lr
 80125f2:	f849 1b04 	str.w	r1, [r9], #4
 80125f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125fa:	d8e2      	bhi.n	80125c2 <__multiply+0xb2>
 80125fc:	9a01      	ldr	r2, [sp, #4]
 80125fe:	f845 c002 	str.w	ip, [r5, r2]
 8012602:	9a03      	ldr	r2, [sp, #12]
 8012604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012608:	3304      	adds	r3, #4
 801260a:	f1b9 0f00 	cmp.w	r9, #0
 801260e:	d020      	beq.n	8012652 <__multiply+0x142>
 8012610:	6829      	ldr	r1, [r5, #0]
 8012612:	f104 0c14 	add.w	ip, r4, #20
 8012616:	46ae      	mov	lr, r5
 8012618:	f04f 0a00 	mov.w	sl, #0
 801261c:	f8bc b000 	ldrh.w	fp, [ip]
 8012620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012624:	fb09 220b 	mla	r2, r9, fp, r2
 8012628:	4492      	add	sl, r2
 801262a:	b289      	uxth	r1, r1
 801262c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012630:	f84e 1b04 	str.w	r1, [lr], #4
 8012634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012638:	f8be 1000 	ldrh.w	r1, [lr]
 801263c:	0c12      	lsrs	r2, r2, #16
 801263e:	fb09 1102 	mla	r1, r9, r2, r1
 8012642:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012646:	4567      	cmp	r7, ip
 8012648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801264c:	d8e6      	bhi.n	801261c <__multiply+0x10c>
 801264e:	9a01      	ldr	r2, [sp, #4]
 8012650:	50a9      	str	r1, [r5, r2]
 8012652:	3504      	adds	r5, #4
 8012654:	e79a      	b.n	801258c <__multiply+0x7c>
 8012656:	3e01      	subs	r6, #1
 8012658:	e79c      	b.n	8012594 <__multiply+0x84>
 801265a:	bf00      	nop
 801265c:	080137ff 	.word	0x080137ff
 8012660:	08013870 	.word	0x08013870

08012664 <__pow5mult>:
 8012664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012668:	4615      	mov	r5, r2
 801266a:	f012 0203 	ands.w	r2, r2, #3
 801266e:	4606      	mov	r6, r0
 8012670:	460f      	mov	r7, r1
 8012672:	d007      	beq.n	8012684 <__pow5mult+0x20>
 8012674:	4c25      	ldr	r4, [pc, #148]	; (801270c <__pow5mult+0xa8>)
 8012676:	3a01      	subs	r2, #1
 8012678:	2300      	movs	r3, #0
 801267a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801267e:	f7ff fe9b 	bl	80123b8 <__multadd>
 8012682:	4607      	mov	r7, r0
 8012684:	10ad      	asrs	r5, r5, #2
 8012686:	d03d      	beq.n	8012704 <__pow5mult+0xa0>
 8012688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801268a:	b97c      	cbnz	r4, 80126ac <__pow5mult+0x48>
 801268c:	2010      	movs	r0, #16
 801268e:	f7ff fe1b 	bl	80122c8 <malloc>
 8012692:	4602      	mov	r2, r0
 8012694:	6270      	str	r0, [r6, #36]	; 0x24
 8012696:	b928      	cbnz	r0, 80126a4 <__pow5mult+0x40>
 8012698:	4b1d      	ldr	r3, [pc, #116]	; (8012710 <__pow5mult+0xac>)
 801269a:	481e      	ldr	r0, [pc, #120]	; (8012714 <__pow5mult+0xb0>)
 801269c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80126a0:	f000 fd6a 	bl	8013178 <__assert_func>
 80126a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80126a8:	6004      	str	r4, [r0, #0]
 80126aa:	60c4      	str	r4, [r0, #12]
 80126ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80126b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80126b4:	b94c      	cbnz	r4, 80126ca <__pow5mult+0x66>
 80126b6:	f240 2171 	movw	r1, #625	; 0x271
 80126ba:	4630      	mov	r0, r6
 80126bc:	f7ff ff12 	bl	80124e4 <__i2b>
 80126c0:	2300      	movs	r3, #0
 80126c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80126c6:	4604      	mov	r4, r0
 80126c8:	6003      	str	r3, [r0, #0]
 80126ca:	f04f 0900 	mov.w	r9, #0
 80126ce:	07eb      	lsls	r3, r5, #31
 80126d0:	d50a      	bpl.n	80126e8 <__pow5mult+0x84>
 80126d2:	4639      	mov	r1, r7
 80126d4:	4622      	mov	r2, r4
 80126d6:	4630      	mov	r0, r6
 80126d8:	f7ff ff1a 	bl	8012510 <__multiply>
 80126dc:	4639      	mov	r1, r7
 80126de:	4680      	mov	r8, r0
 80126e0:	4630      	mov	r0, r6
 80126e2:	f7ff fe47 	bl	8012374 <_Bfree>
 80126e6:	4647      	mov	r7, r8
 80126e8:	106d      	asrs	r5, r5, #1
 80126ea:	d00b      	beq.n	8012704 <__pow5mult+0xa0>
 80126ec:	6820      	ldr	r0, [r4, #0]
 80126ee:	b938      	cbnz	r0, 8012700 <__pow5mult+0x9c>
 80126f0:	4622      	mov	r2, r4
 80126f2:	4621      	mov	r1, r4
 80126f4:	4630      	mov	r0, r6
 80126f6:	f7ff ff0b 	bl	8012510 <__multiply>
 80126fa:	6020      	str	r0, [r4, #0]
 80126fc:	f8c0 9000 	str.w	r9, [r0]
 8012700:	4604      	mov	r4, r0
 8012702:	e7e4      	b.n	80126ce <__pow5mult+0x6a>
 8012704:	4638      	mov	r0, r7
 8012706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801270a:	bf00      	nop
 801270c:	080139c0 	.word	0x080139c0
 8012710:	0801378d 	.word	0x0801378d
 8012714:	08013870 	.word	0x08013870

08012718 <__lshift>:
 8012718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801271c:	460c      	mov	r4, r1
 801271e:	6849      	ldr	r1, [r1, #4]
 8012720:	6923      	ldr	r3, [r4, #16]
 8012722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	4607      	mov	r7, r0
 801272a:	4691      	mov	r9, r2
 801272c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012730:	f108 0601 	add.w	r6, r8, #1
 8012734:	42b3      	cmp	r3, r6
 8012736:	db0b      	blt.n	8012750 <__lshift+0x38>
 8012738:	4638      	mov	r0, r7
 801273a:	f7ff fddb 	bl	80122f4 <_Balloc>
 801273e:	4605      	mov	r5, r0
 8012740:	b948      	cbnz	r0, 8012756 <__lshift+0x3e>
 8012742:	4602      	mov	r2, r0
 8012744:	4b2a      	ldr	r3, [pc, #168]	; (80127f0 <__lshift+0xd8>)
 8012746:	482b      	ldr	r0, [pc, #172]	; (80127f4 <__lshift+0xdc>)
 8012748:	f240 11d9 	movw	r1, #473	; 0x1d9
 801274c:	f000 fd14 	bl	8013178 <__assert_func>
 8012750:	3101      	adds	r1, #1
 8012752:	005b      	lsls	r3, r3, #1
 8012754:	e7ee      	b.n	8012734 <__lshift+0x1c>
 8012756:	2300      	movs	r3, #0
 8012758:	f100 0114 	add.w	r1, r0, #20
 801275c:	f100 0210 	add.w	r2, r0, #16
 8012760:	4618      	mov	r0, r3
 8012762:	4553      	cmp	r3, sl
 8012764:	db37      	blt.n	80127d6 <__lshift+0xbe>
 8012766:	6920      	ldr	r0, [r4, #16]
 8012768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801276c:	f104 0314 	add.w	r3, r4, #20
 8012770:	f019 091f 	ands.w	r9, r9, #31
 8012774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801277c:	d02f      	beq.n	80127de <__lshift+0xc6>
 801277e:	f1c9 0e20 	rsb	lr, r9, #32
 8012782:	468a      	mov	sl, r1
 8012784:	f04f 0c00 	mov.w	ip, #0
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	fa02 f209 	lsl.w	r2, r2, r9
 801278e:	ea42 020c 	orr.w	r2, r2, ip
 8012792:	f84a 2b04 	str.w	r2, [sl], #4
 8012796:	f853 2b04 	ldr.w	r2, [r3], #4
 801279a:	4298      	cmp	r0, r3
 801279c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80127a0:	d8f2      	bhi.n	8012788 <__lshift+0x70>
 80127a2:	1b03      	subs	r3, r0, r4
 80127a4:	3b15      	subs	r3, #21
 80127a6:	f023 0303 	bic.w	r3, r3, #3
 80127aa:	3304      	adds	r3, #4
 80127ac:	f104 0215 	add.w	r2, r4, #21
 80127b0:	4290      	cmp	r0, r2
 80127b2:	bf38      	it	cc
 80127b4:	2304      	movcc	r3, #4
 80127b6:	f841 c003 	str.w	ip, [r1, r3]
 80127ba:	f1bc 0f00 	cmp.w	ip, #0
 80127be:	d001      	beq.n	80127c4 <__lshift+0xac>
 80127c0:	f108 0602 	add.w	r6, r8, #2
 80127c4:	3e01      	subs	r6, #1
 80127c6:	4638      	mov	r0, r7
 80127c8:	612e      	str	r6, [r5, #16]
 80127ca:	4621      	mov	r1, r4
 80127cc:	f7ff fdd2 	bl	8012374 <_Bfree>
 80127d0:	4628      	mov	r0, r5
 80127d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80127da:	3301      	adds	r3, #1
 80127dc:	e7c1      	b.n	8012762 <__lshift+0x4a>
 80127de:	3904      	subs	r1, #4
 80127e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80127e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80127e8:	4298      	cmp	r0, r3
 80127ea:	d8f9      	bhi.n	80127e0 <__lshift+0xc8>
 80127ec:	e7ea      	b.n	80127c4 <__lshift+0xac>
 80127ee:	bf00      	nop
 80127f0:	080137ff 	.word	0x080137ff
 80127f4:	08013870 	.word	0x08013870

080127f8 <__mcmp>:
 80127f8:	b530      	push	{r4, r5, lr}
 80127fa:	6902      	ldr	r2, [r0, #16]
 80127fc:	690c      	ldr	r4, [r1, #16]
 80127fe:	1b12      	subs	r2, r2, r4
 8012800:	d10e      	bne.n	8012820 <__mcmp+0x28>
 8012802:	f100 0314 	add.w	r3, r0, #20
 8012806:	3114      	adds	r1, #20
 8012808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801280c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012818:	42a5      	cmp	r5, r4
 801281a:	d003      	beq.n	8012824 <__mcmp+0x2c>
 801281c:	d305      	bcc.n	801282a <__mcmp+0x32>
 801281e:	2201      	movs	r2, #1
 8012820:	4610      	mov	r0, r2
 8012822:	bd30      	pop	{r4, r5, pc}
 8012824:	4283      	cmp	r3, r0
 8012826:	d3f3      	bcc.n	8012810 <__mcmp+0x18>
 8012828:	e7fa      	b.n	8012820 <__mcmp+0x28>
 801282a:	f04f 32ff 	mov.w	r2, #4294967295
 801282e:	e7f7      	b.n	8012820 <__mcmp+0x28>

08012830 <__mdiff>:
 8012830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012834:	460c      	mov	r4, r1
 8012836:	4606      	mov	r6, r0
 8012838:	4611      	mov	r1, r2
 801283a:	4620      	mov	r0, r4
 801283c:	4690      	mov	r8, r2
 801283e:	f7ff ffdb 	bl	80127f8 <__mcmp>
 8012842:	1e05      	subs	r5, r0, #0
 8012844:	d110      	bne.n	8012868 <__mdiff+0x38>
 8012846:	4629      	mov	r1, r5
 8012848:	4630      	mov	r0, r6
 801284a:	f7ff fd53 	bl	80122f4 <_Balloc>
 801284e:	b930      	cbnz	r0, 801285e <__mdiff+0x2e>
 8012850:	4b3a      	ldr	r3, [pc, #232]	; (801293c <__mdiff+0x10c>)
 8012852:	4602      	mov	r2, r0
 8012854:	f240 2132 	movw	r1, #562	; 0x232
 8012858:	4839      	ldr	r0, [pc, #228]	; (8012940 <__mdiff+0x110>)
 801285a:	f000 fc8d 	bl	8013178 <__assert_func>
 801285e:	2301      	movs	r3, #1
 8012860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012868:	bfa4      	itt	ge
 801286a:	4643      	movge	r3, r8
 801286c:	46a0      	movge	r8, r4
 801286e:	4630      	mov	r0, r6
 8012870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012874:	bfa6      	itte	ge
 8012876:	461c      	movge	r4, r3
 8012878:	2500      	movge	r5, #0
 801287a:	2501      	movlt	r5, #1
 801287c:	f7ff fd3a 	bl	80122f4 <_Balloc>
 8012880:	b920      	cbnz	r0, 801288c <__mdiff+0x5c>
 8012882:	4b2e      	ldr	r3, [pc, #184]	; (801293c <__mdiff+0x10c>)
 8012884:	4602      	mov	r2, r0
 8012886:	f44f 7110 	mov.w	r1, #576	; 0x240
 801288a:	e7e5      	b.n	8012858 <__mdiff+0x28>
 801288c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012890:	6926      	ldr	r6, [r4, #16]
 8012892:	60c5      	str	r5, [r0, #12]
 8012894:	f104 0914 	add.w	r9, r4, #20
 8012898:	f108 0514 	add.w	r5, r8, #20
 801289c:	f100 0e14 	add.w	lr, r0, #20
 80128a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80128a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80128a8:	f108 0210 	add.w	r2, r8, #16
 80128ac:	46f2      	mov	sl, lr
 80128ae:	2100      	movs	r1, #0
 80128b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80128b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80128b8:	fa1f f883 	uxth.w	r8, r3
 80128bc:	fa11 f18b 	uxtah	r1, r1, fp
 80128c0:	0c1b      	lsrs	r3, r3, #16
 80128c2:	eba1 0808 	sub.w	r8, r1, r8
 80128c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80128ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80128ce:	fa1f f888 	uxth.w	r8, r8
 80128d2:	1419      	asrs	r1, r3, #16
 80128d4:	454e      	cmp	r6, r9
 80128d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80128da:	f84a 3b04 	str.w	r3, [sl], #4
 80128de:	d8e7      	bhi.n	80128b0 <__mdiff+0x80>
 80128e0:	1b33      	subs	r3, r6, r4
 80128e2:	3b15      	subs	r3, #21
 80128e4:	f023 0303 	bic.w	r3, r3, #3
 80128e8:	3304      	adds	r3, #4
 80128ea:	3415      	adds	r4, #21
 80128ec:	42a6      	cmp	r6, r4
 80128ee:	bf38      	it	cc
 80128f0:	2304      	movcc	r3, #4
 80128f2:	441d      	add	r5, r3
 80128f4:	4473      	add	r3, lr
 80128f6:	469e      	mov	lr, r3
 80128f8:	462e      	mov	r6, r5
 80128fa:	4566      	cmp	r6, ip
 80128fc:	d30e      	bcc.n	801291c <__mdiff+0xec>
 80128fe:	f10c 0203 	add.w	r2, ip, #3
 8012902:	1b52      	subs	r2, r2, r5
 8012904:	f022 0203 	bic.w	r2, r2, #3
 8012908:	3d03      	subs	r5, #3
 801290a:	45ac      	cmp	ip, r5
 801290c:	bf38      	it	cc
 801290e:	2200      	movcc	r2, #0
 8012910:	441a      	add	r2, r3
 8012912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012916:	b17b      	cbz	r3, 8012938 <__mdiff+0x108>
 8012918:	6107      	str	r7, [r0, #16]
 801291a:	e7a3      	b.n	8012864 <__mdiff+0x34>
 801291c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012920:	fa11 f288 	uxtah	r2, r1, r8
 8012924:	1414      	asrs	r4, r2, #16
 8012926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801292a:	b292      	uxth	r2, r2
 801292c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012930:	f84e 2b04 	str.w	r2, [lr], #4
 8012934:	1421      	asrs	r1, r4, #16
 8012936:	e7e0      	b.n	80128fa <__mdiff+0xca>
 8012938:	3f01      	subs	r7, #1
 801293a:	e7ea      	b.n	8012912 <__mdiff+0xe2>
 801293c:	080137ff 	.word	0x080137ff
 8012940:	08013870 	.word	0x08013870

08012944 <__d2b>:
 8012944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012948:	4689      	mov	r9, r1
 801294a:	2101      	movs	r1, #1
 801294c:	ec57 6b10 	vmov	r6, r7, d0
 8012950:	4690      	mov	r8, r2
 8012952:	f7ff fccf 	bl	80122f4 <_Balloc>
 8012956:	4604      	mov	r4, r0
 8012958:	b930      	cbnz	r0, 8012968 <__d2b+0x24>
 801295a:	4602      	mov	r2, r0
 801295c:	4b25      	ldr	r3, [pc, #148]	; (80129f4 <__d2b+0xb0>)
 801295e:	4826      	ldr	r0, [pc, #152]	; (80129f8 <__d2b+0xb4>)
 8012960:	f240 310a 	movw	r1, #778	; 0x30a
 8012964:	f000 fc08 	bl	8013178 <__assert_func>
 8012968:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801296c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012970:	bb35      	cbnz	r5, 80129c0 <__d2b+0x7c>
 8012972:	2e00      	cmp	r6, #0
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	d028      	beq.n	80129ca <__d2b+0x86>
 8012978:	4668      	mov	r0, sp
 801297a:	9600      	str	r6, [sp, #0]
 801297c:	f7ff fd82 	bl	8012484 <__lo0bits>
 8012980:	9900      	ldr	r1, [sp, #0]
 8012982:	b300      	cbz	r0, 80129c6 <__d2b+0x82>
 8012984:	9a01      	ldr	r2, [sp, #4]
 8012986:	f1c0 0320 	rsb	r3, r0, #32
 801298a:	fa02 f303 	lsl.w	r3, r2, r3
 801298e:	430b      	orrs	r3, r1
 8012990:	40c2      	lsrs	r2, r0
 8012992:	6163      	str	r3, [r4, #20]
 8012994:	9201      	str	r2, [sp, #4]
 8012996:	9b01      	ldr	r3, [sp, #4]
 8012998:	61a3      	str	r3, [r4, #24]
 801299a:	2b00      	cmp	r3, #0
 801299c:	bf14      	ite	ne
 801299e:	2202      	movne	r2, #2
 80129a0:	2201      	moveq	r2, #1
 80129a2:	6122      	str	r2, [r4, #16]
 80129a4:	b1d5      	cbz	r5, 80129dc <__d2b+0x98>
 80129a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80129aa:	4405      	add	r5, r0
 80129ac:	f8c9 5000 	str.w	r5, [r9]
 80129b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80129b4:	f8c8 0000 	str.w	r0, [r8]
 80129b8:	4620      	mov	r0, r4
 80129ba:	b003      	add	sp, #12
 80129bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129c4:	e7d5      	b.n	8012972 <__d2b+0x2e>
 80129c6:	6161      	str	r1, [r4, #20]
 80129c8:	e7e5      	b.n	8012996 <__d2b+0x52>
 80129ca:	a801      	add	r0, sp, #4
 80129cc:	f7ff fd5a 	bl	8012484 <__lo0bits>
 80129d0:	9b01      	ldr	r3, [sp, #4]
 80129d2:	6163      	str	r3, [r4, #20]
 80129d4:	2201      	movs	r2, #1
 80129d6:	6122      	str	r2, [r4, #16]
 80129d8:	3020      	adds	r0, #32
 80129da:	e7e3      	b.n	80129a4 <__d2b+0x60>
 80129dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80129e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129e4:	f8c9 0000 	str.w	r0, [r9]
 80129e8:	6918      	ldr	r0, [r3, #16]
 80129ea:	f7ff fd2b 	bl	8012444 <__hi0bits>
 80129ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129f2:	e7df      	b.n	80129b4 <__d2b+0x70>
 80129f4:	080137ff 	.word	0x080137ff
 80129f8:	08013870 	.word	0x08013870

080129fc <_calloc_r>:
 80129fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129fe:	fba1 2402 	umull	r2, r4, r1, r2
 8012a02:	b94c      	cbnz	r4, 8012a18 <_calloc_r+0x1c>
 8012a04:	4611      	mov	r1, r2
 8012a06:	9201      	str	r2, [sp, #4]
 8012a08:	f000 f87a 	bl	8012b00 <_malloc_r>
 8012a0c:	9a01      	ldr	r2, [sp, #4]
 8012a0e:	4605      	mov	r5, r0
 8012a10:	b930      	cbnz	r0, 8012a20 <_calloc_r+0x24>
 8012a12:	4628      	mov	r0, r5
 8012a14:	b003      	add	sp, #12
 8012a16:	bd30      	pop	{r4, r5, pc}
 8012a18:	220c      	movs	r2, #12
 8012a1a:	6002      	str	r2, [r0, #0]
 8012a1c:	2500      	movs	r5, #0
 8012a1e:	e7f8      	b.n	8012a12 <_calloc_r+0x16>
 8012a20:	4621      	mov	r1, r4
 8012a22:	f7fe f839 	bl	8010a98 <memset>
 8012a26:	e7f4      	b.n	8012a12 <_calloc_r+0x16>

08012a28 <_free_r>:
 8012a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a2a:	2900      	cmp	r1, #0
 8012a2c:	d044      	beq.n	8012ab8 <_free_r+0x90>
 8012a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a32:	9001      	str	r0, [sp, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f1a1 0404 	sub.w	r4, r1, #4
 8012a3a:	bfb8      	it	lt
 8012a3c:	18e4      	addlt	r4, r4, r3
 8012a3e:	f000 fd27 	bl	8013490 <__malloc_lock>
 8012a42:	4a1e      	ldr	r2, [pc, #120]	; (8012abc <_free_r+0x94>)
 8012a44:	9801      	ldr	r0, [sp, #4]
 8012a46:	6813      	ldr	r3, [r2, #0]
 8012a48:	b933      	cbnz	r3, 8012a58 <_free_r+0x30>
 8012a4a:	6063      	str	r3, [r4, #4]
 8012a4c:	6014      	str	r4, [r2, #0]
 8012a4e:	b003      	add	sp, #12
 8012a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a54:	f000 bd22 	b.w	801349c <__malloc_unlock>
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	d908      	bls.n	8012a6e <_free_r+0x46>
 8012a5c:	6825      	ldr	r5, [r4, #0]
 8012a5e:	1961      	adds	r1, r4, r5
 8012a60:	428b      	cmp	r3, r1
 8012a62:	bf01      	itttt	eq
 8012a64:	6819      	ldreq	r1, [r3, #0]
 8012a66:	685b      	ldreq	r3, [r3, #4]
 8012a68:	1949      	addeq	r1, r1, r5
 8012a6a:	6021      	streq	r1, [r4, #0]
 8012a6c:	e7ed      	b.n	8012a4a <_free_r+0x22>
 8012a6e:	461a      	mov	r2, r3
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	b10b      	cbz	r3, 8012a78 <_free_r+0x50>
 8012a74:	42a3      	cmp	r3, r4
 8012a76:	d9fa      	bls.n	8012a6e <_free_r+0x46>
 8012a78:	6811      	ldr	r1, [r2, #0]
 8012a7a:	1855      	adds	r5, r2, r1
 8012a7c:	42a5      	cmp	r5, r4
 8012a7e:	d10b      	bne.n	8012a98 <_free_r+0x70>
 8012a80:	6824      	ldr	r4, [r4, #0]
 8012a82:	4421      	add	r1, r4
 8012a84:	1854      	adds	r4, r2, r1
 8012a86:	42a3      	cmp	r3, r4
 8012a88:	6011      	str	r1, [r2, #0]
 8012a8a:	d1e0      	bne.n	8012a4e <_free_r+0x26>
 8012a8c:	681c      	ldr	r4, [r3, #0]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	6053      	str	r3, [r2, #4]
 8012a92:	4421      	add	r1, r4
 8012a94:	6011      	str	r1, [r2, #0]
 8012a96:	e7da      	b.n	8012a4e <_free_r+0x26>
 8012a98:	d902      	bls.n	8012aa0 <_free_r+0x78>
 8012a9a:	230c      	movs	r3, #12
 8012a9c:	6003      	str	r3, [r0, #0]
 8012a9e:	e7d6      	b.n	8012a4e <_free_r+0x26>
 8012aa0:	6825      	ldr	r5, [r4, #0]
 8012aa2:	1961      	adds	r1, r4, r5
 8012aa4:	428b      	cmp	r3, r1
 8012aa6:	bf04      	itt	eq
 8012aa8:	6819      	ldreq	r1, [r3, #0]
 8012aaa:	685b      	ldreq	r3, [r3, #4]
 8012aac:	6063      	str	r3, [r4, #4]
 8012aae:	bf04      	itt	eq
 8012ab0:	1949      	addeq	r1, r1, r5
 8012ab2:	6021      	streq	r1, [r4, #0]
 8012ab4:	6054      	str	r4, [r2, #4]
 8012ab6:	e7ca      	b.n	8012a4e <_free_r+0x26>
 8012ab8:	b003      	add	sp, #12
 8012aba:	bd30      	pop	{r4, r5, pc}
 8012abc:	20002500 	.word	0x20002500

08012ac0 <sbrk_aligned>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	4e0e      	ldr	r6, [pc, #56]	; (8012afc <sbrk_aligned+0x3c>)
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	6831      	ldr	r1, [r6, #0]
 8012ac8:	4605      	mov	r5, r0
 8012aca:	b911      	cbnz	r1, 8012ad2 <sbrk_aligned+0x12>
 8012acc:	f000 fa2e 	bl	8012f2c <_sbrk_r>
 8012ad0:	6030      	str	r0, [r6, #0]
 8012ad2:	4621      	mov	r1, r4
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f000 fa29 	bl	8012f2c <_sbrk_r>
 8012ada:	1c43      	adds	r3, r0, #1
 8012adc:	d00a      	beq.n	8012af4 <sbrk_aligned+0x34>
 8012ade:	1cc4      	adds	r4, r0, #3
 8012ae0:	f024 0403 	bic.w	r4, r4, #3
 8012ae4:	42a0      	cmp	r0, r4
 8012ae6:	d007      	beq.n	8012af8 <sbrk_aligned+0x38>
 8012ae8:	1a21      	subs	r1, r4, r0
 8012aea:	4628      	mov	r0, r5
 8012aec:	f000 fa1e 	bl	8012f2c <_sbrk_r>
 8012af0:	3001      	adds	r0, #1
 8012af2:	d101      	bne.n	8012af8 <sbrk_aligned+0x38>
 8012af4:	f04f 34ff 	mov.w	r4, #4294967295
 8012af8:	4620      	mov	r0, r4
 8012afa:	bd70      	pop	{r4, r5, r6, pc}
 8012afc:	20002504 	.word	0x20002504

08012b00 <_malloc_r>:
 8012b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b04:	1ccd      	adds	r5, r1, #3
 8012b06:	f025 0503 	bic.w	r5, r5, #3
 8012b0a:	3508      	adds	r5, #8
 8012b0c:	2d0c      	cmp	r5, #12
 8012b0e:	bf38      	it	cc
 8012b10:	250c      	movcc	r5, #12
 8012b12:	2d00      	cmp	r5, #0
 8012b14:	4607      	mov	r7, r0
 8012b16:	db01      	blt.n	8012b1c <_malloc_r+0x1c>
 8012b18:	42a9      	cmp	r1, r5
 8012b1a:	d905      	bls.n	8012b28 <_malloc_r+0x28>
 8012b1c:	230c      	movs	r3, #12
 8012b1e:	603b      	str	r3, [r7, #0]
 8012b20:	2600      	movs	r6, #0
 8012b22:	4630      	mov	r0, r6
 8012b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b28:	4e2e      	ldr	r6, [pc, #184]	; (8012be4 <_malloc_r+0xe4>)
 8012b2a:	f000 fcb1 	bl	8013490 <__malloc_lock>
 8012b2e:	6833      	ldr	r3, [r6, #0]
 8012b30:	461c      	mov	r4, r3
 8012b32:	bb34      	cbnz	r4, 8012b82 <_malloc_r+0x82>
 8012b34:	4629      	mov	r1, r5
 8012b36:	4638      	mov	r0, r7
 8012b38:	f7ff ffc2 	bl	8012ac0 <sbrk_aligned>
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	4604      	mov	r4, r0
 8012b40:	d14d      	bne.n	8012bde <_malloc_r+0xde>
 8012b42:	6834      	ldr	r4, [r6, #0]
 8012b44:	4626      	mov	r6, r4
 8012b46:	2e00      	cmp	r6, #0
 8012b48:	d140      	bne.n	8012bcc <_malloc_r+0xcc>
 8012b4a:	6823      	ldr	r3, [r4, #0]
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	4638      	mov	r0, r7
 8012b50:	eb04 0803 	add.w	r8, r4, r3
 8012b54:	f000 f9ea 	bl	8012f2c <_sbrk_r>
 8012b58:	4580      	cmp	r8, r0
 8012b5a:	d13a      	bne.n	8012bd2 <_malloc_r+0xd2>
 8012b5c:	6821      	ldr	r1, [r4, #0]
 8012b5e:	3503      	adds	r5, #3
 8012b60:	1a6d      	subs	r5, r5, r1
 8012b62:	f025 0503 	bic.w	r5, r5, #3
 8012b66:	3508      	adds	r5, #8
 8012b68:	2d0c      	cmp	r5, #12
 8012b6a:	bf38      	it	cc
 8012b6c:	250c      	movcc	r5, #12
 8012b6e:	4629      	mov	r1, r5
 8012b70:	4638      	mov	r0, r7
 8012b72:	f7ff ffa5 	bl	8012ac0 <sbrk_aligned>
 8012b76:	3001      	adds	r0, #1
 8012b78:	d02b      	beq.n	8012bd2 <_malloc_r+0xd2>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	442b      	add	r3, r5
 8012b7e:	6023      	str	r3, [r4, #0]
 8012b80:	e00e      	b.n	8012ba0 <_malloc_r+0xa0>
 8012b82:	6822      	ldr	r2, [r4, #0]
 8012b84:	1b52      	subs	r2, r2, r5
 8012b86:	d41e      	bmi.n	8012bc6 <_malloc_r+0xc6>
 8012b88:	2a0b      	cmp	r2, #11
 8012b8a:	d916      	bls.n	8012bba <_malloc_r+0xba>
 8012b8c:	1961      	adds	r1, r4, r5
 8012b8e:	42a3      	cmp	r3, r4
 8012b90:	6025      	str	r5, [r4, #0]
 8012b92:	bf18      	it	ne
 8012b94:	6059      	strne	r1, [r3, #4]
 8012b96:	6863      	ldr	r3, [r4, #4]
 8012b98:	bf08      	it	eq
 8012b9a:	6031      	streq	r1, [r6, #0]
 8012b9c:	5162      	str	r2, [r4, r5]
 8012b9e:	604b      	str	r3, [r1, #4]
 8012ba0:	4638      	mov	r0, r7
 8012ba2:	f104 060b 	add.w	r6, r4, #11
 8012ba6:	f000 fc79 	bl	801349c <__malloc_unlock>
 8012baa:	f026 0607 	bic.w	r6, r6, #7
 8012bae:	1d23      	adds	r3, r4, #4
 8012bb0:	1af2      	subs	r2, r6, r3
 8012bb2:	d0b6      	beq.n	8012b22 <_malloc_r+0x22>
 8012bb4:	1b9b      	subs	r3, r3, r6
 8012bb6:	50a3      	str	r3, [r4, r2]
 8012bb8:	e7b3      	b.n	8012b22 <_malloc_r+0x22>
 8012bba:	6862      	ldr	r2, [r4, #4]
 8012bbc:	42a3      	cmp	r3, r4
 8012bbe:	bf0c      	ite	eq
 8012bc0:	6032      	streq	r2, [r6, #0]
 8012bc2:	605a      	strne	r2, [r3, #4]
 8012bc4:	e7ec      	b.n	8012ba0 <_malloc_r+0xa0>
 8012bc6:	4623      	mov	r3, r4
 8012bc8:	6864      	ldr	r4, [r4, #4]
 8012bca:	e7b2      	b.n	8012b32 <_malloc_r+0x32>
 8012bcc:	4634      	mov	r4, r6
 8012bce:	6876      	ldr	r6, [r6, #4]
 8012bd0:	e7b9      	b.n	8012b46 <_malloc_r+0x46>
 8012bd2:	230c      	movs	r3, #12
 8012bd4:	603b      	str	r3, [r7, #0]
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	f000 fc60 	bl	801349c <__malloc_unlock>
 8012bdc:	e7a1      	b.n	8012b22 <_malloc_r+0x22>
 8012bde:	6025      	str	r5, [r4, #0]
 8012be0:	e7de      	b.n	8012ba0 <_malloc_r+0xa0>
 8012be2:	bf00      	nop
 8012be4:	20002500 	.word	0x20002500

08012be8 <__sfputc_r>:
 8012be8:	6893      	ldr	r3, [r2, #8]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	b410      	push	{r4}
 8012bf0:	6093      	str	r3, [r2, #8]
 8012bf2:	da08      	bge.n	8012c06 <__sfputc_r+0x1e>
 8012bf4:	6994      	ldr	r4, [r2, #24]
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	db01      	blt.n	8012bfe <__sfputc_r+0x16>
 8012bfa:	290a      	cmp	r1, #10
 8012bfc:	d103      	bne.n	8012c06 <__sfputc_r+0x1e>
 8012bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c02:	f000 b9e7 	b.w	8012fd4 <__swbuf_r>
 8012c06:	6813      	ldr	r3, [r2, #0]
 8012c08:	1c58      	adds	r0, r3, #1
 8012c0a:	6010      	str	r0, [r2, #0]
 8012c0c:	7019      	strb	r1, [r3, #0]
 8012c0e:	4608      	mov	r0, r1
 8012c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <__sfputs_r>:
 8012c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c18:	4606      	mov	r6, r0
 8012c1a:	460f      	mov	r7, r1
 8012c1c:	4614      	mov	r4, r2
 8012c1e:	18d5      	adds	r5, r2, r3
 8012c20:	42ac      	cmp	r4, r5
 8012c22:	d101      	bne.n	8012c28 <__sfputs_r+0x12>
 8012c24:	2000      	movs	r0, #0
 8012c26:	e007      	b.n	8012c38 <__sfputs_r+0x22>
 8012c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c2c:	463a      	mov	r2, r7
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f7ff ffda 	bl	8012be8 <__sfputc_r>
 8012c34:	1c43      	adds	r3, r0, #1
 8012c36:	d1f3      	bne.n	8012c20 <__sfputs_r+0xa>
 8012c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c3c <_vfiprintf_r>:
 8012c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c40:	460d      	mov	r5, r1
 8012c42:	b09d      	sub	sp, #116	; 0x74
 8012c44:	4614      	mov	r4, r2
 8012c46:	4698      	mov	r8, r3
 8012c48:	4606      	mov	r6, r0
 8012c4a:	b118      	cbz	r0, 8012c54 <_vfiprintf_r+0x18>
 8012c4c:	6983      	ldr	r3, [r0, #24]
 8012c4e:	b90b      	cbnz	r3, 8012c54 <_vfiprintf_r+0x18>
 8012c50:	f7ff fa94 	bl	801217c <__sinit>
 8012c54:	4b89      	ldr	r3, [pc, #548]	; (8012e7c <_vfiprintf_r+0x240>)
 8012c56:	429d      	cmp	r5, r3
 8012c58:	d11b      	bne.n	8012c92 <_vfiprintf_r+0x56>
 8012c5a:	6875      	ldr	r5, [r6, #4]
 8012c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c5e:	07d9      	lsls	r1, r3, #31
 8012c60:	d405      	bmi.n	8012c6e <_vfiprintf_r+0x32>
 8012c62:	89ab      	ldrh	r3, [r5, #12]
 8012c64:	059a      	lsls	r2, r3, #22
 8012c66:	d402      	bmi.n	8012c6e <_vfiprintf_r+0x32>
 8012c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c6a:	f7ff fb2a 	bl	80122c2 <__retarget_lock_acquire_recursive>
 8012c6e:	89ab      	ldrh	r3, [r5, #12]
 8012c70:	071b      	lsls	r3, r3, #28
 8012c72:	d501      	bpl.n	8012c78 <_vfiprintf_r+0x3c>
 8012c74:	692b      	ldr	r3, [r5, #16]
 8012c76:	b9eb      	cbnz	r3, 8012cb4 <_vfiprintf_r+0x78>
 8012c78:	4629      	mov	r1, r5
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	f000 fa0e 	bl	801309c <__swsetup_r>
 8012c80:	b1c0      	cbz	r0, 8012cb4 <_vfiprintf_r+0x78>
 8012c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c84:	07dc      	lsls	r4, r3, #31
 8012c86:	d50e      	bpl.n	8012ca6 <_vfiprintf_r+0x6a>
 8012c88:	f04f 30ff 	mov.w	r0, #4294967295
 8012c8c:	b01d      	add	sp, #116	; 0x74
 8012c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c92:	4b7b      	ldr	r3, [pc, #492]	; (8012e80 <_vfiprintf_r+0x244>)
 8012c94:	429d      	cmp	r5, r3
 8012c96:	d101      	bne.n	8012c9c <_vfiprintf_r+0x60>
 8012c98:	68b5      	ldr	r5, [r6, #8]
 8012c9a:	e7df      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012c9c:	4b79      	ldr	r3, [pc, #484]	; (8012e84 <_vfiprintf_r+0x248>)
 8012c9e:	429d      	cmp	r5, r3
 8012ca0:	bf08      	it	eq
 8012ca2:	68f5      	ldreq	r5, [r6, #12]
 8012ca4:	e7da      	b.n	8012c5c <_vfiprintf_r+0x20>
 8012ca6:	89ab      	ldrh	r3, [r5, #12]
 8012ca8:	0598      	lsls	r0, r3, #22
 8012caa:	d4ed      	bmi.n	8012c88 <_vfiprintf_r+0x4c>
 8012cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cae:	f7ff fb09 	bl	80122c4 <__retarget_lock_release_recursive>
 8012cb2:	e7e9      	b.n	8012c88 <_vfiprintf_r+0x4c>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb8:	2320      	movs	r3, #32
 8012cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cc2:	2330      	movs	r3, #48	; 0x30
 8012cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e88 <_vfiprintf_r+0x24c>
 8012cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ccc:	f04f 0901 	mov.w	r9, #1
 8012cd0:	4623      	mov	r3, r4
 8012cd2:	469a      	mov	sl, r3
 8012cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd8:	b10a      	cbz	r2, 8012cde <_vfiprintf_r+0xa2>
 8012cda:	2a25      	cmp	r2, #37	; 0x25
 8012cdc:	d1f9      	bne.n	8012cd2 <_vfiprintf_r+0x96>
 8012cde:	ebba 0b04 	subs.w	fp, sl, r4
 8012ce2:	d00b      	beq.n	8012cfc <_vfiprintf_r+0xc0>
 8012ce4:	465b      	mov	r3, fp
 8012ce6:	4622      	mov	r2, r4
 8012ce8:	4629      	mov	r1, r5
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7ff ff93 	bl	8012c16 <__sfputs_r>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	f000 80aa 	beq.w	8012e4a <_vfiprintf_r+0x20e>
 8012cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf8:	445a      	add	r2, fp
 8012cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8012cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f000 80a2 	beq.w	8012e4a <_vfiprintf_r+0x20e>
 8012d06:	2300      	movs	r3, #0
 8012d08:	f04f 32ff 	mov.w	r2, #4294967295
 8012d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d10:	f10a 0a01 	add.w	sl, sl, #1
 8012d14:	9304      	str	r3, [sp, #16]
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1e:	4654      	mov	r4, sl
 8012d20:	2205      	movs	r2, #5
 8012d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d26:	4858      	ldr	r0, [pc, #352]	; (8012e88 <_vfiprintf_r+0x24c>)
 8012d28:	f7ed fa5a 	bl	80001e0 <memchr>
 8012d2c:	9a04      	ldr	r2, [sp, #16]
 8012d2e:	b9d8      	cbnz	r0, 8012d68 <_vfiprintf_r+0x12c>
 8012d30:	06d1      	lsls	r1, r2, #27
 8012d32:	bf44      	itt	mi
 8012d34:	2320      	movmi	r3, #32
 8012d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d3a:	0713      	lsls	r3, r2, #28
 8012d3c:	bf44      	itt	mi
 8012d3e:	232b      	movmi	r3, #43	; 0x2b
 8012d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d44:	f89a 3000 	ldrb.w	r3, [sl]
 8012d48:	2b2a      	cmp	r3, #42	; 0x2a
 8012d4a:	d015      	beq.n	8012d78 <_vfiprintf_r+0x13c>
 8012d4c:	9a07      	ldr	r2, [sp, #28]
 8012d4e:	4654      	mov	r4, sl
 8012d50:	2000      	movs	r0, #0
 8012d52:	f04f 0c0a 	mov.w	ip, #10
 8012d56:	4621      	mov	r1, r4
 8012d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d5c:	3b30      	subs	r3, #48	; 0x30
 8012d5e:	2b09      	cmp	r3, #9
 8012d60:	d94e      	bls.n	8012e00 <_vfiprintf_r+0x1c4>
 8012d62:	b1b0      	cbz	r0, 8012d92 <_vfiprintf_r+0x156>
 8012d64:	9207      	str	r2, [sp, #28]
 8012d66:	e014      	b.n	8012d92 <_vfiprintf_r+0x156>
 8012d68:	eba0 0308 	sub.w	r3, r0, r8
 8012d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8012d70:	4313      	orrs	r3, r2
 8012d72:	9304      	str	r3, [sp, #16]
 8012d74:	46a2      	mov	sl, r4
 8012d76:	e7d2      	b.n	8012d1e <_vfiprintf_r+0xe2>
 8012d78:	9b03      	ldr	r3, [sp, #12]
 8012d7a:	1d19      	adds	r1, r3, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	9103      	str	r1, [sp, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	bfbb      	ittet	lt
 8012d84:	425b      	neglt	r3, r3
 8012d86:	f042 0202 	orrlt.w	r2, r2, #2
 8012d8a:	9307      	strge	r3, [sp, #28]
 8012d8c:	9307      	strlt	r3, [sp, #28]
 8012d8e:	bfb8      	it	lt
 8012d90:	9204      	strlt	r2, [sp, #16]
 8012d92:	7823      	ldrb	r3, [r4, #0]
 8012d94:	2b2e      	cmp	r3, #46	; 0x2e
 8012d96:	d10c      	bne.n	8012db2 <_vfiprintf_r+0x176>
 8012d98:	7863      	ldrb	r3, [r4, #1]
 8012d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d9c:	d135      	bne.n	8012e0a <_vfiprintf_r+0x1ce>
 8012d9e:	9b03      	ldr	r3, [sp, #12]
 8012da0:	1d1a      	adds	r2, r3, #4
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	9203      	str	r2, [sp, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bfb8      	it	lt
 8012daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8012dae:	3402      	adds	r4, #2
 8012db0:	9305      	str	r3, [sp, #20]
 8012db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e98 <_vfiprintf_r+0x25c>
 8012db6:	7821      	ldrb	r1, [r4, #0]
 8012db8:	2203      	movs	r2, #3
 8012dba:	4650      	mov	r0, sl
 8012dbc:	f7ed fa10 	bl	80001e0 <memchr>
 8012dc0:	b140      	cbz	r0, 8012dd4 <_vfiprintf_r+0x198>
 8012dc2:	2340      	movs	r3, #64	; 0x40
 8012dc4:	eba0 000a 	sub.w	r0, r0, sl
 8012dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8012dcc:	9b04      	ldr	r3, [sp, #16]
 8012dce:	4303      	orrs	r3, r0
 8012dd0:	3401      	adds	r4, #1
 8012dd2:	9304      	str	r3, [sp, #16]
 8012dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd8:	482c      	ldr	r0, [pc, #176]	; (8012e8c <_vfiprintf_r+0x250>)
 8012dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dde:	2206      	movs	r2, #6
 8012de0:	f7ed f9fe 	bl	80001e0 <memchr>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d03f      	beq.n	8012e68 <_vfiprintf_r+0x22c>
 8012de8:	4b29      	ldr	r3, [pc, #164]	; (8012e90 <_vfiprintf_r+0x254>)
 8012dea:	bb1b      	cbnz	r3, 8012e34 <_vfiprintf_r+0x1f8>
 8012dec:	9b03      	ldr	r3, [sp, #12]
 8012dee:	3307      	adds	r3, #7
 8012df0:	f023 0307 	bic.w	r3, r3, #7
 8012df4:	3308      	adds	r3, #8
 8012df6:	9303      	str	r3, [sp, #12]
 8012df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dfa:	443b      	add	r3, r7
 8012dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfe:	e767      	b.n	8012cd0 <_vfiprintf_r+0x94>
 8012e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e04:	460c      	mov	r4, r1
 8012e06:	2001      	movs	r0, #1
 8012e08:	e7a5      	b.n	8012d56 <_vfiprintf_r+0x11a>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	3401      	adds	r4, #1
 8012e0e:	9305      	str	r3, [sp, #20]
 8012e10:	4619      	mov	r1, r3
 8012e12:	f04f 0c0a 	mov.w	ip, #10
 8012e16:	4620      	mov	r0, r4
 8012e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e1c:	3a30      	subs	r2, #48	; 0x30
 8012e1e:	2a09      	cmp	r2, #9
 8012e20:	d903      	bls.n	8012e2a <_vfiprintf_r+0x1ee>
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d0c5      	beq.n	8012db2 <_vfiprintf_r+0x176>
 8012e26:	9105      	str	r1, [sp, #20]
 8012e28:	e7c3      	b.n	8012db2 <_vfiprintf_r+0x176>
 8012e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e2e:	4604      	mov	r4, r0
 8012e30:	2301      	movs	r3, #1
 8012e32:	e7f0      	b.n	8012e16 <_vfiprintf_r+0x1da>
 8012e34:	ab03      	add	r3, sp, #12
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	462a      	mov	r2, r5
 8012e3a:	4b16      	ldr	r3, [pc, #88]	; (8012e94 <_vfiprintf_r+0x258>)
 8012e3c:	a904      	add	r1, sp, #16
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f7fd fed2 	bl	8010be8 <_printf_float>
 8012e44:	4607      	mov	r7, r0
 8012e46:	1c78      	adds	r0, r7, #1
 8012e48:	d1d6      	bne.n	8012df8 <_vfiprintf_r+0x1bc>
 8012e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e4c:	07d9      	lsls	r1, r3, #31
 8012e4e:	d405      	bmi.n	8012e5c <_vfiprintf_r+0x220>
 8012e50:	89ab      	ldrh	r3, [r5, #12]
 8012e52:	059a      	lsls	r2, r3, #22
 8012e54:	d402      	bmi.n	8012e5c <_vfiprintf_r+0x220>
 8012e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e58:	f7ff fa34 	bl	80122c4 <__retarget_lock_release_recursive>
 8012e5c:	89ab      	ldrh	r3, [r5, #12]
 8012e5e:	065b      	lsls	r3, r3, #25
 8012e60:	f53f af12 	bmi.w	8012c88 <_vfiprintf_r+0x4c>
 8012e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e66:	e711      	b.n	8012c8c <_vfiprintf_r+0x50>
 8012e68:	ab03      	add	r3, sp, #12
 8012e6a:	9300      	str	r3, [sp, #0]
 8012e6c:	462a      	mov	r2, r5
 8012e6e:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <_vfiprintf_r+0x258>)
 8012e70:	a904      	add	r1, sp, #16
 8012e72:	4630      	mov	r0, r6
 8012e74:	f7fe f95c 	bl	8011130 <_printf_i>
 8012e78:	e7e4      	b.n	8012e44 <_vfiprintf_r+0x208>
 8012e7a:	bf00      	nop
 8012e7c:	08013830 	.word	0x08013830
 8012e80:	08013850 	.word	0x08013850
 8012e84:	08013810 	.word	0x08013810
 8012e88:	080139cc 	.word	0x080139cc
 8012e8c:	080139d6 	.word	0x080139d6
 8012e90:	08010be9 	.word	0x08010be9
 8012e94:	08012c17 	.word	0x08012c17
 8012e98:	080139d2 	.word	0x080139d2

08012e9c <_putc_r>:
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	460d      	mov	r5, r1
 8012ea0:	4614      	mov	r4, r2
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	b118      	cbz	r0, 8012eae <_putc_r+0x12>
 8012ea6:	6983      	ldr	r3, [r0, #24]
 8012ea8:	b90b      	cbnz	r3, 8012eae <_putc_r+0x12>
 8012eaa:	f7ff f967 	bl	801217c <__sinit>
 8012eae:	4b1c      	ldr	r3, [pc, #112]	; (8012f20 <_putc_r+0x84>)
 8012eb0:	429c      	cmp	r4, r3
 8012eb2:	d124      	bne.n	8012efe <_putc_r+0x62>
 8012eb4:	6874      	ldr	r4, [r6, #4]
 8012eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eb8:	07d8      	lsls	r0, r3, #31
 8012eba:	d405      	bmi.n	8012ec8 <_putc_r+0x2c>
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	0599      	lsls	r1, r3, #22
 8012ec0:	d402      	bmi.n	8012ec8 <_putc_r+0x2c>
 8012ec2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ec4:	f7ff f9fd 	bl	80122c2 <__retarget_lock_acquire_recursive>
 8012ec8:	68a3      	ldr	r3, [r4, #8]
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	60a3      	str	r3, [r4, #8]
 8012ed0:	da05      	bge.n	8012ede <_putc_r+0x42>
 8012ed2:	69a2      	ldr	r2, [r4, #24]
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	db1c      	blt.n	8012f12 <_putc_r+0x76>
 8012ed8:	b2eb      	uxtb	r3, r5
 8012eda:	2b0a      	cmp	r3, #10
 8012edc:	d019      	beq.n	8012f12 <_putc_r+0x76>
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	1c5a      	adds	r2, r3, #1
 8012ee2:	6022      	str	r2, [r4, #0]
 8012ee4:	701d      	strb	r5, [r3, #0]
 8012ee6:	b2ed      	uxtb	r5, r5
 8012ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eea:	07da      	lsls	r2, r3, #31
 8012eec:	d405      	bmi.n	8012efa <_putc_r+0x5e>
 8012eee:	89a3      	ldrh	r3, [r4, #12]
 8012ef0:	059b      	lsls	r3, r3, #22
 8012ef2:	d402      	bmi.n	8012efa <_putc_r+0x5e>
 8012ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ef6:	f7ff f9e5 	bl	80122c4 <__retarget_lock_release_recursive>
 8012efa:	4628      	mov	r0, r5
 8012efc:	bd70      	pop	{r4, r5, r6, pc}
 8012efe:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <_putc_r+0x88>)
 8012f00:	429c      	cmp	r4, r3
 8012f02:	d101      	bne.n	8012f08 <_putc_r+0x6c>
 8012f04:	68b4      	ldr	r4, [r6, #8]
 8012f06:	e7d6      	b.n	8012eb6 <_putc_r+0x1a>
 8012f08:	4b07      	ldr	r3, [pc, #28]	; (8012f28 <_putc_r+0x8c>)
 8012f0a:	429c      	cmp	r4, r3
 8012f0c:	bf08      	it	eq
 8012f0e:	68f4      	ldreq	r4, [r6, #12]
 8012f10:	e7d1      	b.n	8012eb6 <_putc_r+0x1a>
 8012f12:	4629      	mov	r1, r5
 8012f14:	4622      	mov	r2, r4
 8012f16:	4630      	mov	r0, r6
 8012f18:	f000 f85c 	bl	8012fd4 <__swbuf_r>
 8012f1c:	4605      	mov	r5, r0
 8012f1e:	e7e3      	b.n	8012ee8 <_putc_r+0x4c>
 8012f20:	08013830 	.word	0x08013830
 8012f24:	08013850 	.word	0x08013850
 8012f28:	08013810 	.word	0x08013810

08012f2c <_sbrk_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4d06      	ldr	r5, [pc, #24]	; (8012f48 <_sbrk_r+0x1c>)
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	602b      	str	r3, [r5, #0]
 8012f38:	f7f1 fa7e 	bl	8004438 <_sbrk>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_sbrk_r+0x1a>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_sbrk_r+0x1a>
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	20002508 	.word	0x20002508

08012f4c <__sread>:
 8012f4c:	b510      	push	{r4, lr}
 8012f4e:	460c      	mov	r4, r1
 8012f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f54:	f000 faa8 	bl	80134a8 <_read_r>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	bfab      	itete	ge
 8012f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f60:	181b      	addge	r3, r3, r0
 8012f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f66:	bfac      	ite	ge
 8012f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f6a:	81a3      	strhlt	r3, [r4, #12]
 8012f6c:	bd10      	pop	{r4, pc}

08012f6e <__swrite>:
 8012f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f72:	461f      	mov	r7, r3
 8012f74:	898b      	ldrh	r3, [r1, #12]
 8012f76:	05db      	lsls	r3, r3, #23
 8012f78:	4605      	mov	r5, r0
 8012f7a:	460c      	mov	r4, r1
 8012f7c:	4616      	mov	r6, r2
 8012f7e:	d505      	bpl.n	8012f8c <__swrite+0x1e>
 8012f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f84:	2302      	movs	r3, #2
 8012f86:	2200      	movs	r2, #0
 8012f88:	f000 f9f8 	bl	801337c <_lseek_r>
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f96:	81a3      	strh	r3, [r4, #12]
 8012f98:	4632      	mov	r2, r6
 8012f9a:	463b      	mov	r3, r7
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa2:	f000 b869 	b.w	8013078 <_write_r>

08012fa6 <__sseek>:
 8012fa6:	b510      	push	{r4, lr}
 8012fa8:	460c      	mov	r4, r1
 8012faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fae:	f000 f9e5 	bl	801337c <_lseek_r>
 8012fb2:	1c43      	adds	r3, r0, #1
 8012fb4:	89a3      	ldrh	r3, [r4, #12]
 8012fb6:	bf15      	itete	ne
 8012fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fc2:	81a3      	strheq	r3, [r4, #12]
 8012fc4:	bf18      	it	ne
 8012fc6:	81a3      	strhne	r3, [r4, #12]
 8012fc8:	bd10      	pop	{r4, pc}

08012fca <__sclose>:
 8012fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fce:	f000 b8f1 	b.w	80131b4 <_close_r>
	...

08012fd4 <__swbuf_r>:
 8012fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd6:	460e      	mov	r6, r1
 8012fd8:	4614      	mov	r4, r2
 8012fda:	4605      	mov	r5, r0
 8012fdc:	b118      	cbz	r0, 8012fe6 <__swbuf_r+0x12>
 8012fde:	6983      	ldr	r3, [r0, #24]
 8012fe0:	b90b      	cbnz	r3, 8012fe6 <__swbuf_r+0x12>
 8012fe2:	f7ff f8cb 	bl	801217c <__sinit>
 8012fe6:	4b21      	ldr	r3, [pc, #132]	; (801306c <__swbuf_r+0x98>)
 8012fe8:	429c      	cmp	r4, r3
 8012fea:	d12b      	bne.n	8013044 <__swbuf_r+0x70>
 8012fec:	686c      	ldr	r4, [r5, #4]
 8012fee:	69a3      	ldr	r3, [r4, #24]
 8012ff0:	60a3      	str	r3, [r4, #8]
 8012ff2:	89a3      	ldrh	r3, [r4, #12]
 8012ff4:	071a      	lsls	r2, r3, #28
 8012ff6:	d52f      	bpl.n	8013058 <__swbuf_r+0x84>
 8012ff8:	6923      	ldr	r3, [r4, #16]
 8012ffa:	b36b      	cbz	r3, 8013058 <__swbuf_r+0x84>
 8012ffc:	6923      	ldr	r3, [r4, #16]
 8012ffe:	6820      	ldr	r0, [r4, #0]
 8013000:	1ac0      	subs	r0, r0, r3
 8013002:	6963      	ldr	r3, [r4, #20]
 8013004:	b2f6      	uxtb	r6, r6
 8013006:	4283      	cmp	r3, r0
 8013008:	4637      	mov	r7, r6
 801300a:	dc04      	bgt.n	8013016 <__swbuf_r+0x42>
 801300c:	4621      	mov	r1, r4
 801300e:	4628      	mov	r0, r5
 8013010:	f000 f966 	bl	80132e0 <_fflush_r>
 8013014:	bb30      	cbnz	r0, 8013064 <__swbuf_r+0x90>
 8013016:	68a3      	ldr	r3, [r4, #8]
 8013018:	3b01      	subs	r3, #1
 801301a:	60a3      	str	r3, [r4, #8]
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	1c5a      	adds	r2, r3, #1
 8013020:	6022      	str	r2, [r4, #0]
 8013022:	701e      	strb	r6, [r3, #0]
 8013024:	6963      	ldr	r3, [r4, #20]
 8013026:	3001      	adds	r0, #1
 8013028:	4283      	cmp	r3, r0
 801302a:	d004      	beq.n	8013036 <__swbuf_r+0x62>
 801302c:	89a3      	ldrh	r3, [r4, #12]
 801302e:	07db      	lsls	r3, r3, #31
 8013030:	d506      	bpl.n	8013040 <__swbuf_r+0x6c>
 8013032:	2e0a      	cmp	r6, #10
 8013034:	d104      	bne.n	8013040 <__swbuf_r+0x6c>
 8013036:	4621      	mov	r1, r4
 8013038:	4628      	mov	r0, r5
 801303a:	f000 f951 	bl	80132e0 <_fflush_r>
 801303e:	b988      	cbnz	r0, 8013064 <__swbuf_r+0x90>
 8013040:	4638      	mov	r0, r7
 8013042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013044:	4b0a      	ldr	r3, [pc, #40]	; (8013070 <__swbuf_r+0x9c>)
 8013046:	429c      	cmp	r4, r3
 8013048:	d101      	bne.n	801304e <__swbuf_r+0x7a>
 801304a:	68ac      	ldr	r4, [r5, #8]
 801304c:	e7cf      	b.n	8012fee <__swbuf_r+0x1a>
 801304e:	4b09      	ldr	r3, [pc, #36]	; (8013074 <__swbuf_r+0xa0>)
 8013050:	429c      	cmp	r4, r3
 8013052:	bf08      	it	eq
 8013054:	68ec      	ldreq	r4, [r5, #12]
 8013056:	e7ca      	b.n	8012fee <__swbuf_r+0x1a>
 8013058:	4621      	mov	r1, r4
 801305a:	4628      	mov	r0, r5
 801305c:	f000 f81e 	bl	801309c <__swsetup_r>
 8013060:	2800      	cmp	r0, #0
 8013062:	d0cb      	beq.n	8012ffc <__swbuf_r+0x28>
 8013064:	f04f 37ff 	mov.w	r7, #4294967295
 8013068:	e7ea      	b.n	8013040 <__swbuf_r+0x6c>
 801306a:	bf00      	nop
 801306c:	08013830 	.word	0x08013830
 8013070:	08013850 	.word	0x08013850
 8013074:	08013810 	.word	0x08013810

08013078 <_write_r>:
 8013078:	b538      	push	{r3, r4, r5, lr}
 801307a:	4d07      	ldr	r5, [pc, #28]	; (8013098 <_write_r+0x20>)
 801307c:	4604      	mov	r4, r0
 801307e:	4608      	mov	r0, r1
 8013080:	4611      	mov	r1, r2
 8013082:	2200      	movs	r2, #0
 8013084:	602a      	str	r2, [r5, #0]
 8013086:	461a      	mov	r2, r3
 8013088:	f7f1 f985 	bl	8004396 <_write>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d102      	bne.n	8013096 <_write_r+0x1e>
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	b103      	cbz	r3, 8013096 <_write_r+0x1e>
 8013094:	6023      	str	r3, [r4, #0]
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	20002508 	.word	0x20002508

0801309c <__swsetup_r>:
 801309c:	4b32      	ldr	r3, [pc, #200]	; (8013168 <__swsetup_r+0xcc>)
 801309e:	b570      	push	{r4, r5, r6, lr}
 80130a0:	681d      	ldr	r5, [r3, #0]
 80130a2:	4606      	mov	r6, r0
 80130a4:	460c      	mov	r4, r1
 80130a6:	b125      	cbz	r5, 80130b2 <__swsetup_r+0x16>
 80130a8:	69ab      	ldr	r3, [r5, #24]
 80130aa:	b913      	cbnz	r3, 80130b2 <__swsetup_r+0x16>
 80130ac:	4628      	mov	r0, r5
 80130ae:	f7ff f865 	bl	801217c <__sinit>
 80130b2:	4b2e      	ldr	r3, [pc, #184]	; (801316c <__swsetup_r+0xd0>)
 80130b4:	429c      	cmp	r4, r3
 80130b6:	d10f      	bne.n	80130d8 <__swsetup_r+0x3c>
 80130b8:	686c      	ldr	r4, [r5, #4]
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130c0:	0719      	lsls	r1, r3, #28
 80130c2:	d42c      	bmi.n	801311e <__swsetup_r+0x82>
 80130c4:	06dd      	lsls	r5, r3, #27
 80130c6:	d411      	bmi.n	80130ec <__swsetup_r+0x50>
 80130c8:	2309      	movs	r3, #9
 80130ca:	6033      	str	r3, [r6, #0]
 80130cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80130d0:	81a3      	strh	r3, [r4, #12]
 80130d2:	f04f 30ff 	mov.w	r0, #4294967295
 80130d6:	e03e      	b.n	8013156 <__swsetup_r+0xba>
 80130d8:	4b25      	ldr	r3, [pc, #148]	; (8013170 <__swsetup_r+0xd4>)
 80130da:	429c      	cmp	r4, r3
 80130dc:	d101      	bne.n	80130e2 <__swsetup_r+0x46>
 80130de:	68ac      	ldr	r4, [r5, #8]
 80130e0:	e7eb      	b.n	80130ba <__swsetup_r+0x1e>
 80130e2:	4b24      	ldr	r3, [pc, #144]	; (8013174 <__swsetup_r+0xd8>)
 80130e4:	429c      	cmp	r4, r3
 80130e6:	bf08      	it	eq
 80130e8:	68ec      	ldreq	r4, [r5, #12]
 80130ea:	e7e6      	b.n	80130ba <__swsetup_r+0x1e>
 80130ec:	0758      	lsls	r0, r3, #29
 80130ee:	d512      	bpl.n	8013116 <__swsetup_r+0x7a>
 80130f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130f2:	b141      	cbz	r1, 8013106 <__swsetup_r+0x6a>
 80130f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130f8:	4299      	cmp	r1, r3
 80130fa:	d002      	beq.n	8013102 <__swsetup_r+0x66>
 80130fc:	4630      	mov	r0, r6
 80130fe:	f7ff fc93 	bl	8012a28 <_free_r>
 8013102:	2300      	movs	r3, #0
 8013104:	6363      	str	r3, [r4, #52]	; 0x34
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	2300      	movs	r3, #0
 8013110:	6063      	str	r3, [r4, #4]
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	89a3      	ldrh	r3, [r4, #12]
 8013118:	f043 0308 	orr.w	r3, r3, #8
 801311c:	81a3      	strh	r3, [r4, #12]
 801311e:	6923      	ldr	r3, [r4, #16]
 8013120:	b94b      	cbnz	r3, 8013136 <__swsetup_r+0x9a>
 8013122:	89a3      	ldrh	r3, [r4, #12]
 8013124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801312c:	d003      	beq.n	8013136 <__swsetup_r+0x9a>
 801312e:	4621      	mov	r1, r4
 8013130:	4630      	mov	r0, r6
 8013132:	f000 f95b 	bl	80133ec <__smakebuf_r>
 8013136:	89a0      	ldrh	r0, [r4, #12]
 8013138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801313c:	f010 0301 	ands.w	r3, r0, #1
 8013140:	d00a      	beq.n	8013158 <__swsetup_r+0xbc>
 8013142:	2300      	movs	r3, #0
 8013144:	60a3      	str	r3, [r4, #8]
 8013146:	6963      	ldr	r3, [r4, #20]
 8013148:	425b      	negs	r3, r3
 801314a:	61a3      	str	r3, [r4, #24]
 801314c:	6923      	ldr	r3, [r4, #16]
 801314e:	b943      	cbnz	r3, 8013162 <__swsetup_r+0xc6>
 8013150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013154:	d1ba      	bne.n	80130cc <__swsetup_r+0x30>
 8013156:	bd70      	pop	{r4, r5, r6, pc}
 8013158:	0781      	lsls	r1, r0, #30
 801315a:	bf58      	it	pl
 801315c:	6963      	ldrpl	r3, [r4, #20]
 801315e:	60a3      	str	r3, [r4, #8]
 8013160:	e7f4      	b.n	801314c <__swsetup_r+0xb0>
 8013162:	2000      	movs	r0, #0
 8013164:	e7f7      	b.n	8013156 <__swsetup_r+0xba>
 8013166:	bf00      	nop
 8013168:	20000120 	.word	0x20000120
 801316c:	08013830 	.word	0x08013830
 8013170:	08013850 	.word	0x08013850
 8013174:	08013810 	.word	0x08013810

08013178 <__assert_func>:
 8013178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801317a:	4614      	mov	r4, r2
 801317c:	461a      	mov	r2, r3
 801317e:	4b09      	ldr	r3, [pc, #36]	; (80131a4 <__assert_func+0x2c>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4605      	mov	r5, r0
 8013184:	68d8      	ldr	r0, [r3, #12]
 8013186:	b14c      	cbz	r4, 801319c <__assert_func+0x24>
 8013188:	4b07      	ldr	r3, [pc, #28]	; (80131a8 <__assert_func+0x30>)
 801318a:	9100      	str	r1, [sp, #0]
 801318c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013190:	4906      	ldr	r1, [pc, #24]	; (80131ac <__assert_func+0x34>)
 8013192:	462b      	mov	r3, r5
 8013194:	f000 f8e0 	bl	8013358 <fiprintf>
 8013198:	f000 f9a5 	bl	80134e6 <abort>
 801319c:	4b04      	ldr	r3, [pc, #16]	; (80131b0 <__assert_func+0x38>)
 801319e:	461c      	mov	r4, r3
 80131a0:	e7f3      	b.n	801318a <__assert_func+0x12>
 80131a2:	bf00      	nop
 80131a4:	20000120 	.word	0x20000120
 80131a8:	080139dd 	.word	0x080139dd
 80131ac:	080139ea 	.word	0x080139ea
 80131b0:	08013a18 	.word	0x08013a18

080131b4 <_close_r>:
 80131b4:	b538      	push	{r3, r4, r5, lr}
 80131b6:	4d06      	ldr	r5, [pc, #24]	; (80131d0 <_close_r+0x1c>)
 80131b8:	2300      	movs	r3, #0
 80131ba:	4604      	mov	r4, r0
 80131bc:	4608      	mov	r0, r1
 80131be:	602b      	str	r3, [r5, #0]
 80131c0:	f7f1 f905 	bl	80043ce <_close>
 80131c4:	1c43      	adds	r3, r0, #1
 80131c6:	d102      	bne.n	80131ce <_close_r+0x1a>
 80131c8:	682b      	ldr	r3, [r5, #0]
 80131ca:	b103      	cbz	r3, 80131ce <_close_r+0x1a>
 80131cc:	6023      	str	r3, [r4, #0]
 80131ce:	bd38      	pop	{r3, r4, r5, pc}
 80131d0:	20002508 	.word	0x20002508

080131d4 <__sflush_r>:
 80131d4:	898a      	ldrh	r2, [r1, #12]
 80131d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131da:	4605      	mov	r5, r0
 80131dc:	0710      	lsls	r0, r2, #28
 80131de:	460c      	mov	r4, r1
 80131e0:	d458      	bmi.n	8013294 <__sflush_r+0xc0>
 80131e2:	684b      	ldr	r3, [r1, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	dc05      	bgt.n	80131f4 <__sflush_r+0x20>
 80131e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	dc02      	bgt.n	80131f4 <__sflush_r+0x20>
 80131ee:	2000      	movs	r0, #0
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131f6:	2e00      	cmp	r6, #0
 80131f8:	d0f9      	beq.n	80131ee <__sflush_r+0x1a>
 80131fa:	2300      	movs	r3, #0
 80131fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013200:	682f      	ldr	r7, [r5, #0]
 8013202:	602b      	str	r3, [r5, #0]
 8013204:	d032      	beq.n	801326c <__sflush_r+0x98>
 8013206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013208:	89a3      	ldrh	r3, [r4, #12]
 801320a:	075a      	lsls	r2, r3, #29
 801320c:	d505      	bpl.n	801321a <__sflush_r+0x46>
 801320e:	6863      	ldr	r3, [r4, #4]
 8013210:	1ac0      	subs	r0, r0, r3
 8013212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013214:	b10b      	cbz	r3, 801321a <__sflush_r+0x46>
 8013216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013218:	1ac0      	subs	r0, r0, r3
 801321a:	2300      	movs	r3, #0
 801321c:	4602      	mov	r2, r0
 801321e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013220:	6a21      	ldr	r1, [r4, #32]
 8013222:	4628      	mov	r0, r5
 8013224:	47b0      	blx	r6
 8013226:	1c43      	adds	r3, r0, #1
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	d106      	bne.n	801323a <__sflush_r+0x66>
 801322c:	6829      	ldr	r1, [r5, #0]
 801322e:	291d      	cmp	r1, #29
 8013230:	d82c      	bhi.n	801328c <__sflush_r+0xb8>
 8013232:	4a2a      	ldr	r2, [pc, #168]	; (80132dc <__sflush_r+0x108>)
 8013234:	40ca      	lsrs	r2, r1
 8013236:	07d6      	lsls	r6, r2, #31
 8013238:	d528      	bpl.n	801328c <__sflush_r+0xb8>
 801323a:	2200      	movs	r2, #0
 801323c:	6062      	str	r2, [r4, #4]
 801323e:	04d9      	lsls	r1, r3, #19
 8013240:	6922      	ldr	r2, [r4, #16]
 8013242:	6022      	str	r2, [r4, #0]
 8013244:	d504      	bpl.n	8013250 <__sflush_r+0x7c>
 8013246:	1c42      	adds	r2, r0, #1
 8013248:	d101      	bne.n	801324e <__sflush_r+0x7a>
 801324a:	682b      	ldr	r3, [r5, #0]
 801324c:	b903      	cbnz	r3, 8013250 <__sflush_r+0x7c>
 801324e:	6560      	str	r0, [r4, #84]	; 0x54
 8013250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013252:	602f      	str	r7, [r5, #0]
 8013254:	2900      	cmp	r1, #0
 8013256:	d0ca      	beq.n	80131ee <__sflush_r+0x1a>
 8013258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801325c:	4299      	cmp	r1, r3
 801325e:	d002      	beq.n	8013266 <__sflush_r+0x92>
 8013260:	4628      	mov	r0, r5
 8013262:	f7ff fbe1 	bl	8012a28 <_free_r>
 8013266:	2000      	movs	r0, #0
 8013268:	6360      	str	r0, [r4, #52]	; 0x34
 801326a:	e7c1      	b.n	80131f0 <__sflush_r+0x1c>
 801326c:	6a21      	ldr	r1, [r4, #32]
 801326e:	2301      	movs	r3, #1
 8013270:	4628      	mov	r0, r5
 8013272:	47b0      	blx	r6
 8013274:	1c41      	adds	r1, r0, #1
 8013276:	d1c7      	bne.n	8013208 <__sflush_r+0x34>
 8013278:	682b      	ldr	r3, [r5, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d0c4      	beq.n	8013208 <__sflush_r+0x34>
 801327e:	2b1d      	cmp	r3, #29
 8013280:	d001      	beq.n	8013286 <__sflush_r+0xb2>
 8013282:	2b16      	cmp	r3, #22
 8013284:	d101      	bne.n	801328a <__sflush_r+0xb6>
 8013286:	602f      	str	r7, [r5, #0]
 8013288:	e7b1      	b.n	80131ee <__sflush_r+0x1a>
 801328a:	89a3      	ldrh	r3, [r4, #12]
 801328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013290:	81a3      	strh	r3, [r4, #12]
 8013292:	e7ad      	b.n	80131f0 <__sflush_r+0x1c>
 8013294:	690f      	ldr	r7, [r1, #16]
 8013296:	2f00      	cmp	r7, #0
 8013298:	d0a9      	beq.n	80131ee <__sflush_r+0x1a>
 801329a:	0793      	lsls	r3, r2, #30
 801329c:	680e      	ldr	r6, [r1, #0]
 801329e:	bf08      	it	eq
 80132a0:	694b      	ldreq	r3, [r1, #20]
 80132a2:	600f      	str	r7, [r1, #0]
 80132a4:	bf18      	it	ne
 80132a6:	2300      	movne	r3, #0
 80132a8:	eba6 0807 	sub.w	r8, r6, r7
 80132ac:	608b      	str	r3, [r1, #8]
 80132ae:	f1b8 0f00 	cmp.w	r8, #0
 80132b2:	dd9c      	ble.n	80131ee <__sflush_r+0x1a>
 80132b4:	6a21      	ldr	r1, [r4, #32]
 80132b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132b8:	4643      	mov	r3, r8
 80132ba:	463a      	mov	r2, r7
 80132bc:	4628      	mov	r0, r5
 80132be:	47b0      	blx	r6
 80132c0:	2800      	cmp	r0, #0
 80132c2:	dc06      	bgt.n	80132d2 <__sflush_r+0xfe>
 80132c4:	89a3      	ldrh	r3, [r4, #12]
 80132c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	f04f 30ff 	mov.w	r0, #4294967295
 80132d0:	e78e      	b.n	80131f0 <__sflush_r+0x1c>
 80132d2:	4407      	add	r7, r0
 80132d4:	eba8 0800 	sub.w	r8, r8, r0
 80132d8:	e7e9      	b.n	80132ae <__sflush_r+0xda>
 80132da:	bf00      	nop
 80132dc:	20400001 	.word	0x20400001

080132e0 <_fflush_r>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	690b      	ldr	r3, [r1, #16]
 80132e4:	4605      	mov	r5, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	b913      	cbnz	r3, 80132f0 <_fflush_r+0x10>
 80132ea:	2500      	movs	r5, #0
 80132ec:	4628      	mov	r0, r5
 80132ee:	bd38      	pop	{r3, r4, r5, pc}
 80132f0:	b118      	cbz	r0, 80132fa <_fflush_r+0x1a>
 80132f2:	6983      	ldr	r3, [r0, #24]
 80132f4:	b90b      	cbnz	r3, 80132fa <_fflush_r+0x1a>
 80132f6:	f7fe ff41 	bl	801217c <__sinit>
 80132fa:	4b14      	ldr	r3, [pc, #80]	; (801334c <_fflush_r+0x6c>)
 80132fc:	429c      	cmp	r4, r3
 80132fe:	d11b      	bne.n	8013338 <_fflush_r+0x58>
 8013300:	686c      	ldr	r4, [r5, #4]
 8013302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0ef      	beq.n	80132ea <_fflush_r+0xa>
 801330a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801330c:	07d0      	lsls	r0, r2, #31
 801330e:	d404      	bmi.n	801331a <_fflush_r+0x3a>
 8013310:	0599      	lsls	r1, r3, #22
 8013312:	d402      	bmi.n	801331a <_fflush_r+0x3a>
 8013314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013316:	f7fe ffd4 	bl	80122c2 <__retarget_lock_acquire_recursive>
 801331a:	4628      	mov	r0, r5
 801331c:	4621      	mov	r1, r4
 801331e:	f7ff ff59 	bl	80131d4 <__sflush_r>
 8013322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013324:	07da      	lsls	r2, r3, #31
 8013326:	4605      	mov	r5, r0
 8013328:	d4e0      	bmi.n	80132ec <_fflush_r+0xc>
 801332a:	89a3      	ldrh	r3, [r4, #12]
 801332c:	059b      	lsls	r3, r3, #22
 801332e:	d4dd      	bmi.n	80132ec <_fflush_r+0xc>
 8013330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013332:	f7fe ffc7 	bl	80122c4 <__retarget_lock_release_recursive>
 8013336:	e7d9      	b.n	80132ec <_fflush_r+0xc>
 8013338:	4b05      	ldr	r3, [pc, #20]	; (8013350 <_fflush_r+0x70>)
 801333a:	429c      	cmp	r4, r3
 801333c:	d101      	bne.n	8013342 <_fflush_r+0x62>
 801333e:	68ac      	ldr	r4, [r5, #8]
 8013340:	e7df      	b.n	8013302 <_fflush_r+0x22>
 8013342:	4b04      	ldr	r3, [pc, #16]	; (8013354 <_fflush_r+0x74>)
 8013344:	429c      	cmp	r4, r3
 8013346:	bf08      	it	eq
 8013348:	68ec      	ldreq	r4, [r5, #12]
 801334a:	e7da      	b.n	8013302 <_fflush_r+0x22>
 801334c:	08013830 	.word	0x08013830
 8013350:	08013850 	.word	0x08013850
 8013354:	08013810 	.word	0x08013810

08013358 <fiprintf>:
 8013358:	b40e      	push	{r1, r2, r3}
 801335a:	b503      	push	{r0, r1, lr}
 801335c:	4601      	mov	r1, r0
 801335e:	ab03      	add	r3, sp, #12
 8013360:	4805      	ldr	r0, [pc, #20]	; (8013378 <fiprintf+0x20>)
 8013362:	f853 2b04 	ldr.w	r2, [r3], #4
 8013366:	6800      	ldr	r0, [r0, #0]
 8013368:	9301      	str	r3, [sp, #4]
 801336a:	f7ff fc67 	bl	8012c3c <_vfiprintf_r>
 801336e:	b002      	add	sp, #8
 8013370:	f85d eb04 	ldr.w	lr, [sp], #4
 8013374:	b003      	add	sp, #12
 8013376:	4770      	bx	lr
 8013378:	20000120 	.word	0x20000120

0801337c <_lseek_r>:
 801337c:	b538      	push	{r3, r4, r5, lr}
 801337e:	4d07      	ldr	r5, [pc, #28]	; (801339c <_lseek_r+0x20>)
 8013380:	4604      	mov	r4, r0
 8013382:	4608      	mov	r0, r1
 8013384:	4611      	mov	r1, r2
 8013386:	2200      	movs	r2, #0
 8013388:	602a      	str	r2, [r5, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	f7f1 f846 	bl	800441c <_lseek>
 8013390:	1c43      	adds	r3, r0, #1
 8013392:	d102      	bne.n	801339a <_lseek_r+0x1e>
 8013394:	682b      	ldr	r3, [r5, #0]
 8013396:	b103      	cbz	r3, 801339a <_lseek_r+0x1e>
 8013398:	6023      	str	r3, [r4, #0]
 801339a:	bd38      	pop	{r3, r4, r5, pc}
 801339c:	20002508 	.word	0x20002508

080133a0 <__swhatbuf_r>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	460e      	mov	r6, r1
 80133a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a8:	2900      	cmp	r1, #0
 80133aa:	b096      	sub	sp, #88	; 0x58
 80133ac:	4614      	mov	r4, r2
 80133ae:	461d      	mov	r5, r3
 80133b0:	da08      	bge.n	80133c4 <__swhatbuf_r+0x24>
 80133b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80133b6:	2200      	movs	r2, #0
 80133b8:	602a      	str	r2, [r5, #0]
 80133ba:	061a      	lsls	r2, r3, #24
 80133bc:	d410      	bmi.n	80133e0 <__swhatbuf_r+0x40>
 80133be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133c2:	e00e      	b.n	80133e2 <__swhatbuf_r+0x42>
 80133c4:	466a      	mov	r2, sp
 80133c6:	f000 f895 	bl	80134f4 <_fstat_r>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	dbf1      	blt.n	80133b2 <__swhatbuf_r+0x12>
 80133ce:	9a01      	ldr	r2, [sp, #4]
 80133d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80133d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80133d8:	425a      	negs	r2, r3
 80133da:	415a      	adcs	r2, r3
 80133dc:	602a      	str	r2, [r5, #0]
 80133de:	e7ee      	b.n	80133be <__swhatbuf_r+0x1e>
 80133e0:	2340      	movs	r3, #64	; 0x40
 80133e2:	2000      	movs	r0, #0
 80133e4:	6023      	str	r3, [r4, #0]
 80133e6:	b016      	add	sp, #88	; 0x58
 80133e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080133ec <__smakebuf_r>:
 80133ec:	898b      	ldrh	r3, [r1, #12]
 80133ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133f0:	079d      	lsls	r5, r3, #30
 80133f2:	4606      	mov	r6, r0
 80133f4:	460c      	mov	r4, r1
 80133f6:	d507      	bpl.n	8013408 <__smakebuf_r+0x1c>
 80133f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80133fc:	6023      	str	r3, [r4, #0]
 80133fe:	6123      	str	r3, [r4, #16]
 8013400:	2301      	movs	r3, #1
 8013402:	6163      	str	r3, [r4, #20]
 8013404:	b002      	add	sp, #8
 8013406:	bd70      	pop	{r4, r5, r6, pc}
 8013408:	ab01      	add	r3, sp, #4
 801340a:	466a      	mov	r2, sp
 801340c:	f7ff ffc8 	bl	80133a0 <__swhatbuf_r>
 8013410:	9900      	ldr	r1, [sp, #0]
 8013412:	4605      	mov	r5, r0
 8013414:	4630      	mov	r0, r6
 8013416:	f7ff fb73 	bl	8012b00 <_malloc_r>
 801341a:	b948      	cbnz	r0, 8013430 <__smakebuf_r+0x44>
 801341c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013420:	059a      	lsls	r2, r3, #22
 8013422:	d4ef      	bmi.n	8013404 <__smakebuf_r+0x18>
 8013424:	f023 0303 	bic.w	r3, r3, #3
 8013428:	f043 0302 	orr.w	r3, r3, #2
 801342c:	81a3      	strh	r3, [r4, #12]
 801342e:	e7e3      	b.n	80133f8 <__smakebuf_r+0xc>
 8013430:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <__smakebuf_r+0x7c>)
 8013432:	62b3      	str	r3, [r6, #40]	; 0x28
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	6020      	str	r0, [r4, #0]
 8013438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801343c:	81a3      	strh	r3, [r4, #12]
 801343e:	9b00      	ldr	r3, [sp, #0]
 8013440:	6163      	str	r3, [r4, #20]
 8013442:	9b01      	ldr	r3, [sp, #4]
 8013444:	6120      	str	r0, [r4, #16]
 8013446:	b15b      	cbz	r3, 8013460 <__smakebuf_r+0x74>
 8013448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801344c:	4630      	mov	r0, r6
 801344e:	f000 f863 	bl	8013518 <_isatty_r>
 8013452:	b128      	cbz	r0, 8013460 <__smakebuf_r+0x74>
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	f023 0303 	bic.w	r3, r3, #3
 801345a:	f043 0301 	orr.w	r3, r3, #1
 801345e:	81a3      	strh	r3, [r4, #12]
 8013460:	89a0      	ldrh	r0, [r4, #12]
 8013462:	4305      	orrs	r5, r0
 8013464:	81a5      	strh	r5, [r4, #12]
 8013466:	e7cd      	b.n	8013404 <__smakebuf_r+0x18>
 8013468:	08012115 	.word	0x08012115

0801346c <__ascii_mbtowc>:
 801346c:	b082      	sub	sp, #8
 801346e:	b901      	cbnz	r1, 8013472 <__ascii_mbtowc+0x6>
 8013470:	a901      	add	r1, sp, #4
 8013472:	b142      	cbz	r2, 8013486 <__ascii_mbtowc+0x1a>
 8013474:	b14b      	cbz	r3, 801348a <__ascii_mbtowc+0x1e>
 8013476:	7813      	ldrb	r3, [r2, #0]
 8013478:	600b      	str	r3, [r1, #0]
 801347a:	7812      	ldrb	r2, [r2, #0]
 801347c:	1e10      	subs	r0, r2, #0
 801347e:	bf18      	it	ne
 8013480:	2001      	movne	r0, #1
 8013482:	b002      	add	sp, #8
 8013484:	4770      	bx	lr
 8013486:	4610      	mov	r0, r2
 8013488:	e7fb      	b.n	8013482 <__ascii_mbtowc+0x16>
 801348a:	f06f 0001 	mvn.w	r0, #1
 801348e:	e7f8      	b.n	8013482 <__ascii_mbtowc+0x16>

08013490 <__malloc_lock>:
 8013490:	4801      	ldr	r0, [pc, #4]	; (8013498 <__malloc_lock+0x8>)
 8013492:	f7fe bf16 	b.w	80122c2 <__retarget_lock_acquire_recursive>
 8013496:	bf00      	nop
 8013498:	200024fc 	.word	0x200024fc

0801349c <__malloc_unlock>:
 801349c:	4801      	ldr	r0, [pc, #4]	; (80134a4 <__malloc_unlock+0x8>)
 801349e:	f7fe bf11 	b.w	80122c4 <__retarget_lock_release_recursive>
 80134a2:	bf00      	nop
 80134a4:	200024fc 	.word	0x200024fc

080134a8 <_read_r>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	4d07      	ldr	r5, [pc, #28]	; (80134c8 <_read_r+0x20>)
 80134ac:	4604      	mov	r4, r0
 80134ae:	4608      	mov	r0, r1
 80134b0:	4611      	mov	r1, r2
 80134b2:	2200      	movs	r2, #0
 80134b4:	602a      	str	r2, [r5, #0]
 80134b6:	461a      	mov	r2, r3
 80134b8:	f7f0 ff50 	bl	800435c <_read>
 80134bc:	1c43      	adds	r3, r0, #1
 80134be:	d102      	bne.n	80134c6 <_read_r+0x1e>
 80134c0:	682b      	ldr	r3, [r5, #0]
 80134c2:	b103      	cbz	r3, 80134c6 <_read_r+0x1e>
 80134c4:	6023      	str	r3, [r4, #0]
 80134c6:	bd38      	pop	{r3, r4, r5, pc}
 80134c8:	20002508 	.word	0x20002508

080134cc <__ascii_wctomb>:
 80134cc:	b149      	cbz	r1, 80134e2 <__ascii_wctomb+0x16>
 80134ce:	2aff      	cmp	r2, #255	; 0xff
 80134d0:	bf85      	ittet	hi
 80134d2:	238a      	movhi	r3, #138	; 0x8a
 80134d4:	6003      	strhi	r3, [r0, #0]
 80134d6:	700a      	strbls	r2, [r1, #0]
 80134d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80134dc:	bf98      	it	ls
 80134de:	2001      	movls	r0, #1
 80134e0:	4770      	bx	lr
 80134e2:	4608      	mov	r0, r1
 80134e4:	4770      	bx	lr

080134e6 <abort>:
 80134e6:	b508      	push	{r3, lr}
 80134e8:	2006      	movs	r0, #6
 80134ea:	f000 f84d 	bl	8013588 <raise>
 80134ee:	2001      	movs	r0, #1
 80134f0:	f7f0 ff2a 	bl	8004348 <_exit>

080134f4 <_fstat_r>:
 80134f4:	b538      	push	{r3, r4, r5, lr}
 80134f6:	4d07      	ldr	r5, [pc, #28]	; (8013514 <_fstat_r+0x20>)
 80134f8:	2300      	movs	r3, #0
 80134fa:	4604      	mov	r4, r0
 80134fc:	4608      	mov	r0, r1
 80134fe:	4611      	mov	r1, r2
 8013500:	602b      	str	r3, [r5, #0]
 8013502:	f7f0 ff70 	bl	80043e6 <_fstat>
 8013506:	1c43      	adds	r3, r0, #1
 8013508:	d102      	bne.n	8013510 <_fstat_r+0x1c>
 801350a:	682b      	ldr	r3, [r5, #0]
 801350c:	b103      	cbz	r3, 8013510 <_fstat_r+0x1c>
 801350e:	6023      	str	r3, [r4, #0]
 8013510:	bd38      	pop	{r3, r4, r5, pc}
 8013512:	bf00      	nop
 8013514:	20002508 	.word	0x20002508

08013518 <_isatty_r>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4d06      	ldr	r5, [pc, #24]	; (8013534 <_isatty_r+0x1c>)
 801351c:	2300      	movs	r3, #0
 801351e:	4604      	mov	r4, r0
 8013520:	4608      	mov	r0, r1
 8013522:	602b      	str	r3, [r5, #0]
 8013524:	f7f0 ff6f 	bl	8004406 <_isatty>
 8013528:	1c43      	adds	r3, r0, #1
 801352a:	d102      	bne.n	8013532 <_isatty_r+0x1a>
 801352c:	682b      	ldr	r3, [r5, #0]
 801352e:	b103      	cbz	r3, 8013532 <_isatty_r+0x1a>
 8013530:	6023      	str	r3, [r4, #0]
 8013532:	bd38      	pop	{r3, r4, r5, pc}
 8013534:	20002508 	.word	0x20002508

08013538 <_raise_r>:
 8013538:	291f      	cmp	r1, #31
 801353a:	b538      	push	{r3, r4, r5, lr}
 801353c:	4604      	mov	r4, r0
 801353e:	460d      	mov	r5, r1
 8013540:	d904      	bls.n	801354c <_raise_r+0x14>
 8013542:	2316      	movs	r3, #22
 8013544:	6003      	str	r3, [r0, #0]
 8013546:	f04f 30ff 	mov.w	r0, #4294967295
 801354a:	bd38      	pop	{r3, r4, r5, pc}
 801354c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801354e:	b112      	cbz	r2, 8013556 <_raise_r+0x1e>
 8013550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013554:	b94b      	cbnz	r3, 801356a <_raise_r+0x32>
 8013556:	4620      	mov	r0, r4
 8013558:	f000 f830 	bl	80135bc <_getpid_r>
 801355c:	462a      	mov	r2, r5
 801355e:	4601      	mov	r1, r0
 8013560:	4620      	mov	r0, r4
 8013562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013566:	f000 b817 	b.w	8013598 <_kill_r>
 801356a:	2b01      	cmp	r3, #1
 801356c:	d00a      	beq.n	8013584 <_raise_r+0x4c>
 801356e:	1c59      	adds	r1, r3, #1
 8013570:	d103      	bne.n	801357a <_raise_r+0x42>
 8013572:	2316      	movs	r3, #22
 8013574:	6003      	str	r3, [r0, #0]
 8013576:	2001      	movs	r0, #1
 8013578:	e7e7      	b.n	801354a <_raise_r+0x12>
 801357a:	2400      	movs	r4, #0
 801357c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013580:	4628      	mov	r0, r5
 8013582:	4798      	blx	r3
 8013584:	2000      	movs	r0, #0
 8013586:	e7e0      	b.n	801354a <_raise_r+0x12>

08013588 <raise>:
 8013588:	4b02      	ldr	r3, [pc, #8]	; (8013594 <raise+0xc>)
 801358a:	4601      	mov	r1, r0
 801358c:	6818      	ldr	r0, [r3, #0]
 801358e:	f7ff bfd3 	b.w	8013538 <_raise_r>
 8013592:	bf00      	nop
 8013594:	20000120 	.word	0x20000120

08013598 <_kill_r>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	4d07      	ldr	r5, [pc, #28]	; (80135b8 <_kill_r+0x20>)
 801359c:	2300      	movs	r3, #0
 801359e:	4604      	mov	r4, r0
 80135a0:	4608      	mov	r0, r1
 80135a2:	4611      	mov	r1, r2
 80135a4:	602b      	str	r3, [r5, #0]
 80135a6:	f7f0 febf 	bl	8004328 <_kill>
 80135aa:	1c43      	adds	r3, r0, #1
 80135ac:	d102      	bne.n	80135b4 <_kill_r+0x1c>
 80135ae:	682b      	ldr	r3, [r5, #0]
 80135b0:	b103      	cbz	r3, 80135b4 <_kill_r+0x1c>
 80135b2:	6023      	str	r3, [r4, #0]
 80135b4:	bd38      	pop	{r3, r4, r5, pc}
 80135b6:	bf00      	nop
 80135b8:	20002508 	.word	0x20002508

080135bc <_getpid_r>:
 80135bc:	f7f0 beac 	b.w	8004318 <_getpid>

080135c0 <_init>:
 80135c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c2:	bf00      	nop
 80135c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135c6:	bc08      	pop	{r3}
 80135c8:	469e      	mov	lr, r3
 80135ca:	4770      	bx	lr

080135cc <_fini>:
 80135cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ce:	bf00      	nop
 80135d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135d2:	bc08      	pop	{r3}
 80135d4:	469e      	mov	lr, r3
 80135d6:	4770      	bx	lr
