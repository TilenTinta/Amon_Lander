
Amon_board_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080136b8  080136b8  000236b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b9c  08013b9c  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013b9c  08013b9c  00023b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ba4  08013ba4  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ba4  08013ba4  00023ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ba8  08013ba8  00023ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08013bac  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302f8  2**0
                  CONTENTS
 10 .bss          000023a4  200002f8  200002f8  000302f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000269c  2000269c  000302f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023ac8  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f83  00000000  00000000  00053e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e80  00000000  00000000  00058db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000179a  00000000  00000000  0005ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028796  00000000  00000000  0005c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029bc6  00000000  00000000  00084b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da549  00000000  00000000  000ae72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000094c0  00000000  00000000  00188c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00192138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801369c 	.word	0x0801369c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	0801369c 	.word	0x0801369c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8000f54:	f107 030e 	add.w	r3, r7, #14
 8000f58:	461a      	mov	r2, r3
 8000f5a:	21d0      	movs	r1, #208	; 0xd0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f9a7 	bl	80012b0 <BME280_ReadRegister>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e005      	b.n	8000f7c <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b76      	cmp	r3, #118	; 0x76
 8000f74:	d101      	bne.n	8000f7a <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 8000f76:	2302      	movs	r3, #2
 8000f78:	e000      	b.n	8000f7c <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 8000f7a:	2300      	movs	r3, #0
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->dig_H2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->dig_H3 = 0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->dig_H4 = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->dig_H5 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->dig_H6 = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dev->dig_P1 = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->dig_P6 = 0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->dig_P7 = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	84da      	strh	r2, [r3, #38]	; 0x26
	dev->dig_P8 = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	851a      	strh	r2, [r3, #40]	; 0x28
	dev->dig_P9 = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	855a      	strh	r2, [r3, #42]	; 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 8001022:	22b6      	movs	r2, #182	; 0xb6
 8001024:	21e0      	movs	r1, #224	; 0xe0
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f97a 	bl	8001320 <BME280_WriteRegister>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <BME280_Reset+0xb6>
	{
		return 1;	// NOK
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <BME280_Reset+0xb8>
	}
	else
	{
		return 0; // OK
 800103a:	2300      	movs	r3, #0
	}
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	// Humidity; Set value: 011 = oversampling x4
	static const uint8_t ctrl_humData = 0x03;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <BME280_Init+0x70>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	21f2      	movs	r1, #242	; 0xf2
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f95f 	bl	8001320 <BME280_WriteRegister>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 800106c:	2301      	movs	r3, #1
 800106e:	e01c      	b.n	80010aa <BME280_Init+0x66>
	}

	// Temp, Press, Mode; Set value: 01101111 = oversampling x4, oversampling x4, normal mode
	static const uint8_t scrl_meadData = 0x6F;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <BME280_Init+0x74>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	21f4      	movs	r1, #244	; 0xf4
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f951 	bl	8001320 <BME280_WriteRegister>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BME280_Init+0x48>
	{
		return 1;	// NOK
 8001088:	2301      	movs	r3, #1
 800108a:	e00e      	b.n	80010aa <BME280_Init+0x66>
	}

	// Standbay, time IIR filter, 3-wire SPI, Mode; Set value: 0000010 = standbay 0.5ms, IIR 2, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <BME280_Init+0x78>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	21f5      	movs	r1, #245	; 0xf5
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f943 	bl	8001320 <BME280_WriteRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <BME280_Init+0x64>
	{
		return 1;	// NOK
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 80010a8:	2300      	movs	r3, #0
	}
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08013736 	.word	0x08013736
 80010b8:	08013737 	.word	0x08013737
 80010bc:	08013738 	.word	0x08013738

080010c0 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	751a      	strb	r2, [r3, #20]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 80010e6:	f107 0214 	add.w	r2, r7, #20
 80010ea:	2319      	movs	r3, #25
 80010ec:	2188      	movs	r1, #136	; 0x88
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f8f8 	bl	80012e4 <BME280_ReadRegisters>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 80010fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <BME280_ReadCalibData+0x46>
	{
		return 1;	// NOK
 8001102:	2301      	movs	r3, #1
 8001104:	e0d0      	b.n	80012a8 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 8001106:	7d7b      	ldrb	r3, [r7, #21]
 8001108:	b29b      	uxth	r3, r3
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b29a      	uxth	r2, r3
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	b29b      	uxth	r3, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29a      	uxth	r2, r3
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 8001130:	7e7b      	ldrb	r3, [r7, #25]
 8001132:	b29b      	uxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b29a      	uxth	r2, r3
 8001138:	7e3b      	ldrb	r3, [r7, #24]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 8001146:	7efb      	ldrb	r3, [r7, #27]
 8001148:	b29b      	uxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b29a      	uxth	r2, r3
 800114e:	7ebb      	ldrb	r3, [r7, #26]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800115a:	7f7b      	ldrb	r3, [r7, #29]
 800115c:	b29b      	uxth	r3, r3
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b29a      	uxth	r2, r3
 8001162:	7f3b      	ldrb	r3, [r7, #28]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	b21a      	sxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	b29b      	uxth	r3, r3
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b29a      	uxth	r2, r3
 8001178:	7fbb      	ldrb	r3, [r7, #30]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b29b      	uxth	r3, r3
 8001180:	b21a      	sxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 8001186:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800118a:	b29b      	uxth	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b29a      	uxth	r2, r3
 8001190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80011a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80011ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 80011d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d8:	b29b      	uxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 80011ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 8001208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800120c:	b29b      	uxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b29a      	uxth	r2, r3
 8001212:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 8001222:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 800122c:	f107 020c 	add.w	r2, r7, #12
 8001230:	2307      	movs	r3, #7
 8001232:	21e1      	movs	r1, #225	; 0xe1
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f855 	bl	80012e4 <BME280_ReadRegisters>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <BME280_ReadCalibData+0x18c>
	{
		return 1;	// NOK
 8001248:	2301      	movs	r3, #1
 800124a:	e02d      	b.n	80012a8 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 800125e:	7bba      	ldrb	r2, [r7, #14]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	b29b      	uxth	r3, r3
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	b29b      	uxth	r3, r3
 800126e:	b21a      	sxth	r2, r3
 8001270:	7c3b      	ldrb	r3, [r7, #16]
 8001272:	b21b      	sxth	r3, r3
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 8001282:	7c7b      	ldrb	r3, [r7, #17]
 8001284:	b29b      	uxth	r3, r3
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	b29b      	uxth	r3, r3
 800128a:	b21a      	sxth	r2, r3
 800128c:	7c3b      	ldrb	r3, [r7, #16]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	b2db      	uxtb	r3, r3
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 800129c:	7cbb      	ldrb	r3, [r7, #18]
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3730      	adds	r7, #48	; 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <BME280_ReadRegister>:
	return 0; // OK
}


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af04      	add	r7, sp, #16
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	460b      	mov	r3, r1
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	21ec      	movs	r1, #236	; 0xec
 80012d6:	f004 ffe7 	bl	80062a8 <HAL_I2C_Mem_Read>
 80012da:	4603      	mov	r3, r0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	72fb      	strb	r3, [r7, #11]
 80012f4:	4613      	mov	r3, r2
 80012f6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	b29b      	uxth	r3, r3
 8001304:	2164      	movs	r1, #100	; 0x64
 8001306:	9102      	str	r1, [sp, #8]
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	21ec      	movs	r1, #236	; 0xec
 8001312:	f004 ffc9 	bl	80062a8 <HAL_I2C_Mem_Read>
 8001316:	4603      	mov	r3, r0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	4613      	mov	r3, r2
 800132e:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	b29a      	uxth	r2, r3
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	f004 feb4 	bl	80060b4 <HAL_I2C_Mem_Write>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <GPS_Decode_GGA>:
 */

#include "GPS.h"

void GPS_Decode_GGA(uint8_t *GPSData, GPS_GGA *gps_gga, AMON_Drone *AmonDrone)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]


}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <MPU6050_ReadDeviceID>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t data);						// Write register to device

uint16_t MPU6050_ReadBytesInFIFO(MPU6050 *dev);															// Read number of bytes available to read in FIFO register


uint8_t MPU6050_ReadDeviceID(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t regData;

	status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
 800137e:	f107 030e 	add.w	r3, r7, #14
 8001382:	461a      	mov	r2, r3
 8001384:	2175      	movs	r1, #117	; 0x75
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fef8 	bl	800217c <MPU6050_ReadRegister>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK){
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MPU6050_ReadDeviceID+0x2c>
		return 1;	// NOK
 8001396:	2301      	movs	r3, #1
 8001398:	e005      	b.n	80013a6 <MPU6050_ReadDeviceID+0x38>
	}
	else
	{
		if (regData != 0x68)
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	2b68      	cmp	r3, #104	; 0x68
 800139e:	d001      	beq.n	80013a4 <MPU6050_ReadDeviceID+0x36>
		{
			return 2; // NOK
 80013a0:	2302      	movs	r3, #2
 80013a2:	e000      	b.n	80013a6 <MPU6050_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 80013a4:	2300      	movs	r3, #0
		}
	}
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <MPU6050_Reset>:


uint8_t MPU6050_Reset(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x80); // reset device
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	216b      	movs	r1, #107	; 0x6b
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ff11 	bl	80021ea <MPU6050_WriteRegister>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MPU6050_Reset+0x28>
	{
		return 1;	// NOK
 80013d2:	2301      	movs	r3, #1
 80013d4:	e042      	b.n	800145c <MPU6050_Reset+0xae>
	}

	HAL_Delay(10);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f003 fa00 	bl	80047dc <HAL_Delay>

	status = MPU6050_WriteRegister(dev, SIGNAL_PATH_RESET, 0x07); // reset all three sensors
 80013dc:	2207      	movs	r2, #7
 80013de:	2168      	movs	r1, #104	; 0x68
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 ff02 	bl	80021ea <MPU6050_WriteRegister>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MPU6050_Reset+0x46>
	{
		return 1;	// NOK
 80013f0:	2301      	movs	r3, #1
 80013f2:	e033      	b.n	800145c <MPU6050_Reset+0xae>
	}

	dev->GYRO_X = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
	dev->GYRO_Y = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
	dev->GYRO_Z = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
	dev->ACCEL_X = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
	dev->ACCEL_Y = 0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
	dev->ACCEL_Z = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
	dev->Temp_C = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	839a      	strh	r2, [r3, #28]
	dev->FT_XA = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
	dev->FT_YA = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
	dev->FT_ZA = 0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
	dev->FT_XG = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
	dev->FT_YG = 0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
	dev->FT_ZG = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28

	return 0; // OK
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <MPU6050_Init>:


uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	//  Disable i2c master mode
	status = MPU6050_WriteRegister(dev, I2C_MST_CTRL, 0x00);
 8001474:	2200      	movs	r2, #0
 8001476:	2124      	movs	r1, #36	; 0x24
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 feb6 	bl	80021ea <MPU6050_WriteRegister>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MPU6050_Init+0x28>
 8001488:	2301      	movs	r3, #1
 800148a:	e054      	b.n	8001536 <MPU6050_Init+0xd2>

	//  PLL with X axis gyroscope reference
	status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x01);
 800148c:	2201      	movs	r2, #1
 800148e:	216b      	movs	r1, #107	; 0x6b
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 feaa 	bl	80021ea <MPU6050_WriteRegister>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MPU6050_Init+0x40>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e048      	b.n	8001536 <MPU6050_Init+0xd2>

	// set low-pass filter
	status = MPU6050_WriteRegister(dev, CONFIG_MPU6050, 0x01);
 80014a4:	2201      	movs	r2, #1
 80014a6:	211a      	movs	r1, #26
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fe9e 	bl	80021ea <MPU6050_WriteRegister>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MPU6050_Init+0x58>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e03c      	b.n	8001536 <MPU6050_Init+0xd2>

	// set range of gyro (+-250deg/s)
	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
 80014bc:	2200      	movs	r2, #0
 80014be:	211b      	movs	r1, #27
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fe92 	bl	80021ea <MPU6050_WriteRegister>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MPU6050_Init+0x70>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e030      	b.n	8001536 <MPU6050_Init+0xd2>

	// set range of accel (+-8g)
	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10);
 80014d4:	2210      	movs	r2, #16
 80014d6:	211c      	movs	r1, #28
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fe86 	bl	80021ea <MPU6050_WriteRegister>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MPU6050_Init+0x88>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e024      	b.n	8001536 <MPU6050_Init+0xd2>

	// enable FIFO register
	status = MPU6050_WriteRegister(dev, USER_CTRL, 0x40);
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	216a      	movs	r1, #106	; 0x6a
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fe7a 	bl	80021ea <MPU6050_WriteRegister>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MPU6050_Init+0xa0>
 8001500:	2301      	movs	r3, #1
 8001502:	e018      	b.n	8001536 <MPU6050_Init+0xd2>

	// Sample rate divider: 1kHz
	status = MPU6050_WriteRegister(dev, SMPRT_DIV, 0x01);
 8001504:	2201      	movs	r2, #1
 8001506:	2119      	movs	r1, #25
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fe6e 	bl	80021ea <MPU6050_WriteRegister>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MPU6050_Init+0xb8>
 8001518:	2301      	movs	r3, #1
 800151a:	e00c      	b.n	8001536 <MPU6050_Init+0xd2>

	// turn on all needed fifo enable bits to write in fifo register
	status = MPU6050_WriteRegister(dev, FIFO_EN, 0xf8);
 800151c:	22f8      	movs	r2, #248	; 0xf8
 800151e:	2123      	movs	r1, #35	; 0x23
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fe62 	bl	80021ea <MPU6050_WriteRegister>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) return 1;	// NOK
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MPU6050_Init+0xd0>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <MPU6050_Init+0xd2>

	return 0; // OK
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MPU6050_ReadFactoryTrim>:


uint8_t MPU6050_ReadFactoryTrim(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t FTData[4];

	status = MPU6050_ReadRegisters(dev, SELF_TEST_X, FTData, 4);
 8001550:	f107 0208 	add.w	r2, r7, #8
 8001554:	2304      	movs	r3, #4
 8001556:	210d      	movs	r1, #13
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fe29 	bl	80021b0 <MPU6050_ReadRegisters>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MPU6050_ReadFactoryTrim+0x2c>
	{
		return 1;	// NOK
 8001568:	2301      	movs	r3, #1
 800156a:	e151      	b.n	8001810 <MPU6050_ReadFactoryTrim+0x2d0>
	}

	// Gyro X
	uint8_t val = (FTData[0] & 0x01F);
 800156c:	7a3b      	ldrb	r3, [r7, #8]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01d      	beq.n	80015b6 <MPU6050_ReadFactoryTrim+0x76>
	{
		dev->FT_XG = 25 * 131 * pow(1.046, (val - 1));
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	3b01      	subs	r3, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd0 	bl	8000524 <__aeabi_i2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	ec43 2b11 	vmov	d1, r2, r3
 800158c:	ed9f 0ba2 	vldr	d0, [pc, #648]	; 8001818 <MPU6050_ReadFactoryTrim+0x2d8>
 8001590:	f00e fa8e 	bl	800fab0 <pow>
 8001594:	ec51 0b10 	vmov	r0, r1, d0
 8001598:	a3a8      	add	r3, pc, #672	; (adr r3, 800183c <MPU6050_ReadFactoryTrim+0x2fc>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f82b 	bl	80005f8 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fafd 	bl	8000ba8 <__aeabi_d2f>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	621a      	str	r2, [r3, #32]
 80015b4:	e003      	b.n	80015be <MPU6050_ReadFactoryTrim+0x7e>
	}
	else
	{
		dev->FT_XG = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
	}

	// Gyro Y
	val = (FTData[1] & 0x01F);
 80015be:	7a7b      	ldrb	r3, [r7, #9]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01d      	beq.n	8001608 <MPU6050_ReadFactoryTrim+0xc8>
	{
		dev->FT_YG = -1 * 25 * 131 * pow(1.046, (val - 1));
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffa7 	bl	8000524 <__aeabi_i2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b11 	vmov	d1, r2, r3
 80015de:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8001818 <MPU6050_ReadFactoryTrim+0x2d8>
 80015e2:	f00e fa65 	bl	800fab0 <pow>
 80015e6:	ec51 0b10 	vmov	r0, r1, d0
 80015ea:	a396      	add	r3, pc, #600	; (adr r3, 8001844 <MPU6050_ReadFactoryTrim+0x304>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f802 	bl	80005f8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fad4 	bl	8000ba8 <__aeabi_d2f>
 8001600:	4602      	mov	r2, r0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
 8001606:	e003      	b.n	8001610 <MPU6050_ReadFactoryTrim+0xd0>
	}
	else
	{
		dev->FT_YG = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// Gyro Z
	val = (FTData[2] & 0x01F);
 8001610:	7abb      	ldrb	r3, [r7, #10]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01d      	beq.n	800165a <MPU6050_ReadFactoryTrim+0x11a>
	{
		dev->FT_ZG = 25 * 131 * pow(1.046, (val - 1));
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	3b01      	subs	r3, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff7e 	bl	8000524 <__aeabi_i2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	ec43 2b11 	vmov	d1, r2, r3
 8001630:	ed9f 0b79 	vldr	d0, [pc, #484]	; 8001818 <MPU6050_ReadFactoryTrim+0x2d8>
 8001634:	f00e fa3c 	bl	800fab0 <pow>
 8001638:	ec51 0b10 	vmov	r0, r1, d0
 800163c:	a37f      	add	r3, pc, #508	; (adr r3, 800183c <MPU6050_ReadFactoryTrim+0x2fc>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffd9 	bl	80005f8 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff faab 	bl	8000ba8 <__aeabi_d2f>
 8001652:	4602      	mov	r2, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
 8001658:	e003      	b.n	8001662 <MPU6050_ReadFactoryTrim+0x122>
	}
	else
	{
		dev->FT_ZG = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Accel X
	uint8_t valMSB = (FTData[0] & 0xE0) >> 5;
 8001662:	7a3b      	ldrb	r3, [r7, #8]
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	737b      	strb	r3, [r7, #13]
	uint8_t valLSB = (FTData[3] & 0x30) >> 4;
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	111b      	asrs	r3, r3, #4
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	b25a      	sxtb	r2, r3
 800167a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d02f      	beq.n	80016ea <MPU6050_ReadFactoryTrim+0x1aa>
	{
		dev->FT_XA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	3b01      	subs	r3, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b67      	ldr	r3, [pc, #412]	; (8001838 <MPU6050_ReadFactoryTrim+0x2f8>)
 800169a:	f7ff f8d7 	bl	800084c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ec43 2b17 	vmov	d7, r2, r3
 80016a6:	eeb0 1a47 	vmov.f32	s2, s14
 80016aa:	eef0 1a67 	vmov.f32	s3, s15
 80016ae:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001820 <MPU6050_ReadFactoryTrim+0x2e0>
 80016b2:	f00e f9fd 	bl	800fab0 <pow>
 80016b6:	ec51 0b10 	vmov	r0, r1, d0
 80016ba:	a35b      	add	r3, pc, #364	; (adr r3, 8001828 <MPU6050_ReadFactoryTrim+0x2e8>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7ff f8c4 	bl	800084c <__aeabi_ddiv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	a358      	add	r3, pc, #352	; (adr r3, 8001830 <MPU6050_ReadFactoryTrim+0x2f0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff91 	bl	80005f8 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa63 	bl	8000ba8 <__aeabi_d2f>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e8:	e003      	b.n	80016f2 <MPU6050_ReadFactoryTrim+0x1b2>
	}
	else
	{
		dev->FT_XA = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// Accel Y
	valMSB = (FTData[1] & 0xE0) >> 5;
 80016f2:	7a7b      	ldrb	r3, [r7, #9]
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	737b      	strb	r3, [r7, #13]
	valLSB = (FTData[3] & 0x0C) >> 2;
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	109b      	asrs	r3, r3, #2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	b25a      	sxtb	r2, r3
 800170a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02f      	beq.n	800177a <MPU6050_ReadFactoryTrim+0x23a>
	{
		dev->FT_YA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	3b01      	subs	r3, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <MPU6050_ReadFactoryTrim+0x2f8>)
 800172a:	f7ff f88f 	bl	800084c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b17 	vmov	d7, r2, r3
 8001736:	eeb0 1a47 	vmov.f32	s2, s14
 800173a:	eef0 1a67 	vmov.f32	s3, s15
 800173e:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001820 <MPU6050_ReadFactoryTrim+0x2e0>
 8001742:	f00e f9b5 	bl	800fab0 <pow>
 8001746:	ec51 0b10 	vmov	r0, r1, d0
 800174a:	a337      	add	r3, pc, #220	; (adr r3, 8001828 <MPU6050_ReadFactoryTrim+0x2e8>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f87c 	bl	800084c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a334      	add	r3, pc, #208	; (adr r3, 8001830 <MPU6050_ReadFactoryTrim+0x2f0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff49 	bl	80005f8 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
 8001778:	e003      	b.n	8001782 <MPU6050_ReadFactoryTrim+0x242>
	}
	else
	{
		dev->FT_YA = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
	}

	// Accel Z
	valMSB = (FTData[2] & 0xE0) >> 5;
 8001782:	7abb      	ldrb	r3, [r7, #10]
 8001784:	095b      	lsrs	r3, r3, #5
 8001786:	737b      	strb	r3, [r7, #13]
	valLSB = (FTData[3] & 0x03);
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	733b      	strb	r3, [r7, #12]
	val = (valMSB << 2) | valLSB;
 8001790:	7b7b      	ldrb	r3, [r7, #13]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	b25a      	sxtb	r2, r3
 8001796:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	b25b      	sxtb	r3, r3
 800179e:	73bb      	strb	r3, [r7, #14]
	if (val != 0)
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d02f      	beq.n	8001806 <MPU6050_ReadFactoryTrim+0x2c6>
	{
		dev->FT_ZA = 4096 * 0.34 * (pow(0.92, ((val - 1) / (pow(2,5) -2))) / 0.34);
 80017a6:	7bbb      	ldrb	r3, [r7, #14]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe feba 	bl	8000524 <__aeabi_i2d>
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MPU6050_ReadFactoryTrim+0x2f8>)
 80017b6:	f7ff f849 	bl	800084c <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ec43 2b17 	vmov	d7, r2, r3
 80017c2:	eeb0 1a47 	vmov.f32	s2, s14
 80017c6:	eef0 1a67 	vmov.f32	s3, s15
 80017ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001820 <MPU6050_ReadFactoryTrim+0x2e0>
 80017ce:	f00e f96f 	bl	800fab0 <pow>
 80017d2:	ec51 0b10 	vmov	r0, r1, d0
 80017d6:	a314      	add	r3, pc, #80	; (adr r3, 8001828 <MPU6050_ReadFactoryTrim+0x2e8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f836 	bl	800084c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	a311      	add	r3, pc, #68	; (adr r3, 8001830 <MPU6050_ReadFactoryTrim+0x2f0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff f9d5 	bl	8000ba8 <__aeabi_d2f>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e003      	b.n	800180e <MPU6050_ReadFactoryTrim+0x2ce>
	}
	else
	{
		dev->FT_ZA = 0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	return 0; // OK
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	7ef9db23 	.word	0x7ef9db23
 800181c:	3ff0bc6a 	.word	0x3ff0bc6a
 8001820:	d70a3d71 	.word	0xd70a3d71
 8001824:	3fed70a3 	.word	0x3fed70a3
 8001828:	5c28f5c3 	.word	0x5c28f5c3
 800182c:	3fd5c28f 	.word	0x3fd5c28f
 8001830:	5c28f5c3 	.word	0x5c28f5c3
 8001834:	4095c28f 	.word	0x4095c28f
 8001838:	403e0000 	.word	0x403e0000
 800183c:	00000000 	.word	0x00000000
 8001840:	40a99600 	.word	0x40a99600
 8001844:	00000000 	.word	0x00000000
 8001848:	c0a99600 	.word	0xc0a99600
 800184c:	00000000 	.word	0x00000000

08001850 <MPU6050_RawToDeg>:


void MPU6050_RawToDeg(MPU6050 *dev, AMON_Drone *drone){
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]

	/* Axis orientation on drone are: X+ points down, Z+ points out of sensor and Y+ points right if you watch drone from the board side */
	float pitch = 0;
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
	float roll = 0;
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]

	/* Calculate drone pitch */
	pitch = atan(-dev->ACCEL_Z / sqrtf(pow(dev->ACCEL_Y,2) + pow(-dev->ACCEL_X,2))) * (float)(1.0f / (3.14f / 180.0f));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001870:	eeb1 8a67 	vneg.f32	s16, s15
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001ac8 <MPU6050_RawToDeg+0x278>
 8001886:	ec43 2b10 	vmov	d0, r2, r3
 800188a:	f00e f911 	bl	800fab0 <pow>
 800188e:	ec55 4b10 	vmov	r4, r5, d0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edd3 7a01 	vldr	s15, [r3, #4]
 8001898:	eef1 7a67 	vneg.f32	s15, s15
 800189c:	ee17 3a90 	vmov	r3, s15
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001ac8 <MPU6050_RawToDeg+0x278>
 80018ae:	ec43 2b10 	vmov	d0, r2, r3
 80018b2:	f00e f8fd 	bl	800fab0 <pow>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fce5 	bl	800028c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f96d 	bl	8000ba8 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	ee00 3a10 	vmov	s0, r3
 80018d4:	f00e fb06 	bl	800fee4 <sqrtf>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80018e0:	ee17 0a10 	vmov	r0, s14
 80018e4:	f7fe fe30 	bl	8000548 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	f00e f94e 	bl	800fb90 <atan>
 80018f4:	ec51 0b10 	vmov	r0, r1, d0
 80018f8:	a375      	add	r3, pc, #468	; (adr r3, 8001ad0 <MPU6050_RawToDeg+0x280>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f94d 	bl	8000ba8 <__aeabi_d2f>
 800190e:	4603      	mov	r3, r0
 8001910:	60fb      	str	r3, [r7, #12]

	/* Calculate drone Roll */
	roll = atan(-dev->ACCEL_Y / sqrtf(pow(dev->ACCEL_Z,2) + pow(-dev->ACCEL_X,2))) * (float)(1.0f / (3.14f / 180.0f));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a02 	vldr	s15, [r3, #8]
 8001918:	eeb1 8a67 	vneg.f32	s16, s15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe11 	bl	8000548 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001ac8 <MPU6050_RawToDeg+0x278>
 800192e:	ec43 2b10 	vmov	d0, r2, r3
 8001932:	f00e f8bd 	bl	800fab0 <pow>
 8001936:	ec55 4b10 	vmov	r4, r5, d0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001940:	eef1 7a67 	vneg.f32	s15, s15
 8001944:	ee17 3a90 	vmov	r3, s15
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001ac8 <MPU6050_RawToDeg+0x278>
 8001956:	ec43 2b10 	vmov	d0, r2, r3
 800195a:	f00e f8a9 	bl	800fab0 <pow>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fc91 	bl	800028c <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f919 	bl	8000ba8 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	ee00 3a10 	vmov	s0, r3
 800197c:	f00e fab2 	bl	800fee4 <sqrtf>
 8001980:	eef0 7a40 	vmov.f32	s15, s0
 8001984:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001988:	ee17 0a10 	vmov	r0, s14
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	ec43 2b10 	vmov	d0, r2, r3
 8001998:	f00e f8fa 	bl	800fb90 <atan>
 800199c:	ec51 0b10 	vmov	r0, r1, d0
 80019a0:	a34b      	add	r3, pc, #300	; (adr r3, 8001ad0 <MPU6050_RawToDeg+0x280>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8f9 	bl	8000ba8 <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	60bb      	str	r3, [r7, #8]

	/* Complementary Filter */
	drone->Pitch = ALPHA * (drone->PitchOld + dev->ACCEL_Y * 0.005) + (1 - ALPHA) * pitch;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdc2 	bl	8000548 <__aeabi_f2d>
 80019c4:	4604      	mov	r4, r0
 80019c6:	460d      	mov	r5, r1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	a341      	add	r3, pc, #260	; (adr r3, 8001ad8 <MPU6050_RawToDeg+0x288>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fe0e 	bl	80005f8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc52 	bl	800028c <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	a33b      	add	r3, pc, #236	; (adr r3, 8001ae0 <MPU6050_RawToDeg+0x290>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fdff 	bl	80005f8 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4614      	mov	r4, r2
 8001a00:	461d      	mov	r5, r3
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7fe fda0 	bl	8000548 <__aeabi_f2d>
 8001a08:	a337      	add	r3, pc, #220	; (adr r3, 8001ae8 <MPU6050_RawToDeg+0x298>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fdf3 	bl	80005f8 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fc37 	bl	800028c <__adddf3>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8bf 	bl	8000ba8 <__aeabi_d2f>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	60da      	str	r2, [r3, #12]
	drone->PitchOld = drone->Pitch;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	611a      	str	r2, [r3, #16]

	drone->Roll = ALPHA * (drone->RollOld + dev->ACCEL_Z * 0.005) + (1 - ALPHA) * roll;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd83 	bl	8000548 <__aeabi_f2d>
 8001a42:	4604      	mov	r4, r0
 8001a44:	460d      	mov	r5, r1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	a321      	add	r3, pc, #132	; (adr r3, 8001ad8 <MPU6050_RawToDeg+0x288>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdcf 	bl	80005f8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4629      	mov	r1, r5
 8001a62:	f7fe fc13 	bl	800028c <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	a31c      	add	r3, pc, #112	; (adr r3, 8001ae0 <MPU6050_RawToDeg+0x290>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	68b8      	ldr	r0, [r7, #8]
 8001a82:	f7fe fd61 	bl	8000548 <__aeabi_f2d>
 8001a86:	a318      	add	r3, pc, #96	; (adr r3, 8001ae8 <MPU6050_RawToDeg+0x298>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fdb4 	bl	80005f8 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fbf8 	bl	800028c <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f880 	bl	8000ba8 <__aeabi_d2f>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	615a      	str	r2, [r3, #20]
	drone->RollOld = drone->Roll;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	619a      	str	r2, [r3, #24]
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	ecbd 8b02 	vpop	{d8}
 8001ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	40000000 	.word	0x40000000
 8001ad0:	60000000 	.word	0x60000000
 8001ad4:	404ca994 	.word	0x404ca994
 8001ad8:	47ae147b 	.word	0x47ae147b
 8001adc:	3f747ae1 	.word	0x3f747ae1
 8001ae0:	f5c28f5c 	.word	0xf5c28f5c
 8001ae4:	3fef5c28 	.word	0x3fef5c28
 8001ae8:	47ae1480 	.word	0x47ae1480
 8001aec:	3f947ae1 	.word	0x3f947ae1

08001af0 <MPU6050_SelfTest>:


uint8_t MPU6050_SelfTest(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b096      	sub	sp, #88	; 0x58
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* set range of gyro (+-250deg/s) */
	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
 8001b00:	2200      	movs	r2, #0
 8001b02:	211b      	movs	r1, #27
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fb70 	bl	80021ea <MPU6050_WriteRegister>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MPU6050_SelfTest+0x2c>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e23b      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	/* set rabge of accel (+-8g) */
	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10);
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	211c      	movs	r1, #28
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fb62 	bl	80021ea <MPU6050_WriteRegister>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MPU6050_SelfTest+0x48>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e22d      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	uint8_t GyroData[6] = {};	// Gyro data with Self-Test enabled
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	82bb      	strh	r3, [r7, #20]
	uint8_t AccelData[6] = {};	// Accel data with Self-Test enabled
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	2300      	movs	r3, #0
 8001b46:	81bb      	strh	r3, [r7, #12]

	uint16_t gyroOutXSTE = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t gyroOutYSTE = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t gyroOutZSTE = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t gyroOutXSTD = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t gyroOutYSTD = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t gyroOutZSTD = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	uint16_t STResponseGX = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t STResponseGY = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t STResponseGZ = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	float GXResoult = 0;
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
	float GYResoult = 0;
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
	float GZResoult = 0;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38

	uint16_t accelOutXSTE = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t accelOutYSTE = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t accelOutZSTE = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t accelOutXSTD = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t accelOutYSTD = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t accelOutZSTD = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t STResponseAX = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t STResponseAY = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t STResponseAZ = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	84fb      	strh	r3, [r7, #38]	; 0x26

	float AXResoult = 0;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
	float AYResoult = 0;
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
	float AZResoult = 0;
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]

	/*** Read gyro data with self-test disabled ***/
	status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, GyroData, 6);
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	2306      	movs	r3, #6
 8001bcc:	2143      	movs	r1, #67	; 0x43
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 faee 	bl	80021b0 <MPU6050_ReadRegisters>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MPU6050_SelfTest+0xf6>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1d6      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	gyroOutXSTD = ((uint16_t)GyroData[0] << 8) | GyroData[1];
 8001be6:	7c3b      	ldrb	r3, [r7, #16]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	7c7b      	ldrb	r3, [r7, #17]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	gyroOutYSTD = ((uint16_t)GyroData[2] << 8) | GyroData[3];
 8001bf8:	7cbb      	ldrb	r3, [r7, #18]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	gyroOutZSTD = ((uint16_t)GyroData[4] << 8) | GyroData[5];
 8001c0a:	7d3b      	ldrb	r3, [r7, #20]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	7d7b      	ldrb	r3, [r7, #21]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0xE0); // enable self test on all axies
 8001c1c:	22e0      	movs	r2, #224	; 0xe0
 8001c1e:	211b      	movs	r1, #27
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fae2 	bl	80021ea <MPU6050_WriteRegister>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MPU6050_SelfTest+0x148>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e1ad      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	HAL_Delay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f002 fdcf 	bl	80047dc <HAL_Delay>


	/* Read gyro data with self-test enabled */
	status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, GyroData, 6);
 8001c3e:	f107 0210 	add.w	r2, r7, #16
 8001c42:	2306      	movs	r3, #6
 8001c44:	2143      	movs	r1, #67	; 0x43
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fab2 	bl	80021b0 <MPU6050_ReadRegisters>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MPU6050_SelfTest+0x16e>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e19a      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	gyroOutXSTE = ((uint16_t)GyroData[0] << 8) | GyroData[1];
 8001c5e:	7c3b      	ldrb	r3, [r7, #16]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7c7b      	ldrb	r3, [r7, #17]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	gyroOutYSTE = ((uint16_t)GyroData[2] << 8) | GyroData[3];
 8001c70:	7cbb      	ldrb	r3, [r7, #18]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	7cfb      	ldrb	r3, [r7, #19]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	gyroOutZSTE = ((uint16_t)GyroData[4] << 8) | GyroData[5];
 8001c82:	7d3b      	ldrb	r3, [r7, #20]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	7d7b      	ldrb	r3, [r7, #21]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	STResponseGX = gyroOutXSTE - gyroOutXSTD;
 8001c94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	STResponseGY = gyroOutYSTE - gyroOutYSTD;
 8001ca2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001ca6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	STResponseGZ = gyroOutZSTE - gyroOutZSTD;
 8001cb0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	GXResoult = (float)((STResponseGX - dev->FT_XG) / dev->FT_XG); // in percent
 8001cbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cd0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cde:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	if (GXResoult > 14 || GXResoult < -14 ) return 1;
 8001ce2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ce6:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	dc08      	bgt.n	8001d06 <MPU6050_SelfTest+0x216>
 8001cf4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cf8:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d501      	bpl.n	8001d0a <MPU6050_SelfTest+0x21a>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e144      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	GYResoult = (float)((STResponseGY - dev->FT_YG) / dev->FT_YG); // in percent
 8001d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	if (GYResoult > 14 || GYResoult < -14 ) return 1;
 8001d2e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d32:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	dc08      	bgt.n	8001d52 <MPU6050_SelfTest+0x262>
 8001d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d44:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d501      	bpl.n	8001d56 <MPU6050_SelfTest+0x266>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e11e      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	GZResoult = (float)((STResponseGZ - dev->FT_ZG) / dev->FT_ZG); // in percent
 8001d56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	if (GZResoult > 14 || GZResoult < -14 ) return 1;
 8001d7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d7e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dc08      	bgt.n	8001d9e <MPU6050_SelfTest+0x2ae>
 8001d8c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d90:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d501      	bpl.n	8001da2 <MPU6050_SelfTest+0x2b2>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0f8      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>


	status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00); // enable self test on all axies
 8001da2:	2200      	movs	r2, #0
 8001da4:	211b      	movs	r1, #27
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fa1f 	bl	80021ea <MPU6050_WriteRegister>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001db2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MPU6050_SelfTest+0x2ce>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0ea      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>


	/*** Read accel data with self-test disabled ***/
	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, AccelData, 6);
 8001dbe:	f107 0208 	add.w	r2, r7, #8
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	213b      	movs	r1, #59	; 0x3b
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f9f2 	bl	80021b0 <MPU6050_ReadRegisters>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001dd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MPU6050_SelfTest+0x2ee>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0da      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	accelOutXSTD = ((uint16_t)AccelData[0] << 8) | AccelData[1];
 8001dde:	7a3b      	ldrb	r3, [r7, #8]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	7a7b      	ldrb	r3, [r7, #9]
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	863b      	strh	r3, [r7, #48]	; 0x30
	accelOutYSTD = ((uint16_t)AccelData[2] << 8) | AccelData[3];
 8001dee:	7abb      	ldrb	r3, [r7, #10]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	accelOutZSTD = ((uint16_t)AccelData[4] << 8) | AccelData[5];
 8001dfe:	7b3b      	ldrb	r3, [r7, #12]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	7b7b      	ldrb	r3, [r7, #13]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	85bb      	strh	r3, [r7, #44]	; 0x2c

	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0xE0); // enable self test on all axies
 8001e0e:	22e0      	movs	r2, #224	; 0xe0
 8001e10:	211c      	movs	r1, #28
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f9e9 	bl	80021ea <MPU6050_WriteRegister>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MPU6050_SelfTest+0x33a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0b4      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	HAL_Delay(10);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f002 fcd6 	bl	80047dc <HAL_Delay>


	/* Read gyro data with self-test enabled */
	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, AccelData, 6);
 8001e30:	f107 0208 	add.w	r2, r7, #8
 8001e34:	2306      	movs	r3, #6
 8001e36:	213b      	movs	r1, #59	; 0x3b
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f9b9 	bl	80021b0 <MPU6050_ReadRegisters>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MPU6050_SelfTest+0x360>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0a1      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	accelOutXSTE = ((uint16_t)AccelData[0] << 8) | AccelData[1];
 8001e50:	7a3b      	ldrb	r3, [r7, #8]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	7a7b      	ldrb	r3, [r7, #9]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	86fb      	strh	r3, [r7, #54]	; 0x36
	accelOutYSTE = ((uint16_t)AccelData[2] << 8) | AccelData[3];
 8001e60:	7abb      	ldrb	r3, [r7, #10]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	86bb      	strh	r3, [r7, #52]	; 0x34
	accelOutZSTE = ((uint16_t)AccelData[4] << 8) | AccelData[5];
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	867b      	strh	r3, [r7, #50]	; 0x32

	STResponseAX = accelOutXSTE - accelOutXSTD;
 8001e80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	857b      	strh	r3, [r7, #42]	; 0x2a
	STResponseAY = accelOutYSTE - accelOutYSTD;
 8001e88:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	853b      	strh	r3, [r7, #40]	; 0x28
	STResponseAZ = accelOutZSTE - accelOutZSTD;
 8001e90:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001e92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	84fb      	strh	r3, [r7, #38]	; 0x26

	AXResoult = (float)((STResponseAX - dev->FT_XA) / dev->FT_XA); // in percent
 8001e98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb6:	edc7 7a08 	vstr	s15, [r7, #32]
	if (AXResoult > 15 || AXResoult < -14 ) return 1; // 14
 8001eba:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ebe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dc08      	bgt.n	8001ede <MPU6050_SelfTest+0x3ee>
 8001ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ed0:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d501      	bpl.n	8001ee2 <MPU6050_SelfTest+0x3f2>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e058      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	AYResoult = (float)((STResponseAY - dev->FT_YA) / dev->FT_YA); // in percent
 8001ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ef2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	edc7 7a07 	vstr	s15, [r7, #28]
	if (AYResoult > 14 || AYResoult < -14 ) return 1;
 8001f04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f08:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	dc08      	bgt.n	8001f28 <MPU6050_SelfTest+0x438>
 8001f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f1a:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d501      	bpl.n	8001f2c <MPU6050_SelfTest+0x43c>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e033      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	AZResoult = (float)((STResponseAZ - dev->FT_ZA) / dev->FT_ZA); // in percent
 8001f2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001f3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4a:	edc7 7a06 	vstr	s15, [r7, #24]
	if (AZResoult > 14 || AZResoult < -14 ) return 1;
 8001f4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f52:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	dc08      	bgt.n	8001f72 <MPU6050_SelfTest+0x482>
 8001f60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f64:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8001f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d501      	bpl.n	8001f76 <MPU6050_SelfTest+0x486>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>

	status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x10); // enable self test on all axies
 8001f76:	2210      	movs	r2, #16
 8001f78:	211c      	movs	r1, #28
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f935 	bl	80021ea <MPU6050_WriteRegister>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (status != HAL_OK) return 1;	// NOK
 8001f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MPU6050_SelfTest+0x4a2>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <MPU6050_SelfTest+0x4a4>


	return 0; // OK
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3758      	adds	r7, #88	; 0x58
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <MPU6050_ReadAllDirect>:


uint8_t MPU6050_ReadAllDirect(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t Data[14] = {0};
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	811a      	strh	r2, [r3, #8]

	status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, Data, 14);
 8001fbc:	f107 020c 	add.w	r2, r7, #12
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	213b      	movs	r1, #59	; 0x3b
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8f3 	bl	80021b0 <MPU6050_ReadRegisters>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK) return 1;	// NOK
 8001fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MPU6050_ReadAllDirect+0x40>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0be      	b.n	800215a <MPU6050_ReadAllDirect+0x1be>

	// Acceleration X
	uint16_t DataMSB = (uint16_t)Data[0] << 8;
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t DataLSB = (uint16_t)Data[1];
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelX = DataMSB | DataLSB;
 8001fe8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001fea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	853b      	strh	r3, [r7, #40]	; 0x28

	dev->ACCEL_X= (float)RawAccelX / 4096.0f + (float)(X_ACCEL_OFFSET);
 8001ff2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffe:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002164 <MPU6050_ReadAllDirect+0x1c8>
 8002002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002006:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002168 <MPU6050_ReadAllDirect+0x1cc>
 800200a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	edc3 7a01 	vstr	s15, [r3, #4]

	// Acceleration Y
	DataMSB = (uint16_t)Data[2] << 8;
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	b29b      	uxth	r3, r3
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[3];
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelY = DataMSB | DataLSB;
 8002020:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002024:	4313      	orrs	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	84fb      	strh	r3, [r7, #38]	; 0x26

	dev->ACCEL_Y= (float)RawAccelY / 4096.0f + (float)(Y_ACCEL_OFFSET);
 800202a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002036:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002164 <MPU6050_ReadAllDirect+0x1c8>
 800203a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800216c <MPU6050_ReadAllDirect+0x1d0>
 8002042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	edc3 7a02 	vstr	s15, [r3, #8]

	// Acceleration Z
	DataMSB = (uint16_t)Data[4] << 8;
 800204c:	7c3b      	ldrb	r3, [r7, #16]
 800204e:	b29b      	uxth	r3, r3
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[5];
 8002054:	7c7b      	ldrb	r3, [r7, #17]
 8002056:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawAccelZ = DataMSB | DataLSB;
 8002058:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800205a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800205c:	4313      	orrs	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	84bb      	strh	r3, [r7, #36]	; 0x24

	dev->ACCEL_Z= (float)RawAccelZ / 4096.0f + (float)(Z_ACCEL_OFFSET);
 8002062:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002164 <MPU6050_ReadAllDirect+0x1c8>
 8002072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002076:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800216c <MPU6050_ReadAllDirect+0x1d0>
 800207a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edc3 7a03 	vstr	s15, [r3, #12]

	// Temperature
	DataMSB = (uint16_t)Data[6] << 8;
 8002084:	7cbb      	ldrb	r3, [r7, #18]
 8002086:	b29b      	uxth	r3, r3
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[7];
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	857b      	strh	r3, [r7, #42]	; 0x2a

	uint16_t RawTemp = DataMSB | DataLSB;
 8002090:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002094:	4313      	orrs	r3, r2
 8002096:	847b      	strh	r3, [r7, #34]	; 0x22

	dev->Temp_C = (int16_t)((((float)RawTemp) / 340 + 36.53f) * 10);
 8002098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002170 <MPU6050_ReadAllDirect+0x1d4>
 80020a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020aa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002174 <MPU6050_ReadAllDirect+0x1d8>
 80020ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020be:	ee17 3a90 	vmov	r3, s15
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	839a      	strh	r2, [r3, #28]

	// Gyro X
	DataMSB = (uint16_t)Data[8] << 8;
 80020c8:	7d3b      	ldrb	r3, [r7, #20]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[9];
 80020d0:	7d7b      	ldrb	r3, [r7, #21]
 80020d2:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroX = DataMSB | DataLSB;
 80020d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80020d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d8:	4313      	orrs	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	843b      	strh	r3, [r7, #32]

	dev->GYRO_X = (float)RawGyroX / 131.0f;
 80020de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ea:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002178 <MPU6050_ReadAllDirect+0x1dc>
 80020ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a04 	vstr	s15, [r3, #16]

	// Gyro Y
	DataMSB = (uint16_t)Data[10] << 8;
 80020f8:	7dbb      	ldrb	r3, [r7, #22]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[11];
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroY = DataMSB | DataLSB;
 8002104:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002108:	4313      	orrs	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	83fb      	strh	r3, [r7, #30]

	dev->GYRO_Y = (float)RawGyroY / 131.0f;
 800210e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002178 <MPU6050_ReadAllDirect+0x1dc>
 800211e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	edc3 7a05 	vstr	s15, [r3, #20]

	// Gyro Z
	DataMSB = (uint16_t)Data[12] << 8;
 8002128:	7e3b      	ldrb	r3, [r7, #24]
 800212a:	b29b      	uxth	r3, r3
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DataLSB = (uint16_t)Data[13];
 8002130:	7e7b      	ldrb	r3, [r7, #25]
 8002132:	857b      	strh	r3, [r7, #42]	; 0x2a

	int16_t RawGyroZ = DataMSB | DataLSB;
 8002134:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002136:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002138:	4313      	orrs	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	83bb      	strh	r3, [r7, #28]

	dev->GYRO_Z = (float)RawGyroZ / 131.0f;
 800213e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002178 <MPU6050_ReadAllDirect+0x1dc>
 800214e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	edc3 7a06 	vstr	s15, [r3, #24]

	return 0; // OK
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	45800000 	.word	0x45800000
 8002168:	3cf5c28f 	.word	0x3cf5c28f
 800216c:	00000000 	.word	0x00000000
 8002170:	43aa0000 	.word	0x43aa0000
 8002174:	42121eb8 	.word	0x42121eb8
 8002178:	43030000 	.word	0x43030000

0800217c <MPU6050_ReadRegister>:
	return DataInBuff; // OK
}


//* LL functions *//
HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data){
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af04      	add	r7, sp, #16
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	460b      	mov	r3, r1
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	b29a      	uxth	r2, r3
 8002192:	2364      	movs	r3, #100	; 0x64
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	21d0      	movs	r1, #208	; 0xd0
 80021a2:	f004 f881 	bl	80062a8 <HAL_I2C_Mem_Read>
 80021a6:	4603      	mov	r3, r0
};
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint16_t lenght){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	72fb      	strb	r3, [r7, #11]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2364      	movs	r3, #100	; 0x64
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	21d0      	movs	r1, #208	; 0xd0
 80021dc:	f004 f864 	bl	80062a8 <HAL_I2C_Mem_Read>
 80021e0:	4603      	mov	r3, r0
};
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t data){
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af04      	add	r7, sp, #16
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	4613      	mov	r3, r2
 80021f8:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, MPU6050_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	b29a      	uxth	r2, r3
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	21d0      	movs	r1, #208	; 0xd0
 8002212:	f003 ff4f 	bl	80060b4 <HAL_I2C_Mem_Write>
 8002216:	4603      	mov	r3, r0
};
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <DegresToCCR>:
void SetPWMValue(uint8_t output, uint32_t val);
void PowerToPWMValue(uint8_t power);


void DegresToCCR(float Degress, uint8_t Servo)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0a01 	vstr	s0, [r7, #4]
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
	float TimePerDeg = 0.01111; // 0deg = 0.5ms, 90deg = 1.5ms; delta 90deg = 1ms
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <DegresToCCR+0xa8>)
 8002230:	617b      	str	r3, [r7, #20]
	//double TimePerDeg = 0.5 / 90; // 0deg = 0.5ms, 90deg = 1.5ms; delta 90deg = 1ms

	float DutyCycle = ((Degress * TimePerDeg + 0.5) * 100) / 20.0f;
 8002232:	ed97 7a01 	vldr	s14, [r7, #4]
 8002236:	edd7 7a05 	vldr	s15, [r7, #20]
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	ee17 0a90 	vmov	r0, s15
 8002242:	f7fe f981 	bl	8000548 <__aeabi_f2d>
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <DegresToCCR+0xac>)
 800224c:	f7fe f81e 	bl	800028c <__adddf3>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <DegresToCCR+0xb0>)
 800225e:	f7fe f9cb 	bl	80005f8 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <DegresToCCR+0xb4>)
 8002270:	f7fe faec 	bl	800084c <__aeabi_ddiv>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc94 	bl	8000ba8 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

	// ARR(AutoReloadRegister) = 2400 (set in GUI editor for timer3)
	uint16_t CCRValue = (uint16_t)(DutyCycle * 2400.0f) / 100.0f;
 8002284:	edd7 7a04 	vldr	s15, [r7, #16]
 8002288:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022d8 <DegresToCCR+0xb8>
 800228c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002294:	ee17 3a90 	vmov	r3, s15
 8002298:	b29b      	uxth	r3, r3
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022dc <DegresToCCR+0xbc>
 80022a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ae:	ee17 3a90 	vmov	r3, s15
 80022b2:	81fb      	strh	r3, [r7, #14]

	SetPWMValue(Servo, CCRValue);
 80022b4:	89fa      	ldrh	r2, [r7, #14]
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f810 	bl	80022e0 <SetPWMValue>
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	3c3606b8 	.word	0x3c3606b8
 80022cc:	3fe00000 	.word	0x3fe00000
 80022d0:	40590000 	.word	0x40590000
 80022d4:	40340000 	.word	0x40340000
 80022d8:	45160000 	.word	0x45160000
 80022dc:	42c80000 	.word	0x42c80000

080022e0 <SetPWMValue>:


void SetPWMValue(uint8_t output, uint32_t val)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
	switch(output){
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d822      	bhi.n	800233a <SetPWMValue+0x5a>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <SetPWMValue+0x1c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002319 	.word	0x08002319
 8002300:	08002311 	.word	0x08002311
 8002304:	08002329 	.word	0x08002329
 8002308:	08002321 	.word	0x08002321
 800230c:	08002331 	.word	0x08002331
	case SERVO_XN:			// X-
		TIM3->CCR1 = val;
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <SetPWMValue+0x68>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8002316:	e011      	b.n	800233c <SetPWMValue+0x5c>

	case SERVO_XP:			// X+
		TIM3->CCR2 = val;
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <SetPWMValue+0x68>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800231e:	e00d      	b.n	800233c <SetPWMValue+0x5c>

	case SERVO_YN:			// Y-
		TIM3->CCR4 = val;
 8002320:	4a09      	ldr	r2, [pc, #36]	; (8002348 <SetPWMValue+0x68>)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002326:	e009      	b.n	800233c <SetPWMValue+0x5c>

	case SERVO_YP:			// Y+
		TIM3->CCR3 = val;
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <SetPWMValue+0x68>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800232e:	e005      	b.n	800233c <SetPWMValue+0x5c>

	case PWM_EDF:			// EDF
		TIM2->CCR4 = val;
 8002330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002338:	e000      	b.n	800233c <SetPWMValue+0x5c>

	default:
		break;
 800233a:	bf00      	nop
	}
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40000400 	.word	0x40000400

0800234c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002354:	f002 f9d0 	bl	80046f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002358:	f000 fcec 	bl	8002d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800235c:	f001 f914 	bl	8003588 <MX_GPIO_Init>
  MX_DMA_Init();
 8002360:	f001 f8dc 	bl	800351c <MX_DMA_Init>
  MX_ADC1_Init();
 8002364:	f000 fd50 	bl	8002e08 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002368:	f000 fddc 	bl	8002f24 <MX_SPI1_Init>
  MX_UART4_Init();
 800236c:	f001 f8ac 	bl	80034c8 <MX_UART4_Init>
  MX_TIM3_Init();
 8002370:	f000 ff40 	bl	80031f4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002374:	f000 fda8 	bl	8002ec8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002378:	f000 feb8 	bl	80030ec <MX_TIM2_Init>
  MX_TIM1_Init();
 800237c:	f000 fe08 	bl	8002f90 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002380:	f000 ffd0 	bl	8003324 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002384:	f00c fe8c 	bl	800f0a0 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8002388:	f001 f81a 	bl	80033c0 <MX_TIM5_Init>
  MX_FATFS_Init();
 800238c:	f00a fe24 	bl	800cfd8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002390:	f001 f864 	bl	800345c <MX_TIM6_Init>

  /* Variables */


  // Init
  AmonDrone.DroneStatus = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
  AmonDrone.PitchOld = 0;
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  AmonDrone.RollOld = 0;
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Changing values when changing status
	  if (AmonDrone.DroneStatus != DroneStatusOld && CALIBRATION == 0)
 80023aa:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
 80023ae:	4bba      	ldr	r3, [pc, #744]	; (8002698 <main+0x34c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d00c      	beq.n	80023d0 <main+0x84>
	  {
		  DroneStatusOld = AmonDrone.DroneStatus;
 80023b6:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
 80023ba:	4bb7      	ldr	r3, [pc, #732]	; (8002698 <main+0x34c>)
 80023bc:	701a      	strb	r2, [r3, #0]
		  DroneStatusLocal = AmonDrone.DroneStatus;
 80023be:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
 80023c2:	4bb6      	ldr	r3, [pc, #728]	; (800269c <main+0x350>)
 80023c4:	701a      	strb	r2, [r3, #0]
		  StatusLED(AmonDrone.DroneStatus);
 80023c6:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fa68 	bl	80038a0 <StatusLED>

	  /****************************
	   * INIT  SEQUENCE
	   ****************************/

	  if (StartupInit == STATUS_STARTUP)
 80023d0:	4bb3      	ldr	r3, [pc, #716]	; (80026a0 <main+0x354>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8200 	bne.w	80027da <main+0x48e>
	  {

		//AmonDrone.DroneStatus = STATUS_STARTUP;
		uint8_t status = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

		/* Aligne all motors */
		TVCServoEnable();
 80023e0:	f001 f9ba 	bl	8003758 <TVCServoEnable>
		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 80023e4:	2002      	movs	r0, #2
 80023e6:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80026a4 <main+0x358>
 80023ea:	f7ff ff19 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 80023ee:	2001      	movs	r0, #1
 80023f0:	ed9f 0aad 	vldr	s0, [pc, #692]	; 80026a8 <main+0x35c>
 80023f4:	f7ff ff14 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 80023f8:	2004      	movs	r0, #4
 80023fa:	ed9f 0aac 	vldr	s0, [pc, #688]	; 80026ac <main+0x360>
 80023fe:	f7ff ff0f 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 8002402:	2003      	movs	r0, #3
 8002404:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80026a8 <main+0x35c>
 8002408:	f7ff ff0a 	bl	8002220 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 800240c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002410:	f002 f9e4 	bl	80047dc <HAL_Delay>

		DegresToCCR(80.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002414:	2002      	movs	r0, #2
 8002416:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80026b0 <main+0x364>
 800241a:	f7ff ff01 	bl	8002220 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_XP_OFFSET, SERVO_XP);
 800241e:	2001      	movs	r0, #1
 8002420:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80026b4 <main+0x368>
 8002424:	f7ff fefc 	bl	8002220 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002428:	2004      	movs	r0, #4
 800242a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80026b8 <main+0x36c>
 800242e:	f7ff fef7 	bl	8002220 <DegresToCCR>
		DegresToCCR(80.0 + SERVO_YP_OFFSET, SERVO_YP);
 8002432:	2003      	movs	r0, #3
 8002434:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 80026b4 <main+0x368>
 8002438:	f7ff fef2 	bl	8002220 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 800243c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002440:	f002 f9cc 	bl	80047dc <HAL_Delay>

		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002444:	2002      	movs	r0, #2
 8002446:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80026a4 <main+0x358>
 800244a:	f7ff fee9 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 800244e:	2001      	movs	r0, #1
 8002450:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80026a8 <main+0x35c>
 8002454:	f7ff fee4 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002458:	2004      	movs	r0, #4
 800245a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80026ac <main+0x360>
 800245e:	f7ff fedf 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 8002462:	2003      	movs	r0, #3
 8002464:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80026a8 <main+0x35c>
 8002468:	f7ff feda 	bl	8002220 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 800246c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002470:	f002 f9b4 	bl	80047dc <HAL_Delay>

		DegresToCCR(100.0 + SERVO_XN_OFFSET, SERVO_XN);
 8002474:	2002      	movs	r0, #2
 8002476:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80026bc <main+0x370>
 800247a:	f7ff fed1 	bl	8002220 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_XP_OFFSET, SERVO_XP);
 800247e:	2001      	movs	r0, #1
 8002480:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80026c0 <main+0x374>
 8002484:	f7ff fecc 	bl	8002220 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_YN_OFFSET, SERVO_YN);
 8002488:	2004      	movs	r0, #4
 800248a:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80026c4 <main+0x378>
 800248e:	f7ff fec7 	bl	8002220 <DegresToCCR>
		DegresToCCR(100.0 + SERVO_YP_OFFSET, SERVO_YP);
 8002492:	2003      	movs	r0, #3
 8002494:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80026c0 <main+0x374>
 8002498:	f7ff fec2 	bl	8002220 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 800249c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024a0:	f002 f99c 	bl	80047dc <HAL_Delay>

		DegresToCCR(90.0 + SERVO_XN_OFFSET, SERVO_XN);
 80024a4:	2002      	movs	r0, #2
 80024a6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 80026a4 <main+0x358>
 80024aa:	f7ff feb9 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_XP_OFFSET, SERVO_XP);
 80024ae:	2001      	movs	r0, #1
 80024b0:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80026a8 <main+0x35c>
 80024b4:	f7ff feb4 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YN_OFFSET, SERVO_YN);
 80024b8:	2004      	movs	r0, #4
 80024ba:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80026ac <main+0x360>
 80024be:	f7ff feaf 	bl	8002220 <DegresToCCR>
		DegresToCCR(90.0 + SERVO_YP_OFFSET, SERVO_YP);
 80024c2:	2003      	movs	r0, #3
 80024c4:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80026a8 <main+0x35c>
 80024c8:	f7ff feaa 	bl	8002220 <DegresToCCR>
		HAL_Delay(500); // wait on motors to stop mooving
 80024cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024d0:	f002 f984 	bl	80047dc <HAL_Delay>

		// Start timers for sensors and LEDs
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2104      	movs	r1, #4
 80024d8:	487b      	ldr	r0, [pc, #492]	; (80026c8 <main+0x37c>)
 80024da:	f003 fc5b 	bl	8005d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Brd_GPIO_Port, LED_Brd_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2108      	movs	r1, #8
 80024e2:	487a      	ldr	r0, [pc, #488]	; (80026cc <main+0x380>)
 80024e4:	f003 fc56 	bl	8005d94 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // RGB (50Hz)
 80024e8:	2104      	movs	r1, #4
 80024ea:	4879      	ldr	r0, [pc, #484]	; (80026d0 <main+0x384>)
 80024ec:	f006 fcd4 	bl	8008e98 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // RGB (50Hz)
 80024f0:	2108      	movs	r1, #8
 80024f2:	4877      	ldr	r0, [pc, #476]	; (80026d0 <main+0x384>)
 80024f4:	f006 fcd0 	bl	8008e98 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // RGB (50Hz)
 80024f8:	2108      	movs	r1, #8
 80024fa:	4876      	ldr	r0, [pc, #472]	; (80026d4 <main+0x388>)
 80024fc:	f006 fccc 	bl	8008e98 <HAL_TIM_PWM_Start>

		/* Read both batteries and save in drone data struct */
		HAL_ADC_Start_DMA(&hadc1, ADC_BAT_Val, 2); 		// Start ADC DMA (read analog value)
 8002500:	2202      	movs	r2, #2
 8002502:	4975      	ldr	r1, [pc, #468]	; (80026d8 <main+0x38c>)
 8002504:	4875      	ldr	r0, [pc, #468]	; (80026dc <main+0x390>)
 8002506:	f002 f9d1 	bl	80048ac <HAL_ADC_Start_DMA>

		while(ADC_DMA_DataRdy == 0){
 800250a:	bf00      	nop
 800250c:	4b74      	ldr	r3, [pc, #464]	; (80026e0 <main+0x394>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0fb      	beq.n	800250c <main+0x1c0>
			// white...
		}

		AmonDrone.MainBatVoltage = ADC_Read_Main_Battery();
 8002514:	f001 fa60 	bl	80039d8 <ADC_Read_Main_Battery>
 8002518:	4603      	mov	r3, r0
 800251a:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
		AmonDrone.EDFBatVoltage = ADC_Read_EDF_Battery();
 800251e:	f001 faa3 	bl	8003a68 <ADC_Read_EDF_Battery>
 8002522:	4603      	mov	r3, r0
 8002524:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
		ADC_DMA_DataRdy = 0;
 8002528:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <main+0x394>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]

		if (AmonDrone.MainBatVoltage < 1000) status++; // check board battery voltage (more than XV)
 800252e:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8002532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002536:	d204      	bcs.n	8002542 <main+0x1f6>
 8002538:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800253c:	3301      	adds	r3, #1
 800253e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		//if (AmonDrone.EDFBatVoltage < 2000) status++; // check board battery voltage (more than XV)

		HAL_Delay(500);
 8002542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002546:	f002 f949 	bl	80047dc <HAL_Delay>

		/* Reset all devices */
		status += BME280_Reset(&bme280, &hi2c3);
 800254a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800254e:	4965      	ldr	r1, [pc, #404]	; (80026e4 <main+0x398>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd17 	bl	8000f84 <BME280_Reset>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800255e:	4413      	add	r3, r2
 8002560:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_Reset(&mpu6050, &hi2c3);
 8002564:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002568:	495e      	ldr	r1, [pc, #376]	; (80026e4 <main+0x398>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ff1f 	bl	80013ae <MPU6050_Reset>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002578:	4413      	add	r3, r2
 800257a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

		HAL_Delay(500); // delay sensors config to complete power on
 800257e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002582:	f002 f92b 	bl	80047dc <HAL_Delay>

		/* BME280 */
		status += BME280_ReadDeviceID(&bme280, &hi2c3);
 8002586:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800258a:	4956      	ldr	r1, [pc, #344]	; (80026e4 <main+0x398>)
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fcd9 	bl	8000f44 <BME280_ReadDeviceID>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800259a:	4413      	add	r3, r2
 800259c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += BME280_ReadCalibData(&bme280, &hi2c3);
 80025a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80025a4:	494f      	ldr	r1, [pc, #316]	; (80026e4 <main+0x398>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fd8a 	bl	80010c0 <BME280_ReadCalibData>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80025b4:	4413      	add	r3, r2
 80025b6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += BME280_Init(&bme280, &hi2c3);
 80025ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80025be:	4949      	ldr	r1, [pc, #292]	; (80026e4 <main+0x398>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fd3f 	bl	8001044 <BME280_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80025ce:	4413      	add	r3, r2
 80025d0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

		/* MPU6050 */
		status += MPU6050_ReadDeviceID(&mpu6050, &hi2c3);
 80025d4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025d8:	4942      	ldr	r1, [pc, #264]	; (80026e4 <main+0x398>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fec7 	bl	800136e <MPU6050_ReadDeviceID>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80025e8:	4413      	add	r3, r2
 80025ea:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_ReadFactoryTrim(&mpu6050, &hi2c3);
 80025ee:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025f2:	493c      	ldr	r1, [pc, #240]	; (80026e4 <main+0x398>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe ffa3 	bl	8001540 <MPU6050_ReadFactoryTrim>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002602:	4413      	add	r3, r2
 8002604:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_Init(&mpu6050, &hi2c3);
 8002608:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <main+0x398>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe ff28 	bl	8001464 <MPU6050_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800261c:	4413      	add	r3, r2
 800261e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_ReadFactoryTrim(&mpu6050, &hi2c3);
 8002622:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002626:	492f      	ldr	r1, [pc, #188]	; (80026e4 <main+0x398>)
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe ff89 	bl	8001540 <MPU6050_ReadFactoryTrim>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002636:	4413      	add	r3, r2
 8002638:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 800263c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002640:	4928      	ldr	r1, [pc, #160]	; (80026e4 <main+0x398>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fcaa 	bl	8001f9c <MPU6050_ReadAllDirect>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002650:	4413      	add	r3, r2
 8002652:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += MPU6050_SelfTest(&mpu6050, &hi2c3);
 8002656:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <main+0x398>)
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa47 	bl	8001af0 <MPU6050_SelfTest>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800266a:	4413      	add	r3, r2
 800266c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

		/* vl53l1x */
		uint8_t bootOK = 0;
 8002670:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002674:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
		status += VL53L1X_ReadID(&vl53l1Dev, &hi2c3);
 800267c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002680:	4918      	ldr	r1, [pc, #96]	; (80026e4 <main+0x398>)
 8002682:	4618      	mov	r0, r3
 8002684:	f00a fbfe 	bl	800ce84 <VL53L1X_ReadID>
 8002688:	4603      	mov	r3, r0
 800268a:	b2da      	uxtb	r2, r3
 800268c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002690:	4413      	add	r3, r2
 8002692:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		while (bootOK == 0)
 8002696:	e036      	b.n	8002706 <main+0x3ba>
 8002698:	20000000 	.word	0x20000000
 800269c:	200006bc 	.word	0x200006bc
 80026a0:	200006bd 	.word	0x200006bd
 80026a4:	42b60000 	.word	0x42b60000
 80026a8:	42ae0000 	.word	0x42ae0000
 80026ac:	42b40000 	.word	0x42b40000
 80026b0:	42a20000 	.word	0x42a20000
 80026b4:	429a0000 	.word	0x429a0000
 80026b8:	42a00000 	.word	0x42a00000
 80026bc:	42ca0000 	.word	0x42ca0000
 80026c0:	42c20000 	.word	0x42c20000
 80026c4:	42c80000 	.word	0x42c80000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020000 	.word	0x40020000
 80026d0:	20000468 	.word	0x20000468
 80026d4:	200004b0 	.word	0x200004b0
 80026d8:	20000770 	.word	0x20000770
 80026dc:	20000314 	.word	0x20000314
 80026e0:	2000076e 	.word	0x2000076e
 80026e4:	200003bc 	.word	0x200003bc
		{
			status += VL53L1X_BootState(&vl53l1Dev, &hi2c3, &bootOK);
 80026e8:	f107 0237 	add.w	r2, r7, #55	; 0x37
 80026ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026f0:	49b1      	ldr	r1, [pc, #708]	; (80029b8 <main+0x66c>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00a fb4f 	bl	800cd96 <VL53L1X_BootState>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002700:	4413      	add	r3, r2
 8002702:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		while (bootOK == 0)
 8002706:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800270a:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0e9      	beq.n	80026e8 <main+0x39c>
		}
		status += VL53L1X_SensorInit(&vl53l1Dev, &hi2c3);
 8002714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002718:	49a7      	ldr	r1, [pc, #668]	; (80029b8 <main+0x66c>)
 800271a:	4618      	mov	r0, r3
 800271c:	f00a f8f0 	bl	800c900 <VL53L1X_SensorInit>
 8002720:	4603      	mov	r3, r0
 8002722:	b2da      	uxtb	r2, r3
 8002724:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002728:	4413      	add	r3, r2
 800272a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += VL53L1X_SetTimingBudgetInMs(&vl53l1Dev, &hi2c3, 200); // 140ms is min for 4m distance
 800272e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002732:	22c8      	movs	r2, #200	; 0xc8
 8002734:	49a0      	ldr	r1, [pc, #640]	; (80029b8 <main+0x66c>)
 8002736:	4618      	mov	r0, r3
 8002738:	f00a fa05 	bl	800cb46 <VL53L1X_SetTimingBudgetInMs>
 800273c:	4603      	mov	r3, r0
 800273e:	b2da      	uxtb	r2, r3
 8002740:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002744:	4413      	add	r3, r2
 8002746:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		status += VL53L1X_SetOffset(&vl53l1Dev, &hi2c3, -130); // Set height from ground to get zero
 800274a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800274e:	f06f 0281 	mvn.w	r2, #129	; 0x81
 8002752:	4999      	ldr	r1, [pc, #612]	; (80029b8 <main+0x66c>)
 8002754:	4618      	mov	r0, r3
 8002756:	f00a fb60 	bl	800ce1a <VL53L1X_SetOffset>
 800275a:	4603      	mov	r3, r0
 800275c:	b2da      	uxtb	r2, r3
 800275e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8002762:	4413      	add	r3, r2
 8002764:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		VL53L1X_StartRanging(&vl53l1Dev, &hi2c3);
 8002768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800276c:	4992      	ldr	r1, [pc, #584]	; (80029b8 <main+0x66c>)
 800276e:	4618      	mov	r0, r3
 8002770:	f00a f97b 	bl	800ca6a <VL53L1X_StartRanging>


		HAL_TIM_Base_Start_IT(&htim4); // TVC LOOP, leg leds (50Hz)
 8002774:	4891      	ldr	r0, [pc, #580]	; (80029bc <main+0x670>)
 8002776:	f006 fac5 	bl	8008d04 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim5); // Complementary Filter
 800277a:	4891      	ldr	r0, [pc, #580]	; (80029c0 <main+0x674>)
 800277c:	f006 fac2 	bl	8008d04 <HAL_TIM_Base_Start_IT>


		if (CALIBRATION == 0) HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 426); // Do not enable UART DMA if calibrating
 8002780:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002784:	498f      	ldr	r1, [pc, #572]	; (80029c4 <main+0x678>)
 8002786:	4890      	ldr	r0, [pc, #576]	; (80029c8 <main+0x67c>)
 8002788:	f007 fbb7 	bl	8009efa <HAL_UART_Receive_DMA>


		if (bme280.dig_T1 == 0 || bme280.dig_T2 == 0) // for WTF error
 800278c:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <main+0x450>
 8002794:	f9b7 31b6 	ldrsh.w	r3, [r7, #438]	; 0x1b6
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <main+0x45a>
		{
			status++;
 800279c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80027a0:	3301      	adds	r3, #1
 80027a2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		}

		InitError = status;
 80027a6:	4a89      	ldr	r2, [pc, #548]	; (80029cc <main+0x680>)
 80027a8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80027ac:	7013      	strb	r3, [r2, #0]

		// Check if all init functionsa are OK
		if (InitError == 0) // OK
 80027ae:	4b87      	ldr	r3, [pc, #540]	; (80029cc <main+0x680>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <main+0x478>
		{
			StartupInit = 1;
 80027b6:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <main+0x684>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
			AmonDrone.DroneStatus = STATUS_IDLE_NC;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
 80027c2:	e00a      	b.n	80027da <main+0x48e>
		}
		else
		{
			StartupInit = 1;
 80027c4:	4b82      	ldr	r3, [pc, #520]	; (80029d0 <main+0x684>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
			AmonDrone.DroneStatus = STATUS_ERROR; // ERROR
 80027ca:	2303      	movs	r3, #3
 80027cc:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
			HAL_GPIO_WritePin(LED_Brd_GPIO_Port, LED_Brd_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2108      	movs	r1, #8
 80027d4:	487f      	ldr	r0, [pc, #508]	; (80029d4 <main+0x688>)
 80027d6:	f003 fadd 	bl	8005d94 <HAL_GPIO_WritePin>

	  /****************************
	   * SEQUENCE IDLE, ARM, FLY...
	   ****************************/

	  if (StartupInit != STATUS_STARTUP && AmonDrone.DroneStatus != STATUS_ERROR && CALIBRATION == 0)
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <main+0x684>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f43f ade3 	beq.w	80023aa <main+0x5e>
 80027e4:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	f43f adde 	beq.w	80023aa <main+0x5e>
	  {

		  /*** CURRENT DRONE STATUS ***/
		  switch(AmonDrone.DroneStatus){
 80027ee:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 80027f2:	3b01      	subs	r3, #1
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	f200 8270 	bhi.w	8002cda <main+0x98e>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <main+0x4b4>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002819 	.word	0x08002819
 8002804:	080028f1 	.word	0x080028f1
 8002808:	08002cdb 	.word	0x08002cdb
 800280c:	080029f1 	.word	0x080029f1
 8002810:	08002b7b 	.word	0x08002b7b
 8002814:	08002c15 	.word	0x08002c15


		  /*/ Drone ideling but no connection with link /*/
		  case STATUS_IDLE_NC:

			  if (TVCServoEnableFlag == 1) TVCServoDisable();	// Disable TVC servos
 8002818:	4b6f      	ldr	r3, [pc, #444]	; (80029d8 <main+0x68c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <main+0x4d8>
 8002820:	f000 ffd6 	bl	80037d0 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();				// Disable EDF
 8002824:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <main+0x690>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <main+0x4e4>
 800282c:	f001 f822 	bl	8003874 <EDFDisable>


			  if (Reg200HzLoopEN == 1) // Timer 4
 8002830:	4b6b      	ldr	r3, [pc, #428]	; (80029e0 <main+0x694>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d110      	bne.n	800285a <main+0x50e>
			  {
				  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);	// read data from gyro
 8002838:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800283c:	495e      	ldr	r1, [pc, #376]	; (80029b8 <main+0x66c>)
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fbac 	bl	8001f9c <MPU6050_ReadAllDirect>
				  MPU6050_RawToDeg(&mpu6050, &AmonDrone); 	// calculate data to pitch and roll (and yaw)
 8002844:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002848:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fffe 	bl	8001850 <MPU6050_RawToDeg>
				  Reg200HzLoopEN = 0;
 8002854:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <main+0x694>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg50HzLoopEN == 1)	// Timer 5
 800285a:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <main+0x698>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12e      	bne.n	80028c0 <main+0x574>
			  {
				  uint8_t dataRdy = 0;
 8002862:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002866:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
				  while(dataRdy == 0)
 800286e:	e007      	b.n	8002880 <main+0x534>
				  {
					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002870:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8002874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002878:	494f      	ldr	r1, [pc, #316]	; (80029b8 <main+0x66c>)
 800287a:	4618      	mov	r0, r3
 800287c:	f00a f929 	bl	800cad2 <VL53L1X_CheckForDataReady>
				  while(dataRdy == 0)
 8002880:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002884:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <main+0x524>
				  }
				  dataRdy = 0;
 800288e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002892:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 800289a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800289e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80028a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a6:	4944      	ldr	r1, [pc, #272]	; (80029b8 <main+0x66c>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00a fa96 	bl	800cdda <VL53L1X_GetDistance>
				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 80028ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028b2:	4941      	ldr	r1, [pc, #260]	; (80029b8 <main+0x66c>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00a f891 	bl	800c9dc <VL53L1X_ClearInterrupt>
				  // Read other sensors
				  Reg50HzLoopEN = 0;
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <main+0x698>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg1HzLoopEN == 1)	// Timer 6
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <main+0x69c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <main+0x582>
			  {

				  Reg1HzLoopEN = 0;
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <main+0x69c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
			  }


			  if (NewGPSData == 1 && USE_GPS == 1){	// new gps data available -> decode
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <main+0x6a0>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 8209 	bne.w	8002cea <main+0x99e>
				  GPS_Decode_GGA(&USART4_GPSRX, &gps_gga, &AmonDrone);
 80028d8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80028dc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4838      	ldr	r0, [pc, #224]	; (80029c4 <main+0x678>)
 80028e4:	f7fe fd37 	bl	8001356 <GPS_Decode_GGA>

				  NewGPSData = 0;
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <main+0x6a0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 80028ee:	e1fc      	b.n	8002cea <main+0x99e>

		  /*/ Drone ideling and is connected with link /*/
		  case STATUS_IDLE_CN:

			  if (TVCServoEnableFlag == 1) TVCServoDisable();	// Disable TVC servos
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <main+0x68c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <main+0x5b0>
 80028f8:	f000 ff6a 	bl	80037d0 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();				// Disable EDF
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <main+0x690>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <main+0x5bc>
 8002904:	f000 ffb6 	bl	8003874 <EDFDisable>


			  if (Reg200HzLoopEN == 1) // Timer 4
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <main+0x694>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d110      	bne.n	8002932 <main+0x5e6>
			  {
			  	  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002910:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002914:	4928      	ldr	r1, [pc, #160]	; (80029b8 <main+0x66c>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fb40 	bl	8001f9c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 800291c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002920:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ff92 	bl	8001850 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <main+0x694>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg50HzLoopEN == 1)	// Timer 5
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <main+0x698>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d12e      	bne.n	8002998 <main+0x64c>
			  {
 				  uint8_t dataRdy = 0;
 800293a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800293e:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
  				  while(dataRdy == 0)
 8002946:	e007      	b.n	8002958 <main+0x60c>
  				  {
  					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002948:	f107 0235 	add.w	r2, r7, #53	; 0x35
 800294c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002950:	4919      	ldr	r1, [pc, #100]	; (80029b8 <main+0x66c>)
 8002952:	4618      	mov	r0, r3
 8002954:	f00a f8bd 	bl	800cad2 <VL53L1X_CheckForDataReady>
  				  while(dataRdy == 0)
 8002958:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800295c:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <main+0x5fc>
			  	  }
			  	  dataRdy = 0;
 8002966:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800296a:	f2a3 13eb 	subw	r3, r3, #491	; 0x1eb
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
			  	  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002972:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002976:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800297a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800297e:	490e      	ldr	r1, [pc, #56]	; (80029b8 <main+0x66c>)
 8002980:	4618      	mov	r0, r3
 8002982:	f00a fa2a 	bl	800cdda <VL53L1X_GetDistance>
			  	  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800298a:	490b      	ldr	r1, [pc, #44]	; (80029b8 <main+0x66c>)
 800298c:	4618      	mov	r0, r3
 800298e:	f00a f825 	bl	800c9dc <VL53L1X_ClearInterrupt>
			  	// Read other sensors...
			  	  Reg50HzLoopEN = 0;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <main+0x698>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg1HzLoopEN == 1)	// Timer 6
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <main+0x69c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <main+0x65a>
			  {

				  Reg1HzLoopEN = 0;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <main+0x69c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
			  }


			  if (NewGPSData == 1 && USE_GPS == 1){	// new gps data available -> decode
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <main+0x6a0>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f040 81a0 	bne.w	8002cf0 <main+0x9a4>


				  NewGPSData = 0;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <main+0x6a0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 80029b6:	e19b      	b.n	8002cf0 <main+0x9a4>
 80029b8:	200003bc 	.word	0x200003bc
 80029bc:	20000540 	.word	0x20000540
 80029c0:	20000588 	.word	0x20000588
 80029c4:	20000778 	.word	0x20000778
 80029c8:	20000618 	.word	0x20000618
 80029cc:	200006be 	.word	0x200006be
 80029d0:	200006bd 	.word	0x200006bd
 80029d4:	40020000 	.word	0x40020000
 80029d8:	200006c1 	.word	0x200006c1
 80029dc:	200006c2 	.word	0x200006c2
 80029e0:	20000925 	.word	0x20000925
 80029e4:	20000924 	.word	0x20000924
 80029e8:	20000923 	.word	0x20000923
 80029ec:	20000922 	.word	0x20000922

		  /*/ Drone is armed to take off /*/
		  case STATUS_ARM:

			  if (TVCServoEnableFlag == 0) TVCServoEnable();
 80029f0:	4bc4      	ldr	r3, [pc, #784]	; (8002d04 <main+0x9b8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <main+0x6b0>
 80029f8:	f000 feae 	bl	8003758 <TVCServoEnable>
			  if (EDFEnableFlag == 0) EDFEnable();
 80029fc:	4bc2      	ldr	r3, [pc, #776]	; (8002d08 <main+0x9bc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <main+0x6bc>
 8002a04:	f000 ff20 	bl	8003848 <EDFEnable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 8002a08:	4bc0      	ldr	r3, [pc, #768]	; (8002d0c <main+0x9c0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d110      	bne.n	8002a32 <main+0x6e6>
			  {
			  	  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002a10:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002a14:	49be      	ldr	r1, [pc, #760]	; (8002d10 <main+0x9c4>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fac0 	bl	8001f9c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 8002a1c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002a20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ff12 	bl	8001850 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 8002a2c:	4bb7      	ldr	r3, [pc, #732]	; (8002d0c <main+0x9c0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1)	// Timer 5
 8002a32:	4bb8      	ldr	r3, [pc, #736]	; (8002d14 <main+0x9c8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 808f 	bne.w	8002b5a <main+0x80e>
			  {

				  // Moving average for pitch and roll
				  if (MeassCnt == 20)
 8002a3c:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <main+0x9cc>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b14      	cmp	r3, #20
 8002a42:	d141      	bne.n	8002ac8 <main+0x77c>
				  {
					  float PitchSum = 0;
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
					  float RollSum = 0;
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

					  for (int i = 0; i < 20; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002a5a:	e01e      	b.n	8002a9a <main+0x74e>
					  {
						  PitchSum += PitchDef[i];
 8002a5c:	4aaf      	ldr	r2, [pc, #700]	; (8002d1c <main+0x9d0>)
 8002a5e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	edc7 7a84 	vstr	s15, [r7, #528]	; 0x210
						  RollSum += RollDef[i];
 8002a76:	4aaa      	ldr	r2, [pc, #680]	; (8002d20 <main+0x9d4>)
 8002a78:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ed97 7a87 	vldr	s14, [r7, #540]	; 0x21c
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
					  for (int i = 0; i < 20; i++)
 8002a90:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002a9a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002a9e:	2b13      	cmp	r3, #19
 8002aa0:	dddc      	ble.n	8002a5c <main+0x710>
					  }

					  AmonDrone.PitchMean = PitchSum / 20;
 8002aa2:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8002aa6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aae:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
					  AmonDrone.RollMean = RollSum / 20;
 8002ab2:	ed97 7a87 	vldr	s14, [r7, #540]	; 0x21c
 8002ab6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002abe:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198

					  MeassCnt = 0; // reset if not used for new data
 8002ac2:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <main+0x9cc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
				  }

				  if (MeassCnt < 20)
 8002ac8:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <main+0x9cc>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b13      	cmp	r3, #19
 8002ace:	d815      	bhi.n	8002afc <main+0x7b0>
				  {
					  PitchDef[MeassCnt] = AmonDrone.Pitch;
 8002ad0:	4b91      	ldr	r3, [pc, #580]	; (8002d18 <main+0x9cc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ad8:	4990      	ldr	r1, [pc, #576]	; (8002d1c <main+0x9d0>)
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	601a      	str	r2, [r3, #0]
					  RollDef[MeassCnt] = AmonDrone.Roll;
 8002ae0:	4b8d      	ldr	r3, [pc, #564]	; (8002d18 <main+0x9cc>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8002ae8:	498d      	ldr	r1, [pc, #564]	; (8002d20 <main+0x9d4>)
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	601a      	str	r2, [r3, #0]
					  MeassCnt++;
 8002af0:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <main+0x9cc>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <main+0x9cc>)
 8002afa:	701a      	strb	r2, [r3, #0]
				  }


				  uint8_t dataRdy = 0;
 8002afc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b00:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
				  while(dataRdy == 0)
 8002b08:	e007      	b.n	8002b1a <main+0x7ce>
				  {
					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002b0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b12:	497f      	ldr	r1, [pc, #508]	; (8002d10 <main+0x9c4>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f009 ffdc 	bl	800cad2 <VL53L1X_CheckForDataReady>
				  while(dataRdy == 0)
 8002b1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <main+0x7be>
				  }
				  dataRdy = 0;
 8002b28:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b2c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002b34:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002b38:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002b3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b40:	4973      	ldr	r1, [pc, #460]	; (8002d10 <main+0x9c4>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f00a f949 	bl	800cdda <VL53L1X_GetDistance>
				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002b48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b4c:	4970      	ldr	r1, [pc, #448]	; (8002d10 <main+0x9c4>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f009 ff44 	bl	800c9dc <VL53L1X_ClearInterrupt>
				  // Read other sensors...

				  Reg50HzLoopEN = 0;
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <main+0x9c8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg1HzLoopEN == 1)	// Timer 6
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <main+0x9d8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <main+0x81c>
			  {

				  Reg1HzLoopEN = 0;
 8002b62:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <main+0x9d8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
			  }


			  if (NewGPSData == 1 && USE_GPS == 1){	// new gps data available -> decode
 8002b68:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <main+0x9dc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 80c2 	bne.w	8002cf6 <main+0x9aa>


				  NewGPSData = 0;
 8002b72:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <main+0x9dc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
			  }

			  break;
 8002b78:	e0bd      	b.n	8002cf6 <main+0x9aa>

		  /*/ Flying /*/
		  case STATUS_FLY:

			  // add init level value
			  DegresToCCR(90.0f + AmonDrone.Pitch + (AmonDrone.PitchMean) + SERVO_XN_OFFSET, SERVO_XN);
 8002b7a:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8002b7e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002d2c <main+0x9e0>
 8002b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b86:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b96:	2002      	movs	r0, #2
 8002b98:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9c:	f7ff fb40 	bl	8002220 <DegresToCCR>
			  DegresToCCR(90.0f - AmonDrone.Pitch + (AmonDrone.PitchMean) + SERVO_XP_OFFSET, SERVO_XP);
 8002ba0:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8002ba4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002d2c <main+0x9e0>
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8002bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002bb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc2:	f7ff fb2d 	bl	8002220 <DegresToCCR>
			  DegresToCCR(90.0f - AmonDrone.Roll + (AmonDrone.RollMean) + SERVO_YN_OFFSET, SERVO_YN);
 8002bc6:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002bca:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002d2c <main+0x9e0>
 8002bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd2:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8002bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bda:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002d30 <main+0x9e4>
 8002bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002be2:	2004      	movs	r0, #4
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	f7ff fb1a 	bl	8002220 <DegresToCCR>
			  DegresToCCR(90.0f + AmonDrone.Roll + (AmonDrone.RollMean) + SERVO_YP_OFFSET, SERVO_YP);
 8002bec:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8002bf0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002d2c <main+0x9e0>
 8002bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bf8:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c08:	2003      	movs	r0, #3
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	f7ff fb07 	bl	8002220 <DegresToCCR>


			  break;
 8002c12:	e074      	b.n	8002cfe <main+0x9b2>

		  /*/ Dron landed (after flying) /*/
		  case STATUS_FLY_OVER:

			  if (TVCServoEnableFlag == 1) TVCServoDisable();
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <main+0x9b8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <main+0x8d4>
 8002c1c:	f000 fdd8 	bl	80037d0 <TVCServoDisable>
			  if (EDFEnableFlag == 1) EDFDisable();
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <main+0x9bc>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <main+0x8e0>
 8002c28:	f000 fe24 	bl	8003874 <EDFDisable>

			  if (Reg200HzLoopEN == 1) // Timer 4
 8002c2c:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <main+0x9c0>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d110      	bne.n	8002c56 <main+0x90a>
			  {
				  MPU6050_ReadAllDirect(&mpu6050, &hi2c3);
 8002c34:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <main+0x9c4>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f9ae 	bl	8001f9c <MPU6050_ReadAllDirect>
			  	  MPU6050_RawToDeg(&mpu6050, &AmonDrone); // calculate data to pitch and roll (and yaw)
 8002c40:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002c44:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fe00 	bl	8001850 <MPU6050_RawToDeg>
			  	  Reg200HzLoopEN = 0;
 8002c50:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <main+0x9c0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
			  }

			  if (Reg50HzLoopEN == 1)	// Timer 5
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <main+0x9c8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12e      	bne.n	8002cbc <main+0x970>
			  {
 				  uint8_t dataRdy = 0;
 8002c5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c62:	f2a3 13ed 	subw	r3, r3, #493	; 0x1ed
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  				  while(dataRdy == 0)
 8002c6a:	e007      	b.n	8002c7c <main+0x930>
  				  {
  					  VL53L1X_CheckForDataReady(&vl53l1Dev, &hi2c3, &dataRdy);
 8002c6c:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8002c70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c74:	4926      	ldr	r1, [pc, #152]	; (8002d10 <main+0x9c4>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f009 ff2b 	bl	800cad2 <VL53L1X_CheckForDataReady>
  				  while(dataRdy == 0)
 8002c7c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c80:	f2a3 13ed 	subw	r3, r3, #493	; 0x1ed
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <main+0x920>
  				  }
  				  dataRdy = 0;
 8002c8a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c8e:	f2a3 13ed 	subw	r3, r3, #493	; 0x1ed
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
 				  VL53L1X_GetDistance(&vl53l1Dev, &hi2c3, &AmonDrone.Height);
 8002c96:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c9a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <main+0x9c4>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00a f898 	bl	800cdda <VL53L1X_GetDistance>
  				  VL53L1X_ClearInterrupt(&vl53l1Dev, &hi2c3);
 8002caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cae:	4918      	ldr	r1, [pc, #96]	; (8002d10 <main+0x9c4>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f009 fe93 	bl	800c9dc <VL53L1X_ClearInterrupt>
 				  // Read other sensors...
  				  // save to sd...
  				  Reg50HzLoopEN = 0;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <main+0x9c8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
			  }


			  if (Reg1HzLoopEN == 1)	// Timer 6
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <main+0x9d8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <main+0x97e>
			  {

				  Reg1HzLoopEN = 0;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <main+0x9d8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			  }


			  if (NewGPSData == 1 && USE_GPS == 1){	// new gps data available -> decode
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <main+0x9dc>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d114      	bne.n	8002cfc <main+0x9b0>


				  NewGPSData = 0;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <main+0x9dc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8002cd8:	e010      	b.n	8002cfc <main+0x9b0>

		  /*/ Wrong state /*/
		  default:
			  AmonDrone.DroneStatus = STATUS_ERROR;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
			  TVCServoDisable();
 8002ce0:	f000 fd76 	bl	80037d0 <TVCServoDisable>
			  EDFDisable();
 8002ce4:	f000 fdc6 	bl	8003874 <EDFDisable>
			  break;
 8002ce8:	e009      	b.n	8002cfe <main+0x9b2>
			  break;
 8002cea:	bf00      	nop
 8002cec:	f7ff bb5d 	b.w	80023aa <main+0x5e>
			  break;
 8002cf0:	bf00      	nop
 8002cf2:	f7ff bb5a 	b.w	80023aa <main+0x5e>
			  break;
 8002cf6:	bf00      	nop
 8002cf8:	f7ff bb57 	b.w	80023aa <main+0x5e>
			  break;
 8002cfc:	bf00      	nop
	  if (AmonDrone.DroneStatus != DroneStatusOld && CALIBRATION == 0)
 8002cfe:	f7ff bb54 	b.w	80023aa <main+0x5e>
 8002d02:	bf00      	nop
 8002d04:	200006c1 	.word	0x200006c1
 8002d08:	200006c2 	.word	0x200006c2
 8002d0c:	20000925 	.word	0x20000925
 8002d10:	200003bc 	.word	0x200003bc
 8002d14:	20000924 	.word	0x20000924
 8002d18:	20000764 	.word	0x20000764
 8002d1c:	200006c4 	.word	0x200006c4
 8002d20:	20000714 	.word	0x20000714
 8002d24:	20000923 	.word	0x20000923
 8002d28:	20000922 	.word	0x20000922
 8002d2c:	42b40000 	.word	0x42b40000
 8002d30:	00000000 	.word	0x00000000

08002d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b094      	sub	sp, #80	; 0x50
 8002d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3a:	f107 0320 	add.w	r3, r7, #32
 8002d3e:	2230      	movs	r2, #48	; 0x30
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00e fd23 	bl	801178e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <SystemClock_Config+0xcc>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <SystemClock_Config+0xcc>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	; 0x40
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <SystemClock_Config+0xcc>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <SystemClock_Config+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <SystemClock_Config+0xd0>)
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <SystemClock_Config+0xd0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002da4:	230f      	movs	r3, #15
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002da8:	2390      	movs	r3, #144	; 0x90
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dac:	2302      	movs	r3, #2
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002db0:	2305      	movs	r3, #5
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db4:	f107 0320 	add.w	r3, r7, #32
 8002db8:	4618      	mov	r0, r3
 8002dba:	f005 fa73 	bl	80082a4 <HAL_RCC_OscConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002dc4:	f000 ffec 	bl	8003da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc8:	230f      	movs	r3, #15
 8002dca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	2103      	movs	r1, #3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fcd4 	bl	8008794 <HAL_RCC_ClockConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002df2:	f000 ffd5 	bl	8003da0 <Error_Handler>
  }
}
 8002df6:	bf00      	nop
 8002df8:	3750      	adds	r7, #80	; 0x50
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000

08002e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e0e:	463b      	mov	r3, r7
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <MX_ADC1_Init+0xb8>)
 8002e1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <MX_ADC1_Init+0xbc>)
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e56:	2202      	movs	r2, #2
 8002e58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e68:	4814      	ldr	r0, [pc, #80]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e6a:	f001 fcdb 	bl	8004824 <HAL_ADC_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002e74:	f000 ff94 	bl	8003da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	4619      	mov	r1, r3
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002e8a:	f001 fe33 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002e94:	f000 ff84 	bl	8003da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_ADC1_Init+0xb4>)
 8002ea6:	f001 fe25 	bl	8004af4 <HAL_ADC_ConfigChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002eb0:	f000 ff76 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000314 	.word	0x20000314
 8002ec0:	40012000 	.word	0x40012000
 8002ec4:	0f000001 	.word	0x0f000001

08002ec8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <MX_I2C3_Init+0x54>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002ed4:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <MX_I2C3_Init+0x58>)
 8002ed6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002f04:	4804      	ldr	r0, [pc, #16]	; (8002f18 <MX_I2C3_Init+0x50>)
 8002f06:	f002 ff91 	bl	8005e2c <HAL_I2C_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002f10:	f000 ff46 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200003bc 	.word	0x200003bc
 8002f1c:	40005c00 	.word	0x40005c00
 8002f20:	000186a0 	.word	0x000186a0

08002f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <MX_SPI1_Init+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f58:	2220      	movs	r2, #32
 8002f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f70:	220a      	movs	r2, #10
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f76:	f005 fded 	bl	8008b54 <HAL_SPI_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f80:	f000 ff0e 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000410 	.word	0x20000410
 8002f8c:	40013000 	.word	0x40013000

08002f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b096      	sub	sp, #88	; 0x58
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	611a      	str	r2, [r3, #16]
 8002fbe:	615a      	str	r2, [r3, #20]
 8002fc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f00e fbe0 	bl	801178e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002fd0:	4a45      	ldr	r2, [pc, #276]	; (80030e8 <MX_TIM1_Init+0x158>)
 8002fd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500;
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002fd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002fe4:	f640 125f 	movw	r2, #2399	; 0x95f
 8002fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ffc:	4839      	ldr	r0, [pc, #228]	; (80030e4 <MX_TIM1_Init+0x154>)
 8002ffe:	f005 fe32 	bl	8008c66 <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003008:	f000 feca 	bl	8003da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003016:	4619      	mov	r1, r3
 8003018:	4832      	ldr	r0, [pc, #200]	; (80030e4 <MX_TIM1_Init+0x154>)
 800301a:	f006 fa3f 	bl	800949c <HAL_TIM_ConfigClockSource>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003024:	f000 febc 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003028:	482e      	ldr	r0, [pc, #184]	; (80030e4 <MX_TIM1_Init+0x154>)
 800302a:	f005 fedb 	bl	8008de4 <HAL_TIM_PWM_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003034:	f000 feb4 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003044:	4619      	mov	r1, r3
 8003046:	4827      	ldr	r0, [pc, #156]	; (80030e4 <MX_TIM1_Init+0x154>)
 8003048:	f006 fe28 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003052:	f000 fea5 	bl	8003da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003056:	2360      	movs	r3, #96	; 0x60
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800305e:	2302      	movs	r3, #2
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003062:	2300      	movs	r3, #0
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003076:	2204      	movs	r2, #4
 8003078:	4619      	mov	r1, r3
 800307a:	481a      	ldr	r0, [pc, #104]	; (80030e4 <MX_TIM1_Init+0x154>)
 800307c:	f006 f94c 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003086:	f000 fe8b 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800308a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308e:	2208      	movs	r2, #8
 8003090:	4619      	mov	r1, r3
 8003092:	4814      	ldr	r0, [pc, #80]	; (80030e4 <MX_TIM1_Init+0x154>)
 8003094:	f006 f940 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800309e:	f000 fe7f 	bl	8003da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4807      	ldr	r0, [pc, #28]	; (80030e4 <MX_TIM1_Init+0x154>)
 80030c6:	f006 fe65 	bl	8009d94 <HAL_TIMEx_ConfigBreakDeadTime>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80030d0:	f000 fe66 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <MX_TIM1_Init+0x154>)
 80030d6:	f001 f857 	bl	8004188 <HAL_TIM_MspPostInit>

}
 80030da:	bf00      	nop
 80030dc:	3758      	adds	r7, #88	; 0x58
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000468 	.word	0x20000468
 80030e8:	40010000 	.word	0x40010000

080030ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003100:	f107 0320 	add.w	r3, r7, #32
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	615a      	str	r2, [r3, #20]
 800311a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <MX_TIM2_Init+0x104>)
 800311e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500;
 8003124:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003126:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800312a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <MX_TIM2_Init+0x104>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2399;
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003134:	f640 125f 	movw	r2, #2399	; 0x95f
 8003138:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <MX_TIM2_Init+0x104>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003146:	482a      	ldr	r0, [pc, #168]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003148:	f005 fd8d 	bl	8008c66 <HAL_TIM_Base_Init>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003152:	f000 fe25 	bl	8003da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800315c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003160:	4619      	mov	r1, r3
 8003162:	4823      	ldr	r0, [pc, #140]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003164:	f006 f99a 	bl	800949c <HAL_TIM_ConfigClockSource>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800316e:	f000 fe17 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003172:	481f      	ldr	r0, [pc, #124]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003174:	f005 fe36 	bl	8008de4 <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800317e:	f000 fe0f 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800318a:	f107 0320 	add.w	r3, r7, #32
 800318e:	4619      	mov	r1, r3
 8003190:	4817      	ldr	r0, [pc, #92]	; (80031f0 <MX_TIM2_Init+0x104>)
 8003192:	f006 fd83 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800319c:	f000 fe00 	bl	8003da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a0:	2360      	movs	r3, #96	; 0x60
 80031a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80031a8:	2302      	movs	r3, #2
 80031aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2208      	movs	r2, #8
 80031b4:	4619      	mov	r1, r3
 80031b6:	480e      	ldr	r0, [pc, #56]	; (80031f0 <MX_TIM2_Init+0x104>)
 80031b8:	f006 f8ae 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031c2:	f000 fded 	bl	8003da0 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	220c      	movs	r2, #12
 80031ce:	4619      	mov	r1, r3
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <MX_TIM2_Init+0x104>)
 80031d2:	f006 f8a1 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80031dc:	f000 fde0 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031e0:	4803      	ldr	r0, [pc, #12]	; (80031f0 <MX_TIM2_Init+0x104>)
 80031e2:	f000 ffd1 	bl	8004188 <HAL_TIM_MspPostInit>

}
 80031e6:	bf00      	nop
 80031e8:	3738      	adds	r7, #56	; 0x38
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200004b0 	.word	0x200004b0

080031f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003208:	f107 0320 	add.w	r3, r7, #32
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <MX_TIM3_Init+0x128>)
 8003226:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <MX_TIM3_Init+0x12c>)
 8003228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 800322a:	4b3c      	ldr	r3, [pc, #240]	; (800331c <MX_TIM3_Init+0x128>)
 800322c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003230:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <MX_TIM3_Init+0x128>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 8003238:	4b38      	ldr	r3, [pc, #224]	; (800331c <MX_TIM3_Init+0x128>)
 800323a:	f640 125f 	movw	r2, #2399	; 0x95f
 800323e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003240:	4b36      	ldr	r3, [pc, #216]	; (800331c <MX_TIM3_Init+0x128>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <MX_TIM3_Init+0x128>)
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800324c:	4833      	ldr	r0, [pc, #204]	; (800331c <MX_TIM3_Init+0x128>)
 800324e:	f005 fd0a 	bl	8008c66 <HAL_TIM_Base_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003258:	f000 fda2 	bl	8003da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003266:	4619      	mov	r1, r3
 8003268:	482c      	ldr	r0, [pc, #176]	; (800331c <MX_TIM3_Init+0x128>)
 800326a:	f006 f917 	bl	800949c <HAL_TIM_ConfigClockSource>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003274:	f000 fd94 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003278:	4828      	ldr	r0, [pc, #160]	; (800331c <MX_TIM3_Init+0x128>)
 800327a:	f005 fdb3 	bl	8008de4 <HAL_TIM_PWM_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003284:	f000 fd8c 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003290:	f107 0320 	add.w	r3, r7, #32
 8003294:	4619      	mov	r1, r3
 8003296:	4821      	ldr	r0, [pc, #132]	; (800331c <MX_TIM3_Init+0x128>)
 8003298:	f006 fd00 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80032a2:	f000 fd7d 	bl	8003da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a6:	2360      	movs	r3, #96	; 0x60
 80032a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	4619      	mov	r1, r3
 80032bc:	4817      	ldr	r0, [pc, #92]	; (800331c <MX_TIM3_Init+0x128>)
 80032be:	f006 f82b 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80032c8:	f000 fd6a 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2204      	movs	r2, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4812      	ldr	r0, [pc, #72]	; (800331c <MX_TIM3_Init+0x128>)
 80032d4:	f006 f820 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80032de:	f000 fd5f 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2208      	movs	r2, #8
 80032e6:	4619      	mov	r1, r3
 80032e8:	480c      	ldr	r0, [pc, #48]	; (800331c <MX_TIM3_Init+0x128>)
 80032ea:	f006 f815 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80032f4:	f000 fd54 	bl	8003da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	220c      	movs	r2, #12
 80032fc:	4619      	mov	r1, r3
 80032fe:	4807      	ldr	r0, [pc, #28]	; (800331c <MX_TIM3_Init+0x128>)
 8003300:	f006 f80a 	bl	8009318 <HAL_TIM_PWM_ConfigChannel>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800330a:	f000 fd49 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800330e:	4803      	ldr	r0, [pc, #12]	; (800331c <MX_TIM3_Init+0x128>)
 8003310:	f000 ff3a 	bl	8004188 <HAL_TIM_MspPostInit>

}
 8003314:	bf00      	nop
 8003316:	3738      	adds	r7, #56	; 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200004f8 	.word	0x200004f8
 8003320:	40000400 	.word	0x40000400

08003324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003338:	463b      	mov	r3, r7
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <MX_TIM4_Init+0x98>)
 8003344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003348:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800334c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003356:	f640 125f 	movw	r2, #2399	; 0x95f
 800335a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <MX_TIM4_Init+0x94>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003368:	4813      	ldr	r0, [pc, #76]	; (80033b8 <MX_TIM4_Init+0x94>)
 800336a:	f005 fc7c 	bl	8008c66 <HAL_TIM_Base_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003374:	f000 fd14 	bl	8003da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	4619      	mov	r1, r3
 8003384:	480c      	ldr	r0, [pc, #48]	; (80033b8 <MX_TIM4_Init+0x94>)
 8003386:	f006 f889 	bl	800949c <HAL_TIM_ConfigClockSource>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003390:	f000 fd06 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <MX_TIM4_Init+0x94>)
 80033a2:	f006 fc7b 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80033ac:	f000 fcf8 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000540 	.word	0x20000540
 80033bc:	40000800 	.word	0x40000800

080033c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d4:	463b      	mov	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <MX_TIM5_Init+0x94>)
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <MX_TIM5_Init+0x98>)
 80033e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500;
 80033e2:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <MX_TIM5_Init+0x94>)
 80033e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <MX_TIM5_Init+0x94>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 600;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <MX_TIM5_Init+0x94>)
 80033f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80033f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_TIM5_Init+0x94>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <MX_TIM5_Init+0x94>)
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003404:	4813      	ldr	r0, [pc, #76]	; (8003454 <MX_TIM5_Init+0x94>)
 8003406:	f005 fc2e 	bl	8008c66 <HAL_TIM_Base_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003410:	f000 fcc6 	bl	8003da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	4619      	mov	r1, r3
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <MX_TIM5_Init+0x94>)
 8003422:	f006 f83b 	bl	800949c <HAL_TIM_ConfigClockSource>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800342c:	f000 fcb8 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003438:	463b      	mov	r3, r7
 800343a:	4619      	mov	r1, r3
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <MX_TIM5_Init+0x94>)
 800343e:	f006 fc2d 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003448:	f000 fcaa 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800344c:	bf00      	nop
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000588 	.word	0x20000588
 8003458:	40000c00 	.word	0x40000c00

0800345c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003462:	463b      	mov	r3, r7
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_TIM6_Init+0x64>)
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <MX_TIM6_Init+0x68>)
 800346e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <MX_TIM6_Init+0x64>)
 8003472:	f242 7210 	movw	r2, #10000	; 0x2710
 8003476:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <MX_TIM6_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000;
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <MX_TIM6_Init+0x64>)
 8003480:	f241 7270 	movw	r2, #6000	; 0x1770
 8003484:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <MX_TIM6_Init+0x64>)
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <MX_TIM6_Init+0x64>)
 800348e:	f005 fbea 	bl	8008c66 <HAL_TIM_Base_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003498:	f000 fc82 	bl	8003da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034a4:	463b      	mov	r3, r7
 80034a6:	4619      	mov	r1, r3
 80034a8:	4805      	ldr	r0, [pc, #20]	; (80034c0 <MX_TIM6_Init+0x64>)
 80034aa:	f006 fbf7 	bl	8009c9c <HAL_TIMEx_MasterConfigSynchronization>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80034b4:	f000 fc74 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200005d0 	.word	0x200005d0
 80034c4:	40001000 	.word	0x40001000

080034c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <MX_UART4_Init+0x4c>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <MX_UART4_Init+0x50>)
 80034d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <MX_UART4_Init+0x4c>)
 80034d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <MX_UART4_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <MX_UART4_Init+0x4c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <MX_UART4_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <MX_UART4_Init+0x4c>)
 80034ee:	220c      	movs	r2, #12
 80034f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <MX_UART4_Init+0x4c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <MX_UART4_Init+0x4c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <MX_UART4_Init+0x4c>)
 8003500:	f006 fcae 	bl	8009e60 <HAL_UART_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800350a:	f000 fc49 	bl	8003da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000618 	.word	0x20000618
 8003518:	40004c00 	.word	0x40004c00

0800351c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <MX_DMA_Init+0x68>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <MX_DMA_Init+0x68>)
 800352c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_DMA_Init+0x68>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <MX_DMA_Init+0x68>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <MX_DMA_Init+0x68>)
 8003548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <MX_DMA_Init+0x68>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	200d      	movs	r0, #13
 8003560:	f001 fe43 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003564:	200d      	movs	r0, #13
 8003566:	f001 fe5c 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	2038      	movs	r0, #56	; 0x38
 8003570:	f001 fe3b 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003574:	2038      	movs	r0, #56	; 0x38
 8003576:	f001 fe54 	bl	8005222 <HAL_NVIC_EnableIRQ>

}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b52      	ldr	r3, [pc, #328]	; (80036ec <MX_GPIO_Init+0x164>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a51      	ldr	r2, [pc, #324]	; (80036ec <MX_GPIO_Init+0x164>)
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <MX_GPIO_Init+0x164>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <MX_GPIO_Init+0x164>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <MX_GPIO_Init+0x164>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b48      	ldr	r3, [pc, #288]	; (80036ec <MX_GPIO_Init+0x164>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <MX_GPIO_Init+0x164>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <MX_GPIO_Init+0x164>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <MX_GPIO_Init+0x164>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <MX_GPIO_Init+0x164>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <MX_GPIO_Init+0x164>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <MX_GPIO_Init+0x164>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <MX_GPIO_Init+0x164>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a35      	ldr	r2, [pc, #212]	; (80036ec <MX_GPIO_Init+0x164>)
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b33      	ldr	r3, [pc, #204]	; (80036ec <MX_GPIO_Init+0x164>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Brd_Pin|CS_Flash_Pin, GPIO_PIN_RESET);
 800362a:	2200      	movs	r2, #0
 800362c:	2118      	movs	r1, #24
 800362e:	4830      	ldr	r0, [pc, #192]	; (80036f0 <MX_GPIO_Init+0x168>)
 8003630:	f002 fbb0 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Ext_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8003634:	2200      	movs	r2, #0
 8003636:	2130      	movs	r1, #48	; 0x30
 8003638:	482e      	ldr	r0, [pc, #184]	; (80036f4 <MX_GPIO_Init+0x16c>)
 800363a:	f002 fbab 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 800363e:	2200      	movs	r2, #0
 8003640:	f240 7134 	movw	r1, #1844	; 0x734
 8003644:	482c      	ldr	r0, [pc, #176]	; (80036f8 <MX_GPIO_Init+0x170>)
 8003646:	f002 fba5 	bl	8005d94 <HAL_GPIO_WritePin>
                          |EN_RF1_Pin|CS_RF1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Brd_Pin CS_Flash_Pin */
  GPIO_InitStruct.Pin = LED_Brd_Pin|CS_Flash_Pin;
 800364a:	2318      	movs	r3, #24
 800364c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4823      	ldr	r0, [pc, #140]	; (80036f0 <MX_GPIO_Init+0x168>)
 8003662:	f002 f9fb 	bl	8005a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Ext_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_Ext_Pin|CS_SD_Pin;
 8003666:	2330      	movs	r3, #48	; 0x30
 8003668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366a:	2301      	movs	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4619      	mov	r1, r3
 800367c:	481d      	ldr	r0, [pc, #116]	; (80036f4 <MX_GPIO_Init+0x16c>)
 800367e:	f002 f9ed 	bl	8005a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_White_Pin CS_RF2_Pin EN_RF2_Pin
                           EN_RF1_Pin CS_RF1_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_White_Pin|CS_RF2_Pin|EN_RF2_Pin
 8003682:	f240 7334 	movw	r3, #1844	; 0x734
 8003686:	617b      	str	r3, [r7, #20]
                          |EN_RF1_Pin|CS_RF1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003688:	2301      	movs	r3, #1
 800368a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4619      	mov	r1, r3
 800369a:	4817      	ldr	r0, [pc, #92]	; (80036f8 <MX_GPIO_Init+0x170>)
 800369c:	f002 f9de 	bl	8005a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ2_Pin */
  GPIO_InitStruct.Pin = RF_IRQ2_Pin;
 80036a0:	2304      	movs	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ2_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	4811      	ldr	r0, [pc, #68]	; (80036fc <MX_GPIO_Init+0x174>)
 80036b6:	f002 f9d1 	bl	8005a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ1_Pin */
  GPIO_InitStruct.Pin = RF_IRQ1_Pin;
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_IRQ1_GPIO_Port, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	480a      	ldr	r0, [pc, #40]	; (80036f8 <MX_GPIO_Init+0x170>)
 80036d0:	f002 f9c4 	bl	8005a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2104      	movs	r1, #4
 80036d8:	2017      	movs	r0, #23
 80036da:	f001 fd86 	bl	80051ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036de:	2017      	movs	r0, #23
 80036e0:	f001 fd9f 	bl	8005222 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020400 	.word	0x40020400
 80036fc:	40020c00 	.word	0x40020c00

08003700 <HAL_UART_RxCpltCallback>:

/*
 * UART
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, USART4_GPSRX, 426); // enable USART Receive again
 8003708:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800370c:	4905      	ldr	r1, [pc, #20]	; (8003724 <HAL_UART_RxCpltCallback+0x24>)
 800370e:	4806      	ldr	r0, [pc, #24]	; (8003728 <HAL_UART_RxCpltCallback+0x28>)
 8003710:	f006 fbf3 	bl	8009efa <HAL_UART_Receive_DMA>
	NewGPSData = 1;		// set flag that new data has arrived
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_UART_RxCpltCallback+0x2c>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000778 	.word	0x20000778
 8003728:	20000618 	.word	0x20000618
 800372c:	20000922 	.word	0x20000922

08003730 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == RF_IRQ2_Pin)
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d104      	bne.n	800374a <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8003740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003744:	4803      	ldr	r0, [pc, #12]	; (8003754 <HAL_GPIO_EXTI_Callback+0x24>)
 8003746:	f002 fb3e 	bl	8005dc6 <HAL_GPIO_TogglePin>
    }
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40020000 	.word	0x40020000

08003758 <TVCServoEnable>:

/*
 * Enabling servos for TVC stabilization
 */
uint8_t TVCServoEnable()
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	71fb      	strb	r3, [r7, #7]
	TVCServoEnableFlag = !TVCServoEnableFlag;
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <TVCServoEnable+0x70>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <TVCServoEnable+0x70>)
 8003774:	701a      	strb	r2, [r3, #0]

	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003776:	2100      	movs	r1, #0
 8003778:	4814      	ldr	r0, [pc, #80]	; (80037cc <TVCServoEnable+0x74>)
 800377a:	f005 fb8d 	bl	8008e98 <HAL_TIM_PWM_Start>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	4413      	add	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003788:	2104      	movs	r1, #4
 800378a:	4810      	ldr	r0, [pc, #64]	; (80037cc <TVCServoEnable+0x74>)
 800378c:	f005 fb84 	bl	8008e98 <HAL_TIM_PWM_Start>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4413      	add	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800379a:	2108      	movs	r1, #8
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <TVCServoEnable+0x74>)
 800379e:	f005 fb7b 	bl	8008e98 <HAL_TIM_PWM_Start>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	4413      	add	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80037ac:	210c      	movs	r1, #12
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <TVCServoEnable+0x74>)
 80037b0:	f005 fb72 	bl	8008e98 <HAL_TIM_PWM_Start>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4413      	add	r3, r2
 80037bc:	71fb      	strb	r3, [r7, #7]

	return status;
 80037be:	79fb      	ldrb	r3, [r7, #7]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200006c1 	.word	0x200006c1
 80037cc:	200004f8 	.word	0x200004f8

080037d0 <TVCServoDisable>:

/*
 * Disabling servos for TVC stabilization
 */
uint8_t TVCServoDisable()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	71fb      	strb	r3, [r7, #7]
	EDFEnableFlag = !EDFEnableFlag;
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <TVCServoDisable+0x70>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <TVCServoDisable+0x70>)
 80037ec:	701a      	strb	r2, [r3, #0]

	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80037ee:	2100      	movs	r1, #0
 80037f0:	4814      	ldr	r0, [pc, #80]	; (8003844 <TVCServoDisable+0x74>)
 80037f2:	f005 fc19 	bl	8009028 <HAL_TIM_PWM_Stop>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	4413      	add	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003800:	2104      	movs	r1, #4
 8003802:	4810      	ldr	r0, [pc, #64]	; (8003844 <TVCServoDisable+0x74>)
 8003804:	f005 fc10 	bl	8009028 <HAL_TIM_PWM_Stop>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4413      	add	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8003812:	2108      	movs	r1, #8
 8003814:	480b      	ldr	r0, [pc, #44]	; (8003844 <TVCServoDisable+0x74>)
 8003816:	f005 fc07 	bl	8009028 <HAL_TIM_PWM_Stop>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4413      	add	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
	status += HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003824:	210c      	movs	r1, #12
 8003826:	4807      	ldr	r0, [pc, #28]	; (8003844 <TVCServoDisable+0x74>)
 8003828:	f005 fbfe 	bl	8009028 <HAL_TIM_PWM_Stop>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4413      	add	r3, r2
 8003834:	71fb      	strb	r3, [r7, #7]

	return status;
 8003836:	79fb      	ldrb	r3, [r7, #7]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200006c2 	.word	0x200006c2
 8003844:	200004f8 	.word	0x200004f8

08003848 <EDFEnable>:

/*
 * Enabling EDF
 */
uint8_t EDFEnable()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	71fb      	strb	r3, [r7, #7]

	status += HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003852:	210c      	movs	r1, #12
 8003854:	4806      	ldr	r0, [pc, #24]	; (8003870 <EDFEnable+0x28>)
 8003856:	f005 fb1f 	bl	8008e98 <HAL_TIM_PWM_Start>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4413      	add	r3, r2
 8003862:	71fb      	strb	r3, [r7, #7]

	return status;
 8003864:	79fb      	ldrb	r3, [r7, #7]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200004b0 	.word	0x200004b0

08003874 <EDFDisable>:

/*
 * Disabling EDF
 */
uint8_t EDFDisable()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]

	status += HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800387e:	210c      	movs	r1, #12
 8003880:	4806      	ldr	r0, [pc, #24]	; (800389c <EDFDisable+0x28>)
 8003882:	f005 fbd1 	bl	8009028 <HAL_TIM_PWM_Stop>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	4413      	add	r3, r2
 800388e:	71fb      	strb	r3, [r7, #7]

	return status;
 8003890:	79fb      	ldrb	r3, [r7, #7]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200004b0 	.word	0x200004b0

080038a0 <StatusLED>:


void StatusLED(uint8_t Status)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
	// OFF: R=2400, G=0, B=0
	// ON (bright): 500
	// ON (medium): 1000

	switch(Status){
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d875      	bhi.n	800399c <StatusLED+0xfc>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <StatusLED+0x18>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038d9 	.word	0x080038d9
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003909 	.word	0x08003909
 80038c4:	08003921 	.word	0x08003921
 80038c8:	08003939 	.word	0x08003939
 80038cc:	0800394f 	.word	0x0800394f
 80038d0:	08003969 	.word	0x08003969
 80038d4:	08003981 	.word	0x08003981
	case 0: // STARTUP (red)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 80038d8:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <StatusLED+0x124>)
 80038da:	2200      	movs	r2, #0
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <StatusLED+0x124>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 2400; // LED-RGB (red)
 80038e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80038ee:	e063      	b.n	80039b8 <StatusLED+0x118>

	case 1: // IDLE - no RF connection (blue)
		TIM1->CCR2 = 1000; // LED-RGB (blue)
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <StatusLED+0x124>)
 80038f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <StatusLED+0x124>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 80038fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003902:	2200      	movs	r2, #0
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003906:	e057      	b.n	80039b8 <StatusLED+0x118>

	case 2: // IDLE - RF connected (green)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 8003908:	4b2e      	ldr	r3, [pc, #184]	; (80039c4 <StatusLED+0x124>)
 800390a:	2200      	movs	r2, #0
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <StatusLED+0x124>)
 8003910:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 8003916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800391a:	2200      	movs	r2, #0
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800391e:	e04b      	b.n	80039b8 <StatusLED+0x118>

	case 3: // ERROR (red + brd led on)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <StatusLED+0x124>)
 8003922:	2200      	movs	r2, #0
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0; // LED-RGB (green)
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <StatusLED+0x124>)
 8003928:	2200      	movs	r2, #0
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 1000; // LED-RGB (red)
 800392c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003936:	e03f      	b.n	80039b8 <StatusLED+0x118>

	case 4: // ARM (all - pink)
		TIM1->CCR2 = 100; // LED-RGB (blue)
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <StatusLED+0x124>)
 800393a:	2264      	movs	r2, #100	; 0x64
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 100; // LED-RGB (green)
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <StatusLED+0x124>)
 8003940:	2264      	movs	r2, #100	; 0x64
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 100; // LED-RGB (red)
 8003944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003948:	2264      	movs	r2, #100	; 0x64
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800394c:	e034      	b.n	80039b8 <StatusLED+0x118>

	case 5: // FLY ()
		TIM1->CCR2 = 500; // LED-RGB (blue)
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <StatusLED+0x124>)
 8003950:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 8003956:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <StatusLED+0x124>)
 8003958:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 800395e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003962:	2200      	movs	r2, #0
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003966:	e027      	b.n	80039b8 <StatusLED+0x118>

	case 6: // FLY OVER (green)
		TIM1->CCR2 = 0; // LED-RGB (blue)
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <StatusLED+0x124>)
 800396a:	2200      	movs	r2, #0
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <StatusLED+0x124>)
 8003970:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 0; // LED-RGB (red)
 8003976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800397a:	2200      	movs	r2, #0
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800397e:	e01b      	b.n	80039b8 <StatusLED+0x118>

	case 7: // FLY OVER (green)
		TIM1->CCR2 = RGB_Blue; // LED-RGB (blue)
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <StatusLED+0x128>)
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <StatusLED+0x124>)
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = RGB_Green; // LED-RGB (green)
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <StatusLED+0x12c>)
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <StatusLED+0x124>)
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = RGB_Red; // LED-RGB (red)
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <StatusLED+0x130>)
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800399a:	e00d      	b.n	80039b8 <StatusLED+0x118>

	default: // DEFAULT STATE
		TIM1->CCR2 = 500; // LED-RGB (blue)
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <StatusLED+0x124>)
 800399e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 500; // LED-RGB (green)
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <StatusLED+0x124>)
 80039a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR3 = 500; // LED-RGB (red)
 80039ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80039b6:	bf00      	nop
	}
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40010000 	.word	0x40010000
 80039c8:	20000004 	.word	0x20000004
 80039cc:	20000002 	.word	0x20000002
 80039d0:	20000766 	.word	0x20000766
 80039d4:	00000000 	.word	0x00000000

080039d8 <ADC_Read_Main_Battery>:

/*
 * Reading voltage of main board battery
 */
uint16_t ADC_Read_Main_Battery()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
	uint16_t adcVal = ADC_BAT_Val[1];
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <ADC_Read_Main_Battery+0x88>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	81fb      	strh	r3, [r7, #14]

	float temp = ((float)adcVal * 3.3) / 4095;
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	ee17 0a90 	vmov	r0, s15
 80039f2:	f7fc fda9 	bl	8000548 <__aeabi_f2d>
 80039f6:	a316      	add	r3, pc, #88	; (adr r3, 8003a50 <ADC_Read_Main_Battery+0x78>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fdfc 	bl	80005f8 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	a313      	add	r3, pc, #76	; (adr r3, 8003a58 <ADC_Read_Main_Battery+0x80>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fc ff1d 	bl	800084c <__aeabi_ddiv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f8c5 	bl	8000ba8 <__aeabi_d2f>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	60bb      	str	r3, [r7, #8]

	float voltage = (((100000+10000)/10000) * temp);
 8003a22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a26:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2e:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint16_t)(voltage*100);
 8003a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a36:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003a64 <ADC_Read_Main_Battery+0x8c>
 8003a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 3a90 	vmov	r3, s15
 8003a46:	b29b      	uxth	r3, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	66666666 	.word	0x66666666
 8003a54:	400a6666 	.word	0x400a6666
 8003a58:	00000000 	.word	0x00000000
 8003a5c:	40affe00 	.word	0x40affe00
 8003a60:	20000770 	.word	0x20000770
 8003a64:	42c80000 	.word	0x42c80000

08003a68 <ADC_Read_EDF_Battery>:

/*
 * Reading voltage of EDF battery
 */
uint16_t ADC_Read_EDF_Battery()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
	uint16_t adcVal = ADC_BAT_Val[0];
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <ADC_Read_EDF_Battery+0x88>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	81fb      	strh	r3, [r7, #14]

	float temp = ((float)adcVal * 3.3) / 4095;
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee17 0a90 	vmov	r0, s15
 8003a82:	f7fc fd61 	bl	8000548 <__aeabi_f2d>
 8003a86:	a316      	add	r3, pc, #88	; (adr r3, 8003ae0 <ADC_Read_EDF_Battery+0x78>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fdb4 	bl	80005f8 <__aeabi_dmul>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	a313      	add	r3, pc, #76	; (adr r3, 8003ae8 <ADC_Read_EDF_Battery+0x80>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fed5 	bl	800084c <__aeabi_ddiv>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f87d 	bl	8000ba8 <__aeabi_d2f>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]

	float voltage = (((100000+10000)/10000) * temp);
 8003ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ab6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003abe:	edc7 7a01 	vstr	s15, [r7, #4]

	return (uint16_t)(voltage*100);
 8003ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ac6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003af4 <ADC_Read_EDF_Battery+0x8c>
 8003aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad2:	ee17 3a90 	vmov	r3, s15
 8003ad6:	b29b      	uxth	r3, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	66666666 	.word	0x66666666
 8003ae4:	400a6666 	.word	0x400a6666
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	40affe00 	.word	0x40affe00
 8003af0:	20000770 	.word	0x20000770
 8003af4:	42c80000 	.word	0x42c80000

08003af8 <HAL_ADC_ConvCpltCallback>:


/*
 * DMA data from ADC ready
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	ADC_DMA_DataRdy = 1;
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000076e 	.word	0x2000076e

08003b18 <HAL_TIM_PeriodElapsedCallback>:
 * 	- send over RF
 * 	- save to flash
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

	/* TIMER 4 - 50Hz */

	if (htim->Instance == TIM4){
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a8e      	ldr	r2, [pc, #568]	; (8003d60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	f040 808b 	bne.w	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>

		Reg50HzLoopEN = 1;
 8003b2c:	4b8d      	ldr	r3, [pc, #564]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
		// Idle - single blink
		if (DroneStatusLocal != STATUS_STARTUP && DroneStatusLocal != STATUS_ERROR && DroneStatusLocal != STATUS_FLY && CALIBRATION == 0)
 8003b32:	4b8d      	ldr	r3, [pc, #564]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d033      	beq.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8003b3a:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d02f      	beq.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8003b42:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d02b      	beq.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			if (LED_blink_cnt_ON < 50) // LED OFF
 8003b4a:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b31      	cmp	r3, #49	; 0x31
 8003b50:	d806      	bhi.n	8003b60 <HAL_TIM_PeriodElapsedCallback+0x48>
			{
				LED_blink_cnt_ON++;
 8003b52:	4b86      	ldr	r3, [pc, #536]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b84      	ldr	r3, [pc, #528]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e020      	b.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x8a>
			}
			else
			{
				if (LED_blink_cnt_OFF < 10) // LED ON for short time
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d810      	bhi.n	8003b8a <HAL_TIM_PeriodElapsedCallback+0x72>
				{
					if (LED_blink_cnt_OFF == 0)
 8003b68:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_TIM_PeriodElapsedCallback+0x64>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b76:	487f      	ldr	r0, [pc, #508]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003b78:	f002 f90c 	bl	8005d94 <HAL_GPIO_WritePin>
					}
					LED_blink_cnt_OFF++;
 8003b7c:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b7a      	ldr	r3, [pc, #488]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e00b      	b.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x8a>
				}
				else
				{
					HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b90:	4878      	ldr	r0, [pc, #480]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003b92:	f002 f8ff 	bl	8005d94 <HAL_GPIO_WritePin>
					LED_blink_cnt_OFF = 0;
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
					LED_blink_cnt_ON = 0;
 8003b9c:	4b73      	ldr	r3, [pc, #460]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
			}
		}


		// Fly - dual blink
		if (DroneStatusLocal != STATUS_STARTUP && DroneStatusLocal != STATUS_ERROR && DroneStatusLocal == STATUS_FLY && CALIBRATION == 0)
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04b      	beq.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>
 8003baa:	4b6f      	ldr	r3, [pc, #444]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d047      	beq.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d143      	bne.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>
		{
			if (LED_blink_cnt_ON < 50) // LED OFF
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b31      	cmp	r3, #49	; 0x31
 8003bc0:	d806      	bhi.n	8003bd0 <HAL_TIM_PeriodElapsedCallback+0xb8>
			{
				LED_blink_cnt_ON++;
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e038      	b.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>
			}
			else
			{
				if (LED_blink_cnt_OFF < 10) // LED ON for short time
 8003bd0:	4b67      	ldr	r3, [pc, #412]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d828      	bhi.n	8003c2a <HAL_TIM_PeriodElapsedCallback+0x112>
				{
					if (LED_blink_cnt_OFF <3)
 8003bd8:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d805      	bhi.n	8003bec <HAL_TIM_PeriodElapsedCallback+0xd4>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 8003be0:	2201      	movs	r2, #1
 8003be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003be6:	4863      	ldr	r0, [pc, #396]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003be8:	f002 f8d4 	bl	8005d94 <HAL_GPIO_WritePin>
					}

					if (LED_blink_cnt_OFF >=3 && LED_blink_cnt_OFF <7)
 8003bec:	4b60      	ldr	r3, [pc, #384]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d909      	bls.n	8003c08 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8003bf4:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d805      	bhi.n	8003c08 <HAL_TIM_PeriodElapsedCallback+0xf0>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c02:	485c      	ldr	r0, [pc, #368]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c04:	f002 f8c6 	bl	8005d94 <HAL_GPIO_WritePin>
					}

					if (LED_blink_cnt_OFF >=7)
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d905      	bls.n	8003c1c <HAL_TIM_PeriodElapsedCallback+0x104>
					{
						HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_SET);
 8003c10:	2201      	movs	r2, #1
 8003c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c16:	4857      	ldr	r0, [pc, #348]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c18:	f002 f8bc 	bl	8005d94 <HAL_GPIO_WritePin>
					}

					LED_blink_cnt_OFF++;
 8003c1c:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x12a>
				}
				else
				{
					HAL_GPIO_WritePin(LED_White_GPIO_Port, LED_White_Pin, GPIO_PIN_RESET);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c30:	4850      	ldr	r0, [pc, #320]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c32:	f002 f8af 	bl	8005d94 <HAL_GPIO_WritePin>
					LED_blink_cnt_OFF = 0;
 8003c36:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
					LED_blink_cnt_ON = 0;
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
	}


	/* TIMER 5 - 200Hz */

	if (htim->Instance == TIM5)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d17d      	bne.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x230>
	{
		Reg200HzLoopEN = 1;
 8003c4c:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]

		/* RGB Cycling */
		// Red
		if (RGB_RedMax == 0)
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_TIM_PeriodElapsedCallback+0x15e>
		{
			RGB_Red += 1;
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	4b48      	ldr	r3, [pc, #288]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c64:	801a      	strh	r2, [r3, #0]
			if (RGB_Red == 1000) RGB_RedMax = 1;
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c6e:	d102      	bne.n	8003c76 <HAL_TIM_PeriodElapsedCallback+0x15e>
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_RedMax == 1)
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0x180>
		{
			RGB_Red -= 1;
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c88:	801a      	strh	r2, [r3, #0]
			if (RGB_Red == 0) RGB_RedMax = 0;
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0x180>
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	801a      	strh	r2, [r3, #0]
		}

		// Green
		if (RGB_GreenMax == 0 || (RGB_Green == 300 && RGB_GreenMax == 0 ))
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003ca8:	d111      	bne.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8003caa:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x1b6>
		{
			RGB_Green += 1;
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003cbc:	801a      	strh	r2, [r3, #0]
			if (RGB_Green == 900) RGB_GreenMax = 1;
 8003cbe:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003cc6:	d102      	bne.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_GreenMax == 1)
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		{
			RGB_Green -= 1;
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003ce0:	801a      	strh	r2, [r3, #0]
			if (RGB_Green == 0) RGB_GreenMax = 0;
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8003cea:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
		}

		// Blue
		if (RGB_BlueMax == 0 || (RGB_Blue == 600 && RGB_BlueMax == 0 ))
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003d00:	d111      	bne.n	8003d26 <HAL_TIM_PeriodElapsedCallback+0x20e>
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_TIM_PeriodElapsedCallback+0x20e>
		{
			RGB_Blue += 1;
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d14:	801a      	strh	r2, [r3, #0]
			if (RGB_Blue == 900) RGB_BlueMax = 1;
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003d1e:	d102      	bne.n	8003d26 <HAL_TIM_PeriodElapsedCallback+0x20e>
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	801a      	strh	r2, [r3, #0]
		}

		if (RGB_BlueMax == 1)
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x230>
		{
			RGB_Blue -= 1;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d38:	801a      	strh	r2, [r3, #0]
			if (RGB_Blue == 0) RGB_BlueMax = 0;
 8003d3a:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x230>
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	801a      	strh	r2, [r3, #0]
		}

	}

	/* TIMER 6 - 1Hz */
	if (htim->Instance == TIM6){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d102      	bne.n	8003d58 <HAL_TIM_PeriodElapsedCallback+0x240>
		Reg1HzLoopEN = 1;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
	}
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40000800 	.word	0x40000800
 8003d64:	20000924 	.word	0x20000924
 8003d68:	200006bc 	.word	0x200006bc
 8003d6c:	200006bf 	.word	0x200006bf
 8003d70:	200006c0 	.word	0x200006c0
 8003d74:	40020400 	.word	0x40020400
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	20000925 	.word	0x20000925
 8003d80:	20000768 	.word	0x20000768
 8003d84:	20000766 	.word	0x20000766
 8003d88:	2000076a 	.word	0x2000076a
 8003d8c:	20000002 	.word	0x20000002
 8003d90:	2000076c 	.word	0x2000076c
 8003d94:	20000004 	.word	0x20000004
 8003d98:	40001000 	.word	0x40001000
 8003d9c:	20000923 	.word	0x20000923

08003da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003da4:	b672      	cpsid	i
}
 8003da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <Error_Handler+0x8>
	...

08003dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_MspInit+0x4c>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_MspInit+0x4c>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_MspInit+0x4c>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <HAL_ADC_MspInit+0xdc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d157      	bne.n	8003ece <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a26      	ldr	r2, [pc, #152]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_ADC_MspInit+0xe0>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = EDF_BAT_Pin|BRD_BAT_Pin;
 8003e56:	2303      	movs	r3, #3
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	4619      	mov	r1, r3
 8003e68:	481d      	ldr	r0, [pc, #116]	; (8003ee0 <HAL_ADC_MspInit+0xe4>)
 8003e6a:	f001 fdf7 	bl	8005a5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_ADC_MspInit+0xec>)
 8003e72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003eb2:	480c      	ldr	r0, [pc, #48]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003eb4:	f001 f9d0 	bl	8005258 <HAL_DMA_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003ebe:	f7ff ff6f 	bl	8003da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec8:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <HAL_ADC_MspInit+0xe8>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40012000 	.word	0x40012000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	2000035c 	.word	0x2000035c
 8003ee8:	40026410 	.word	0x40026410

08003eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_I2C_MspInit+0xc4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d14b      	bne.n	8003fa6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f4c:	2312      	movs	r3, #18
 8003f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f54:	2303      	movs	r3, #3
 8003f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4619      	mov	r1, r3
 8003f62:	4815      	ldr	r0, [pc, #84]	; (8003fb8 <HAL_I2C_MspInit+0xcc>)
 8003f64:	f001 fd7a 	bl	8005a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f6e:	2312      	movs	r3, #18
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	480d      	ldr	r0, [pc, #52]	; (8003fbc <HAL_I2C_MspInit+0xd0>)
 8003f86:	f001 fd69 	bl	8005a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_I2C_MspInit+0xc8>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40005c00 	.word	0x40005c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020000 	.word	0x40020000

08003fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_SPI_MspInit+0x84>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d12b      	bne.n	800403a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8003fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_SPI_MspInit+0x88>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800401a:	23e0      	movs	r3, #224	; 0xe0
 800401c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800402a:	2305      	movs	r3, #5
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4619      	mov	r1, r3
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <HAL_SPI_MspInit+0x8c>)
 8004036:	f001 fd11 	bl	8005a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800403a:	bf00      	nop
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40013000 	.word	0x40013000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000

08004050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a44      	ldr	r2, [pc, #272]	; (8004170 <HAL_TIM_Base_MspInit+0x120>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a42      	ldr	r2, [pc, #264]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800407e:	e072      	b.n	8004166 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6413      	str	r3, [r2, #64]	; 0x40
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	69bb      	ldr	r3, [r7, #24]
}
 80040a6:	e05e      	b.n	8004166 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a32      	ldr	r2, [pc, #200]	; (8004178 <HAL_TIM_Base_MspInit+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10e      	bne.n	80040d0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a2e      	ldr	r2, [pc, #184]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
}
 80040ce:	e04a      	b.n	8004166 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_TIM_Base_MspInit+0x12c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d116      	bne.n	8004108 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a24      	ldr	r2, [pc, #144]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2101      	movs	r1, #1
 80040fa:	201e      	movs	r0, #30
 80040fc:	f001 f875 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004100:	201e      	movs	r0, #30
 8004102:	f001 f88e 	bl	8005222 <HAL_NVIC_EnableIRQ>
}
 8004106:	e02e      	b.n	8004166 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_TIM_Base_MspInit+0x130>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d116      	bne.n	8004140 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	2032      	movs	r0, #50	; 0x32
 8004134:	f001 f859 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004138:	2032      	movs	r0, #50	; 0x32
 800413a:	f001 f872 	bl	8005222 <HAL_NVIC_EnableIRQ>
}
 800413e:	e012      	b.n	8004166 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <HAL_TIM_Base_MspInit+0x134>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 8004154:	f043 0310 	orr.w	r3, r3, #16
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_TIM_Base_MspInit+0x124>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
}
 8004166:	bf00      	nop
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40023800 	.word	0x40023800
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40001000 	.word	0x40001000

08004188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a55      	ldr	r2, [pc, #340]	; (80042fc <HAL_TIM_MspPostInit+0x174>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d11f      	bne.n	80041ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	4b54      	ldr	r3, [pc, #336]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	4a53      	ldr	r2, [pc, #332]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH2_RGB_G_Pin|TIM1_CH3_RGB_R_Pin;
 80041c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041d8:	2301      	movs	r3, #1
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041dc:	f107 031c 	add.w	r3, r7, #28
 80041e0:	4619      	mov	r1, r3
 80041e2:	4848      	ldr	r0, [pc, #288]	; (8004304 <HAL_TIM_MspPostInit+0x17c>)
 80041e4:	f001 fc3a 	bl	8005a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041e8:	e083      	b.n	80042f2 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d13d      	bne.n	8004270 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	4a40      	ldr	r2, [pc, #256]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6313      	str	r3, [r2, #48]	; 0x30
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	4a39      	ldr	r2, [pc, #228]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	6313      	str	r3, [r2, #48]	; 0x30
 8004220:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_RGB_B_Pin;
 800422c:	2304      	movs	r3, #4
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800423c:	2301      	movs	r3, #1
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_RGB_B_GPIO_Port, &GPIO_InitStruct);
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	4619      	mov	r1, r3
 8004246:	482f      	ldr	r0, [pc, #188]	; (8004304 <HAL_TIM_MspPostInit+0x17c>)
 8004248:	f001 fc08 	bl	8005a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH4_EDF_Pin;
 800424c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800425e:	2301      	movs	r3, #1
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH4_EDF_GPIO_Port, &GPIO_InitStruct);
 8004262:	f107 031c 	add.w	r3, r7, #28
 8004266:	4619      	mov	r1, r3
 8004268:	4827      	ldr	r0, [pc, #156]	; (8004308 <HAL_TIM_MspPostInit+0x180>)
 800426a:	f001 fbf7 	bl	8005a5c <HAL_GPIO_Init>
}
 800426e:	e040      	b.n	80042f2 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <HAL_TIM_MspPostInit+0x184>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d13b      	bne.n	80042f2 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_TIM_MspPostInit+0x178>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH3_Y__Pin|TIM3_CH4_Y__Pin;
 80042b2:	2303      	movs	r3, #3
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	2300      	movs	r3, #0
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042c2:	2302      	movs	r3, #2
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4619      	mov	r1, r3
 80042cc:	480e      	ldr	r0, [pc, #56]	; (8004308 <HAL_TIM_MspPostInit+0x180>)
 80042ce:	f001 fbc5 	bl	8005a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH1_X__Pin|TIM3_CH2_X__Pin;
 80042d2:	23c0      	movs	r3, #192	; 0xc0
 80042d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	2302      	movs	r3, #2
 80042d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042de:	2300      	movs	r3, #0
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042e2:	2302      	movs	r3, #2
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e6:	f107 031c 	add.w	r3, r7, #28
 80042ea:	4619      	mov	r1, r3
 80042ec:	4808      	ldr	r0, [pc, #32]	; (8004310 <HAL_TIM_MspPostInit+0x188>)
 80042ee:	f001 fbb5 	bl	8005a5c <HAL_GPIO_Init>
}
 80042f2:	bf00      	nop
 80042f4:	3730      	adds	r7, #48	; 0x30
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40023800 	.word	0x40023800
 8004304:	40020000 	.word	0x40020000
 8004308:	40020400 	.word	0x40020400
 800430c:	40000400 	.word	0x40000400
 8004310:	40020800 	.word	0x40020800

08004314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_UART_MspInit+0xf0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d162      	bne.n	80043fc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_UART_MspInit+0xf4>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <HAL_UART_MspInit+0xf4>)
 8004340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_UART_MspInit+0xf4>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_UART_MspInit+0xf4>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <HAL_UART_MspInit+0xf4>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_UART_MspInit+0xf4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_GPS_Pin|UART4_RX_GPS_Pin;
 800436e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004380:	2308      	movs	r3, #8
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	4820      	ldr	r0, [pc, #128]	; (800440c <HAL_UART_MspInit+0xf8>)
 800438c:	f001 fb66 	bl	8005a5c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004390:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <HAL_UART_MspInit+0xfc>)
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_UART_MspInit+0x100>)
 8004394:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_UART_MspInit+0xfc>)
 8004398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800439c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80043d0:	480f      	ldr	r0, [pc, #60]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043d2:	f000 ff41 	bl	8005258 <HAL_DMA_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80043dc:	f7ff fce0 	bl	8003da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_UART_MspInit+0xfc>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 80043ec:	2200      	movs	r2, #0
 80043ee:	2102      	movs	r1, #2
 80043f0:	2034      	movs	r0, #52	; 0x34
 80043f2:	f000 fefa 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80043f6:	2034      	movs	r0, #52	; 0x34
 80043f8:	f000 ff13 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80043fc:	bf00      	nop
 80043fe:	3728      	adds	r7, #40	; 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40004c00 	.word	0x40004c00
 8004408:	40023800 	.word	0x40023800
 800440c:	40020800 	.word	0x40020800
 8004410:	2000065c 	.word	0x2000065c
 8004414:	40026040 	.word	0x40026040

08004418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800441c:	e7fe      	b.n	800441c <NMI_Handler+0x4>

0800441e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800441e:	b480      	push	{r7}
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004422:	e7fe      	b.n	8004422 <HardFault_Handler+0x4>

08004424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004428:	e7fe      	b.n	8004428 <MemManage_Handler+0x4>

0800442a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <BusFault_Handler+0x4>

08004430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <UsageFault_Handler+0x4>

08004436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004464:	f000 f99a 	bl	800479c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}

0800446c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <DMA1_Stream2_IRQHandler+0x10>)
 8004472:	f001 f889 	bl	8005588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2000065c 	.word	0x2000065c

08004480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_IRQ1_Pin);
 8004484:	2080      	movs	r0, #128	; 0x80
 8004486:	f001 fcb9 	bl	8005dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004494:	4802      	ldr	r0, [pc, #8]	; (80044a0 <TIM4_IRQHandler+0x10>)
 8004496:	f004 fe37 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000540 	.word	0x20000540

080044a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80044a8:	4802      	ldr	r0, [pc, #8]	; (80044b4 <TIM5_IRQHandler+0x10>)
 80044aa:	f004 fe2d 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000588 	.word	0x20000588

080044b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <UART4_IRQHandler+0x10>)
 80044be:	f005 fd4d 	bl	8009f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000618 	.word	0x20000618

080044cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <DMA2_Stream0_IRQHandler+0x10>)
 80044d2:	f001 f859 	bl	8005588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000035c 	.word	0x2000035c

080044e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <OTG_FS_IRQHandler+0x10>)
 80044e6:	f002 fdb0 	bl	800704a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20001e24 	.word	0x20001e24

080044f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
	return 1;
 80044f8:	2301      	movs	r3, #1
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_kill>:

int _kill(int pid, int sig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800450e:	f00d f991 	bl	8011834 <__errno>
 8004512:	4603      	mov	r3, r0
 8004514:	2216      	movs	r2, #22
 8004516:	601a      	str	r2, [r3, #0]
	return -1;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_exit>:

void _exit (int status)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800452c:	f04f 31ff 	mov.w	r1, #4294967295
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ffe7 	bl	8004504 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004536:	e7fe      	b.n	8004536 <_exit+0x12>

08004538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e00a      	b.n	8004560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800454a:	f3af 8000 	nop.w
 800454e:	4601      	mov	r1, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	60ba      	str	r2, [r7, #8]
 8004556:	b2ca      	uxtb	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	dbf0      	blt.n	800454a <_read+0x12>
	}

return len;
 8004568:	687b      	ldr	r3, [r7, #4]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e009      	b.n	8004598 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	60ba      	str	r2, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3301      	adds	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	dbf1      	blt.n	8004584 <_write+0x12>
	}
	return len;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <_close>:

int _close(int file)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
	return -1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045d2:	605a      	str	r2, [r3, #4]
	return 0;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <_isatty>:

int _isatty(int file)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
	return 1;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <_sbrk+0x5c>)
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <_sbrk+0x60>)
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <_sbrk+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <_sbrk+0x64>)
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <_sbrk+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d207      	bcs.n	8004654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004644:	f00d f8f6 	bl	8011834 <__errno>
 8004648:	4603      	mov	r3, r0
 800464a:	220c      	movs	r2, #12
 800464c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e009      	b.n	8004668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <_sbrk+0x64>)
 8004664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20020000 	.word	0x20020000
 8004674:	00000400 	.word	0x00000400
 8004678:	20000928 	.word	0x20000928
 800467c:	200026a0 	.word	0x200026a0

08004680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <SystemInit+0x20>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <SystemInit+0x20>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046a8:	480d      	ldr	r0, [pc, #52]	; (80046e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046aa:	490e      	ldr	r1, [pc, #56]	; (80046e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046ac:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b0:	e002      	b.n	80046b8 <LoopCopyDataInit>

080046b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046b6:	3304      	adds	r3, #4

080046b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046bc:	d3f9      	bcc.n	80046b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046c0:	4c0b      	ldr	r4, [pc, #44]	; (80046f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c4:	e001      	b.n	80046ca <LoopFillZerobss>

080046c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c8:	3204      	adds	r2, #4

080046ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046cc:	d3fb      	bcc.n	80046c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ce:	f7ff ffd7 	bl	8004680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046d2:	f00d f8b5 	bl	8011840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046d6:	f7fd fe39 	bl	800234c <main>
  bx  lr    
 80046da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e4:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 80046e8:	08013bac 	.word	0x08013bac
  ldr r2, =_sbss
 80046ec:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80046f0:	2000269c 	.word	0x2000269c

080046f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046f4:	e7fe      	b.n	80046f4 <ADC_IRQHandler>
	...

080046f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_Init+0x40>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_Init+0x40>)
 8004702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_Init+0x40>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_Init+0x40>)
 800470e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_Init+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_Init+0x40>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004720:	2003      	movs	r0, #3
 8004722:	f000 fd57 	bl	80051d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004726:	2003      	movs	r0, #3
 8004728:	f000 f808 	bl	800473c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800472c:	f7ff fb3e 	bl	8003dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00

0800473c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_InitTick+0x54>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_InitTick+0x58>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004752:	fbb3 f3f1 	udiv	r3, r3, r1
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fd6f 	bl	800523e <HAL_SYSTICK_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00e      	b.n	8004788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d80a      	bhi.n	8004786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004770:	2200      	movs	r2, #0
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	f000 fd37 	bl	80051ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800477c:	4a06      	ldr	r2, [pc, #24]	; (8004798 <HAL_InitTick+0x5c>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000008 	.word	0x20000008
 8004794:	20000010 	.word	0x20000010
 8004798:	2000000c 	.word	0x2000000c

0800479c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_IncTick+0x20>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_IncTick+0x24>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_IncTick+0x24>)
 80047ae:	6013      	str	r3, [r2, #0]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000010 	.word	0x20000010
 80047c0:	2000092c 	.word	0x2000092c

080047c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return uwTick;
 80047c8:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <HAL_GetTick+0x14>)
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	2000092c 	.word	0x2000092c

080047dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047e4:	f7ff ffee 	bl	80047c4 <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d005      	beq.n	8004802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_Delay+0x44>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004802:	bf00      	nop
 8004804:	f7ff ffde 	bl	80047c4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d8f7      	bhi.n	8004804 <HAL_Delay+0x28>
  {
  }
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000010 	.word	0x20000010

08004824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e033      	b.n	80048a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fada 	bl	8003dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800486a:	f023 0302 	bic.w	r3, r3, #2
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa5e 	bl	8004d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
 8004892:	e001      	b.n	8004898 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_Start_DMA+0x1e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0e9      	b.n	8004a9e <HAL_ADC_Start_DMA+0x1f2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d018      	beq.n	8004912 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048f0:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_ADC_Start_DMA+0x1fc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6d      	ldr	r2, [pc, #436]	; (8004aac <HAL_ADC_Start_DMA+0x200>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0c9a      	lsrs	r2, r3, #18
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004904:	e002      	b.n	800490c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004920:	d107      	bne.n	8004932 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004930:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 80a1 	bne.w	8004a84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800496c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d106      	bne.n	8004990 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f023 0206 	bic.w	r2, r3, #6
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
 800498e:	e002      	b.n	8004996 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800499e:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 80049a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	4a43      	ldr	r2, [pc, #268]	; (8004ab4 <HAL_ADC_Start_DMA+0x208>)
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <HAL_ADC_Start_DMA+0x20c>)
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	4a41      	ldr	r2, [pc, #260]	; (8004abc <HAL_ADC_Start_DMA+0x210>)
 80049b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80049d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	334c      	adds	r3, #76	; 0x4c
 80049ee:	4619      	mov	r1, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f000 fcde 	bl	80053b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12a      	bne.n	8004a5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <HAL_ADC_Start_DMA+0x214>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d015      	beq.n	8004a3a <HAL_ADC_Start_DMA+0x18e>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <HAL_ADC_Start_DMA+0x218>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d105      	bne.n	8004a24 <HAL_ADC_Start_DMA+0x178>
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <HAL_ADC_Start_DMA+0x21c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d136      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d130      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d129      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	e020      	b.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_ADC_Start_DMA+0x214>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d11b      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d114      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	e00b      	b.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f043 0210 	orr.w	r2, r3, #16
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000008 	.word	0x20000008
 8004aac:	431bde83 	.word	0x431bde83
 8004ab0:	40012300 	.word	0x40012300
 8004ab4:	08004f31 	.word	0x08004f31
 8004ab8:	08004feb 	.word	0x08004feb
 8004abc:	08005007 	.word	0x08005007
 8004ac0:	40012000 	.word	0x40012000
 8004ac4:	40012100 	.word	0x40012100
 8004ac8:	40012200 	.word	0x40012200

08004acc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x1c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e105      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x228>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	d925      	bls.n	8004b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	3b1e      	subs	r3, #30
 8004b36:	2207      	movs	r2, #7
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	400a      	ands	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	4603      	mov	r3, r0
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3b1e      	subs	r3, #30
 8004b60:	409a      	lsls	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e022      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	2207      	movs	r2, #7
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43da      	mvns	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4403      	add	r3, r0
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d824      	bhi.n	8004c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b05      	subs	r3, #5
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	400a      	ands	r2, r1
 8004bda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b05      	subs	r3, #5
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34
 8004c02:	e04c      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d824      	bhi.n	8004c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b23      	subs	r3, #35	; 0x23
 8004c1e:	221f      	movs	r2, #31
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43da      	mvns	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	3b23      	subs	r3, #35	; 0x23
 8004c48:	fa00 f203 	lsl.w	r2, r0, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
 8004c54:	e023      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	3b41      	subs	r3, #65	; 0x41
 8004c68:	221f      	movs	r2, #31
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	400a      	ands	r2, r1
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4618      	mov	r0, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	3b41      	subs	r3, #65	; 0x41
 8004c92:	fa00 f203 	lsl.w	r2, r0, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c9e:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <HAL_ADC_ConfigChannel+0x234>)
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_ADC_ConfigChannel+0x238>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d109      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1cc>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b12      	cmp	r3, #18
 8004cb2:	d105      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <HAL_ADC_ConfigChannel+0x238>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d123      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d003      	beq.n	8004cda <HAL_ADC_ConfigChannel+0x1e6>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b11      	cmp	r3, #17
 8004cd8:	d11b      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d111      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <HAL_ADC_ConfigChannel+0x23c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <HAL_ADC_ConfigChannel+0x240>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0c9a      	lsrs	r2, r3, #18
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d04:	e002      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f9      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012300 	.word	0x40012300
 8004d2c:	40012000 	.word	0x40012000
 8004d30:	20000008 	.word	0x20000008
 8004d34:	431bde83 	.word	0x431bde83

08004d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d40:	4b79      	ldr	r3, [pc, #484]	; (8004f28 <ADC_Init+0x1f0>)
 8004d42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6859      	ldr	r1, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	4a58      	ldr	r2, [pc, #352]	; (8004f2c <ADC_Init+0x1f4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6899      	ldr	r1, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e00f      	b.n	8004e36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0202 	bic.w	r2, r2, #2
 8004e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e1b      	ldrb	r3, [r3, #24]
 8004e50:	005a      	lsls	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	035a      	lsls	r2, r3, #13
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	e007      	b.n	8004eac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	051a      	lsls	r2, r3, #20
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eee:	025a      	lsls	r2, r3, #9
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	029a      	lsls	r2, r3, #10
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40012300 	.word	0x40012300
 8004f2c:	0f000001 	.word	0x0f000001

08004f30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d13c      	bne.n	8004fc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d12b      	bne.n	8004fbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d127      	bne.n	8004fbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d119      	bne.n	8004fbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0220 	bic.w	r2, r2, #32
 8004f96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7fe fd9b 	bl	8003af8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fc2:	e00e      	b.n	8004fe2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fd85 	bl	8004ae0 <HAL_ADC_ErrorCallback>
}
 8004fd6:	e004      	b.n	8004fe2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff fd67 	bl	8004acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	f043 0204 	orr.w	r2, r3, #4
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fd5a 	bl	8004ae0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800505c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_GetPriorityGrouping+0x18>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0307 	and.w	r3, r3, #7
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db0b      	blt.n	80050c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <__NVIC_EnableIRQ+0x38>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2001      	movs	r0, #1
 80050ba:	fa00 f202 	lsl.w	r2, r0, r2
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100

080050d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db0a      	blt.n	80050fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	490c      	ldr	r1, [pc, #48]	; (8005120 <__NVIC_SetPriority+0x4c>)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	440b      	add	r3, r1
 80050f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050fc:	e00a      	b.n	8005114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <__NVIC_SetPriority+0x50>)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	3b04      	subs	r3, #4
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	440b      	add	r3, r1
 8005112:	761a      	strb	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000e100 	.word	0xe000e100
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	bf28      	it	cs
 8005146:	2304      	movcs	r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3304      	adds	r3, #4
 800514e:	2b06      	cmp	r3, #6
 8005150:	d902      	bls.n	8005158 <NVIC_EncodePriority+0x30>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b03      	subs	r3, #3
 8005156:	e000      	b.n	800515a <NVIC_EncodePriority+0x32>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	401a      	ands	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005170:	f04f 31ff 	mov.w	r1, #4294967295
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43d9      	mvns	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	4313      	orrs	r3, r2
         );
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a0:	d301      	bcc.n	80051a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00f      	b.n	80051c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <SysTick_Config+0x40>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ae:	210f      	movs	r1, #15
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f7ff ff8e 	bl	80050d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <SysTick_Config+0x40>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <SysTick_Config+0x40>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010

080051d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff29 	bl	8005034 <__NVIC_SetPriorityGrouping>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051fc:	f7ff ff3e 	bl	800507c <__NVIC_GetPriorityGrouping>
 8005200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f7ff ff8e 	bl	8005128 <NVIC_EncodePriority>
 800520c:	4602      	mov	r2, r0
 800520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ff5d 	bl	80050d4 <__NVIC_SetPriority>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff31 	bl	8005098 <__NVIC_EnableIRQ>
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ffa2 	bl	8005190 <SysTick_Config>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005264:	f7ff faae 	bl	80047c4 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e099      	b.n	80053a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005294:	e00f      	b.n	80052b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005296:	f7ff fa95 	bl	80047c4 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d908      	bls.n	80052b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e078      	b.n	80053a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e8      	bne.n	8005296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4b38      	ldr	r3, [pc, #224]	; (80053b0 <HAL_DMA_Init+0x158>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b04      	cmp	r3, #4
 800530e:	d107      	bne.n	8005320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	4313      	orrs	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b04      	cmp	r3, #4
 8005348:	d117      	bne.n	800537a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fb01 	bl	8005964 <DMA_CheckFifoParam>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005376:	2301      	movs	r3, #1
 8005378:	e016      	b.n	80053a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fab8 	bl	80058f8 <DMA_CalcBaseAndBitshift>
 8005388:	4603      	mov	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	223f      	movs	r2, #63	; 0x3f
 8005392:	409a      	lsls	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	f010803f 	.word	0xf010803f

080053b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_DMA_Start_IT+0x26>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e040      	b.n	800545c <HAL_DMA_Start_IT+0xa8>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d12f      	bne.n	800544e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa4a 	bl	800589c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	223f      	movs	r2, #63	; 0x3f
 800540e:	409a      	lsls	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0216 	orr.w	r2, r2, #22
 8005422:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e005      	b.n	800545a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005472:	f7ff f9a7 	bl	80047c4 <HAL_GetTick>
 8005476:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d008      	beq.n	8005496 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e052      	b.n	800553c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0216 	bic.w	r2, r2, #22
 80054a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <HAL_DMA_Abort+0x62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0208 	bic.w	r2, r2, #8
 80054d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054e6:	e013      	b.n	8005510 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054e8:	f7ff f96c 	bl	80047c4 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d90c      	bls.n	8005510 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2203      	movs	r2, #3
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e015      	b.n	800553c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e4      	bne.n	80054e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005522:	223f      	movs	r2, #63	; 0x3f
 8005524:	409a      	lsls	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2280      	movs	r2, #128	; 0x80
 800555c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e00c      	b.n	800557c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2205      	movs	r2, #5
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005594:	4b8e      	ldr	r3, [pc, #568]	; (80057d0 <HAL_DMA_IRQHandler+0x248>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a8e      	ldr	r2, [pc, #568]	; (80057d4 <HAL_DMA_IRQHandler+0x24c>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0a9b      	lsrs	r3, r3, #10
 80055a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	2208      	movs	r2, #8
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01a      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d013      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	2208      	movs	r2, #8
 80055e2:	409a      	lsls	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	f043 0201 	orr.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f8:	2201      	movs	r2, #1
 80055fa:	409a      	lsls	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	2201      	movs	r2, #1
 8005618:	409a      	lsls	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f043 0202 	orr.w	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	2204      	movs	r2, #4
 8005630:	409a      	lsls	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d012      	beq.n	8005660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	2204      	movs	r2, #4
 800564e:	409a      	lsls	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	f043 0204 	orr.w	r2, r3, #4
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005664:	2210      	movs	r2, #16
 8005666:	409a      	lsls	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d043      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03c      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	2210      	movs	r2, #16
 8005684:	409a      	lsls	r2, r3
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d018      	beq.n	80056ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d108      	bne.n	80056b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d024      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
 80056b6:	e01f      	b.n	80056f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
 80056c8:	e016      	b.n	80056f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d107      	bne.n	80056e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0208 	bic.w	r2, r2, #8
 80056e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fc:	2220      	movs	r2, #32
 80056fe:	409a      	lsls	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 808f 	beq.w	8005828 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8087 	beq.w	8005828 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	2220      	movs	r2, #32
 8005720:	409a      	lsls	r2, r3
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b05      	cmp	r3, #5
 8005730:	d136      	bne.n	80057a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0216 	bic.w	r2, r2, #22
 8005740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_DMA_IRQHandler+0x1da>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0208 	bic.w	r2, r2, #8
 8005770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	223f      	movs	r2, #63	; 0x3f
 8005778:	409a      	lsls	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	d07e      	beq.n	8005894 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
        }
        return;
 800579e:	e079      	b.n	8005894 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01d      	beq.n	80057ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d031      	beq.n	8005828 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
 80057cc:	e02c      	b.n	8005828 <HAL_DMA_IRQHandler+0x2a0>
 80057ce:	bf00      	nop
 80057d0:	20000008 	.word	0x20000008
 80057d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d023      	beq.n	8005828 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
 80057e8:	e01e      	b.n	8005828 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0210 	bic.w	r2, r2, #16
 8005806:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	2b00      	cmp	r3, #0
 800582e:	d032      	beq.n	8005896 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d022      	beq.n	8005882 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2205      	movs	r2, #5
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3301      	adds	r3, #1
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	d307      	bcc.n	8005870 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f2      	bne.n	8005854 <HAL_DMA_IRQHandler+0x2cc>
 800586e:	e000      	b.n	8005872 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005870:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
 8005892:	e000      	b.n	8005896 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005894:	bf00      	nop
    }
  }
}
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d108      	bne.n	80058dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058da:	e007      	b.n	80058ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3b10      	subs	r3, #16
 8005908:	4a14      	ldr	r2, [pc, #80]	; (800595c <DMA_CalcBaseAndBitshift+0x64>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005912:	4a13      	ldr	r2, [pc, #76]	; (8005960 <DMA_CalcBaseAndBitshift+0x68>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d909      	bls.n	800593a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	1d1a      	adds	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	659a      	str	r2, [r3, #88]	; 0x58
 8005938:	e007      	b.n	800594a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	aaaaaaab 	.word	0xaaaaaaab
 8005960:	08013754 	.word	0x08013754

08005964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11f      	bne.n	80059be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d856      	bhi.n	8005a32 <DMA_CheckFifoParam+0xce>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <DMA_CheckFifoParam+0x28>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059af 	.word	0x080059af
 8005994:	0800599d 	.word	0x0800599d
 8005998:	08005a33 	.word	0x08005a33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d046      	beq.n	8005a36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ac:	e043      	b.n	8005a36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059b6:	d140      	bne.n	8005a3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059bc:	e03d      	b.n	8005a3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c6:	d121      	bne.n	8005a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d837      	bhi.n	8005a3e <DMA_CheckFifoParam+0xda>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <DMA_CheckFifoParam+0x70>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059eb 	.word	0x080059eb
 80059dc:	080059e5 	.word	0x080059e5
 80059e0:	080059fd 	.word	0x080059fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e030      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d025      	beq.n	8005a42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fa:	e022      	b.n	8005a42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a04:	d11f      	bne.n	8005a46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a0a:	e01c      	b.n	8005a46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d903      	bls.n	8005a1a <DMA_CheckFifoParam+0xb6>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d003      	beq.n	8005a20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a18:	e018      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1e:	e015      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00e      	beq.n	8005a4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a30:	e00b      	b.n	8005a4a <DMA_CheckFifoParam+0xe6>
      break;
 8005a32:	bf00      	nop
 8005a34:	e00a      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;
 8005a36:	bf00      	nop
 8005a38:	e008      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e006      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e004      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;   
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <DMA_CheckFifoParam+0xe8>
      break;
 8005a4a:	bf00      	nop
    }
  } 
  
  return status; 
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b089      	sub	sp, #36	; 0x24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e16b      	b.n	8005d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a78:	2201      	movs	r2, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	f040 815a 	bne.w	8005d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d005      	beq.n	8005aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d130      	bne.n	8005b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	2203      	movs	r2, #3
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 0201 	and.w	r2, r3, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d017      	beq.n	8005b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	2203      	movs	r2, #3
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4013      	ands	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d123      	bne.n	8005ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	08da      	lsrs	r2, r3, #3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3208      	adds	r2, #8
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	220f      	movs	r2, #15
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	08da      	lsrs	r2, r3, #3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3208      	adds	r2, #8
 8005b9a:	69b9      	ldr	r1, [r7, #24]
 8005b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	2203      	movs	r2, #3
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f003 0203 	and.w	r2, r3, #3
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80b4 	beq.w	8005d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	4b60      	ldr	r3, [pc, #384]	; (8005d68 <HAL_GPIO_Init+0x30c>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	4a5f      	ldr	r2, [pc, #380]	; (8005d68 <HAL_GPIO_Init+0x30c>)
 8005bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8005bf2:	4b5d      	ldr	r3, [pc, #372]	; (8005d68 <HAL_GPIO_Init+0x30c>)
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bfe:	4a5b      	ldr	r2, [pc, #364]	; (8005d6c <HAL_GPIO_Init+0x310>)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	089b      	lsrs	r3, r3, #2
 8005c04:	3302      	adds	r3, #2
 8005c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	220f      	movs	r2, #15
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_GPIO_Init+0x314>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02b      	beq.n	8005c82 <HAL_GPIO_Init+0x226>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a51      	ldr	r2, [pc, #324]	; (8005d74 <HAL_GPIO_Init+0x318>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d025      	beq.n	8005c7e <HAL_GPIO_Init+0x222>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a50      	ldr	r2, [pc, #320]	; (8005d78 <HAL_GPIO_Init+0x31c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01f      	beq.n	8005c7a <HAL_GPIO_Init+0x21e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4f      	ldr	r2, [pc, #316]	; (8005d7c <HAL_GPIO_Init+0x320>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d019      	beq.n	8005c76 <HAL_GPIO_Init+0x21a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <HAL_GPIO_Init+0x324>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_GPIO_Init+0x216>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a4d      	ldr	r2, [pc, #308]	; (8005d84 <HAL_GPIO_Init+0x328>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00d      	beq.n	8005c6e <HAL_GPIO_Init+0x212>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a4c      	ldr	r2, [pc, #304]	; (8005d88 <HAL_GPIO_Init+0x32c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <HAL_GPIO_Init+0x20e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a4b      	ldr	r2, [pc, #300]	; (8005d8c <HAL_GPIO_Init+0x330>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <HAL_GPIO_Init+0x20a>
 8005c62:	2307      	movs	r3, #7
 8005c64:	e00e      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c66:	2308      	movs	r3, #8
 8005c68:	e00c      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c6a:	2306      	movs	r3, #6
 8005c6c:	e00a      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c6e:	2305      	movs	r3, #5
 8005c70:	e008      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c72:	2304      	movs	r3, #4
 8005c74:	e006      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c76:	2303      	movs	r3, #3
 8005c78:	e004      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e002      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_GPIO_Init+0x228>
 8005c82:	2300      	movs	r3, #0
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	f002 0203 	and.w	r2, r2, #3
 8005c8a:	0092      	lsls	r2, r2, #2
 8005c8c:	4093      	lsls	r3, r2
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c94:	4935      	ldr	r1, [pc, #212]	; (8005d6c <HAL_GPIO_Init+0x310>)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cc6:	4a32      	ldr	r2, [pc, #200]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cf0:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d20:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d44:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <HAL_GPIO_Init+0x334>)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	f67f ae90 	bls.w	8005a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	3724      	adds	r7, #36	; 0x24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40013800 	.word	0x40013800
 8005d70:	40020000 	.word	0x40020000
 8005d74:	40020400 	.word	0x40020400
 8005d78:	40020800 	.word	0x40020800
 8005d7c:	40020c00 	.word	0x40020c00
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40021400 	.word	0x40021400
 8005d88:	40021800 	.word	0x40021800
 8005d8c:	40021c00 	.word	0x40021c00
 8005d90:	40013c00 	.word	0x40013c00

08005d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
 8005da0:	4613      	mov	r3, r2
 8005da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da4:	787b      	ldrb	r3, [r7, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005db0:	e003      	b.n	8005dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	041a      	lsls	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	619a      	str	r2, [r3, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dd8:	887a      	ldrh	r2, [r7, #2]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	43d9      	mvns	r1, r3
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	400b      	ands	r3, r1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d006      	beq.n	8005e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd fc88 	bl	8003730 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40013c00 	.word	0x40013c00

08005e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e12b      	b.n	8006096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fe f84a 	bl	8003eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e90:	f002 fe38 	bl	8008b04 <HAL_RCC_GetPCLK1Freq>
 8005e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4a81      	ldr	r2, [pc, #516]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d807      	bhi.n	8005eb0 <HAL_I2C_Init+0x84>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a80      	ldr	r2, [pc, #512]	; (80060a4 <HAL_I2C_Init+0x278>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bf94      	ite	ls
 8005ea8:	2301      	movls	r3, #1
 8005eaa:	2300      	movhi	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e006      	b.n	8005ebe <HAL_I2C_Init+0x92>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_I2C_Init+0x27c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bf94      	ite	ls
 8005eb8:	2301      	movls	r3, #1
 8005eba:	2300      	movhi	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0e7      	b.n	8006096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a78      	ldr	r2, [pc, #480]	; (80060ac <HAL_I2C_Init+0x280>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	0c9b      	lsrs	r3, r3, #18
 8005ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a6a      	ldr	r2, [pc, #424]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d802      	bhi.n	8005f00 <HAL_I2C_Init+0xd4>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3301      	adds	r3, #1
 8005efe:	e009      	b.n	8005f14 <HAL_I2C_Init+0xe8>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	4a69      	ldr	r2, [pc, #420]	; (80060b0 <HAL_I2C_Init+0x284>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	3301      	adds	r3, #1
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	495c      	ldr	r1, [pc, #368]	; (80060a0 <HAL_I2C_Init+0x274>)
 8005f30:	428b      	cmp	r3, r1
 8005f32:	d819      	bhi.n	8005f68 <HAL_I2C_Init+0x13c>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1e59      	subs	r1, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f48:	400b      	ands	r3, r1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_I2C_Init+0x138>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1e59      	subs	r1, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	e051      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005f64:	2304      	movs	r3, #4
 8005f66:	e04f      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d111      	bne.n	8005f94 <HAL_I2C_Init+0x168>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1e58      	subs	r0, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	440b      	add	r3, r1
 8005f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f82:	3301      	adds	r3, #1
 8005f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e012      	b.n	8005fba <HAL_I2C_Init+0x18e>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1e58      	subs	r0, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	0099      	lsls	r1, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005faa:	3301      	adds	r3, #1
 8005fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_Init+0x196>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e022      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_I2C_Init+0x1bc>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1e58      	subs	r0, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	e00f      	b.n	8006008 <HAL_I2C_Init+0x1dc>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1e58      	subs	r0, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	0099      	lsls	r1, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ffe:	3301      	adds	r3, #1
 8006000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	6809      	ldr	r1, [r1, #0]
 800600c:	4313      	orrs	r3, r2
 800600e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6911      	ldr	r1, [r2, #16]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68d2      	ldr	r2, [r2, #12]
 8006042:	4311      	orrs	r1, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	430b      	orrs	r3, r1
 800604a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	000186a0 	.word	0x000186a0
 80060a4:	001e847f 	.word	0x001e847f
 80060a8:	003d08ff 	.word	0x003d08ff
 80060ac:	431bde83 	.word	0x431bde83
 80060b0:	10624dd3 	.word	0x10624dd3

080060b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060ce:	f7fe fb79 	bl	80047c4 <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b20      	cmp	r3, #32
 80060de:	f040 80d9 	bne.w	8006294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	2319      	movs	r3, #25
 80060e8:	2201      	movs	r2, #1
 80060ea:	496d      	ldr	r1, [pc, #436]	; (80062a0 <HAL_I2C_Mem_Write+0x1ec>)
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fc7f 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0cc      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_I2C_Mem_Write+0x56>
 8006106:	2302      	movs	r3, #2
 8006108:	e0c5      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d007      	beq.n	8006130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2240      	movs	r2, #64	; 0x40
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a4d      	ldr	r2, [pc, #308]	; (80062a4 <HAL_I2C_Mem_Write+0x1f0>)
 8006170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006172:	88f8      	ldrh	r0, [r7, #6]
 8006174:	893a      	ldrh	r2, [r7, #8]
 8006176:	8979      	ldrh	r1, [r7, #10]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4603      	mov	r3, r0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fab6 	bl	80066f4 <I2C_RequestMemoryWrite>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d052      	beq.n	8006234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e081      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fd00 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d107      	bne.n	80061ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e06b      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_I2C_Mem_Write+0x180>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1aa      	bne.n	8006192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fcec 	bl	8006c1e <I2C_WaitOnBTFFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b04      	cmp	r3, #4
 8006252:	d107      	bne.n	8006264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e016      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	00100002 	.word	0x00100002
 80062a4:	ffff0000 	.word	0xffff0000

080062a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08c      	sub	sp, #48	; 0x30
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	817b      	strh	r3, [r7, #10]
 80062ba:	460b      	mov	r3, r1
 80062bc:	813b      	strh	r3, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062c2:	f7fe fa7f 	bl	80047c4 <HAL_GetTick>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	f040 8208 	bne.w	80066e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	2319      	movs	r3, #25
 80062dc:	2201      	movs	r2, #1
 80062de:	497b      	ldr	r1, [pc, #492]	; (80064cc <HAL_I2C_Mem_Read+0x224>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fb85 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
 80062ee:	e1fb      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_I2C_Mem_Read+0x56>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e1f4      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d007      	beq.n	8006324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2222      	movs	r2, #34	; 0x22
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a5b      	ldr	r2, [pc, #364]	; (80064d0 <HAL_I2C_Mem_Read+0x228>)
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006366:	88f8      	ldrh	r0, [r7, #6]
 8006368:	893a      	ldrh	r2, [r7, #8]
 800636a:	8979      	ldrh	r1, [r7, #10]
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4603      	mov	r3, r0
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fa52 	bl	8006820 <I2C_RequestMemoryRead>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e1b0      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d113      	bne.n	80063b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638e:	2300      	movs	r3, #0
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e184      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d11b      	bne.n	80063f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e164      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d11b      	bne.n	8006436 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	e144      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800644c:	e138      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	2b03      	cmp	r3, #3
 8006454:	f200 80f1 	bhi.w	800663a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645c:	2b01      	cmp	r3, #1
 800645e:	d123      	bne.n	80064a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fc1b 	bl	8006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e139      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064a6:	e10b      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d14e      	bne.n	800654e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	2200      	movs	r2, #0
 80064b8:	4906      	ldr	r1, [pc, #24]	; (80064d4 <HAL_I2C_Mem_Read+0x22c>)
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fa98 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e10e      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
 80064ca:	bf00      	nop
 80064cc:	00100002 	.word	0x00100002
 80064d0:	ffff0000 	.word	0xffff0000
 80064d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800654c:	e0b8      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2200      	movs	r2, #0
 8006556:	4966      	ldr	r1, [pc, #408]	; (80066f0 <HAL_I2C_Mem_Read+0x448>)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fa49 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0bf      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2200      	movs	r2, #0
 80065b2:	494f      	ldr	r1, [pc, #316]	; (80066f0 <HAL_I2C_Mem_Read+0x448>)
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fa1b 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e091      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006638:	e042      	b.n	80066c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fb2e 	bl	8006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e04c      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d118      	bne.n	80066c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f aec2 	bne.w	800644e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3728      	adds	r7, #40	; 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	00010004 	.word	0x00010004

080066f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	461a      	mov	r2, r3
 8006702:	4603      	mov	r3, r0
 8006704:	817b      	strh	r3, [r7, #10]
 8006706:	460b      	mov	r3, r1
 8006708:	813b      	strh	r3, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800671c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	2200      	movs	r2, #0
 8006726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f960 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	d103      	bne.n	800674e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e05f      	b.n	8006812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	492d      	ldr	r1, [pc, #180]	; (800681c <I2C_RequestMemoryWrite+0x128>)
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f998 	bl	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e04c      	b.n	8006812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	6a39      	ldr	r1, [r7, #32]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fa02 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d107      	bne.n	80067b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e02b      	b.n	8006812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067c0:	893b      	ldrh	r3, [r7, #8]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	611a      	str	r2, [r3, #16]
 80067ca:	e021      	b.n	8006810 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067cc:	893b      	ldrh	r3, [r7, #8]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	6a39      	ldr	r1, [r7, #32]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f9dc 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d107      	bne.n	8006802 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e005      	b.n	8006812 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	00010002 	.word	0x00010002

08006820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	817b      	strh	r3, [r7, #10]
 8006832:	460b      	mov	r3, r1
 8006834:	813b      	strh	r3, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2200      	movs	r2, #0
 8006862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f8c2 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00d      	beq.n	800688e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006880:	d103      	bne.n	800688a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e0aa      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800689c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	4952      	ldr	r1, [pc, #328]	; (80069ec <I2C_RequestMemoryRead+0x1cc>)
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f8fa 	bl	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e097      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068cc:	6a39      	ldr	r1, [r7, #32]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f964 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d107      	bne.n	80068f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e076      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]
 8006906:	e021      	b.n	800694c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006908:	893b      	ldrh	r3, [r7, #8]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006918:	6a39      	ldr	r1, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f93e 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e050      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800694c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694e:	6a39      	ldr	r1, [r7, #32]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f923 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00d      	beq.n	8006978 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b04      	cmp	r3, #4
 8006962:	d107      	bne.n	8006974 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006972:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e035      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006986:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2200      	movs	r2, #0
 8006990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f82b 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ae:	d103      	bne.n	80069b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e013      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069bc:	897b      	ldrh	r3, [r7, #10]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	6a3a      	ldr	r2, [r7, #32]
 80069d0:	4906      	ldr	r1, [pc, #24]	; (80069ec <I2C_RequestMemoryRead+0x1cc>)
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f863 	bl	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	00010002 	.word	0x00010002

080069f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a00:	e025      	b.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d021      	beq.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7fd fedb 	bl	80047c4 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d116      	bne.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e023      	b.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10d      	bne.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	43da      	mvns	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	e00c      	b.n	8006a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d0b6      	beq.n	8006a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aac:	e051      	b.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006abc:	d123      	bne.n	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e046      	b.n	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d021      	beq.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd fe59 	bl	80047c4 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d116      	bne.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f043 0220 	orr.w	r2, r3, #32
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e020      	b.n	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10c      	bne.n	8006b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	e00b      	b.n	8006b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	43da      	mvns	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4013      	ands	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d18d      	bne.n	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba8:	e02d      	b.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f8ce 	bl	8006d4c <I2C_IsAcknowledgeFailed>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e02d      	b.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d021      	beq.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fd fdff 	bl	80047c4 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d116      	bne.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f043 0220 	orr.w	r2, r3, #32
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e007      	b.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d1ca      	bne.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c2a:	e02d      	b.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f88d 	bl	8006d4c <I2C_IsAcknowledgeFailed>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e02d      	b.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d021      	beq.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c44:	f7fd fdbe 	bl	80047c4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d302      	bcc.n	8006c5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d116      	bne.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e007      	b.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d1ca      	bne.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cac:	e042      	b.n	8006d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d119      	bne.n	8006cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0210 	mvn.w	r2, #16
 8006cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e029      	b.n	8006d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf0:	f7fd fd68 	bl	80047c4 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e007      	b.n	8006d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d1b5      	bne.n	8006cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d62:	d11b      	bne.n	8006d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f043 0204 	orr.w	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dac:	b08f      	sub	sp, #60	; 0x3c
 8006dae:	af0a      	add	r7, sp, #40	; 0x28
 8006db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e10f      	b.n	8006fdc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f008 fb56 	bl	800f488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2203      	movs	r2, #3
 8006de0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f004 fa47 	bl	800b28e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	687e      	ldr	r6, [r7, #4]
 8006e08:	466d      	mov	r5, sp
 8006e0a:	f106 0410 	add.w	r4, r6, #16
 8006e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e1e:	1d33      	adds	r3, r6, #4
 8006e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e22:	6838      	ldr	r0, [r7, #0]
 8006e24:	f004 f91e 	bl	800b064 <USB_CoreInit>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0d0      	b.n	8006fdc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f004 fa35 	bl	800b2b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
 8006e4a:	e04a      	b.n	8006ee2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	333d      	adds	r3, #61	; 0x3d
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	333c      	adds	r3, #60	; 0x3c
 8006e70:	7bfa      	ldrb	r2, [r7, #15]
 8006e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	b298      	uxth	r0, r3
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	3344      	adds	r3, #68	; 0x44
 8006e88:	4602      	mov	r2, r0
 8006e8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	3340      	adds	r3, #64	; 0x40
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ea0:	7bfa      	ldrb	r2, [r7, #15]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3348      	adds	r3, #72	; 0x48
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006eb4:	7bfa      	ldrb	r2, [r7, #15]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	334c      	adds	r3, #76	; 0x4c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ec8:	7bfa      	ldrb	r2, [r7, #15]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	3354      	adds	r3, #84	; 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	7bfa      	ldrb	r2, [r7, #15]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d3af      	bcc.n	8006e4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	e044      	b.n	8006f7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ef2:	7bfa      	ldrb	r2, [r7, #15]
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006f1a:	7bfa      	ldrb	r2, [r7, #15]
 8006f1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f34:	7bfa      	ldrb	r2, [r7, #15]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f4a:	7bfa      	ldrb	r2, [r7, #15]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f60:	7bfa      	ldrb	r2, [r7, #15]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	7bfa      	ldrb	r2, [r7, #15]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d3b5      	bcc.n	8006ef2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	687e      	ldr	r6, [r7, #4]
 8006f8e:	466d      	mov	r5, sp
 8006f90:	f106 0410 	add.w	r4, r6, #16
 8006f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fa4:	1d33      	adds	r3, r6, #4
 8006fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa8:	6838      	ldr	r0, [r7, #0]
 8006faa:	f004 f9cd 	bl	800b348 <USB_DevInit>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e00d      	b.n	8006fdc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f005 fb1c 	bl	800c612 <USB_DevDisconnect>

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fe4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_PCD_Start+0x1c>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e020      	b.n	8007042 <HAL_PCD_Start+0x5e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	2b01      	cmp	r3, #1
 800700e:	d109      	bne.n	8007024 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007014:	2b01      	cmp	r3, #1
 8007016:	d005      	beq.n	8007024 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f004 f91f 	bl	800b26c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f005 facc 	bl	800c5d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800704a:	b590      	push	{r4, r7, lr}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f005 fb8a 	bl	800c77a <USB_GetMode>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f040 848a 	bne.w	8007982 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f005 faee 	bl	800c654 <USB_ReadInterrupts>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8480 	beq.w	8007980 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f005 fadb 	bl	800c654 <USB_ReadInterrupts>
 800709e:	4603      	mov	r3, r0
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d107      	bne.n	80070b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f002 0202 	and.w	r2, r2, #2
 80070b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f005 fac9 	bl	800c654 <USB_ReadInterrupts>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d161      	bne.n	8007190 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0210 	bic.w	r2, r2, #16
 80070da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	0c5b      	lsrs	r3, r3, #17
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2b02      	cmp	r3, #2
 8007106:	d124      	bne.n	8007152 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d035      	beq.n	8007180 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800711e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007122:	b29b      	uxth	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	6a38      	ldr	r0, [r7, #32]
 8007128:	f005 f900 	bl	800c32c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007138:	441a      	add	r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800714a:	441a      	add	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
 8007150:	e016      	b.n	8007180 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	0c5b      	lsrs	r3, r3, #17
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	2b06      	cmp	r3, #6
 800715c:	d110      	bne.n	8007180 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007164:	2208      	movs	r2, #8
 8007166:	4619      	mov	r1, r3
 8007168:	6a38      	ldr	r0, [r7, #32]
 800716a:	f005 f8df 	bl	800c32c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717a:	441a      	add	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0210 	orr.w	r2, r2, #16
 800718e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f005 fa5d 	bl	800c654 <USB_ReadInterrupts>
 800719a:	4603      	mov	r3, r0
 800719c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071a4:	f040 80a7 	bne.w	80072f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f005 fa62 	bl	800c67a <USB_ReadDevAllOutEpInterrupt>
 80071b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80071b8:	e099      	b.n	80072ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 808e 	beq.w	80072e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 fa86 	bl	800c6e2 <USB_ReadDevOutEPInterrupt>
 80071d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2301      	movs	r3, #1
 80071f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80071f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fec2 	bl	8007f80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	2308      	movs	r3, #8
 8007216:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 ff98 	bl	8008150 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	461a      	mov	r2, r3
 8007238:	2310      	movs	r3, #16
 800723a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d030      	beq.n	80072a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d109      	bne.n	8007266 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007264:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007268:	4613      	mov	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4413      	add	r3, r2
 8007278:	3304      	adds	r3, #4
 800727a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	78db      	ldrb	r3, [r3, #3]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d108      	bne.n	8007296 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f008 f9ff 	bl	800f694 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	2302      	movs	r3, #2
 80072a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	461a      	mov	r2, r3
 80072c0:	2320      	movs	r3, #32
 80072c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	461a      	mov	r2, r3
 80072dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	3301      	adds	r3, #1
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f47f af62 	bne.w	80071ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f005 f9aa 	bl	800c654 <USB_ReadInterrupts>
 8007300:	4603      	mov	r3, r0
 8007302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800730a:	f040 80db 	bne.w	80074c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f005 f9cb 	bl	800c6ae <USB_ReadDevAllInEpInterrupt>
 8007318:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800731e:	e0cd      	b.n	80074bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80c2 	beq.w	80074b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f005 f9f1 	bl	800c71e <USB_ReadDevInEPInterrupt>
 800733c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d057      	beq.n	80073f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	43db      	mvns	r3, r3
 8007362:	69f9      	ldr	r1, [r7, #28]
 8007364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007368:	4013      	ands	r3, r2
 800736a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	461a      	mov	r2, r3
 800737a:	2301      	movs	r3, #1
 800737c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d132      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	334c      	adds	r3, #76	; 0x4c
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4403      	add	r3, r0
 80073a6:	3348      	adds	r3, #72	; 0x48
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4419      	add	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4403      	add	r3, r0
 80073ba:	334c      	adds	r3, #76	; 0x4c
 80073bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d113      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3354      	adds	r3, #84	; 0x54
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073e4:	461a      	mov	r2, r3
 80073e6:	2101      	movs	r1, #1
 80073e8:	f005 f9f8 	bl	800c7dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f008 f8c9 	bl	800f58a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	461a      	mov	r2, r3
 8007410:	2308      	movs	r3, #8
 8007412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742a:	461a      	mov	r2, r3
 800742c:	2310      	movs	r3, #16
 800742e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d023      	beq.n	800749e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007458:	6a38      	ldr	r0, [r7, #32]
 800745a:	f004 f8d9 	bl	800b610 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800745e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	3338      	adds	r3, #56	; 0x38
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	3304      	adds	r3, #4
 8007470:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d108      	bne.n	800748c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f008 f916 	bl	800f6b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	2302      	movs	r3, #2
 800749c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fcdb 	bl	8007e66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	3301      	adds	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af2e 	bne.w	8007320 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f005 f8c3 	bl	800c654 <USB_ReadInterrupts>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d122      	bne.n	8007520 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d108      	bne.n	800750a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fec2 	bl	800828c <HAL_PCDEx_LPM_Callback>
 8007508:	e002      	b.n	8007510 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f008 f8b4 	bl	800f678 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800751e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f005 f895 	bl	800c654 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d112      	bne.n	800755c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d102      	bne.n	800754c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f008 f870 	bl	800f62c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800755a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f005 f877 	bl	800c654 <USB_ReadInterrupts>
 8007566:	4603      	mov	r3, r0
 8007568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	f040 80b7 	bne.w	80076e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2110      	movs	r1, #16
 800758e:	4618      	mov	r0, r3
 8007590:	f004 f83e 	bl	800b610 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007598:	e046      	b.n	8007628 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	461a      	mov	r2, r3
 80075a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	461a      	mov	r2, r3
 80075dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	0151      	lsls	r1, r2, #5
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	440a      	add	r2, r1
 80075f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007620:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	3301      	adds	r3, #1
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762e:	429a      	cmp	r2, r3
 8007630:	d3b3      	bcc.n	800759a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007640:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007644:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765e:	f043 030b 	orr.w	r3, r3, #11
 8007662:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007674:	f043 030b 	orr.w	r3, r3, #11
 8007678:	6453      	str	r3, [r2, #68]	; 0x44
 800767a:	e015      	b.n	80076a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800768e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007692:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a2:	f043 030b 	orr.w	r3, r3, #11
 80076a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076cc:	461a      	mov	r2, r3
 80076ce:	f005 f885 	bl	800c7dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80076e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f004 ffb4 	bl	800c654 <USB_ReadInterrupts>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f6:	d124      	bne.n	8007742 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f005 f84a 	bl	800c796 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f003 ffff 	bl	800b70a <USB_GetDevSpeed>
 800770c:	4603      	mov	r3, r0
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681c      	ldr	r4, [r3, #0]
 8007718:	f001 f9e8 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 800771c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	4620      	mov	r0, r4
 8007728:	f003 fcfe 	bl	800b128 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f007 ff54 	bl	800f5da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695a      	ldr	r2, [r3, #20]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007740:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f004 ff84 	bl	800c654 <USB_ReadInterrupts>
 800774c:	4603      	mov	r3, r0
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b08      	cmp	r3, #8
 8007754:	d10a      	bne.n	800776c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f007 ff31 	bl	800f5be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f002 0208 	and.w	r2, r2, #8
 800776a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f004 ff6f 	bl	800c654 <USB_ReadInterrupts>
 8007776:	4603      	mov	r3, r0
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d122      	bne.n	80077c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800778c:	2301      	movs	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
 8007790:	e014      	b.n	80077bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007796:	4613      	mov	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fb27 	bl	8007e04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	3301      	adds	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d3e5      	bcc.n	8007792 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f004 ff42 	bl	800c654 <USB_ReadInterrupts>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077da:	d13b      	bne.n	8007854 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077dc:	2301      	movs	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
 80077e0:	e02b      	b.n	800783a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	3340      	adds	r3, #64	; 0x40
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d115      	bne.n	8007834 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800780a:	2b00      	cmp	r3, #0
 800780c:	da12      	bge.n	8007834 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	333f      	adds	r3, #63	; 0x3f
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800782a:	b2db      	uxtb	r3, r3
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fae8 	bl	8007e04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	3301      	adds	r3, #1
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	429a      	cmp	r2, r3
 8007842:	d3ce      	bcc.n	80077e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f004 fefb 	bl	800c654 <USB_ReadInterrupts>
 800785e:	4603      	mov	r3, r0
 8007860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007868:	d155      	bne.n	8007916 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800786a:	2301      	movs	r3, #1
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	e045      	b.n	80078fc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d12e      	bne.n	80078f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007898:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800789a:	2b00      	cmp	r3, #0
 800789c:	da2b      	bge.n	80078f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80078aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d121      	bne.n	80078f6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	4613      	mov	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80078c4:	2201      	movs	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078f2:	6053      	str	r3, [r2, #4]
            break;
 80078f4:	e007      	b.n	8007906 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	3301      	adds	r3, #1
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007902:	429a      	cmp	r2, r3
 8007904:	d3b4      	bcc.n	8007870 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f004 fe9a 	bl	800c654 <USB_ReadInterrupts>
 8007920:	4603      	mov	r3, r0
 8007922:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d10a      	bne.n	8007942 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f007 fed5 	bl	800f6dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f004 fe84 	bl	800c654 <USB_ReadInterrupts>
 800794c:	4603      	mov	r3, r0
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b04      	cmp	r3, #4
 8007954:	d115      	bne.n	8007982 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f007 fec5 	bl	800f6f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6859      	ldr	r1, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	e000      	b.n	8007982 <HAL_PCD_IRQHandler+0x938>
      return;
 8007980:	bf00      	nop
    }
  }
}
 8007982:	3734      	adds	r7, #52	; 0x34
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}

08007988 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_PCD_SetAddress+0x1a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e013      	b.n	80079ca <HAL_PCD_SetAddress+0x42>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f004 fde2 	bl	800c584 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	461a      	mov	r2, r3
 80079e0:	4603      	mov	r3, r0
 80079e2:	70fb      	strb	r3, [r7, #3]
 80079e4:	460b      	mov	r3, r1
 80079e6:	803b      	strh	r3, [r7, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0f      	bge.n	8007a18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	4613      	mov	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3338      	adds	r3, #56	; 0x38
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	705a      	strb	r2, [r3, #1]
 8007a16:	e00f      	b.n	8007a38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	4613      	mov	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3304      	adds	r3, #4
 8007a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007a44:	883a      	ldrh	r2, [r7, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	78ba      	ldrb	r2, [r7, #2]
 8007a4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a62:	78bb      	ldrb	r3, [r7, #2]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d102      	bne.n	8007a6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_PCD_EP_Open+0xaa>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e00e      	b.n	8007a9a <HAL_PCD_EP_Open+0xc8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f003 fe62 	bl	800b754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da0f      	bge.n	8007ad6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	f003 020f 	and.w	r2, r3, #15
 8007abc:	4613      	mov	r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	3338      	adds	r3, #56	; 0x38
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	705a      	strb	r2, [r3, #1]
 8007ad4:	e00f      	b.n	8007af6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	4613      	mov	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_PCD_EP_Close+0x6e>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e00e      	b.n	8007b2e <HAL_PCD_EP_Close+0x8c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68f9      	ldr	r1, [r7, #12]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 fea0 	bl	800b864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	460b      	mov	r3, r1
 8007b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2200      	movs	r2, #0
 8007b76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d102      	bne.n	8007b92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d109      	bne.n	8007bb0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	f004 f97f 	bl	800beac <USB_EP0StartXfer>
 8007bae:	e008      	b.n	8007bc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	f003 ff2d 	bl	800ba1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	f003 020f 	and.w	r2, r3, #15
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007bee:	681b      	ldr	r3, [r3, #0]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	4613      	mov	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	3338      	adds	r3, #56	; 0x38
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	3304      	adds	r3, #4
 8007c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2200      	movs	r2, #0
 8007c34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d102      	bne.n	8007c56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	f004 f91d 	bl	800beac <USB_EP0StartXfer>
 8007c72:	e008      	b.n	8007c86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6979      	ldr	r1, [r7, #20]
 8007c82:	f003 fecb 	bl	800ba1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d901      	bls.n	8007cae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e050      	b.n	8007d50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da0f      	bge.n	8007cd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f003 020f 	and.w	r2, r3, #15
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	3338      	adds	r3, #56	; 0x38
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4413      	add	r3, r2
 8007cca:	3304      	adds	r3, #4
 8007ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	705a      	strb	r2, [r3, #1]
 8007cd4:	e00d      	b.n	8007cf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	3304      	adds	r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_PCD_EP_SetStall+0x82>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e01e      	b.n	8007d50 <HAL_PCD_EP_SetStall+0xc0>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f004 fb5b 	bl	800c3dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	b2d9      	uxtb	r1, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d40:	461a      	mov	r2, r3
 8007d42:	f004 fd4b 	bl	800c7dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	f003 020f 	and.w	r2, r3, #15
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d901      	bls.n	8007d76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e042      	b.n	8007dfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0f      	bge.n	8007d9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	f003 020f 	and.w	r2, r3, #15
 8007d84:	4613      	mov	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3338      	adds	r3, #56	; 0x38
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	705a      	strb	r2, [r3, #1]
 8007d9c:	e00f      	b.n	8007dbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	f003 020f 	and.w	r2, r3, #15
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	3304      	adds	r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_PCD_EP_ClrStall+0x86>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e00e      	b.n	8007dfc <HAL_PCD_EP_ClrStall+0xa4>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f004 fb63 	bl	800c4b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da0c      	bge.n	8007e32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 020f 	and.w	r2, r3, #15
 8007e1e:	4613      	mov	r3, r2
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	3338      	adds	r3, #56	; 0x38
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e00c      	b.n	8007e4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	3304      	adds	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68f9      	ldr	r1, [r7, #12]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f004 f982 	bl	800c15c <USB_EPStopXfer>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b08a      	sub	sp, #40	; 0x28
 8007e6a:	af02      	add	r7, sp, #8
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	3338      	adds	r3, #56	; 0x38
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1a      	ldr	r2, [r3, #32]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d901      	bls.n	8007e9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e06c      	b.n	8007f78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d902      	bls.n	8007eba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	3303      	adds	r3, #3
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ec2:	e02b      	b.n	8007f1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d902      	bls.n	8007ee0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3303      	adds	r3, #3
 8007ee4:	089b      	lsrs	r3, r3, #2
 8007ee6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6919      	ldr	r1, [r3, #16]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	4603      	mov	r3, r0
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f004 f9d6 	bl	800c2b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	441a      	add	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a1a      	ldr	r2, [r3, #32]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	441a      	add	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d809      	bhi.n	8007f46 <PCD_WriteEmptyTxFifo+0xe0>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1a      	ldr	r2, [r3, #32]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d203      	bcs.n	8007f46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1be      	bne.n	8007ec4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d811      	bhi.n	8007f76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	2201      	movs	r2, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	6939      	ldr	r1, [r7, #16]
 8007f6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f72:	4013      	ands	r3, r2
 8007f74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3720      	adds	r7, #32
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	333c      	adds	r3, #60	; 0x3c
 8007f98:	3304      	adds	r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d17b      	bne.n	80080ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d015      	beq.n	8007fec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	4a61      	ldr	r2, [pc, #388]	; (8008148 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f240 80b9 	bls.w	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80b3 	beq.w	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe8:	6093      	str	r3, [r2, #8]
 8007fea:	e0a7      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	461a      	mov	r2, r3
 8008004:	2320      	movs	r3, #32
 8008006:	6093      	str	r3, [r2, #8]
 8008008:	e098      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008010:	2b00      	cmp	r3, #0
 8008012:	f040 8093 	bne.w	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4a4b      	ldr	r2, [pc, #300]	; (8008148 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d90f      	bls.n	800803e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800803a:	6093      	str	r3, [r2, #8]
 800803c:	e07e      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	3304      	adds	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	0159      	lsls	r1, r3, #5
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	440b      	add	r3, r1
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800806a:	1ad2      	subs	r2, r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d114      	bne.n	80080a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008088:	461a      	mov	r2, r3
 800808a:	2101      	movs	r1, #1
 800808c:	f004 fba6 	bl	800c7dc <USB_EP0_OutStart>
 8008090:	e006      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f007 fa54 	bl	800f554 <HAL_PCD_DataOutStageCallback>
 80080ac:	e046      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4a26      	ldr	r2, [pc, #152]	; (800814c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d124      	bne.n	8008100 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080cc:	461a      	mov	r2, r3
 80080ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d2:	6093      	str	r3, [r2, #8]
 80080d4:	e032      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f003 0320 	and.w	r3, r3, #32
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d008      	beq.n	80080f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ec:	461a      	mov	r2, r3
 80080ee:	2320      	movs	r3, #32
 80080f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f007 fa2b 	bl	800f554 <HAL_PCD_DataOutStageCallback>
 80080fe:	e01d      	b.n	800813c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d114      	bne.n	8008130 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	4613      	mov	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d108      	bne.n	8008130 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008128:	461a      	mov	r2, r3
 800812a:	2100      	movs	r1, #0
 800812c:	f004 fb56 	bl	800c7dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f007 fa0c 	bl	800f554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	4f54300a 	.word	0x4f54300a
 800814c:	4f54310a 	.word	0x4f54310a

08008150 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	333c      	adds	r3, #60	; 0x3c
 8008168:	3304      	adds	r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a15      	ldr	r2, [pc, #84]	; (80081d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d90e      	bls.n	80081a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f007 f9c3 	bl	800f530 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a0a      	ldr	r2, [pc, #40]	; (80081d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d90c      	bls.n	80081cc <PCD_EP_OutSetupPacket_int+0x7c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d108      	bne.n	80081cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081c4:	461a      	mov	r2, r3
 80081c6:	2101      	movs	r1, #1
 80081c8:	f004 fb08 	bl	800c7dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	4f54300a 	.word	0x4f54300a

080081dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	4613      	mov	r3, r2
 80081ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d107      	bne.n	800820a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081fa:	883b      	ldrh	r3, [r7, #0]
 80081fc:	0419      	lsls	r1, r3, #16
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	430a      	orrs	r2, r1
 8008206:	629a      	str	r2, [r3, #40]	; 0x28
 8008208:	e028      	b.n	800825c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
 800821c:	e00d      	b.n	800823a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	3340      	adds	r3, #64	; 0x40
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	0c1b      	lsrs	r3, r3, #16
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	3301      	adds	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
 800823a:	7bfa      	ldrb	r2, [r7, #15]
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	3b01      	subs	r3, #1
 8008240:	429a      	cmp	r2, r3
 8008242:	d3ec      	bcc.n	800821e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008244:	883b      	ldrh	r3, [r7, #0]
 8008246:	0418      	lsls	r0, r3, #16
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	3b01      	subs	r3, #1
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4302      	orrs	r2, r0
 8008254:	3340      	adds	r3, #64	; 0x40
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	887a      	ldrh	r2, [r7, #2]
 800827c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e267      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d075      	beq.n	80083ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082c2:	4b88      	ldr	r3, [pc, #544]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 030c 	and.w	r3, r3, #12
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d00c      	beq.n	80082e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ce:	4b85      	ldr	r3, [pc, #532]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082d6:	2b08      	cmp	r3, #8
 80082d8:	d112      	bne.n	8008300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082da:	4b82      	ldr	r3, [pc, #520]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082e6:	d10b      	bne.n	8008300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	4b7e      	ldr	r3, [pc, #504]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <HAL_RCC_OscConfig+0x108>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d157      	bne.n	80083ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e242      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008308:	d106      	bne.n	8008318 <HAL_RCC_OscConfig+0x74>
 800830a:	4b76      	ldr	r3, [pc, #472]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a75      	ldr	r2, [pc, #468]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e01d      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008320:	d10c      	bne.n	800833c <HAL_RCC_OscConfig+0x98>
 8008322:	4b70      	ldr	r3, [pc, #448]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a6f      	ldr	r2, [pc, #444]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b6d      	ldr	r3, [pc, #436]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a6c      	ldr	r2, [pc, #432]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e00b      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 800833c:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a68      	ldr	r2, [pc, #416]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b66      	ldr	r3, [pc, #408]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a65      	ldr	r2, [pc, #404]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 800834e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835c:	f7fc fa32 	bl	80047c4 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008364:	f7fc fa2e 	bl	80047c4 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	; 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e207      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008376:	4b5b      	ldr	r3, [pc, #364]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0xc0>
 8008382:	e014      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008384:	f7fc fa1e 	bl	80047c4 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800838c:	f7fc fa1a 	bl	80047c4 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e1f3      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839e:	4b51      	ldr	r3, [pc, #324]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f0      	bne.n	800838c <HAL_RCC_OscConfig+0xe8>
 80083aa:	e000      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d063      	beq.n	8008482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083ba:	4b4a      	ldr	r3, [pc, #296]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 030c 	and.w	r3, r3, #12
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083c6:	4b47      	ldr	r3, [pc, #284]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	d11c      	bne.n	800840c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083d2:	4b44      	ldr	r3, [pc, #272]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d116      	bne.n	800840c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083de:	4b41      	ldr	r3, [pc, #260]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_RCC_OscConfig+0x152>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d001      	beq.n	80083f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e1c7      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f6:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	4937      	ldr	r1, [pc, #220]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008406:	4313      	orrs	r3, r2
 8008408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800840a:	e03a      	b.n	8008482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d020      	beq.n	8008456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008414:	4b34      	ldr	r3, [pc, #208]	; (80084e8 <HAL_RCC_OscConfig+0x244>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841a:	f7fc f9d3 	bl	80047c4 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008422:	f7fc f9cf 	bl	80047c4 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e1a8      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008434:	4b2b      	ldr	r3, [pc, #172]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008440:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4925      	ldr	r1, [pc, #148]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008450:	4313      	orrs	r3, r2
 8008452:	600b      	str	r3, [r1, #0]
 8008454:	e015      	b.n	8008482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008456:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <HAL_RCC_OscConfig+0x244>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845c:	f7fc f9b2 	bl	80047c4 <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008464:	f7fc f9ae 	bl	80047c4 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e187      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008476:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f0      	bne.n	8008464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d036      	beq.n	80084fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d016      	beq.n	80084c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008496:	4b15      	ldr	r3, [pc, #84]	; (80084ec <HAL_RCC_OscConfig+0x248>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849c:	f7fc f992 	bl	80047c4 <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084a4:	f7fc f98e 	bl	80047c4 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e167      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <HAL_RCC_OscConfig+0x240>)
 80084b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f0      	beq.n	80084a4 <HAL_RCC_OscConfig+0x200>
 80084c2:	e01b      	b.n	80084fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <HAL_RCC_OscConfig+0x248>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084ca:	f7fc f97b 	bl	80047c4 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084d0:	e00e      	b.n	80084f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084d2:	f7fc f977 	bl	80047c4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d907      	bls.n	80084f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e150      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
 80084e4:	40023800 	.word	0x40023800
 80084e8:	42470000 	.word	0x42470000
 80084ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084f0:	4b88      	ldr	r3, [pc, #544]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80084f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ea      	bne.n	80084d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8097 	beq.w	8008638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800850a:	2300      	movs	r3, #0
 800850c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800850e:	4b81      	ldr	r3, [pc, #516]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10f      	bne.n	800853a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800851a:	2300      	movs	r3, #0
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	4b7d      	ldr	r3, [pc, #500]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	4a7c      	ldr	r2, [pc, #496]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008528:	6413      	str	r3, [r2, #64]	; 0x40
 800852a:	4b7a      	ldr	r3, [pc, #488]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800853a:	4b77      	ldr	r3, [pc, #476]	; (8008718 <HAL_RCC_OscConfig+0x474>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008542:	2b00      	cmp	r3, #0
 8008544:	d118      	bne.n	8008578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008546:	4b74      	ldr	r3, [pc, #464]	; (8008718 <HAL_RCC_OscConfig+0x474>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a73      	ldr	r2, [pc, #460]	; (8008718 <HAL_RCC_OscConfig+0x474>)
 800854c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008552:	f7fc f937 	bl	80047c4 <HAL_GetTick>
 8008556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008558:	e008      	b.n	800856c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800855a:	f7fc f933 	bl	80047c4 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e10c      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800856c:	4b6a      	ldr	r3, [pc, #424]	; (8008718 <HAL_RCC_OscConfig+0x474>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0f0      	beq.n	800855a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <HAL_RCC_OscConfig+0x2ea>
 8008580:	4b64      	ldr	r3, [pc, #400]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	4a63      	ldr	r2, [pc, #396]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	6713      	str	r3, [r2, #112]	; 0x70
 800858c:	e01c      	b.n	80085c8 <HAL_RCC_OscConfig+0x324>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b05      	cmp	r3, #5
 8008594:	d10c      	bne.n	80085b0 <HAL_RCC_OscConfig+0x30c>
 8008596:	4b5f      	ldr	r3, [pc, #380]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	4a5e      	ldr	r2, [pc, #376]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 800859c:	f043 0304 	orr.w	r3, r3, #4
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
 80085a2:	4b5c      	ldr	r3, [pc, #368]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	4a5b      	ldr	r2, [pc, #364]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	6713      	str	r3, [r2, #112]	; 0x70
 80085ae:	e00b      	b.n	80085c8 <HAL_RCC_OscConfig+0x324>
 80085b0:	4b58      	ldr	r3, [pc, #352]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	4a57      	ldr	r2, [pc, #348]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6713      	str	r3, [r2, #112]	; 0x70
 80085bc:	4b55      	ldr	r3, [pc, #340]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a54      	ldr	r2, [pc, #336]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085c2:	f023 0304 	bic.w	r3, r3, #4
 80085c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d015      	beq.n	80085fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7fc f8f8 	bl	80047c4 <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085d6:	e00a      	b.n	80085ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d8:	f7fc f8f4 	bl	80047c4 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e0cb      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ee:	4b49      	ldr	r3, [pc, #292]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0ee      	beq.n	80085d8 <HAL_RCC_OscConfig+0x334>
 80085fa:	e014      	b.n	8008626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085fc:	f7fc f8e2 	bl	80047c4 <HAL_GetTick>
 8008600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008602:	e00a      	b.n	800861a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008604:	f7fc f8de 	bl	80047c4 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e0b5      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800861a:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ee      	bne.n	8008604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d105      	bne.n	8008638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800862c:	4b39      	ldr	r3, [pc, #228]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	4a38      	ldr	r2, [pc, #224]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80a1 	beq.w	8008784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008642:	4b34      	ldr	r3, [pc, #208]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
 800864a:	2b08      	cmp	r3, #8
 800864c:	d05c      	beq.n	8008708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d141      	bne.n	80086da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008656:	4b31      	ldr	r3, [pc, #196]	; (800871c <HAL_RCC_OscConfig+0x478>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865c:	f7fc f8b2 	bl	80047c4 <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008664:	f7fc f8ae 	bl	80047c4 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e087      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008676:	4b27      	ldr	r3, [pc, #156]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1f0      	bne.n	8008664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	019b      	lsls	r3, r3, #6
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	3b01      	subs	r3, #1
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	061b      	lsls	r3, r3, #24
 80086a6:	491b      	ldr	r1, [pc, #108]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <HAL_RCC_OscConfig+0x478>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b2:	f7fc f887 	bl	80047c4 <HAL_GetTick>
 80086b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086b8:	e008      	b.n	80086cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ba:	f7fc f883 	bl	80047c4 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e05c      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0f0      	beq.n	80086ba <HAL_RCC_OscConfig+0x416>
 80086d8:	e054      	b.n	8008784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <HAL_RCC_OscConfig+0x478>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e0:	f7fc f870 	bl	80047c4 <HAL_GetTick>
 80086e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e8:	f7fc f86c 	bl	80047c4 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e045      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_RCC_OscConfig+0x470>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f0      	bne.n	80086e8 <HAL_RCC_OscConfig+0x444>
 8008706:	e03d      	b.n	8008784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d107      	bne.n	8008720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e038      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
 8008714:	40023800 	.word	0x40023800
 8008718:	40007000 	.word	0x40007000
 800871c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008720:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <HAL_RCC_OscConfig+0x4ec>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d028      	beq.n	8008780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008738:	429a      	cmp	r2, r3
 800873a:	d121      	bne.n	8008780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008746:	429a      	cmp	r2, r3
 8008748:	d11a      	bne.n	8008780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008758:	4293      	cmp	r3, r2
 800875a:	d111      	bne.n	8008780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	3b01      	subs	r3, #1
 800876a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800876c:	429a      	cmp	r2, r3
 800876e:	d107      	bne.n	8008780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800877c:	429a      	cmp	r2, r3
 800877e:	d001      	beq.n	8008784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	40023800 	.word	0x40023800

08008794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e0cc      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087a8:	4b68      	ldr	r3, [pc, #416]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d90c      	bls.n	80087d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b6:	4b65      	ldr	r3, [pc, #404]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087be:	4b63      	ldr	r3, [pc, #396]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e0b8      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d020      	beq.n	800881e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087e8:	4b59      	ldr	r3, [pc, #356]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	4a58      	ldr	r2, [pc, #352]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0308 	and.w	r3, r3, #8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008800:	4b53      	ldr	r3, [pc, #332]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4a52      	ldr	r2, [pc, #328]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800880a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800880c:	4b50      	ldr	r3, [pc, #320]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	494d      	ldr	r1, [pc, #308]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	4313      	orrs	r3, r2
 800881c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d044      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d107      	bne.n	8008842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008832:	4b47      	ldr	r3, [pc, #284]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d119      	bne.n	8008872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e07f      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d003      	beq.n	8008852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800884e:	2b03      	cmp	r3, #3
 8008850:	d107      	bne.n	8008862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008852:	4b3f      	ldr	r3, [pc, #252]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e06f      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008862:	4b3b      	ldr	r3, [pc, #236]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e067      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008872:	4b37      	ldr	r3, [pc, #220]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f023 0203 	bic.w	r2, r3, #3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	4934      	ldr	r1, [pc, #208]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008880:	4313      	orrs	r3, r2
 8008882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008884:	f7fb ff9e 	bl	80047c4 <HAL_GetTick>
 8008888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800888a:	e00a      	b.n	80088a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800888c:	f7fb ff9a 	bl	80047c4 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	4293      	cmp	r3, r2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e04f      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a2:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 020c 	and.w	r2, r3, #12
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d1eb      	bne.n	800888c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088b4:	4b25      	ldr	r3, [pc, #148]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d20c      	bcs.n	80088dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c2:	4b22      	ldr	r3, [pc, #136]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ca:	4b20      	ldr	r3, [pc, #128]	; (800894c <HAL_RCC_ClockConfig+0x1b8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d001      	beq.n	80088dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e032      	b.n	8008942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088e8:	4b19      	ldr	r3, [pc, #100]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4916      	ldr	r1, [pc, #88]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008906:	4b12      	ldr	r3, [pc, #72]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	490e      	ldr	r1, [pc, #56]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	4313      	orrs	r3, r2
 8008918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800891a:	f000 f821 	bl	8008960 <HAL_RCC_GetSysClockFreq>
 800891e:	4602      	mov	r2, r0
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	091b      	lsrs	r3, r3, #4
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	490a      	ldr	r1, [pc, #40]	; (8008954 <HAL_RCC_ClockConfig+0x1c0>)
 800892c:	5ccb      	ldrb	r3, [r1, r3]
 800892e:	fa22 f303 	lsr.w	r3, r2, r3
 8008932:	4a09      	ldr	r2, [pc, #36]	; (8008958 <HAL_RCC_ClockConfig+0x1c4>)
 8008934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <HAL_RCC_ClockConfig+0x1c8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7fb fefe 	bl	800473c <HAL_InitTick>

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40023c00 	.word	0x40023c00
 8008950:	40023800 	.word	0x40023800
 8008954:	0801373c 	.word	0x0801373c
 8008958:	20000008 	.word	0x20000008
 800895c:	2000000c 	.word	0x2000000c

08008960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008964:	b090      	sub	sp, #64	; 0x40
 8008966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008970:	2300      	movs	r3, #0
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008978:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f003 030c 	and.w	r3, r3, #12
 8008980:	2b08      	cmp	r3, #8
 8008982:	d00d      	beq.n	80089a0 <HAL_RCC_GetSysClockFreq+0x40>
 8008984:	2b08      	cmp	r3, #8
 8008986:	f200 80a1 	bhi.w	8008acc <HAL_RCC_GetSysClockFreq+0x16c>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_RCC_GetSysClockFreq+0x34>
 800898e:	2b04      	cmp	r3, #4
 8008990:	d003      	beq.n	800899a <HAL_RCC_GetSysClockFreq+0x3a>
 8008992:	e09b      	b.n	8008acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008994:	4b53      	ldr	r3, [pc, #332]	; (8008ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008998:	e09b      	b.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800899a:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800899c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800899e:	e098      	b.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089a0:	4b4f      	ldr	r3, [pc, #316]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089aa:	4b4d      	ldr	r3, [pc, #308]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d028      	beq.n	8008a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089b6:	4b4a      	ldr	r3, [pc, #296]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	099b      	lsrs	r3, r3, #6
 80089bc:	2200      	movs	r2, #0
 80089be:	623b      	str	r3, [r7, #32]
 80089c0:	627a      	str	r2, [r7, #36]	; 0x24
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80089c8:	2100      	movs	r1, #0
 80089ca:	4b47      	ldr	r3, [pc, #284]	; (8008ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80089cc:	fb03 f201 	mul.w	r2, r3, r1
 80089d0:	2300      	movs	r3, #0
 80089d2:	fb00 f303 	mul.w	r3, r0, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	4a43      	ldr	r2, [pc, #268]	; (8008ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80089da:	fba0 1202 	umull	r1, r2, r0, r2
 80089de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089e0:	460a      	mov	r2, r1
 80089e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80089e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e6:	4413      	add	r3, r2
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	2200      	movs	r2, #0
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	61fa      	str	r2, [r7, #28]
 80089f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80089fa:	f7f8 f925 	bl	8000c48 <__aeabi_uldivmod>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4613      	mov	r3, r2
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a06:	e053      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a08:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	099b      	lsrs	r3, r3, #6
 8008a0e:	2200      	movs	r2, #0
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	617a      	str	r2, [r7, #20]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a1a:	f04f 0b00 	mov.w	fp, #0
 8008a1e:	4652      	mov	r2, sl
 8008a20:	465b      	mov	r3, fp
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f04f 0100 	mov.w	r1, #0
 8008a2a:	0159      	lsls	r1, r3, #5
 8008a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a30:	0150      	lsls	r0, r2, #5
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	ebb2 080a 	subs.w	r8, r2, sl
 8008a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a52:	ebb2 0408 	subs.w	r4, r2, r8
 8008a56:	eb63 0509 	sbc.w	r5, r3, r9
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	00eb      	lsls	r3, r5, #3
 8008a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a68:	00e2      	lsls	r2, r4, #3
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	eb14 030a 	adds.w	r3, r4, sl
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	eb45 030b 	adc.w	r3, r5, fp
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a86:	4629      	mov	r1, r5
 8008a88:	028b      	lsls	r3, r1, #10
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a90:	4621      	mov	r1, r4
 8008a92:	028a      	lsls	r2, r1, #10
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	60fa      	str	r2, [r7, #12]
 8008aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008aa4:	f7f8 f8d0 	bl	8000c48 <__aeabi_uldivmod>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4613      	mov	r3, r2
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	3301      	adds	r3, #1
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008aca:	e002      	b.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008acc:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3740      	adds	r7, #64	; 0x40
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ade:	bf00      	nop
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	00f42400 	.word	0x00f42400
 8008ae8:	017d7840 	.word	0x017d7840

08008aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008af0:	4b03      	ldr	r3, [pc, #12]	; (8008b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8008af2:	681b      	ldr	r3, [r3, #0]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000008 	.word	0x20000008

08008b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b08:	f7ff fff0 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	0a9b      	lsrs	r3, r3, #10
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	4903      	ldr	r1, [pc, #12]	; (8008b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b1a:	5ccb      	ldrb	r3, [r1, r3]
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	40023800 	.word	0x40023800
 8008b28:	0801374c 	.word	0x0801374c

08008b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b30:	f7ff ffdc 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 8008b34:	4602      	mov	r2, r0
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	0b5b      	lsrs	r3, r3, #13
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	4903      	ldr	r1, [pc, #12]	; (8008b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b42:	5ccb      	ldrb	r3, [r1, r3]
 8008b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	40023800 	.word	0x40023800
 8008b50:	0801374c 	.word	0x0801374c

08008b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e07b      	b.n	8008c5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d108      	bne.n	8008b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b76:	d009      	beq.n	8008b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	61da      	str	r2, [r3, #28]
 8008b7e:	e005      	b.n	8008b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d106      	bne.n	8008bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7fb fa0a 	bl	8003fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c10:	ea42 0103 	orr.w	r1, r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	0c1b      	lsrs	r3, r3, #16
 8008c2a:	f003 0104 	and.w	r1, r3, #4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	f003 0210 	and.w	r2, r3, #16
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e041      	b.n	8008cfc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7fb f9df 	bl	8004050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f000 fce9 	bl	800967c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d001      	beq.n	8008d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e04e      	b.n	8008dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d022      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d46:	d01d      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d018      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00e      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d009      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a19      	ldr	r2, [pc, #100]	; (8008ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d004      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d111      	bne.n	8008da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d010      	beq.n	8008db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0201 	orr.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da6:	e007      	b.n	8008db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40001800 	.word	0x40001800

08008de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e041      	b.n	8008e7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f839 	bl	8008e82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f000 fc2a 	bl	800967c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_TIM_PWM_Start+0x24>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	e022      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d109      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0x3e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	e015      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d109      	bne.n	8008ef0 <HAL_TIM_PWM_Start+0x58>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	e008      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e07c      	b.n	8009004 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <HAL_TIM_PWM_Start+0x82>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f18:	e013      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d104      	bne.n	8008f2a <HAL_TIM_PWM_Start+0x92>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f28:	e00b      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d104      	bne.n	8008f3a <HAL_TIM_PWM_Start+0xa2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f38:	e003      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fe80 	bl	8009c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a2d      	ldr	r2, [pc, #180]	; (800900c <HAL_TIM_PWM_Start+0x174>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIM_PWM_Start+0xcc>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	; (8009010 <HAL_TIM_PWM_Start+0x178>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d101      	bne.n	8008f68 <HAL_TIM_PWM_Start+0xd0>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e000      	b.n	8008f6a <HAL_TIM_PWM_Start+0xd2>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d007      	beq.n	8008f7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a22      	ldr	r2, [pc, #136]	; (800900c <HAL_TIM_PWM_Start+0x174>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d022      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f90:	d01d      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <HAL_TIM_PWM_Start+0x17c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d018      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <HAL_TIM_PWM_Start+0x180>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <HAL_TIM_PWM_Start+0x184>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00e      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	; (8009010 <HAL_TIM_PWM_Start+0x178>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d009      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	; (8009020 <HAL_TIM_PWM_Start+0x188>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a16      	ldr	r2, [pc, #88]	; (8009024 <HAL_TIM_PWM_Start+0x18c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d111      	bne.n	8008ff2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b06      	cmp	r3, #6
 8008fde:	d010      	beq.n	8009002 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff0:	e007      	b.n	8009002 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0201 	orr.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40010000 	.word	0x40010000
 8009010:	40010400 	.word	0x40010400
 8009014:	40000400 	.word	0x40000400
 8009018:	40000800 	.word	0x40000800
 800901c:	40000c00 	.word	0x40000c00
 8009020:	40014000 	.word	0x40014000
 8009024:	40001800 	.word	0x40001800

08009028 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2200      	movs	r2, #0
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fe08 	bl	8009c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a2e      	ldr	r2, [pc, #184]	; (8009100 <HAL_TIM_PWM_Stop+0xd8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d004      	beq.n	8009054 <HAL_TIM_PWM_Stop+0x2c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a2d      	ldr	r2, [pc, #180]	; (8009104 <HAL_TIM_PWM_Stop+0xdc>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d101      	bne.n	8009058 <HAL_TIM_PWM_Stop+0x30>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <HAL_TIM_PWM_Stop+0x32>
 8009058:	2300      	movs	r3, #0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d017      	beq.n	800908e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	f241 1311 	movw	r3, #4369	; 0x1111
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10f      	bne.n	800908e <HAL_TIM_PWM_Stop+0x66>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	f240 4344 	movw	r3, #1092	; 0x444
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d107      	bne.n	800908e <HAL_TIM_PWM_Stop+0x66>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800908c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6a1a      	ldr	r2, [r3, #32]
 8009094:	f241 1311 	movw	r3, #4369	; 0x1111
 8009098:	4013      	ands	r3, r2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10f      	bne.n	80090be <HAL_TIM_PWM_Stop+0x96>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6a1a      	ldr	r2, [r3, #32]
 80090a4:	f240 4344 	movw	r3, #1092	; 0x444
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d107      	bne.n	80090be <HAL_TIM_PWM_Stop+0x96>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <HAL_TIM_PWM_Stop+0xa6>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090cc:	e013      	b.n	80090f6 <HAL_TIM_PWM_Stop+0xce>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d104      	bne.n	80090de <HAL_TIM_PWM_Stop+0xb6>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	e00b      	b.n	80090f6 <HAL_TIM_PWM_Stop+0xce>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d104      	bne.n	80090ee <HAL_TIM_PWM_Stop+0xc6>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	e003      	b.n	80090f6 <HAL_TIM_PWM_Stop+0xce>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	40010000 	.word	0x40010000
 8009104:	40010400 	.word	0x40010400

08009108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d122      	bne.n	8009164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b02      	cmp	r3, #2
 800912a:	d11b      	bne.n	8009164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0202 	mvn.w	r2, #2
 8009134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa77 	bl	800963e <HAL_TIM_IC_CaptureCallback>
 8009150:	e005      	b.n	800915e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa69 	bl	800962a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fa7a 	bl	8009652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b04      	cmp	r3, #4
 8009170:	d122      	bne.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b04      	cmp	r3, #4
 800917e:	d11b      	bne.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f06f 0204 	mvn.w	r2, #4
 8009188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa4d 	bl	800963e <HAL_TIM_IC_CaptureCallback>
 80091a4:	e005      	b.n	80091b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa3f 	bl	800962a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa50 	bl	8009652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	d122      	bne.n	800920c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d11b      	bne.n	800920c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f06f 0208 	mvn.w	r2, #8
 80091dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa23 	bl	800963e <HAL_TIM_IC_CaptureCallback>
 80091f8:	e005      	b.n	8009206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa15 	bl	800962a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fa26 	bl	8009652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b10      	cmp	r3, #16
 8009218:	d122      	bne.n	8009260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b10      	cmp	r3, #16
 8009226:	d11b      	bne.n	8009260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0210 	mvn.w	r2, #16
 8009230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2208      	movs	r2, #8
 8009236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f9f9 	bl	800963e <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f9eb 	bl	800962a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f9fc 	bl	8009652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b01      	cmp	r3, #1
 800926c:	d10e      	bne.n	800928c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d107      	bne.n	800928c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0201 	mvn.w	r2, #1
 8009284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fa fc46 	bl	8003b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009296:	2b80      	cmp	r3, #128	; 0x80
 8009298:	d10e      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d107      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fdca 	bl	8009e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d10e      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d107      	bne.n	80092e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f9c1 	bl	8009666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	d10e      	bne.n	8009310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d107      	bne.n	8009310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0220 	mvn.w	r2, #32
 8009308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fd94 	bl	8009e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009332:	2302      	movs	r3, #2
 8009334:	e0ae      	b.n	8009494 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b0c      	cmp	r3, #12
 8009342:	f200 809f 	bhi.w	8009484 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009346:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009381 	.word	0x08009381
 8009350:	08009485 	.word	0x08009485
 8009354:	08009485 	.word	0x08009485
 8009358:	08009485 	.word	0x08009485
 800935c:	080093c1 	.word	0x080093c1
 8009360:	08009485 	.word	0x08009485
 8009364:	08009485 	.word	0x08009485
 8009368:	08009485 	.word	0x08009485
 800936c:	08009403 	.word	0x08009403
 8009370:	08009485 	.word	0x08009485
 8009374:	08009485 	.word	0x08009485
 8009378:	08009485 	.word	0x08009485
 800937c:	08009443 	.word	0x08009443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fa18 	bl	80097bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0208 	orr.w	r2, r2, #8
 800939a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0204 	bic.w	r2, r2, #4
 80093aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6999      	ldr	r1, [r3, #24]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	691a      	ldr	r2, [r3, #16]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	619a      	str	r2, [r3, #24]
      break;
 80093be:	e064      	b.n	800948a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fa68 	bl	800989c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6999      	ldr	r1, [r3, #24]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	021a      	lsls	r2, r3, #8
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	619a      	str	r2, [r3, #24]
      break;
 8009400:	e043      	b.n	800948a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fabd 	bl	8009988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 0208 	orr.w	r2, r2, #8
 800941c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0204 	bic.w	r2, r2, #4
 800942c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69d9      	ldr	r1, [r3, #28]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	61da      	str	r2, [r3, #28]
      break;
 8009440:	e023      	b.n	800948a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fb11 	bl	8009a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800945c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69d9      	ldr	r1, [r3, #28]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	021a      	lsls	r2, r3, #8
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	61da      	str	r2, [r3, #28]
      break;
 8009482:	e002      	b.n	800948a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
      break;
 8009488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_TIM_ConfigClockSource+0x1c>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e0b4      	b.n	8009622 <HAL_TIM_ConfigClockSource+0x186>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f0:	d03e      	beq.n	8009570 <HAL_TIM_ConfigClockSource+0xd4>
 80094f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f6:	f200 8087 	bhi.w	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 80094fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094fe:	f000 8086 	beq.w	800960e <HAL_TIM_ConfigClockSource+0x172>
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009506:	d87f      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009508:	2b70      	cmp	r3, #112	; 0x70
 800950a:	d01a      	beq.n	8009542 <HAL_TIM_ConfigClockSource+0xa6>
 800950c:	2b70      	cmp	r3, #112	; 0x70
 800950e:	d87b      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009510:	2b60      	cmp	r3, #96	; 0x60
 8009512:	d050      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0x11a>
 8009514:	2b60      	cmp	r3, #96	; 0x60
 8009516:	d877      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009518:	2b50      	cmp	r3, #80	; 0x50
 800951a:	d03c      	beq.n	8009596 <HAL_TIM_ConfigClockSource+0xfa>
 800951c:	2b50      	cmp	r3, #80	; 0x50
 800951e:	d873      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d058      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x13a>
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d86f      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b30      	cmp	r3, #48	; 0x30
 800952a:	d064      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x15a>
 800952c:	2b30      	cmp	r3, #48	; 0x30
 800952e:	d86b      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b20      	cmp	r3, #32
 8009532:	d060      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009534:	2b20      	cmp	r3, #32
 8009536:	d867      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
 8009538:	2b00      	cmp	r3, #0
 800953a:	d05c      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x15a>
 800953c:	2b10      	cmp	r3, #16
 800953e:	d05a      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009540:	e062      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6899      	ldr	r1, [r3, #8]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f000 fb5d 	bl	8009c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	609a      	str	r2, [r3, #8]
      break;
 800956e:	e04f      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	6899      	ldr	r1, [r3, #8]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f000 fb46 	bl	8009c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009592:	609a      	str	r2, [r3, #8]
      break;
 8009594:	e03c      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f000 faba 	bl	8009b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2150      	movs	r1, #80	; 0x50
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fb13 	bl	8009bda <TIM_ITRx_SetConfig>
      break;
 80095b4:	e02c      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6859      	ldr	r1, [r3, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f000 fad9 	bl	8009b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2160      	movs	r1, #96	; 0x60
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fb03 	bl	8009bda <TIM_ITRx_SetConfig>
      break;
 80095d4:	e01c      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	6859      	ldr	r1, [r3, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f000 fa9a 	bl	8009b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2140      	movs	r1, #64	; 0x40
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 faf3 	bl	8009bda <TIM_ITRx_SetConfig>
      break;
 80095f4:	e00c      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f000 faea 	bl	8009bda <TIM_ITRx_SetConfig>
      break;
 8009606:	e003      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
      break;
 800960c:	e000      	b.n	8009610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800960e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009632:	bf00      	nop
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009646:	bf00      	nop
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a40      	ldr	r2, [pc, #256]	; (8009790 <TIM_Base_SetConfig+0x114>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d013      	beq.n	80096bc <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969a:	d00f      	beq.n	80096bc <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a3d      	ldr	r2, [pc, #244]	; (8009794 <TIM_Base_SetConfig+0x118>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00b      	beq.n	80096bc <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a3c      	ldr	r2, [pc, #240]	; (8009798 <TIM_Base_SetConfig+0x11c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d007      	beq.n	80096bc <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a3b      	ldr	r2, [pc, #236]	; (800979c <TIM_Base_SetConfig+0x120>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d003      	beq.n	80096bc <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a3a      	ldr	r2, [pc, #232]	; (80097a0 <TIM_Base_SetConfig+0x124>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d108      	bne.n	80096ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2f      	ldr	r2, [pc, #188]	; (8009790 <TIM_Base_SetConfig+0x114>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02b      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096dc:	d027      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a2c      	ldr	r2, [pc, #176]	; (8009794 <TIM_Base_SetConfig+0x118>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d023      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2b      	ldr	r2, [pc, #172]	; (8009798 <TIM_Base_SetConfig+0x11c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01f      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2a      	ldr	r2, [pc, #168]	; (800979c <TIM_Base_SetConfig+0x120>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01b      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a29      	ldr	r2, [pc, #164]	; (80097a0 <TIM_Base_SetConfig+0x124>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d017      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a28      	ldr	r2, [pc, #160]	; (80097a4 <TIM_Base_SetConfig+0x128>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d013      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a27      	ldr	r2, [pc, #156]	; (80097a8 <TIM_Base_SetConfig+0x12c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00f      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a26      	ldr	r2, [pc, #152]	; (80097ac <TIM_Base_SetConfig+0x130>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00b      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a25      	ldr	r2, [pc, #148]	; (80097b0 <TIM_Base_SetConfig+0x134>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d007      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a24      	ldr	r2, [pc, #144]	; (80097b4 <TIM_Base_SetConfig+0x138>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d003      	beq.n	800972e <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a23      	ldr	r2, [pc, #140]	; (80097b8 <TIM_Base_SetConfig+0x13c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d108      	bne.n	8009740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a0a      	ldr	r2, [pc, #40]	; (8009790 <TIM_Base_SetConfig+0x114>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d003      	beq.n	8009774 <TIM_Base_SetConfig+0xf8>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a0c      	ldr	r2, [pc, #48]	; (80097a0 <TIM_Base_SetConfig+0x124>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d103      	bne.n	800977c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	615a      	str	r2, [r3, #20]
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	40010000 	.word	0x40010000
 8009794:	40000400 	.word	0x40000400
 8009798:	40000800 	.word	0x40000800
 800979c:	40000c00 	.word	0x40000c00
 80097a0:	40010400 	.word	0x40010400
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40014400 	.word	0x40014400
 80097ac:	40014800 	.word	0x40014800
 80097b0:	40001800 	.word	0x40001800
 80097b4:	40001c00 	.word	0x40001c00
 80097b8:	40002000 	.word	0x40002000

080097bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0201 	bic.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f023 0302 	bic.w	r3, r3, #2
 8009804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a20      	ldr	r2, [pc, #128]	; (8009894 <TIM_OC1_SetConfig+0xd8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC1_SetConfig+0x64>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1f      	ldr	r2, [pc, #124]	; (8009898 <TIM_OC1_SetConfig+0xdc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10c      	bne.n	800983a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0308 	bic.w	r3, r3, #8
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a15      	ldr	r2, [pc, #84]	; (8009894 <TIM_OC1_SetConfig+0xd8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_OC1_SetConfig+0x8e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a14      	ldr	r2, [pc, #80]	; (8009898 <TIM_OC1_SetConfig+0xdc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d111      	bne.n	800986e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	40010000 	.word	0x40010000
 8009898:	40010400 	.word	0x40010400

0800989c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0210 	bic.w	r2, r3, #16
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f023 0320 	bic.w	r3, r3, #32
 80098e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a22      	ldr	r2, [pc, #136]	; (8009980 <TIM_OC2_SetConfig+0xe4>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <TIM_OC2_SetConfig+0x68>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a21      	ldr	r2, [pc, #132]	; (8009984 <TIM_OC2_SetConfig+0xe8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d10d      	bne.n	8009920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800991e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a17      	ldr	r2, [pc, #92]	; (8009980 <TIM_OC2_SetConfig+0xe4>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_OC2_SetConfig+0x94>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a16      	ldr	r2, [pc, #88]	; (8009984 <TIM_OC2_SetConfig+0xe8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d113      	bne.n	8009958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800993e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40010000 	.word	0x40010000
 8009984:	40010400 	.word	0x40010400

08009988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a21      	ldr	r2, [pc, #132]	; (8009a68 <TIM_OC3_SetConfig+0xe0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <TIM_OC3_SetConfig+0x66>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a20      	ldr	r2, [pc, #128]	; (8009a6c <TIM_OC3_SetConfig+0xe4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d10d      	bne.n	8009a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a16      	ldr	r2, [pc, #88]	; (8009a68 <TIM_OC3_SetConfig+0xe0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC3_SetConfig+0x92>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a15      	ldr	r2, [pc, #84]	; (8009a6c <TIM_OC3_SetConfig+0xe4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d113      	bne.n	8009a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	621a      	str	r2, [r3, #32]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40010400 	.word	0x40010400

08009a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	031b      	lsls	r3, r3, #12
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a12      	ldr	r2, [pc, #72]	; (8009b14 <TIM_OC4_SetConfig+0xa4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC4_SetConfig+0x68>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a11      	ldr	r2, [pc, #68]	; (8009b18 <TIM_OC4_SetConfig+0xa8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d109      	bne.n	8009aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	019b      	lsls	r3, r3, #6
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	621a      	str	r2, [r3, #32]
}
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40010000 	.word	0x40010000
 8009b18:	40010400 	.word	0x40010400

08009b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	f023 0201 	bic.w	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f023 030a 	bic.w	r3, r3, #10
 8009b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	621a      	str	r2, [r3, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b087      	sub	sp, #28
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f023 0210 	bic.w	r2, r3, #16
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	031b      	lsls	r3, r3, #12
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	621a      	str	r2, [r3, #32]
}
 8009bce:	bf00      	nop
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	f043 0307 	orr.w	r3, r3, #7
 8009bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	609a      	str	r2, [r3, #8]
}
 8009c04:	bf00      	nop
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	021a      	lsls	r2, r3, #8
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	431a      	orrs	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	609a      	str	r2, [r3, #8]
}
 8009c44:	bf00      	nop
 8009c46:	371c      	adds	r7, #28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 031f 	and.w	r3, r3, #31
 8009c62:	2201      	movs	r2, #1
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a1a      	ldr	r2, [r3, #32]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	43db      	mvns	r3, r3
 8009c72:	401a      	ands	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a1a      	ldr	r2, [r3, #32]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	fa01 f303 	lsl.w	r3, r1, r3
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e05a      	b.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a21      	ldr	r2, [pc, #132]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d022      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d00:	d01d      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d018      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a1b      	ldr	r2, [pc, #108]	; (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d013      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a1a      	ldr	r2, [pc, #104]	; (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00e      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d009      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a17      	ldr	r2, [pc, #92]	; (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d004      	beq.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d10c      	bne.n	8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40010000 	.word	0x40010000
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	40000800 	.word	0x40000800
 8009d84:	40000c00 	.word	0x40000c00
 8009d88:	40010400 	.word	0x40010400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40001800 	.word	0x40001800

08009d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e03d      	b.n	8009e2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e03f      	b.n	8009ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7fa fa44 	bl	8004314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2224      	movs	r2, #36	; 0x24
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fe69 	bl	800ab7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695a      	ldr	r2, [r3, #20]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	4613      	mov	r3, r2
 8009f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d11d      	bne.n	8009f50 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_UART_Receive_DMA+0x26>
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e016      	b.n	8009f52 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_UART_Receive_DMA+0x38>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e00f      	b.n	8009f52 <HAL_UART_Receive_DMA+0x58>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	461a      	mov	r2, r3
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 fbb8 	bl	800a6bc <UART_Start_Receive_DMA>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	e000      	b.n	8009f52 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
  }
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b0ba      	sub	sp, #232	; 0xe8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f92:	f003 030f 	and.w	r3, r3, #15
 8009f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x66>
 8009fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fd23 	bl	800aa06 <UART_Receive_IT>
      return;
 8009fc0:	e256      	b.n	800a470 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80de 	beq.w	800a188 <HAL_UART_IRQHandler+0x22c>
 8009fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80d1 	beq.w	800a188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00b      	beq.n	800a00a <HAL_UART_IRQHandler+0xae>
 8009ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a002:	f043 0201 	orr.w	r2, r3, #1
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00e:	f003 0304 	and.w	r3, r3, #4
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <HAL_UART_IRQHandler+0xd2>
 800a016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d005      	beq.n	800a02e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	f043 0202 	orr.w	r2, r3, #2
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a02e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <HAL_UART_IRQHandler+0xf6>
 800a03a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	f043 0204 	orr.w	r2, r3, #4
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <HAL_UART_IRQHandler+0x126>
 800a05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a062:	f003 0320 	and.w	r3, r3, #32
 800a066:	2b00      	cmp	r3, #0
 800a068:	d105      	bne.n	800a076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f043 0208 	orr.w	r2, r3, #8
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 81ed 	beq.w	800a466 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a090:	f003 0320 	and.w	r3, r3, #32
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_UART_IRQHandler+0x14e>
 800a098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fcae 	bl	800aa06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2301      	moveq	r3, #1
 800a0ba:	2300      	movne	r3, #0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x17a>
 800a0ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d04f      	beq.n	800a176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fbb6 	bl	800a848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d141      	bne.n	800a16e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f8:	e853 3f00 	ldrex	r3, [r3]
 800a0fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3314      	adds	r3, #20
 800a112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a11a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1d9      	bne.n	800a0ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d013      	beq.n	800a166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	4a7d      	ldr	r2, [pc, #500]	; (800a338 <HAL_UART_IRQHandler+0x3dc>)
 800a144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fb f9fa 	bl	8005544 <HAL_DMA_Abort_IT>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d016      	beq.n	800a184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a164:	e00e      	b.n	800a184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f99a 	bl	800a4a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16c:	e00a      	b.n	800a184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f996 	bl	800a4a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a174:	e006      	b.n	800a184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f992 	bl	800a4a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a182:	e170      	b.n	800a466 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a184:	bf00      	nop
    return;
 800a186:	e16e      	b.n	800a466 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	f040 814a 	bne.w	800a426 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a196:	f003 0310 	and.w	r3, r3, #16
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 8143 	beq.w	800a426 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 813c 	beq.w	800a426 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60bb      	str	r3, [r7, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	60bb      	str	r3, [r7, #8]
 800a1c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ce:	2b40      	cmp	r3, #64	; 0x40
 800a1d0:	f040 80b4 	bne.w	800a33c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8140 	beq.w	800a46a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	f080 8139 	bcs.w	800a46a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a20a:	f000 8088 	beq.w	800a31e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	330c      	adds	r3, #12
 800a214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a22c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a23a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a23e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1d9      	bne.n	800a20e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3314      	adds	r3, #20
 800a260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a26a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3314      	adds	r3, #20
 800a27a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a27e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e1      	bne.n	800a25a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3314      	adds	r3, #20
 800a29c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e3      	bne.n	800a296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ee:	f023 0310 	bic.w	r3, r3, #16
 800a2f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a300:	65ba      	str	r2, [r7, #88]	; 0x58
 800a302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e3      	bne.n	800a2dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fb f8a3 	bl	8005464 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a326:	b29b      	uxth	r3, r3
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f8c0 	bl	800a4b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a334:	e099      	b.n	800a46a <HAL_UART_IRQHandler+0x50e>
 800a336:	bf00      	nop
 800a338:	0800a90f 	.word	0x0800a90f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a344:	b29b      	uxth	r3, r3
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 808b 	beq.w	800a46e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8086 	beq.w	800a46e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	330c      	adds	r3, #12
 800a368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	330c      	adds	r3, #12
 800a382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a386:	647a      	str	r2, [r7, #68]	; 0x44
 800a388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a38c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e3      	bne.n	800a362 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3314      	adds	r3, #20
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3be:	633a      	str	r2, [r7, #48]	; 0x30
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e3      	bne.n	800a39a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	330c      	adds	r3, #12
 800a400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a404:	61fa      	str	r2, [r7, #28]
 800a406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a408:	69b9      	ldr	r1, [r7, #24]
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	e841 2300 	strex	r3, r2, [r1]
 800a410:	617b      	str	r3, [r7, #20]
   return(result);
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e3      	bne.n	800a3e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f848 	bl	800a4b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a424:	e023      	b.n	800a46e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d009      	beq.n	800a446 <HAL_UART_IRQHandler+0x4ea>
 800a432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa79 	bl	800a936 <UART_Transmit_IT>
    return;
 800a444:	e014      	b.n	800a470 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00e      	beq.n	800a470 <HAL_UART_IRQHandler+0x514>
 800a452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fab9 	bl	800a9d6 <UART_EndTransmit_IT>
    return;
 800a464:	e004      	b.n	800a470 <HAL_UART_IRQHandler+0x514>
    return;
 800a466:	bf00      	nop
 800a468:	e002      	b.n	800a470 <HAL_UART_IRQHandler+0x514>
      return;
 800a46a:	bf00      	nop
 800a46c:	e000      	b.n	800a470 <HAL_UART_IRQHandler+0x514>
      return;
 800a46e:	bf00      	nop
  }
}
 800a470:	37e8      	adds	r7, #232	; 0xe8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop

0800a478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b09c      	sub	sp, #112	; 0x70
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d172      	bne.n	800a5ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a504:	66bb      	str	r3, [r7, #104]	; 0x68
 800a506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	330c      	adds	r3, #12
 800a50c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a50e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a510:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e5      	bne.n	800a4ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3314      	adds	r3, #20
 800a528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a534:	f023 0301 	bic.w	r3, r3, #1
 800a538:	667b      	str	r3, [r7, #100]	; 0x64
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3314      	adds	r3, #20
 800a540:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a542:	647a      	str	r2, [r7, #68]	; 0x44
 800a544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e5      	bne.n	800a522 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3314      	adds	r3, #20
 800a55c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	623b      	str	r3, [r7, #32]
   return(result);
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a56c:	663b      	str	r3, [r7, #96]	; 0x60
 800a56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3314      	adds	r3, #20
 800a574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a576:	633a      	str	r2, [r7, #48]	; 0x30
 800a578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e5      	bne.n	800a556 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58c:	2220      	movs	r2, #32
 800a58e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	2b01      	cmp	r3, #1
 800a598:	d119      	bne.n	800a5ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	330c      	adds	r3, #12
 800a5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0310 	bic.w	r3, r3, #16
 800a5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	330c      	adds	r3, #12
 800a5b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	69b9      	ldr	r1, [r7, #24]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e5      	bne.n	800a59a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d106      	bne.n	800a5e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5de:	f7ff ff69 	bl	800a4b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5e2:	e002      	b.n	800a5ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a5e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5e6:	f7f9 f88b 	bl	8003700 <HAL_UART_RxCpltCallback>
}
 800a5ea:	bf00      	nop
 800a5ec:	3770      	adds	r7, #112	; 0x70
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a604:	2b01      	cmp	r3, #1
 800a606:	d108      	bne.n	800a61a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a60c:	085b      	lsrs	r3, r3, #1
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff ff4e 	bl	800a4b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a618:	e002      	b.n	800a620 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7ff ff36 	bl	800a48c <HAL_UART_RxHalfCpltCallback>
}
 800a620:	bf00      	nop
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a644:	2b80      	cmp	r3, #128	; 0x80
 800a646:	bf0c      	ite	eq
 800a648:	2301      	moveq	r3, #1
 800a64a:	2300      	movne	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b21      	cmp	r3, #33	; 0x21
 800a65a:	d108      	bne.n	800a66e <UART_DMAError+0x46>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2200      	movs	r2, #0
 800a666:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a668:	68b8      	ldr	r0, [r7, #8]
 800a66a:	f000 f8c5 	bl	800a7f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a678:	2b40      	cmp	r3, #64	; 0x40
 800a67a:	bf0c      	ite	eq
 800a67c:	2301      	moveq	r3, #1
 800a67e:	2300      	movne	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b22      	cmp	r3, #34	; 0x22
 800a68e:	d108      	bne.n	800a6a2 <UART_DMAError+0x7a>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d005      	beq.n	800a6a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2200      	movs	r2, #0
 800a69a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a69c:	68b8      	ldr	r0, [r7, #8]
 800a69e:	f000 f8d3 	bl	800a848 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	f043 0210 	orr.w	r2, r3, #16
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6ae:	68b8      	ldr	r0, [r7, #8]
 800a6b0:	f7ff fef6 	bl	800a4a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b098      	sub	sp, #96	; 0x60
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2222      	movs	r2, #34	; 0x22
 800a6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	4a40      	ldr	r2, [pc, #256]	; (800a7ec <UART_Start_Receive_DMA+0x130>)
 800a6ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	4a3f      	ldr	r2, [pc, #252]	; (800a7f0 <UART_Start_Receive_DMA+0x134>)
 800a6f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	4a3e      	ldr	r2, [pc, #248]	; (800a7f4 <UART_Start_Receive_DMA+0x138>)
 800a6fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a700:	2200      	movs	r2, #0
 800a702:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a704:	f107 0308 	add.w	r3, r7, #8
 800a708:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3304      	adds	r3, #4
 800a714:	4619      	mov	r1, r3
 800a716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	f7fa fe4a 	bl	80053b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	613b      	str	r3, [r7, #16]
 800a734:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d019      	beq.n	800a77a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	330c      	adds	r3, #12
 800a74c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a75c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	330c      	adds	r3, #12
 800a764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a766:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a768:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a76c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3314      	adds	r3, #20
 800a780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	f043 0301 	orr.w	r3, r3, #1
 800a790:	657b      	str	r3, [r7, #84]	; 0x54
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3314      	adds	r3, #20
 800a798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a79a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a79c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e5      	bne.n	800a77a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3314      	adds	r3, #20
 800a7b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3314      	adds	r3, #20
 800a7cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a7ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a7d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	6a39      	ldr	r1, [r7, #32]
 800a7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e5      	bne.n	800a7ae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3760      	adds	r7, #96	; 0x60
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	0800a4cd 	.word	0x0800a4cd
 800a7f0:	0800a5f3 	.word	0x0800a5f3
 800a7f4:	0800a629 	.word	0x0800a629

0800a7f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b089      	sub	sp, #36	; 0x24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	330c      	adds	r3, #12
 800a806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	330c      	adds	r3, #12
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	61ba      	str	r2, [r7, #24]
 800a822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6979      	ldr	r1, [r7, #20]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	613b      	str	r3, [r7, #16]
   return(result);
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e5      	bne.n	800a800 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a83c:	bf00      	nop
 800a83e:	3724      	adds	r7, #36	; 0x24
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a848:	b480      	push	{r7}
 800a84a:	b095      	sub	sp, #84	; 0x54
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a866:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	330c      	adds	r3, #12
 800a86e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a870:	643a      	str	r2, [r7, #64]	; 0x40
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e5      	bne.n	800a850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3314      	adds	r3, #20
 800a88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	e853 3f00 	ldrex	r3, [r3]
 800a892:	61fb      	str	r3, [r7, #28]
   return(result);
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f023 0301 	bic.w	r3, r3, #1
 800a89a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ac:	e841 2300 	strex	r3, r2, [r1]
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1e5      	bne.n	800a884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d119      	bne.n	800a8f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f023 0310 	bic.w	r3, r3, #16
 800a8d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8e0:	61ba      	str	r2, [r7, #24]
 800a8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6979      	ldr	r1, [r7, #20]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e5      	bne.n	800a8c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a902:	bf00      	nop
 800a904:	3754      	adds	r7, #84	; 0x54
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff fdb9 	bl	800a4a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a936:	b480      	push	{r7}
 800a938:	b085      	sub	sp, #20
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b21      	cmp	r3, #33	; 0x21
 800a948:	d13e      	bne.n	800a9c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	d114      	bne.n	800a97e <UART_Transmit_IT+0x48>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d110      	bne.n	800a97e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a970:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	1c9a      	adds	r2, r3, #2
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	621a      	str	r2, [r3, #32]
 800a97c:	e008      	b.n	800a990 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	1c59      	adds	r1, r3, #1
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	6211      	str	r1, [r2, #32]
 800a988:	781a      	ldrb	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a994:	b29b      	uxth	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	b29b      	uxth	r3, r3
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	4619      	mov	r1, r3
 800a99e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10f      	bne.n	800a9c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e000      	b.n	800a9ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a9c8:	2302      	movs	r3, #2
  }
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fd3e 	bl	800a478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b08c      	sub	sp, #48	; 0x30
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b22      	cmp	r3, #34	; 0x22
 800aa18:	f040 80ab 	bne.w	800ab72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa24:	d117      	bne.n	800aa56 <UART_Receive_IT+0x50>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d113      	bne.n	800aa56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4e:	1c9a      	adds	r2, r3, #2
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	; 0x28
 800aa54:	e026      	b.n	800aaa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa68:	d007      	beq.n	800aa7a <UART_Receive_IT+0x74>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <UART_Receive_IT+0x82>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	e008      	b.n	800aa9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4619      	mov	r1, r3
 800aab2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d15a      	bne.n	800ab6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f022 0220 	bic.w	r2, r2, #32
 800aac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	695a      	ldr	r2, [r3, #20]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0201 	bic.w	r2, r2, #1
 800aae6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d135      	bne.n	800ab64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	330c      	adds	r3, #12
 800ab04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f023 0310 	bic.w	r3, r3, #16
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab1e:	623a      	str	r2, [r7, #32]
 800ab20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	69f9      	ldr	r1, [r7, #28]
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b10      	cmp	r3, #16
 800ab3e:	d10a      	bne.n	800ab56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fca9 	bl	800a4b4 <HAL_UARTEx_RxEventCallback>
 800ab62:	e002      	b.n	800ab6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f8 fdcb 	bl	8003700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e002      	b.n	800ab74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e000      	b.n	800ab74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ab72:	2302      	movs	r3, #2
  }
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3730      	adds	r7, #48	; 0x30
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab80:	b0c0      	sub	sp, #256	; 0x100
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab98:	68d9      	ldr	r1, [r3, #12]
 800ab9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	ea40 0301 	orr.w	r3, r0, r1
 800aba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	431a      	orrs	r2, r3
 800abb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	431a      	orrs	r2, r3
 800abbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800abc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800abd4:	f021 010c 	bic.w	r1, r1, #12
 800abd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abe2:	430b      	orrs	r3, r1
 800abe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800abf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abf6:	6999      	ldr	r1, [r3, #24]
 800abf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	ea40 0301 	orr.w	r3, r0, r1
 800ac02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	4b8f      	ldr	r3, [pc, #572]	; (800ae48 <UART_SetConfig+0x2cc>)
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d005      	beq.n	800ac1c <UART_SetConfig+0xa0>
 800ac10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b8d      	ldr	r3, [pc, #564]	; (800ae4c <UART_SetConfig+0x2d0>)
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d104      	bne.n	800ac26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac1c:	f7fd ff86 	bl	8008b2c <HAL_RCC_GetPCLK2Freq>
 800ac20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ac24:	e003      	b.n	800ac2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac26:	f7fd ff6d 	bl	8008b04 <HAL_RCC_GetPCLK1Freq>
 800ac2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac38:	f040 810c 	bne.w	800ae54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ac4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	1891      	adds	r1, r2, r2
 800ac54:	65b9      	str	r1, [r7, #88]	; 0x58
 800ac56:	415b      	adcs	r3, r3
 800ac58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ac5e:	4621      	mov	r1, r4
 800ac60:	eb12 0801 	adds.w	r8, r2, r1
 800ac64:	4629      	mov	r1, r5
 800ac66:	eb43 0901 	adc.w	r9, r3, r1
 800ac6a:	f04f 0200 	mov.w	r2, #0
 800ac6e:	f04f 0300 	mov.w	r3, #0
 800ac72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac7e:	4690      	mov	r8, r2
 800ac80:	4699      	mov	r9, r3
 800ac82:	4623      	mov	r3, r4
 800ac84:	eb18 0303 	adds.w	r3, r8, r3
 800ac88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	eb49 0303 	adc.w	r3, r9, r3
 800ac92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aca2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800acaa:	460b      	mov	r3, r1
 800acac:	18db      	adds	r3, r3, r3
 800acae:	653b      	str	r3, [r7, #80]	; 0x50
 800acb0:	4613      	mov	r3, r2
 800acb2:	eb42 0303 	adc.w	r3, r2, r3
 800acb6:	657b      	str	r3, [r7, #84]	; 0x54
 800acb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800acbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800acc0:	f7f5 ffc2 	bl	8000c48 <__aeabi_uldivmod>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4b61      	ldr	r3, [pc, #388]	; (800ae50 <UART_SetConfig+0x2d4>)
 800acca:	fba3 2302 	umull	r2, r3, r3, r2
 800acce:	095b      	lsrs	r3, r3, #5
 800acd0:	011c      	lsls	r4, r3, #4
 800acd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ace0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ace4:	4642      	mov	r2, r8
 800ace6:	464b      	mov	r3, r9
 800ace8:	1891      	adds	r1, r2, r2
 800acea:	64b9      	str	r1, [r7, #72]	; 0x48
 800acec:	415b      	adcs	r3, r3
 800acee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800acf4:	4641      	mov	r1, r8
 800acf6:	eb12 0a01 	adds.w	sl, r2, r1
 800acfa:	4649      	mov	r1, r9
 800acfc:	eb43 0b01 	adc.w	fp, r3, r1
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	f04f 0300 	mov.w	r3, #0
 800ad08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ad0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ad10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad14:	4692      	mov	sl, r2
 800ad16:	469b      	mov	fp, r3
 800ad18:	4643      	mov	r3, r8
 800ad1a:	eb1a 0303 	adds.w	r3, sl, r3
 800ad1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad22:	464b      	mov	r3, r9
 800ad24:	eb4b 0303 	adc.w	r3, fp, r3
 800ad28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ad3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ad40:	460b      	mov	r3, r1
 800ad42:	18db      	adds	r3, r3, r3
 800ad44:	643b      	str	r3, [r7, #64]	; 0x40
 800ad46:	4613      	mov	r3, r2
 800ad48:	eb42 0303 	adc.w	r3, r2, r3
 800ad4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ad52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ad56:	f7f5 ff77 	bl	8000c48 <__aeabi_uldivmod>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4b3b      	ldr	r3, [pc, #236]	; (800ae50 <UART_SetConfig+0x2d4>)
 800ad62:	fba3 2301 	umull	r2, r3, r3, r1
 800ad66:	095b      	lsrs	r3, r3, #5
 800ad68:	2264      	movs	r2, #100	; 0x64
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	1acb      	subs	r3, r1, r3
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ad76:	4b36      	ldr	r3, [pc, #216]	; (800ae50 <UART_SetConfig+0x2d4>)
 800ad78:	fba3 2302 	umull	r2, r3, r3, r2
 800ad7c:	095b      	lsrs	r3, r3, #5
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad84:	441c      	add	r4, r3
 800ad86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad98:	4642      	mov	r2, r8
 800ad9a:	464b      	mov	r3, r9
 800ad9c:	1891      	adds	r1, r2, r2
 800ad9e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ada0:	415b      	adcs	r3, r3
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ada4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ada8:	4641      	mov	r1, r8
 800adaa:	1851      	adds	r1, r2, r1
 800adac:	6339      	str	r1, [r7, #48]	; 0x30
 800adae:	4649      	mov	r1, r9
 800adb0:	414b      	adcs	r3, r1
 800adb2:	637b      	str	r3, [r7, #52]	; 0x34
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	f04f 0300 	mov.w	r3, #0
 800adbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800adc0:	4659      	mov	r1, fp
 800adc2:	00cb      	lsls	r3, r1, #3
 800adc4:	4651      	mov	r1, sl
 800adc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adca:	4651      	mov	r1, sl
 800adcc:	00ca      	lsls	r2, r1, #3
 800adce:	4610      	mov	r0, r2
 800add0:	4619      	mov	r1, r3
 800add2:	4603      	mov	r3, r0
 800add4:	4642      	mov	r2, r8
 800add6:	189b      	adds	r3, r3, r2
 800add8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800addc:	464b      	mov	r3, r9
 800adde:	460a      	mov	r2, r1
 800ade0:	eb42 0303 	adc.w	r3, r2, r3
 800ade4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ade8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800adf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800adf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800adfc:	460b      	mov	r3, r1
 800adfe:	18db      	adds	r3, r3, r3
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae02:	4613      	mov	r3, r2
 800ae04:	eb42 0303 	adc.w	r3, r2, r3
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ae0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ae12:	f7f5 ff19 	bl	8000c48 <__aeabi_uldivmod>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <UART_SetConfig+0x2d4>)
 800ae1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae20:	095b      	lsrs	r3, r3, #5
 800ae22:	2164      	movs	r1, #100	; 0x64
 800ae24:	fb01 f303 	mul.w	r3, r1, r3
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	3332      	adds	r3, #50	; 0x32
 800ae2e:	4a08      	ldr	r2, [pc, #32]	; (800ae50 <UART_SetConfig+0x2d4>)
 800ae30:	fba2 2303 	umull	r2, r3, r2, r3
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	f003 0207 	and.w	r2, r3, #7
 800ae3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4422      	add	r2, r4
 800ae42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae44:	e106      	b.n	800b054 <UART_SetConfig+0x4d8>
 800ae46:	bf00      	nop
 800ae48:	40011000 	.word	0x40011000
 800ae4c:	40011400 	.word	0x40011400
 800ae50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ae66:	4642      	mov	r2, r8
 800ae68:	464b      	mov	r3, r9
 800ae6a:	1891      	adds	r1, r2, r2
 800ae6c:	6239      	str	r1, [r7, #32]
 800ae6e:	415b      	adcs	r3, r3
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
 800ae72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae76:	4641      	mov	r1, r8
 800ae78:	1854      	adds	r4, r2, r1
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	eb43 0501 	adc.w	r5, r3, r1
 800ae80:	f04f 0200 	mov.w	r2, #0
 800ae84:	f04f 0300 	mov.w	r3, #0
 800ae88:	00eb      	lsls	r3, r5, #3
 800ae8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae8e:	00e2      	lsls	r2, r4, #3
 800ae90:	4614      	mov	r4, r2
 800ae92:	461d      	mov	r5, r3
 800ae94:	4643      	mov	r3, r8
 800ae96:	18e3      	adds	r3, r4, r3
 800ae98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	eb45 0303 	adc.w	r3, r5, r3
 800aea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aeb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aec2:	4629      	mov	r1, r5
 800aec4:	008b      	lsls	r3, r1, #2
 800aec6:	4621      	mov	r1, r4
 800aec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aecc:	4621      	mov	r1, r4
 800aece:	008a      	lsls	r2, r1, #2
 800aed0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aed4:	f7f5 feb8 	bl	8000c48 <__aeabi_uldivmod>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4b60      	ldr	r3, [pc, #384]	; (800b060 <UART_SetConfig+0x4e4>)
 800aede:	fba3 2302 	umull	r2, r3, r3, r2
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	011c      	lsls	r4, r3, #4
 800aee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aef8:	4642      	mov	r2, r8
 800aefa:	464b      	mov	r3, r9
 800aefc:	1891      	adds	r1, r2, r2
 800aefe:	61b9      	str	r1, [r7, #24]
 800af00:	415b      	adcs	r3, r3
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af08:	4641      	mov	r1, r8
 800af0a:	1851      	adds	r1, r2, r1
 800af0c:	6139      	str	r1, [r7, #16]
 800af0e:	4649      	mov	r1, r9
 800af10:	414b      	adcs	r3, r1
 800af12:	617b      	str	r3, [r7, #20]
 800af14:	f04f 0200 	mov.w	r2, #0
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af20:	4659      	mov	r1, fp
 800af22:	00cb      	lsls	r3, r1, #3
 800af24:	4651      	mov	r1, sl
 800af26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af2a:	4651      	mov	r1, sl
 800af2c:	00ca      	lsls	r2, r1, #3
 800af2e:	4610      	mov	r0, r2
 800af30:	4619      	mov	r1, r3
 800af32:	4603      	mov	r3, r0
 800af34:	4642      	mov	r2, r8
 800af36:	189b      	adds	r3, r3, r2
 800af38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af3c:	464b      	mov	r3, r9
 800af3e:	460a      	mov	r2, r1
 800af40:	eb42 0303 	adc.w	r3, r2, r3
 800af44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	67bb      	str	r3, [r7, #120]	; 0x78
 800af52:	67fa      	str	r2, [r7, #124]	; 0x7c
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	f04f 0300 	mov.w	r3, #0
 800af5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800af60:	4649      	mov	r1, r9
 800af62:	008b      	lsls	r3, r1, #2
 800af64:	4641      	mov	r1, r8
 800af66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af6a:	4641      	mov	r1, r8
 800af6c:	008a      	lsls	r2, r1, #2
 800af6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800af72:	f7f5 fe69 	bl	8000c48 <__aeabi_uldivmod>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	4b38      	ldr	r3, [pc, #224]	; (800b060 <UART_SetConfig+0x4e4>)
 800af7e:	fba3 2301 	umull	r2, r3, r3, r1
 800af82:	095b      	lsrs	r3, r3, #5
 800af84:	2264      	movs	r2, #100	; 0x64
 800af86:	fb02 f303 	mul.w	r3, r2, r3
 800af8a:	1acb      	subs	r3, r1, r3
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	3332      	adds	r3, #50	; 0x32
 800af90:	4a33      	ldr	r2, [pc, #204]	; (800b060 <UART_SetConfig+0x4e4>)
 800af92:	fba2 2303 	umull	r2, r3, r2, r3
 800af96:	095b      	lsrs	r3, r3, #5
 800af98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af9c:	441c      	add	r4, r3
 800af9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afa2:	2200      	movs	r2, #0
 800afa4:	673b      	str	r3, [r7, #112]	; 0x70
 800afa6:	677a      	str	r2, [r7, #116]	; 0x74
 800afa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	1891      	adds	r1, r2, r2
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	415b      	adcs	r3, r3
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afbc:	4641      	mov	r1, r8
 800afbe:	1851      	adds	r1, r2, r1
 800afc0:	6039      	str	r1, [r7, #0]
 800afc2:	4649      	mov	r1, r9
 800afc4:	414b      	adcs	r3, r1
 800afc6:	607b      	str	r3, [r7, #4]
 800afc8:	f04f 0200 	mov.w	r2, #0
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800afd4:	4659      	mov	r1, fp
 800afd6:	00cb      	lsls	r3, r1, #3
 800afd8:	4651      	mov	r1, sl
 800afda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afde:	4651      	mov	r1, sl
 800afe0:	00ca      	lsls	r2, r1, #3
 800afe2:	4610      	mov	r0, r2
 800afe4:	4619      	mov	r1, r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	4642      	mov	r2, r8
 800afea:	189b      	adds	r3, r3, r2
 800afec:	66bb      	str	r3, [r7, #104]	; 0x68
 800afee:	464b      	mov	r3, r9
 800aff0:	460a      	mov	r2, r1
 800aff2:	eb42 0303 	adc.w	r3, r2, r3
 800aff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	663b      	str	r3, [r7, #96]	; 0x60
 800b002:	667a      	str	r2, [r7, #100]	; 0x64
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b010:	4649      	mov	r1, r9
 800b012:	008b      	lsls	r3, r1, #2
 800b014:	4641      	mov	r1, r8
 800b016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b01a:	4641      	mov	r1, r8
 800b01c:	008a      	lsls	r2, r1, #2
 800b01e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b022:	f7f5 fe11 	bl	8000c48 <__aeabi_uldivmod>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <UART_SetConfig+0x4e4>)
 800b02c:	fba3 1302 	umull	r1, r3, r3, r2
 800b030:	095b      	lsrs	r3, r3, #5
 800b032:	2164      	movs	r1, #100	; 0x64
 800b034:	fb01 f303 	mul.w	r3, r1, r3
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	3332      	adds	r3, #50	; 0x32
 800b03e:	4a08      	ldr	r2, [pc, #32]	; (800b060 <UART_SetConfig+0x4e4>)
 800b040:	fba2 2303 	umull	r2, r3, r2, r3
 800b044:	095b      	lsrs	r3, r3, #5
 800b046:	f003 020f 	and.w	r2, r3, #15
 800b04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4422      	add	r2, r4
 800b052:	609a      	str	r2, [r3, #8]
}
 800b054:	bf00      	nop
 800b056:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b05a:	46bd      	mov	sp, r7
 800b05c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b060:	51eb851f 	.word	0x51eb851f

0800b064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b064:	b084      	sub	sp, #16
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	f107 001c 	add.w	r0, r7, #28
 800b072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d122      	bne.n	800b0c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d105      	bne.n	800b0b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f001 fbee 	bl	800c898 <USB_CoreReset>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]
 800b0c0:	e01a      	b.n	800b0f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f001 fbe2 	bl	800c898 <USB_CoreReset>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38
 800b0ea:	e005      	b.n	800b0f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d10b      	bne.n	800b116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f043 0206 	orr.w	r2, r3, #6
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f043 0220 	orr.w	r2, r3, #32
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b122:	b004      	add	sp, #16
 800b124:	4770      	bx	lr
	...

0800b128 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d165      	bne.n	800b208 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	4a41      	ldr	r2, [pc, #260]	; (800b244 <USB_SetTurnaroundTime+0x11c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d906      	bls.n	800b152 <USB_SetTurnaroundTime+0x2a>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4a40      	ldr	r2, [pc, #256]	; (800b248 <USB_SetTurnaroundTime+0x120>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d202      	bcs.n	800b152 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b14c:	230f      	movs	r3, #15
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e062      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	4a3c      	ldr	r2, [pc, #240]	; (800b248 <USB_SetTurnaroundTime+0x120>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d306      	bcc.n	800b168 <USB_SetTurnaroundTime+0x40>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	4a3b      	ldr	r2, [pc, #236]	; (800b24c <USB_SetTurnaroundTime+0x124>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d202      	bcs.n	800b168 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b162:	230e      	movs	r3, #14
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e057      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	4a38      	ldr	r2, [pc, #224]	; (800b24c <USB_SetTurnaroundTime+0x124>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d306      	bcc.n	800b17e <USB_SetTurnaroundTime+0x56>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	4a37      	ldr	r2, [pc, #220]	; (800b250 <USB_SetTurnaroundTime+0x128>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d202      	bcs.n	800b17e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b178:	230d      	movs	r3, #13
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	e04c      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	4a33      	ldr	r2, [pc, #204]	; (800b250 <USB_SetTurnaroundTime+0x128>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d306      	bcc.n	800b194 <USB_SetTurnaroundTime+0x6c>
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	4a32      	ldr	r2, [pc, #200]	; (800b254 <USB_SetTurnaroundTime+0x12c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d802      	bhi.n	800b194 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b18e:	230c      	movs	r3, #12
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	e041      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	4a2f      	ldr	r2, [pc, #188]	; (800b254 <USB_SetTurnaroundTime+0x12c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d906      	bls.n	800b1aa <USB_SetTurnaroundTime+0x82>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	4a2e      	ldr	r2, [pc, #184]	; (800b258 <USB_SetTurnaroundTime+0x130>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d802      	bhi.n	800b1aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b1a4:	230b      	movs	r3, #11
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e036      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	4a2a      	ldr	r2, [pc, #168]	; (800b258 <USB_SetTurnaroundTime+0x130>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d906      	bls.n	800b1c0 <USB_SetTurnaroundTime+0x98>
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	4a29      	ldr	r2, [pc, #164]	; (800b25c <USB_SetTurnaroundTime+0x134>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d802      	bhi.n	800b1c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b1ba:	230a      	movs	r3, #10
 800b1bc:	617b      	str	r3, [r7, #20]
 800b1be:	e02b      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4a26      	ldr	r2, [pc, #152]	; (800b25c <USB_SetTurnaroundTime+0x134>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d906      	bls.n	800b1d6 <USB_SetTurnaroundTime+0xae>
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	4a25      	ldr	r2, [pc, #148]	; (800b260 <USB_SetTurnaroundTime+0x138>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d202      	bcs.n	800b1d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b1d0:	2309      	movs	r3, #9
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e020      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4a21      	ldr	r2, [pc, #132]	; (800b260 <USB_SetTurnaroundTime+0x138>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d306      	bcc.n	800b1ec <USB_SetTurnaroundTime+0xc4>
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	4a20      	ldr	r2, [pc, #128]	; (800b264 <USB_SetTurnaroundTime+0x13c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d802      	bhi.n	800b1ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	617b      	str	r3, [r7, #20]
 800b1ea:	e015      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	4a1d      	ldr	r2, [pc, #116]	; (800b264 <USB_SetTurnaroundTime+0x13c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d906      	bls.n	800b202 <USB_SetTurnaroundTime+0xda>
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	4a1c      	ldr	r2, [pc, #112]	; (800b268 <USB_SetTurnaroundTime+0x140>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d202      	bcs.n	800b202 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b1fc:	2307      	movs	r3, #7
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e00a      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b202:	2306      	movs	r3, #6
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	e007      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b20e:	2309      	movs	r3, #9
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	e001      	b.n	800b218 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b214:	2309      	movs	r3, #9
 800b216:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	029b      	lsls	r3, r3, #10
 800b22c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b230:	431a      	orrs	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	00d8acbf 	.word	0x00d8acbf
 800b248:	00e4e1c0 	.word	0x00e4e1c0
 800b24c:	00f42400 	.word	0x00f42400
 800b250:	01067380 	.word	0x01067380
 800b254:	011a499f 	.word	0x011a499f
 800b258:	01312cff 	.word	0x01312cff
 800b25c:	014ca43f 	.word	0x014ca43f
 800b260:	016e3600 	.word	0x016e3600
 800b264:	01a6ab1f 	.word	0x01a6ab1f
 800b268:	01e84800 	.word	0x01e84800

0800b26c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f043 0201 	orr.w	r2, r3, #1
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f023 0201 	bic.w	r2, r3, #1
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d115      	bne.n	800b2fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2de:	2001      	movs	r0, #1
 800b2e0:	f7f9 fa7c 	bl	80047dc <HAL_Delay>
      ms++;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fa45 	bl	800c77a <USB_GetMode>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d01e      	beq.n	800b334 <USB_SetCurrentMode+0x84>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b31      	cmp	r3, #49	; 0x31
 800b2fa:	d9f0      	bls.n	800b2de <USB_SetCurrentMode+0x2e>
 800b2fc:	e01a      	b.n	800b334 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2fe:	78fb      	ldrb	r3, [r7, #3]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d115      	bne.n	800b330 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b310:	2001      	movs	r0, #1
 800b312:	f7f9 fa63 	bl	80047dc <HAL_Delay>
      ms++;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fa2c 	bl	800c77a <USB_GetMode>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <USB_SetCurrentMode+0x84>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b31      	cmp	r3, #49	; 0x31
 800b32c:	d9f0      	bls.n	800b310 <USB_SetCurrentMode+0x60>
 800b32e:	e001      	b.n	800b334 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e005      	b.n	800b340 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b32      	cmp	r3, #50	; 0x32
 800b338:	d101      	bne.n	800b33e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e000      	b.n	800b340 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b348:	b084      	sub	sp, #16
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
 800b366:	e009      	b.n	800b37c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3340      	adds	r3, #64	; 0x40
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	2200      	movs	r2, #0
 800b374:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2b0e      	cmp	r3, #14
 800b380:	d9f2      	bls.n	800b368 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d11c      	bne.n	800b3c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b396:	f043 0302 	orr.w	r3, r3, #2
 800b39a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
 800b3c0:	e00b      	b.n	800b3da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	680b      	ldr	r3, [r1, #0]
 800b3f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d10c      	bne.n	800b41a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d104      	bne.n	800b410 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b406:	2100      	movs	r1, #0
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f965 	bl	800b6d8 <USB_SetDevSpeed>
 800b40e:	e008      	b.n	800b422 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b410:	2101      	movs	r1, #1
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f960 	bl	800b6d8 <USB_SetDevSpeed>
 800b418:	e003      	b.n	800b422 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b41a:	2103      	movs	r1, #3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f95b 	bl	800b6d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b422:	2110      	movs	r1, #16
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f8f3 	bl	800b610 <USB_FlushTxFifo>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f91f 	bl	800b678 <USB_FlushRxFifo>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	461a      	mov	r2, r3
 800b44c:	2300      	movs	r3, #0
 800b44e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b456:	461a      	mov	r2, r3
 800b458:	2300      	movs	r3, #0
 800b45a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b462:	461a      	mov	r2, r3
 800b464:	2300      	movs	r3, #0
 800b466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	e043      	b.n	800b4f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b484:	d118      	bne.n	800b4b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	461a      	mov	r2, r3
 800b49a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	e013      	b.n	800b4ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	015a      	lsls	r2, r3, #5
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e008      	b.n	800b4ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	015a      	lsls	r2, r3, #5
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d3b7      	bcc.n	800b46e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	e043      	b.n	800b58c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b51a:	d118      	bne.n	800b54e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	461a      	mov	r2, r3
 800b530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	e013      	b.n	800b560 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	461a      	mov	r2, r3
 800b546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	e008      	b.n	800b560 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b55a:	461a      	mov	r2, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	461a      	mov	r2, r3
 800b56e:	2300      	movs	r3, #0
 800b570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	015a      	lsls	r2, r3, #5
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4413      	add	r3, r2
 800b57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57e:	461a      	mov	r2, r3
 800b580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	429a      	cmp	r2, r3
 800b592:	d3b7      	bcc.n	800b504 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b5b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d105      	bne.n	800b5c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	f043 0210 	orr.w	r2, r3, #16
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699a      	ldr	r2, [r3, #24]
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <USB_DevInit+0x2c4>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f043 0208 	orr.w	r2, r3, #8
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d107      	bne.n	800b5fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f4:	f043 0304 	orr.w	r3, r3, #4
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b608:	b004      	add	sp, #16
 800b60a:	4770      	bx	lr
 800b60c:	803c3800 	.word	0x803c3800

0800b610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a13      	ldr	r2, [pc, #76]	; (800b674 <USB_FlushTxFifo+0x64>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d901      	bls.n	800b630 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e01b      	b.n	800b668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	daf2      	bge.n	800b61e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	019b      	lsls	r3, r3, #6
 800b640:	f043 0220 	orr.w	r2, r3, #32
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	4a08      	ldr	r2, [pc, #32]	; (800b674 <USB_FlushTxFifo+0x64>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d901      	bls.n	800b65a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e006      	b.n	800b668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	f003 0320 	and.w	r3, r3, #32
 800b662:	2b20      	cmp	r3, #32
 800b664:	d0f0      	beq.n	800b648 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	00030d40 	.word	0x00030d40

0800b678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4a11      	ldr	r2, [pc, #68]	; (800b6d4 <USB_FlushRxFifo+0x5c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d901      	bls.n	800b696 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e018      	b.n	800b6c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	daf2      	bge.n	800b684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4a08      	ldr	r2, [pc, #32]	; (800b6d4 <USB_FlushRxFifo+0x5c>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d901      	bls.n	800b6ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e006      	b.n	800b6c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	f003 0310 	and.w	r3, r3, #16
 800b6c2:	2b10      	cmp	r3, #16
 800b6c4:	d0f0      	beq.n	800b6a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	00030d40 	.word	0x00030d40

0800b6d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	68f9      	ldr	r1, [r7, #12]
 800b6f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b087      	sub	sp, #28
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f003 0306 	and.w	r3, r3, #6
 800b722:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
 800b72e:	e00a      	b.n	800b746 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b02      	cmp	r3, #2
 800b734:	d002      	beq.n	800b73c <USB_GetDevSpeed+0x32>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b06      	cmp	r3, #6
 800b73a:	d102      	bne.n	800b742 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b73c:	2302      	movs	r3, #2
 800b73e:	75fb      	strb	r3, [r7, #23]
 800b740:	e001      	b.n	800b746 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b742:	230f      	movs	r3, #15
 800b744:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	371c      	adds	r7, #28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	785b      	ldrb	r3, [r3, #1]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d13a      	bne.n	800b7e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b776:	69da      	ldr	r2, [r3, #28]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	2101      	movs	r1, #1
 800b782:	fa01 f303 	lsl.w	r3, r1, r3
 800b786:	b29b      	uxth	r3, r3
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b78e:	4313      	orrs	r3, r2
 800b790:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d155      	bne.n	800b854 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	791b      	ldrb	r3, [r3, #4]
 800b7c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b7c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	059b      	lsls	r3, r3, #22
 800b7ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	0151      	lsls	r1, r2, #5
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	e036      	b.n	800b854 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ec:	69da      	ldr	r2, [r3, #28]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fc:	041b      	lsls	r3, r3, #16
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b804:	4313      	orrs	r3, r2
 800b806:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d11a      	bne.n	800b854 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	015a      	lsls	r2, r3, #5
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	4413      	add	r3, r2
 800b826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	791b      	ldrb	r3, [r3, #4]
 800b838:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b83a:	430b      	orrs	r3, r1
 800b83c:	4313      	orrs	r3, r2
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	0151      	lsls	r1, r2, #5
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	440a      	add	r2, r1
 800b846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b84a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b84e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b852:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	785b      	ldrb	r3, [r3, #1]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d161      	bne.n	800b944 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b896:	d11f      	bne.n	800b8d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	0151      	lsls	r1, r2, #5
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	440a      	add	r2, r1
 800b8ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	015a      	lsls	r2, r3, #5
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	0151      	lsls	r1, r2, #5
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	440a      	add	r2, r1
 800b8ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	f003 030f 	and.w	r3, r3, #15
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	43db      	mvns	r3, r3
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b902:	69da      	ldr	r2, [r3, #28]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f003 030f 	and.w	r3, r3, #15
 800b90c:	2101      	movs	r1, #1
 800b90e:	fa01 f303 	lsl.w	r3, r1, r3
 800b912:	b29b      	uxth	r3, r3
 800b914:	43db      	mvns	r3, r3
 800b916:	68f9      	ldr	r1, [r7, #12]
 800b918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b91c:	4013      	ands	r3, r2
 800b91e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	0159      	lsls	r1, r3, #5
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	440b      	add	r3, r1
 800b936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93a:	4619      	mov	r1, r3
 800b93c:	4b35      	ldr	r3, [pc, #212]	; (800ba14 <USB_DeactivateEndpoint+0x1b0>)
 800b93e:	4013      	ands	r3, r2
 800b940:	600b      	str	r3, [r1, #0]
 800b942:	e060      	b.n	800ba06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b95a:	d11f      	bne.n	800b99c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	0151      	lsls	r1, r2, #5
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	440a      	add	r2, r1
 800b972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b97a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	440a      	add	r2, r1
 800b992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b99a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	f003 030f 	and.w	r3, r3, #15
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	43db      	mvns	r3, r3
 800b9b6:	68f9      	ldr	r1, [r7, #12]
 800b9b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9bc:	4013      	ands	r3, r2
 800b9be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c6:	69da      	ldr	r2, [r3, #28]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d6:	041b      	lsls	r3, r3, #16
 800b9d8:	43db      	mvns	r3, r3
 800b9da:	68f9      	ldr	r1, [r7, #12]
 800b9dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	0159      	lsls	r1, r3, #5
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	440b      	add	r3, r1
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <USB_DeactivateEndpoint+0x1b4>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	ec337800 	.word	0xec337800
 800ba18:	eff37800 	.word	0xeff37800

0800ba1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	; 0x28
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	4613      	mov	r3, r2
 800ba28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	f040 815c 	bne.w	800bcf6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d132      	bne.n	800baac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	0151      	lsls	r1, r2, #5
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	440a      	add	r2, r1
 800ba80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	015a      	lsls	r2, r3, #5
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	4413      	add	r3, r2
 800ba92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	69ba      	ldr	r2, [r7, #24]
 800ba9a:	0151      	lsls	r1, r2, #5
 800ba9c:	69fa      	ldr	r2, [r7, #28]
 800ba9e:	440a      	add	r2, r1
 800baa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa4:	0cdb      	lsrs	r3, r3, #19
 800baa6:	04db      	lsls	r3, r3, #19
 800baa8:	6113      	str	r3, [r2, #16]
 800baaa:	e074      	b.n	800bb96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	69fa      	ldr	r2, [r7, #28]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac6:	0cdb      	lsrs	r3, r3, #19
 800bac8:	04db      	lsls	r3, r3, #19
 800baca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	0151      	lsls	r1, r2, #5
 800bade:	69fa      	ldr	r2, [r7, #28]
 800bae0:	440a      	add	r2, r1
 800bae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800baea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800baee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6999      	ldr	r1, [r3, #24]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	440b      	add	r3, r1
 800bb08:	1e59      	subs	r1, r3, #1
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bb14:	4b9d      	ldr	r3, [pc, #628]	; (800bd8c <USB_EPStartXfer+0x370>)
 800bb16:	400b      	ands	r3, r1
 800bb18:	69b9      	ldr	r1, [r7, #24]
 800bb1a:	0148      	lsls	r0, r1, #5
 800bb1c:	69f9      	ldr	r1, [r7, #28]
 800bb1e:	4401      	add	r1, r0
 800bb20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb24:	4313      	orrs	r3, r2
 800bb26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb34:	691a      	ldr	r2, [r3, #16]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb3e:	69b9      	ldr	r1, [r7, #24]
 800bb40:	0148      	lsls	r0, r1, #5
 800bb42:	69f9      	ldr	r1, [r7, #28]
 800bb44:	4401      	add	r1, r0
 800bb46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d11f      	bne.n	800bb96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	0151      	lsls	r1, r2, #5
 800bb68:	69fa      	ldr	r2, [r7, #28]
 800bb6a:	440a      	add	r2, r1
 800bb6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bb74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	0151      	lsls	r1, r2, #5
 800bb88:	69fa      	ldr	r2, [r7, #28]
 800bb8a:	440a      	add	r2, r1
 800bb8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d14b      	bne.n	800bc34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	791b      	ldrb	r3, [r3, #4]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d128      	bne.n	800bc12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d110      	bne.n	800bbf2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	0151      	lsls	r1, r2, #5
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	440a      	add	r2, r1
 800bbe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	e00f      	b.n	800bc12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	69fa      	ldr	r2, [r7, #28]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69ba      	ldr	r2, [r7, #24]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	e133      	b.n	800be9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	0151      	lsls	r1, r2, #5
 800bc46:	69fa      	ldr	r2, [r7, #28]
 800bc48:	440a      	add	r2, r1
 800bc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	791b      	ldrb	r3, [r3, #4]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d015      	beq.n	800bc88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 811b 	beq.w	800be9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	2101      	movs	r1, #1
 800bc78:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7c:	69f9      	ldr	r1, [r7, #28]
 800bc7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc82:	4313      	orrs	r3, r2
 800bc84:	634b      	str	r3, [r1, #52]	; 0x34
 800bc86:	e109      	b.n	800be9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d110      	bne.n	800bcba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	0151      	lsls	r1, r2, #5
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	440a      	add	r2, r1
 800bcae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	e00f      	b.n	800bcda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	015a      	lsls	r2, r3, #5
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	69ba      	ldr	r2, [r7, #24]
 800bcca:	0151      	lsls	r1, r2, #5
 800bccc:	69fa      	ldr	r2, [r7, #28]
 800bcce:	440a      	add	r2, r1
 800bcd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6919      	ldr	r1, [r3, #16]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	781a      	ldrb	r2, [r3, #0]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	b298      	uxth	r0, r3
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4603      	mov	r3, r0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 fade 	bl	800c2b0 <USB_WritePacket>
 800bcf4:	e0d2      	b.n	800be9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	0151      	lsls	r1, r2, #5
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	440a      	add	r2, r1
 800bd0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd10:	0cdb      	lsrs	r3, r3, #19
 800bd12:	04db      	lsls	r3, r3, #19
 800bd14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	69ba      	ldr	r2, [r7, #24]
 800bd26:	0151      	lsls	r1, r2, #5
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	440a      	add	r2, r1
 800bd2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d126      	bne.n	800bd90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4e:	691a      	ldr	r2, [r3, #16]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd58:	69b9      	ldr	r1, [r7, #24]
 800bd5a:	0148      	lsls	r0, r1, #5
 800bd5c:	69f9      	ldr	r1, [r7, #28]
 800bd5e:	4401      	add	r1, r0
 800bd60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd64:	4313      	orrs	r3, r2
 800bd66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	0151      	lsls	r1, r2, #5
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd86:	6113      	str	r3, [r2, #16]
 800bd88:	e03a      	b.n	800be00 <USB_EPStartXfer+0x3e4>
 800bd8a:	bf00      	nop
 800bd8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	4413      	add	r3, r2
 800bd9a:	1e5a      	subs	r2, r3, #1
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	8afa      	ldrh	r2, [r7, #22]
 800bdac:	fb03 f202 	mul.w	r2, r3, r2
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	691a      	ldr	r2, [r3, #16]
 800bdc2:	8afb      	ldrh	r3, [r7, #22]
 800bdc4:	04d9      	lsls	r1, r3, #19
 800bdc6:	4b38      	ldr	r3, [pc, #224]	; (800bea8 <USB_EPStartXfer+0x48c>)
 800bdc8:	400b      	ands	r3, r1
 800bdca:	69b9      	ldr	r1, [r7, #24]
 800bdcc:	0148      	lsls	r0, r1, #5
 800bdce:	69f9      	ldr	r1, [r7, #28]
 800bdd0:	4401      	add	r1, r0
 800bdd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	015a      	lsls	r2, r3, #5
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	4413      	add	r3, r2
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	691a      	ldr	r2, [r3, #16]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf0:	69b9      	ldr	r1, [r7, #24]
 800bdf2:	0148      	lsls	r0, r1, #5
 800bdf4:	69f9      	ldr	r1, [r7, #28]
 800bdf6:	4401      	add	r1, r0
 800bdf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d10d      	bne.n	800be22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6919      	ldr	r1, [r3, #16]
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	4413      	add	r3, r2
 800be1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1e:	460a      	mov	r2, r1
 800be20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	791b      	ldrb	r3, [r3, #4]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d128      	bne.n	800be7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be36:	2b00      	cmp	r3, #0
 800be38:	d110      	bne.n	800be5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	0151      	lsls	r1, r2, #5
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	440a      	add	r2, r1
 800be50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	e00f      	b.n	800be7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69ba      	ldr	r2, [r7, #24]
 800be6c:	0151      	lsls	r1, r2, #5
 800be6e:	69fa      	ldr	r2, [r7, #28]
 800be70:	440a      	add	r2, r1
 800be72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	0151      	lsls	r1, r2, #5
 800be8e:	69fa      	ldr	r2, [r7, #28]
 800be90:	440a      	add	r2, r1
 800be92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3720      	adds	r7, #32
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	1ff80000 	.word	0x1ff80000

0800beac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	f040 80ce 	bne.w	800c06a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d132      	bne.n	800bf3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	015a      	lsls	r2, r3, #5
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	4413      	add	r3, r2
 800bede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	0151      	lsls	r1, r2, #5
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	440a      	add	r2, r1
 800beec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bef4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	015a      	lsls	r2, r3, #5
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	4413      	add	r3, r2
 800bf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	0151      	lsls	r1, r2, #5
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	440a      	add	r2, r1
 800bf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	0151      	lsls	r1, r2, #5
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	440a      	add	r2, r1
 800bf30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf34:	0cdb      	lsrs	r3, r3, #19
 800bf36:	04db      	lsls	r3, r3, #19
 800bf38:	6113      	str	r3, [r2, #16]
 800bf3a:	e04e      	b.n	800bfda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	0151      	lsls	r1, r2, #5
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	440a      	add	r2, r1
 800bf52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf56:	0cdb      	lsrs	r3, r3, #19
 800bf58:	04db      	lsls	r3, r3, #19
 800bf5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d903      	bls.n	800bf94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	693a      	ldr	r2, [r7, #16]
 800bfa4:	0151      	lsls	r1, r2, #5
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	015a      	lsls	r2, r3, #5
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	4413      	add	r3, r2
 800bfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc0:	691a      	ldr	r2, [r3, #16]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfca:	6939      	ldr	r1, [r7, #16]
 800bfcc:	0148      	lsls	r0, r1, #5
 800bfce:	6979      	ldr	r1, [r7, #20]
 800bfd0:	4401      	add	r1, r0
 800bfd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bfda:	79fb      	ldrb	r3, [r7, #7]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d11e      	bne.n	800c01e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d009      	beq.n	800bffc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff4:	461a      	mov	r2, r3
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	440a      	add	r2, r1
 800c012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	e097      	b.n	800c14e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	0151      	lsls	r1, r2, #5
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	440a      	add	r2, r1
 800c034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c038:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c03c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 8083 	beq.w	800c14e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f003 030f 	and.w	r3, r3, #15
 800c058:	2101      	movs	r1, #1
 800c05a:	fa01 f303 	lsl.w	r3, r1, r3
 800c05e:	6979      	ldr	r1, [r7, #20]
 800c060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c064:	4313      	orrs	r3, r2
 800c066:	634b      	str	r3, [r1, #52]	; 0x34
 800c068:	e071      	b.n	800c14e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	015a      	lsls	r2, r3, #5
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	4413      	add	r3, r2
 800c072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	0151      	lsls	r1, r2, #5
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	440a      	add	r2, r1
 800c080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c084:	0cdb      	lsrs	r3, r3, #19
 800c086:	04db      	lsls	r3, r3, #19
 800c088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	68da      	ldr	r2, [r3, #12]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	015a      	lsls	r2, r3, #5
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	0151      	lsls	r1, r2, #5
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	440a      	add	r2, r1
 800c0dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0fc:	6939      	ldr	r1, [r7, #16]
 800c0fe:	0148      	lsls	r0, r1, #5
 800c100:	6979      	ldr	r1, [r7, #20]
 800c102:	4401      	add	r1, r0
 800c104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c108:	4313      	orrs	r3, r2
 800c10a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d10d      	bne.n	800c12e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d009      	beq.n	800c12e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	6919      	ldr	r1, [r3, #16]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	4413      	add	r3, r2
 800c126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12a:	460a      	mov	r2, r1
 800c12c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	0151      	lsls	r1, r2, #5
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	440a      	add	r2, r1
 800c144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c14c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d14a      	bne.n	800c210 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c18e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c192:	f040 8086 	bne.w	800c2a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	7812      	ldrb	r2, [r2, #0]
 800c1aa:	0151      	lsls	r1, r2, #5
 800c1ac:	693a      	ldr	r2, [r7, #16]
 800c1ae:	440a      	add	r2, r1
 800c1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	7812      	ldrb	r2, [r2, #0]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d902      	bls.n	800c1f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	75fb      	strb	r3, [r7, #23]
          break;
 800c1f2:	e056      	b.n	800c2a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c20c:	d0e7      	beq.n	800c1de <USB_EPStopXfer+0x82>
 800c20e:	e048      	b.n	800c2a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c228:	d13b      	bne.n	800c2a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	015a      	lsls	r2, r3, #5
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	440a      	add	r2, r1
 800c244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c248:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c24c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	7812      	ldrb	r2, [r2, #0]
 800c262:	0151      	lsls	r1, r2, #5
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	440a      	add	r2, r1
 800c268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c26c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c270:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3301      	adds	r3, #1
 800c276:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c27e:	4293      	cmp	r3, r2
 800c280:	d902      	bls.n	800c288 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	75fb      	strb	r3, [r7, #23]
          break;
 800c286:	e00c      	b.n	800c2a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c29c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2a0:	d0e7      	beq.n	800c272 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	371c      	adds	r7, #28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b089      	sub	sp, #36	; 0x24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	461a      	mov	r2, r3
 800c2be:	460b      	mov	r3, r1
 800c2c0:	71fb      	strb	r3, [r7, #7]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c2ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d123      	bne.n	800c31e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c2d6:	88bb      	ldrh	r3, [r7, #4]
 800c2d8:	3303      	adds	r3, #3
 800c2da:	089b      	lsrs	r3, r3, #2
 800c2dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61bb      	str	r3, [r7, #24]
 800c2e2:	e018      	b.n	800c316 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c2e4:	79fb      	ldrb	r3, [r7, #7]
 800c2e6:	031a      	lsls	r2, r3, #12
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	3301      	adds	r3, #1
 800c302:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	3301      	adds	r3, #1
 800c308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	3301      	adds	r3, #1
 800c30e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	3301      	adds	r3, #1
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d3e2      	bcc.n	800c2e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3724      	adds	r7, #36	; 0x24
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b08b      	sub	sp, #44	; 0x2c
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	089b      	lsrs	r3, r3, #2
 800c346:	b29b      	uxth	r3, r3
 800c348:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c352:	2300      	movs	r3, #0
 800c354:	623b      	str	r3, [r7, #32]
 800c356:	e014      	b.n	800c382 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	601a      	str	r2, [r3, #0]
    pDest++;
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	3301      	adds	r3, #1
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	3301      	adds	r3, #1
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	3301      	adds	r3, #1
 800c374:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	3301      	adds	r3, #1
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	3301      	adds	r3, #1
 800c380:	623b      	str	r3, [r7, #32]
 800c382:	6a3a      	ldr	r2, [r7, #32]
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	429a      	cmp	r2, r3
 800c388:	d3e6      	bcc.n	800c358 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c38a:	8bfb      	ldrh	r3, [r7, #30]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d01e      	beq.n	800c3ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39a:	461a      	mov	r2, r3
 800c39c:	f107 0310 	add.w	r3, r7, #16
 800c3a0:	6812      	ldr	r2, [r2, #0]
 800c3a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c3a4:	693a      	ldr	r2, [r7, #16]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	701a      	strb	r2, [r3, #0]
      i++;
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	623b      	str	r3, [r7, #32]
      pDest++;
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3be:	3301      	adds	r3, #1
 800c3c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c3c2:	8bfb      	ldrh	r3, [r7, #30]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c3c8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1ea      	bne.n	800c3a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	372c      	adds	r7, #44	; 0x2c
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d12c      	bne.n	800c452 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	db12      	blt.n	800c430 <USB_EPSetStall+0x54>
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00f      	beq.n	800c430 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	015a      	lsls	r2, r3, #5
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	0151      	lsls	r1, r2, #5
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	440a      	add	r2, r1
 800c426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c42a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c42e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	0151      	lsls	r1, r2, #5
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	440a      	add	r2, r1
 800c446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c44a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	e02b      	b.n	800c4aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	db12      	blt.n	800c48a <USB_EPSetStall+0xae>
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00f      	beq.n	800c48a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	0151      	lsls	r1, r2, #5
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	440a      	add	r2, r1
 800c480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c488:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	0151      	lsls	r1, r2, #5
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	440a      	add	r2, r1
 800c4a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d128      	bne.n	800c526 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	0151      	lsls	r1, r2, #5
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	440a      	add	r2, r1
 800c4ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	791b      	ldrb	r3, [r3, #4]
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d003      	beq.n	800c504 <USB_EPClearStall+0x4c>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	791b      	ldrb	r3, [r3, #4]
 800c500:	2b02      	cmp	r3, #2
 800c502:	d138      	bne.n	800c576 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	0151      	lsls	r1, r2, #5
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	440a      	add	r2, r1
 800c51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c51e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c522:	6013      	str	r3, [r2, #0]
 800c524:	e027      	b.n	800c576 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	015a      	lsls	r2, r3, #5
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	0151      	lsls	r1, r2, #5
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	440a      	add	r2, r1
 800c53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	791b      	ldrb	r3, [r3, #4]
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d003      	beq.n	800c556 <USB_EPClearStall+0x9e>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	791b      	ldrb	r3, [r3, #4]
 800c552:	2b02      	cmp	r3, #2
 800c554:	d10f      	bne.n	800c576 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	0151      	lsls	r1, r2, #5
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	440a      	add	r2, r1
 800c56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c574:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	011b      	lsls	r3, r3, #4
 800c5b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c5b8:	68f9      	ldr	r1, [r7, #12]
 800c5ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5ea:	f023 0303 	bic.w	r3, r3, #3
 800c5ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5fe:	f023 0302 	bic.w	r3, r3, #2
 800c602:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c62c:	f023 0303 	bic.w	r3, r3, #3
 800c630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c640:	f043 0302 	orr.w	r3, r3, #2
 800c644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4013      	ands	r3, r2
 800c66a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c66c:	68fb      	ldr	r3, [r7, #12]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	4013      	ands	r3, r2
 800c69c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	0c1b      	lsrs	r3, r3, #16
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ca:	69db      	ldr	r3, [r3, #28]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	b29b      	uxth	r3, r3
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b085      	sub	sp, #20
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c6f2:	78fb      	ldrb	r3, [r7, #3]
 800c6f4:	015a      	lsls	r2, r3, #5
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c708:	695b      	ldr	r3, [r3, #20]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	4013      	ands	r3, r2
 800c70e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c710:	68bb      	ldr	r3, [r7, #8]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c71e:	b480      	push	{r7}
 800c720:	b087      	sub	sp, #28
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	460b      	mov	r3, r1
 800c728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c740:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	f003 030f 	and.w	r3, r3, #15
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	fa22 f303 	lsr.w	r3, r2, r3
 800c74e:	01db      	lsls	r3, r3, #7
 800c750:	b2db      	uxtb	r3, r3
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	4313      	orrs	r3, r2
 800c756:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	4013      	ands	r3, r2
 800c76a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c76c:	68bb      	ldr	r3, [r7, #8]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	f003 0301 	and.w	r3, r3, #1
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c7b4:	f023 0307 	bic.w	r3, r3, #7
 800c7b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b087      	sub	sp, #28
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	607a      	str	r2, [r7, #4]
 800c7e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	333c      	adds	r3, #60	; 0x3c
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	4a26      	ldr	r2, [pc, #152]	; (800c894 <USB_EP0_OutStart+0xb8>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d90a      	bls.n	800c816 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c810:	d101      	bne.n	800c816 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	e037      	b.n	800c886 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81c:	461a      	mov	r2, r3
 800c81e:	2300      	movs	r3, #0
 800c820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c844:	f043 0318 	orr.w	r3, r3, #24
 800c848:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c858:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c85c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c85e:	7afb      	ldrb	r3, [r7, #11]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d10f      	bne.n	800c884 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86a:	461a      	mov	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c87e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	4f54300a 	.word	0x4f54300a

0800c898 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4a13      	ldr	r2, [pc, #76]	; (800c8fc <USB_CoreReset+0x64>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d901      	bls.n	800c8b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e01b      	b.n	800c8ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	daf2      	bge.n	800c8a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	f043 0201 	orr.w	r2, r3, #1
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <USB_CoreReset+0x64>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d901      	bls.n	800c8e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e006      	b.n	800c8ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d0f0      	beq.n	800c8ce <USB_CoreReset+0x36>

  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	00030d40 	.word	0x00030d40

0800c900 <VL53L1X_SensorInit>:

	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 800c914:	2300      	movs	r3, #0
 800c916:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800c918:	232d      	movs	r3, #45	; 0x2d
 800c91a:	73bb      	strb	r3, [r7, #14]
 800c91c:	e011      	b.n	800c942 <VL53L1X_SensorInit+0x42>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	b299      	uxth	r1, r3
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	3b2d      	subs	r3, #45	; 0x2d
 800c926:	4a2c      	ldr	r2, [pc, #176]	; (800c9d8 <VL53L1X_SensorInit+0xd8>)
 800c928:	5cd3      	ldrb	r3, [r2, r3]
 800c92a:	461a      	mov	r2, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 facd 	bl	800cecc <VL53L1_WrByte>
 800c932:	4603      	mov	r3, r0
 800c934:	461a      	mov	r2, r3
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	4313      	orrs	r3, r2
 800c93a:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800c93c:	7bbb      	ldrb	r3, [r7, #14]
 800c93e:	3301      	adds	r3, #1
 800c940:	73bb      	strb	r3, [r7, #14]
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	2b87      	cmp	r3, #135	; 0x87
 800c946:	d9ea      	bls.n	800c91e <VL53L1X_SensorInit+0x1e>
	}
	status |= VL53L1X_StartRanging(dev, i2cHandle);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f88d 	bl	800ca6a <VL53L1X_StartRanging>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	4313      	orrs	r3, r2
 800c958:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800c95e:	e00b      	b.n	800c978 <VL53L1X_SensorInit+0x78>
			status |= VL53L1X_CheckForDataReady(dev, i2cHandle, &tmp);
 800c960:	f107 030d 	add.w	r3, r7, #13
 800c964:	461a      	mov	r2, r3
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f8b2 	bl	800cad2 <VL53L1X_CheckForDataReady>
 800c96e:	4603      	mov	r3, r0
 800c970:	461a      	mov	r2, r3
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	4313      	orrs	r3, r2
 800c976:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 800c978:	7b7b      	ldrb	r3, [r7, #13]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0f0      	beq.n	800c960 <VL53L1X_SensorInit+0x60>
	}
	status |= VL53L1X_ClearInterrupt(dev, i2cHandle);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f82b 	bl	800c9dc <VL53L1X_ClearInterrupt>
 800c986:	4603      	mov	r3, r0
 800c988:	461a      	mov	r2, r3
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev, i2cHandle);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f883 	bl	800ca9e <VL53L1X_StopRanging>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 800c9a2:	2209      	movs	r2, #9
 800c9a4:	2108      	movs	r1, #8
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fa90 	bl	800cecc <VL53L1_WrByte>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	210b      	movs	r1, #11
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fa86 	bl	800cecc <VL53L1_WrByte>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	73fb      	strb	r3, [r7, #15]
	return status;
 800c9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	0801375c 	.word	0x0801375c

0800c9dc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	2186      	movs	r1, #134	; 0x86
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa69 	bl	800cecc <VL53L1_WrByte>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	73fb      	strb	r3, [r7, #15]

	return status;
 800ca04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *pInterruptPolarity)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	601a      	str	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800ca26:	f107 0316 	add.w	r3, r7, #22
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	2130      	movs	r1, #48	; 0x30
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f000 fa8d 	bl	800cf4e <VL53L1_RdByte>
 800ca34:	4603      	mov	r3, r0
 800ca36:	461a      	mov	r2, r3
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	75fb      	strb	r3, [r7, #23]
	Temp = Temp & 0x10;
 800ca3e:	7dbb      	ldrb	r3, [r7, #22]
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	75bb      	strb	r3, [r7, #22]
	*pInterruptPolarity = !(Temp >> 4);
 800ca48:	7dbb      	ldrb	r3, [r7, #22]
 800ca4a:	091b      	lsrs	r3, r3, #4
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bf0c      	ite	eq
 800ca52:	2301      	moveq	r3, #1
 800ca54:	2300      	movne	r3, #0
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	701a      	strb	r2, [r3, #0]
	return status;
 800ca5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3718      	adds	r7, #24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800ca7e:	2240      	movs	r2, #64	; 0x40
 800ca80:	2187      	movs	r1, #135	; 0x87
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fa22 	bl	800cecc <VL53L1_WrByte>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	73fb      	strb	r3, [r7, #15]
	return status;
 800ca92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800cab2:	2200      	movs	r2, #0
 800cab4:	2187      	movs	r1, #135	; 0x87
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fa08 	bl	800cecc <VL53L1_WrByte>
 800cabc:	4603      	mov	r3, r0
 800cabe:	461a      	mov	r2, r3
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	73fb      	strb	r3, [r7, #15]
	return status;
 800cac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *isDataReady)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b086      	sub	sp, #24
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	601a      	str	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_GetInterruptPolarity(dev, i2cHandle, &IntPol);
 800cae8:	f107 0315 	add.w	r3, r7, #21
 800caec:	461a      	mov	r2, r3
 800caee:	68b9      	ldr	r1, [r7, #8]
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f7ff ff8d 	bl	800ca10 <VL53L1X_GetInterruptPolarity>
 800caf6:	4603      	mov	r3, r0
 800caf8:	461a      	mov	r2, r3
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800cb00:	f107 0316 	add.w	r3, r7, #22
 800cb04:	461a      	mov	r2, r3
 800cb06:	2131      	movs	r1, #49	; 0x31
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 fa20 	bl	800cf4e <VL53L1_RdByte>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	75fb      	strb	r3, [r7, #23]

	/* Read in the register to check if a new value is available */
	if (status == 0){
 800cb18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10c      	bne.n	800cb3a <VL53L1X_CheckForDataReady+0x68>
		if ((Temp & 1) == IntPol)
 800cb20:	7dbb      	ldrb	r3, [r7, #22]
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	7d7a      	ldrb	r2, [r7, #21]
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d103      	bne.n	800cb34 <VL53L1X_CheckForDataReady+0x62>
			*isDataReady = 1;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	e002      	b.n	800cb3a <VL53L1X_CheckForDataReady+0x68>
		else
			*isDataReady = 0;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800cb3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t TimingBudgetInMs)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b086      	sub	sp, #24
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	60f8      	str	r0, [r7, #12]
 800cb4e:	60b9      	str	r1, [r7, #8]
 800cb50:	4613      	mov	r3, r2
 800cb52:	80fb      	strh	r3, [r7, #6]
	dev -> i2cHandle = i2cHandle;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	601a      	str	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_GetDistanceMode(dev, i2cHandle, &DM);
 800cb5e:	f107 0314 	add.w	r3, r7, #20
 800cb62:	461a      	mov	r2, r3
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 f8ea 	bl	800cd40 <VL53L1X_GetDistanceMode>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	461a      	mov	r2, r3
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	75fb      	strb	r3, [r7, #23]
	if (DM == 0)
 800cb76:	8abb      	ldrh	r3, [r7, #20]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <VL53L1X_SetTimingBudgetInMs+0x3a>
		return 1;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e0db      	b.n	800cd38 <VL53L1X_SetTimingBudgetInMs+0x1f2>
	else if (DM == 1) {	/* Short DistanceMode */
 800cb80:	8abb      	ldrh	r3, [r7, #20]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d173      	bne.n	800cc6e <VL53L1X_SetTimingBudgetInMs+0x128>
		switch (TimingBudgetInMs) {
 800cb86:	88fb      	ldrh	r3, [r7, #6]
 800cb88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cb8c:	d05f      	beq.n	800cc4e <VL53L1X_SetTimingBudgetInMs+0x108>
 800cb8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cb92:	dc69      	bgt.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
 800cb94:	2bc8      	cmp	r3, #200	; 0xc8
 800cb96:	d04d      	beq.n	800cc34 <VL53L1X_SetTimingBudgetInMs+0xee>
 800cb98:	2bc8      	cmp	r3, #200	; 0xc8
 800cb9a:	dc65      	bgt.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
 800cb9c:	2b64      	cmp	r3, #100	; 0x64
 800cb9e:	d03c      	beq.n	800cc1a <VL53L1X_SetTimingBudgetInMs+0xd4>
 800cba0:	2b64      	cmp	r3, #100	; 0x64
 800cba2:	dc61      	bgt.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
 800cba4:	2b32      	cmp	r3, #50	; 0x32
 800cba6:	d02b      	beq.n	800cc00 <VL53L1X_SetTimingBudgetInMs+0xba>
 800cba8:	2b32      	cmp	r3, #50	; 0x32
 800cbaa:	dc5d      	bgt.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
 800cbac:	2b21      	cmp	r3, #33	; 0x21
 800cbae:	d01c      	beq.n	800cbea <VL53L1X_SetTimingBudgetInMs+0xa4>
 800cbb0:	2b21      	cmp	r3, #33	; 0x21
 800cbb2:	dc59      	bgt.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
 800cbb4:	2b0f      	cmp	r3, #15
 800cbb6:	d002      	beq.n	800cbbe <VL53L1X_SetTimingBudgetInMs+0x78>
 800cbb8:	2b14      	cmp	r3, #20
 800cbba:	d00b      	beq.n	800cbd4 <VL53L1X_SetTimingBudgetInMs+0x8e>
 800cbbc:	e054      	b.n	800cc68 <VL53L1X_SetTimingBudgetInMs+0x122>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x01D);
 800cbbe:	221d      	movs	r2, #29
 800cbc0:	215e      	movs	r1, #94	; 0x5e
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f99d 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0027);
 800cbc8:	2227      	movs	r2, #39	; 0x27
 800cbca:	2161      	movs	r1, #97	; 0x61
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 f998 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cbd2:	e0af      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0051);
 800cbd4:	2251      	movs	r2, #81	; 0x51
 800cbd6:	215e      	movs	r1, #94	; 0x5e
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f992 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800cbde:	226e      	movs	r2, #110	; 0x6e
 800cbe0:	2161      	movs	r1, #97	; 0x61
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 f98d 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cbe8:	e0a4      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x00D6);
 800cbea:	22d6      	movs	r2, #214	; 0xd6
 800cbec:	215e      	movs	r1, #94	; 0x5e
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f987 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800cbf4:	226e      	movs	r2, #110	; 0x6e
 800cbf6:	2161      	movs	r1, #97	; 0x61
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f000 f982 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cbfe:	e099      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x1AE);
 800cc00:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800cc04:	215e      	movs	r1, #94	; 0x5e
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f97b 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x01E8);
 800cc0c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cc10:	2161      	movs	r1, #97	; 0x61
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f975 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cc18:	e08c      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x02E1);
 800cc1a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cc1e:	215e      	movs	r1, #94	; 0x5e
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 f96e 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0388);
 800cc26:	f44f 7262 	mov.w	r2, #904	; 0x388
 800cc2a:	2161      	movs	r1, #97	; 0x61
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f968 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cc32:	e07f      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x03E1);
 800cc34:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cc38:	215e      	movs	r1, #94	; 0x5e
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 f961 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0496);
 800cc40:	f240 4296 	movw	r2, #1174	; 0x496
 800cc44:	2161      	movs	r1, #97	; 0x61
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 f95b 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cc4c:	e072      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0591);
 800cc4e:	f240 5291 	movw	r2, #1425	; 0x591
 800cc52:	215e      	movs	r1, #94	; 0x5e
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f954 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x05C1);
 800cc5a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800cc5e:	2161      	movs	r1, #97	; 0x61
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f94e 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cc66:	e065      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		default:
			status = 1;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	75fb      	strb	r3, [r7, #23]
			break;
 800cc6c:	e062      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		}
	} else {
		switch (TimingBudgetInMs) {
 800cc6e:	88fb      	ldrh	r3, [r7, #6]
 800cc70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cc74:	d04e      	beq.n	800cd14 <VL53L1X_SetTimingBudgetInMs+0x1ce>
 800cc76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cc7a:	dc58      	bgt.n	800cd2e <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800cc7c:	2bc8      	cmp	r3, #200	; 0xc8
 800cc7e:	d03c      	beq.n	800ccfa <VL53L1X_SetTimingBudgetInMs+0x1b4>
 800cc80:	2bc8      	cmp	r3, #200	; 0xc8
 800cc82:	dc54      	bgt.n	800cd2e <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800cc84:	2b64      	cmp	r3, #100	; 0x64
 800cc86:	d02b      	beq.n	800cce0 <VL53L1X_SetTimingBudgetInMs+0x19a>
 800cc88:	2b64      	cmp	r3, #100	; 0x64
 800cc8a:	dc50      	bgt.n	800cd2e <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800cc8c:	2b32      	cmp	r3, #50	; 0x32
 800cc8e:	d01c      	beq.n	800ccca <VL53L1X_SetTimingBudgetInMs+0x184>
 800cc90:	2b32      	cmp	r3, #50	; 0x32
 800cc92:	dc4c      	bgt.n	800cd2e <VL53L1X_SetTimingBudgetInMs+0x1e8>
 800cc94:	2b14      	cmp	r3, #20
 800cc96:	d002      	beq.n	800cc9e <VL53L1X_SetTimingBudgetInMs+0x158>
 800cc98:	2b21      	cmp	r3, #33	; 0x21
 800cc9a:	d00b      	beq.n	800ccb4 <VL53L1X_SetTimingBudgetInMs+0x16e>
 800cc9c:	e047      	b.n	800cd2e <VL53L1X_SetTimingBudgetInMs+0x1e8>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x001E);
 800cc9e:	221e      	movs	r2, #30
 800cca0:	215e      	movs	r1, #94	; 0x5e
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f92d 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x0022);
 800cca8:	2222      	movs	r2, #34	; 0x22
 800ccaa:	2161      	movs	r1, #97	; 0x61
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 f928 	bl	800cf02 <VL53L1_WrWord>
			break;
 800ccb2:	e03f      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x0060);
 800ccb4:	2260      	movs	r2, #96	; 0x60
 800ccb6:	215e      	movs	r1, #94	; 0x5e
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 f922 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x006E);
 800ccbe:	226e      	movs	r2, #110	; 0x6e
 800ccc0:	2161      	movs	r1, #97	; 0x61
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 f91d 	bl	800cf02 <VL53L1_WrWord>
			break;
 800ccc8:	e034      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x00AD);
 800ccca:	22ad      	movs	r2, #173	; 0xad
 800cccc:	215e      	movs	r1, #94	; 0x5e
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 f917 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x00C6);
 800ccd4:	22c6      	movs	r2, #198	; 0xc6
 800ccd6:	2161      	movs	r1, #97	; 0x61
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f000 f912 	bl	800cf02 <VL53L1_WrWord>
			break;
 800ccde:	e029      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x01CC);
 800cce0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cce4:	215e      	movs	r1, #94	; 0x5e
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f000 f90b 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x01EA);
 800ccec:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800ccf0:	2161      	movs	r1, #97	; 0x61
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f000 f905 	bl	800cf02 <VL53L1_WrWord>
			break;
 800ccf8:	e01c      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x02D9);
 800ccfa:	f240 22d9 	movw	r2, #729	; 0x2d9
 800ccfe:	215e      	movs	r1, #94	; 0x5e
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f000 f8fe 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x02F8);
 800cd06:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 800cd0a:	2161      	movs	r1, #97	; 0x61
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 f8f8 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cd12:	e00f      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, 0x048F);
 800cd14:	f240 428f 	movw	r2, #1167	; 0x48f
 800cd18:	215e      	movs	r1, #94	; 0x5e
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 f8f1 	bl	800cf02 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI, 0x04A4);
 800cd20:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800cd24:	2161      	movs	r1, #97	; 0x61
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 f8eb 	bl	800cf02 <VL53L1_WrWord>
			break;
 800cd2c:	e002      	b.n	800cd34 <VL53L1X_SetTimingBudgetInMs+0x1ee>
		default:
			status = 1;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	75fb      	strb	r3, [r7, #23]
			break;
 800cd32:	bf00      	nop
		}
	}
	return status;
 800cd34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <VL53L1X_GetDistanceMode>:

	return status;
}

VL53L1X_ERROR VL53L1X_GetDistanceMode(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t *DM)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	601a      	str	r2, [r3, #0]
	uint8_t TempDM, status=0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1_RdByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 800cd56:	f107 0316 	add.w	r3, r7, #22
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	214b      	movs	r1, #75	; 0x4b
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f000 f8f5 	bl	800cf4e <VL53L1_RdByte>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461a      	mov	r2, r3
 800cd68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	b25b      	sxtb	r3, r3
 800cd70:	75fb      	strb	r3, [r7, #23]
	if (TempDM == 0x14)
 800cd72:	7dbb      	ldrb	r3, [r7, #22]
 800cd74:	2b14      	cmp	r3, #20
 800cd76:	d102      	bne.n	800cd7e <VL53L1X_GetDistanceMode+0x3e>
		*DM=1;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 800cd7e:	7dbb      	ldrb	r3, [r7, #22]
 800cd80:	2b0a      	cmp	r3, #10
 800cd82:	d102      	bne.n	800cd8a <VL53L1X_GetDistanceMode+0x4a>
		*DM=2;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	801a      	strh	r2, [r3, #0]
	return status;
 800cd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <VL53L1X_BootState>:
	*pIM = (uint16_t)(*pIM / (ClockPLL * 1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint8_t *state)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b086      	sub	sp, #24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	75fb      	strb	r3, [r7, #23]
	uint8_t tmp = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	75bb      	strb	r3, [r7, #22]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 800cdb0:	f107 0316 	add.w	r3, r7, #22
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	21e5      	movs	r1, #229	; 0xe5
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 f8c8 	bl	800cf4e <VL53L1_RdByte>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	75fb      	strb	r3, [r7, #23]
	*state = tmp;
 800cdc8:	7dba      	ldrb	r2, [r7, #22]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	701a      	strb	r2, [r3, #0]
	return status;
 800cdce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, uint16_t *distance)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b086      	sub	sp, #24
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607a      	str	r2, [r7, #4]
	dev -> i2cHandle = i2cHandle;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	75fb      	strb	r3, [r7, #23]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev, VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
 800cdf0:	f107 0314 	add.w	r3, r7, #20
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	2196      	movs	r1, #150	; 0x96
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f8c2 	bl	800cf82 <VL53L1_RdWord>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	461a      	mov	r2, r3
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	75fb      	strb	r3, [r7, #23]
	*distance = tmp;
 800ce08:	8aba      	ldrh	r2, [r7, #20]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	801a      	strh	r2, [r3, #0]
	return status;
 800ce0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle, int16_t OffsetValue)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b086      	sub	sp, #24
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	4613      	mov	r3, r2
 800ce26:	80fb      	strh	r3, [r7, #6]
	dev -> i2cHandle = i2cHandle;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	75fb      	strb	r3, [r7, #23]
	int16_t Temp;

	Temp = (OffsetValue*4);
 800ce32:	88fb      	ldrh	r3, [r7, #6]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	82bb      	strh	r3, [r7, #20]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM, (uint16_t)Temp);
 800ce3a:	8abb      	ldrh	r3, [r7, #20]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	211e      	movs	r1, #30
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 f85e 	bl	800cf02 <VL53L1_WrWord>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 800ce50:	2200      	movs	r2, #0
 800ce52:	2120      	movs	r1, #32
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f000 f854 	bl	800cf02 <VL53L1_WrWord>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 800ce64:	2200      	movs	r2, #0
 800ce66:	2122      	movs	r1, #34	; 0x22
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 f84a 	bl	800cf02 <VL53L1_WrWord>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	461a      	mov	r2, r3
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	75fb      	strb	r3, [r7, #23]
	return status;
 800ce78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <VL53L1X_ReadID>:

	return status;
}

VL53L1X_ERROR VL53L1X_ReadID(VL53L1_DEV *dev, I2C_HandleTypeDef *i2cHandle)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	601a      	str	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
	uint8_t ID = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, 0x010F, &ID);
 800ce9c:	f107 030e 	add.w	r3, r7, #14
 800cea0:	461a      	mov	r2, r3
 800cea2:	f240 110f 	movw	r1, #271	; 0x10f
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f851 	bl	800cf4e <VL53L1_RdByte>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	73fb      	strb	r3, [r7, #15]

	if (ID != 0xEA) return 1;
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	2bea      	cmp	r3, #234	; 0xea
 800ceba:	d001      	beq.n	800cec0 <VL53L1X_ReadID+0x3c>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e001      	b.n	800cec4 <VL53L1X_ReadID+0x40>

	return status;
 800cec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <VL53L1_WrByte>:

	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, data, lenght, 100);
}

int8_t VL53L1_WrByte(VL53L1_DEV *dev, uint16_t reg, uint8_t data)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af04      	add	r7, sp, #16
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	807b      	strh	r3, [r7, #2]
 800ced8:	4613      	mov	r3, r2
 800ceda:	707b      	strb	r3, [r7, #1]

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	887a      	ldrh	r2, [r7, #2]
 800cee2:	2364      	movs	r3, #100	; 0x64
 800cee4:	9302      	str	r3, [sp, #8]
 800cee6:	2301      	movs	r3, #1
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	1c7b      	adds	r3, r7, #1
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	2310      	movs	r3, #16
 800cef0:	2152      	movs	r1, #82	; 0x52
 800cef2:	f7f9 f8df 	bl	80060b4 <HAL_I2C_Mem_Write>
 800cef6:	4603      	mov	r3, r0
 800cef8:	b25b      	sxtb	r3, r3
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(VL53L1_DEV *dev, uint16_t reg, uint16_t data)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b088      	sub	sp, #32
 800cf06:	af04      	add	r7, sp, #16
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	807b      	strh	r3, [r7, #2]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	803b      	strh	r3, [r7, #0]
	uint8_t i2cBuff[2] = {0};
 800cf12:	2300      	movs	r3, #0
 800cf14:	81bb      	strh	r3, [r7, #12]

	i2cBuff[0] = (data >> 8) & 0xFF;
 800cf16:	883b      	ldrh	r3, [r7, #0]
 800cf18:	0a1b      	lsrs	r3, r3, #8
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	733b      	strb	r3, [r7, #12]
	i2cBuff[1] = data & 0xFF;
 800cf20:	883b      	ldrh	r3, [r7, #0]
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 2, 100);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	887a      	ldrh	r2, [r7, #2]
 800cf2c:	2364      	movs	r3, #100	; 0x64
 800cf2e:	9302      	str	r3, [sp, #8]
 800cf30:	2302      	movs	r3, #2
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	2310      	movs	r3, #16
 800cf3c:	2152      	movs	r1, #82	; 0x52
 800cf3e:	f7f9 f8b9 	bl	80060b4 <HAL_I2C_Mem_Write>
 800cf42:	4603      	mov	r3, r0
 800cf44:	b25b      	sxtb	r3, r3
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <VL53L1_RdByte>:

	return HAL_I2C_Mem_Write (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 4, 100);
}

int8_t VL53L1_RdByte(VL53L1_DEV *dev, uint16_t reg, uint8_t *data)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b088      	sub	sp, #32
 800cf52:	af04      	add	r7, sp, #16
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	460b      	mov	r3, r1
 800cf58:	607a      	str	r2, [r7, #4]
 800cf5a:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, data, 1, 100);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6818      	ldr	r0, [r3, #0]
 800cf60:	897a      	ldrh	r2, [r7, #10]
 800cf62:	2364      	movs	r3, #100	; 0x64
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	2301      	movs	r3, #1
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	2310      	movs	r3, #16
 800cf70:	2152      	movs	r1, #82	; 0x52
 800cf72:	f7f9 f999 	bl	80062a8 <HAL_I2C_Mem_Read>
 800cf76:	4603      	mov	r3, r0
 800cf78:	b25b      	sxtb	r3, r3
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV *dev, uint16_t reg, uint16_t *data)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b08a      	sub	sp, #40	; 0x28
 800cf86:	af04      	add	r7, sp, #16
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	607a      	str	r2, [r7, #4]
 800cf8e:	817b      	strh	r3, [r7, #10]
	uint8_t i2cBuff[2] = {0};
 800cf90:	2300      	movs	r3, #0
 800cf92:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read (dev -> i2cHandle, DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, i2cBuff, 2, 100);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	897a      	ldrh	r2, [r7, #10]
 800cf9e:	2364      	movs	r3, #100	; 0x64
 800cfa0:	9302      	str	r3, [sp, #8]
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	2310      	movs	r3, #16
 800cfae:	2152      	movs	r1, #82	; 0x52
 800cfb0:	f7f9 f97a 	bl	80062a8 <HAL_I2C_Mem_Read>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	75fb      	strb	r3, [r7, #23]
	*data = ((uint16_t)i2cBuff[0] << 8) | (uint16_t)i2cBuff[1];
 800cfb8:	7d3b      	ldrb	r3, [r7, #20]
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	b21a      	sxth	r2, r3
 800cfbe:	7d7b      	ldrb	r3, [r7, #21]
 800cfc0:	b21b      	sxth	r3, r3
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	b21b      	sxth	r3, r3
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	801a      	strh	r2, [r3, #0]

	return status;
 800cfcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cfdc:	4904      	ldr	r1, [pc, #16]	; (800cff0 <MX_FATFS_Init+0x18>)
 800cfde:	4805      	ldr	r0, [pc, #20]	; (800cff4 <MX_FATFS_Init+0x1c>)
 800cfe0:	f002 f84e 	bl	800f080 <FATFS_LinkDriver>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4b03      	ldr	r3, [pc, #12]	; (800cff8 <MX_FATFS_Init+0x20>)
 800cfea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cfec:	bf00      	nop
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20000934 	.word	0x20000934
 800cff4:	20000014 	.word	0x20000014
 800cff8:	20000930 	.word	0x20000930

0800cffc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800d006:	4b06      	ldr	r3, [pc, #24]	; (800d020 <USER_initialize+0x24>)
 800d008:	2201      	movs	r2, #1
 800d00a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d00c:	4b04      	ldr	r3, [pc, #16]	; (800d020 <USER_initialize+0x24>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d012:	4618      	mov	r0, r3
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20000011 	.word	0x20000011

0800d024 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800d02e:	4b06      	ldr	r3, [pc, #24]	; (800d048 <USER_status+0x24>)
 800d030:	2201      	movs	r2, #1
 800d032:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <USER_status+0x24>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20000011 	.word	0x20000011

0800d04c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800d05c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
 800d076:	4603      	mov	r3, r0
 800d078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800d07a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	603a      	str	r2, [r7, #0]
 800d092:	71fb      	strb	r3, [r7, #7]
 800d094:	460b      	mov	r3, r1
 800d096:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	73fb      	strb	r3, [r7, #15]
    return res;
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
	...

0800d0ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d0bc:	f002 fcb4 	bl	800fa28 <USBD_static_malloc>
 800d0c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d109      	bne.n	800d0dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	32b0      	adds	r2, #176	; 0xb0
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e0d4      	b.n	800d286 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d0dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f004 fb53 	bl	801178e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	32b0      	adds	r2, #176	; 0xb0
 800d0f2:	68f9      	ldr	r1, [r7, #12]
 800d0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	32b0      	adds	r2, #176	; 0xb0
 800d102:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7c1b      	ldrb	r3, [r3, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d138      	bne.n	800d186 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d114:	4b5e      	ldr	r3, [pc, #376]	; (800d290 <USBD_CDC_Init+0x1e4>)
 800d116:	7819      	ldrb	r1, [r3, #0]
 800d118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d11c:	2202      	movs	r2, #2
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f002 fb5f 	bl	800f7e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d124:	4b5a      	ldr	r3, [pc, #360]	; (800d290 <USBD_CDC_Init+0x1e4>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f003 020f 	and.w	r2, r3, #15
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	440b      	add	r3, r1
 800d138:	3324      	adds	r3, #36	; 0x24
 800d13a:	2201      	movs	r2, #1
 800d13c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d13e:	4b55      	ldr	r3, [pc, #340]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d140:	7819      	ldrb	r1, [r3, #0]
 800d142:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d146:	2202      	movs	r2, #2
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f002 fb4a 	bl	800f7e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d14e:	4b51      	ldr	r3, [pc, #324]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	f003 020f 	and.w	r2, r3, #15
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	4613      	mov	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d166:	2201      	movs	r2, #1
 800d168:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d16a:	4b4b      	ldr	r3, [pc, #300]	; (800d298 <USBD_CDC_Init+0x1ec>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f003 020f 	and.w	r2, r3, #15
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	4613      	mov	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	3326      	adds	r3, #38	; 0x26
 800d180:	2210      	movs	r2, #16
 800d182:	801a      	strh	r2, [r3, #0]
 800d184:	e035      	b.n	800d1f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d186:	4b42      	ldr	r3, [pc, #264]	; (800d290 <USBD_CDC_Init+0x1e4>)
 800d188:	7819      	ldrb	r1, [r3, #0]
 800d18a:	2340      	movs	r3, #64	; 0x40
 800d18c:	2202      	movs	r2, #2
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f002 fb27 	bl	800f7e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d194:	4b3e      	ldr	r3, [pc, #248]	; (800d290 <USBD_CDC_Init+0x1e4>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 020f 	and.w	r2, r3, #15
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3324      	adds	r3, #36	; 0x24
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1ae:	4b39      	ldr	r3, [pc, #228]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d1b0:	7819      	ldrb	r1, [r3, #0]
 800d1b2:	2340      	movs	r3, #64	; 0x40
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f002 fb13 	bl	800f7e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1bc:	4b35      	ldr	r3, [pc, #212]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f003 020f 	and.w	r2, r3, #15
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1d8:	4b2f      	ldr	r3, [pc, #188]	; (800d298 <USBD_CDC_Init+0x1ec>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 020f 	and.w	r2, r3, #15
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	3326      	adds	r3, #38	; 0x26
 800d1ee:	2210      	movs	r2, #16
 800d1f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1f2:	4b29      	ldr	r3, [pc, #164]	; (800d298 <USBD_CDC_Init+0x1ec>)
 800d1f4:	7819      	ldrb	r1, [r3, #0]
 800d1f6:	2308      	movs	r3, #8
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f002 faf1 	bl	800f7e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d200:	4b25      	ldr	r3, [pc, #148]	; (800d298 <USBD_CDC_Init+0x1ec>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f003 020f 	and.w	r2, r3, #15
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	4613      	mov	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	440b      	add	r3, r1
 800d214:	3324      	adds	r3, #36	; 0x24
 800d216:	2201      	movs	r2, #1
 800d218:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	33b0      	adds	r3, #176	; 0xb0
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d250:	2302      	movs	r3, #2
 800d252:	e018      	b.n	800d286 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7c1b      	ldrb	r3, [r3, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d25c:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d25e:	7819      	ldrb	r1, [r3, #0]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f002 fba8 	bl	800f9c0 <USBD_LL_PrepareReceive>
 800d270:	e008      	b.n	800d284 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d272:	4b08      	ldr	r3, [pc, #32]	; (800d294 <USBD_CDC_Init+0x1e8>)
 800d274:	7819      	ldrb	r1, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d27c:	2340      	movs	r3, #64	; 0x40
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f002 fb9e 	bl	800f9c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	200000af 	.word	0x200000af
 800d294:	200000b0 	.word	0x200000b0
 800d298:	200000b1 	.word	0x200000b1

0800d29c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d2a8:	4b3a      	ldr	r3, [pc, #232]	; (800d394 <USBD_CDC_DeInit+0xf8>)
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f002 fabd 	bl	800f82e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d2b4:	4b37      	ldr	r3, [pc, #220]	; (800d394 <USBD_CDC_DeInit+0xf8>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f003 020f 	and.w	r2, r3, #15
 800d2bc:	6879      	ldr	r1, [r7, #4]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	440b      	add	r3, r1
 800d2c8:	3324      	adds	r3, #36	; 0x24
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d2ce:	4b32      	ldr	r3, [pc, #200]	; (800d398 <USBD_CDC_DeInit+0xfc>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f002 faaa 	bl	800f82e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d2da:	4b2f      	ldr	r3, [pc, #188]	; (800d398 <USBD_CDC_DeInit+0xfc>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f003 020f 	and.w	r2, r3, #15
 800d2e2:	6879      	ldr	r1, [r7, #4]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	440b      	add	r3, r1
 800d2ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d2f6:	4b29      	ldr	r3, [pc, #164]	; (800d39c <USBD_CDC_DeInit+0x100>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f002 fa96 	bl	800f82e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d302:	4b26      	ldr	r3, [pc, #152]	; (800d39c <USBD_CDC_DeInit+0x100>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f003 020f 	and.w	r2, r3, #15
 800d30a:	6879      	ldr	r1, [r7, #4]
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	440b      	add	r3, r1
 800d316:	3324      	adds	r3, #36	; 0x24
 800d318:	2200      	movs	r2, #0
 800d31a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d31c:	4b1f      	ldr	r3, [pc, #124]	; (800d39c <USBD_CDC_DeInit+0x100>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	f003 020f 	and.w	r2, r3, #15
 800d324:	6879      	ldr	r1, [r7, #4]
 800d326:	4613      	mov	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	440b      	add	r3, r1
 800d330:	3326      	adds	r3, #38	; 0x26
 800d332:	2200      	movs	r2, #0
 800d334:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	32b0      	adds	r2, #176	; 0xb0
 800d340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d01f      	beq.n	800d388 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	33b0      	adds	r3, #176	; 0xb0
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	32b0      	adds	r2, #176	; 0xb0
 800d366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f002 fb6a 	bl	800fa44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	32b0      	adds	r2, #176	; 0xb0
 800d37a:	2100      	movs	r1, #0
 800d37c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	200000af 	.word	0x200000af
 800d398:	200000b0 	.word	0x200000b0
 800d39c:	200000b1 	.word	0x200000b1

0800d3a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	32b0      	adds	r2, #176	; 0xb0
 800d3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d3cc:	2303      	movs	r3, #3
 800d3ce:	e0bf      	b.n	800d550 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d050      	beq.n	800d47e <USBD_CDC_Setup+0xde>
 800d3dc:	2b20      	cmp	r3, #32
 800d3de:	f040 80af 	bne.w	800d540 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	88db      	ldrh	r3, [r3, #6]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d03a      	beq.n	800d460 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b25b      	sxtb	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	da1b      	bge.n	800d42c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	33b0      	adds	r3, #176	; 0xb0
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	683a      	ldr	r2, [r7, #0]
 800d408:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d40a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	88d2      	ldrh	r2, [r2, #6]
 800d410:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	88db      	ldrh	r3, [r3, #6]
 800d416:	2b07      	cmp	r3, #7
 800d418:	bf28      	it	cs
 800d41a:	2307      	movcs	r3, #7
 800d41c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	89fa      	ldrh	r2, [r7, #14]
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f001 fd5f 	bl	800eee8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d42a:	e090      	b.n	800d54e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	785a      	ldrb	r2, [r3, #1]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	88db      	ldrh	r3, [r3, #6]
 800d43a:	2b3f      	cmp	r3, #63	; 0x3f
 800d43c:	d803      	bhi.n	800d446 <USBD_CDC_Setup+0xa6>
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	88db      	ldrh	r3, [r3, #6]
 800d442:	b2da      	uxtb	r2, r3
 800d444:	e000      	b.n	800d448 <USBD_CDC_Setup+0xa8>
 800d446:	2240      	movs	r2, #64	; 0x40
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d44e:	6939      	ldr	r1, [r7, #16]
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d456:	461a      	mov	r2, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f001 fd71 	bl	800ef40 <USBD_CtlPrepareRx>
      break;
 800d45e:	e076      	b.n	800d54e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	33b0      	adds	r3, #176	; 0xb0
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	7850      	ldrb	r0, [r2, #1]
 800d476:	2200      	movs	r2, #0
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	4798      	blx	r3
      break;
 800d47c:	e067      	b.n	800d54e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	785b      	ldrb	r3, [r3, #1]
 800d482:	2b0b      	cmp	r3, #11
 800d484:	d851      	bhi.n	800d52a <USBD_CDC_Setup+0x18a>
 800d486:	a201      	add	r2, pc, #4	; (adr r2, 800d48c <USBD_CDC_Setup+0xec>)
 800d488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48c:	0800d4bd 	.word	0x0800d4bd
 800d490:	0800d539 	.word	0x0800d539
 800d494:	0800d52b 	.word	0x0800d52b
 800d498:	0800d52b 	.word	0x0800d52b
 800d49c:	0800d52b 	.word	0x0800d52b
 800d4a0:	0800d52b 	.word	0x0800d52b
 800d4a4:	0800d52b 	.word	0x0800d52b
 800d4a8:	0800d52b 	.word	0x0800d52b
 800d4ac:	0800d52b 	.word	0x0800d52b
 800d4b0:	0800d52b 	.word	0x0800d52b
 800d4b4:	0800d4e7 	.word	0x0800d4e7
 800d4b8:	0800d511 	.word	0x0800d511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d107      	bne.n	800d4d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d4c8:	f107 030a 	add.w	r3, r7, #10
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f001 fd09 	bl	800eee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4d6:	e032      	b.n	800d53e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fc93 	bl	800ee06 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	75fb      	strb	r3, [r7, #23]
          break;
 800d4e4:	e02b      	b.n	800d53e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d107      	bne.n	800d502 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4f2:	f107 030d 	add.w	r3, r7, #13
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 fcf4 	bl	800eee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d500:	e01d      	b.n	800d53e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f001 fc7e 	bl	800ee06 <USBD_CtlError>
            ret = USBD_FAIL;
 800d50a:	2303      	movs	r3, #3
 800d50c:	75fb      	strb	r3, [r7, #23]
          break;
 800d50e:	e016      	b.n	800d53e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b03      	cmp	r3, #3
 800d51a:	d00f      	beq.n	800d53c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 fc71 	bl	800ee06 <USBD_CtlError>
            ret = USBD_FAIL;
 800d524:	2303      	movs	r3, #3
 800d526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d528:	e008      	b.n	800d53c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d52a:	6839      	ldr	r1, [r7, #0]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f001 fc6a 	bl	800ee06 <USBD_CtlError>
          ret = USBD_FAIL;
 800d532:	2303      	movs	r3, #3
 800d534:	75fb      	strb	r3, [r7, #23]
          break;
 800d536:	e002      	b.n	800d53e <USBD_CDC_Setup+0x19e>
          break;
 800d538:	bf00      	nop
 800d53a:	e008      	b.n	800d54e <USBD_CDC_Setup+0x1ae>
          break;
 800d53c:	bf00      	nop
      }
      break;
 800d53e:	e006      	b.n	800d54e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f001 fc5f 	bl	800ee06 <USBD_CtlError>
      ret = USBD_FAIL;
 800d548:	2303      	movs	r3, #3
 800d54a:	75fb      	strb	r3, [r7, #23]
      break;
 800d54c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	460b      	mov	r3, r1
 800d562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d56a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	32b0      	adds	r2, #176	; 0xb0
 800d576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d57e:	2303      	movs	r3, #3
 800d580:	e065      	b.n	800d64e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	32b0      	adds	r2, #176	; 0xb0
 800d58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d590:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d592:	78fb      	ldrb	r3, [r7, #3]
 800d594:	f003 020f 	and.w	r2, r3, #15
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	440b      	add	r3, r1
 800d5a4:	3318      	adds	r3, #24
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d02f      	beq.n	800d60c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	f003 020f 	and.w	r2, r3, #15
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	440b      	add	r3, r1
 800d5be:	3318      	adds	r3, #24
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	78fb      	ldrb	r3, [r7, #3]
 800d5c4:	f003 010f 	and.w	r1, r3, #15
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	00db      	lsls	r3, r3, #3
 800d5ce:	440b      	add	r3, r1
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4403      	add	r3, r0
 800d5d4:	3348      	adds	r3, #72	; 0x48
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5dc:	fb01 f303 	mul.w	r3, r1, r3
 800d5e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d112      	bne.n	800d60c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	f003 020f 	and.w	r2, r3, #15
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	440b      	add	r3, r1
 800d5f8:	3318      	adds	r3, #24
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d5fe:	78f9      	ldrb	r1, [r7, #3]
 800d600:	2300      	movs	r3, #0
 800d602:	2200      	movs	r2, #0
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f002 f9ba 	bl	800f97e <USBD_LL_Transmit>
 800d60a:	e01f      	b.n	800d64c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	33b0      	adds	r3, #176	; 0xb0
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4413      	add	r3, r2
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d010      	beq.n	800d64c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	33b0      	adds	r3, #176	; 0xb0
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d648:	78fa      	ldrb	r2, [r7, #3]
 800d64a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	460b      	mov	r3, r1
 800d660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	32b0      	adds	r2, #176	; 0xb0
 800d66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	32b0      	adds	r2, #176	; 0xb0
 800d67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	e01a      	b.n	800d6be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f002 f9b8 	bl	800fa02 <USBD_LL_GetRxDataSize>
 800d692:	4602      	mov	r2, r0
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	33b0      	adds	r3, #176	; 0xb0
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b084      	sub	sp, #16
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	32b0      	adds	r2, #176	; 0xb0
 800d6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	e025      	b.n	800d734 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	33b0      	adds	r3, #176	; 0xb0
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d01a      	beq.n	800d732 <USBD_CDC_EP0_RxReady+0x6c>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d702:	2bff      	cmp	r3, #255	; 0xff
 800d704:	d015      	beq.n	800d732 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	33b0      	adds	r3, #176	; 0xb0
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4413      	add	r3, r2
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d71e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d726:	b292      	uxth	r2, r2
 800d728:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	22ff      	movs	r2, #255	; 0xff
 800d72e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d744:	2182      	movs	r1, #130	; 0x82
 800d746:	4818      	ldr	r0, [pc, #96]	; (800d7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d748:	f000 fd25 	bl	800e196 <USBD_GetEpDesc>
 800d74c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d74e:	2101      	movs	r1, #1
 800d750:	4815      	ldr	r0, [pc, #84]	; (800d7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d752:	f000 fd20 	bl	800e196 <USBD_GetEpDesc>
 800d756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d758:	2181      	movs	r1, #129	; 0x81
 800d75a:	4813      	ldr	r0, [pc, #76]	; (800d7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d75c:	f000 fd1b 	bl	800e196 <USBD_GetEpDesc>
 800d760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2210      	movs	r2, #16
 800d76c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d006      	beq.n	800d782 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2200      	movs	r2, #0
 800d778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d77c:	711a      	strb	r2, [r3, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d006      	beq.n	800d796 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d790:	711a      	strb	r2, [r3, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2243      	movs	r2, #67	; 0x43
 800d79a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d79c:	4b02      	ldr	r3, [pc, #8]	; (800d7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000006c 	.word	0x2000006c

0800d7ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7b4:	2182      	movs	r1, #130	; 0x82
 800d7b6:	4818      	ldr	r0, [pc, #96]	; (800d818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7b8:	f000 fced 	bl	800e196 <USBD_GetEpDesc>
 800d7bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4815      	ldr	r0, [pc, #84]	; (800d818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7c2:	f000 fce8 	bl	800e196 <USBD_GetEpDesc>
 800d7c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7c8:	2181      	movs	r1, #129	; 0x81
 800d7ca:	4813      	ldr	r0, [pc, #76]	; (800d818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7cc:	f000 fce3 	bl	800e196 <USBD_GetEpDesc>
 800d7d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2210      	movs	r2, #16
 800d7dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d006      	beq.n	800d7f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	711a      	strb	r2, [r3, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f042 0202 	orr.w	r2, r2, #2
 800d7f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	711a      	strb	r2, [r3, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f042 0202 	orr.w	r2, r2, #2
 800d804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2243      	movs	r2, #67	; 0x43
 800d80a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d80c:	4b02      	ldr	r3, [pc, #8]	; (800d818 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	2000006c 	.word	0x2000006c

0800d81c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d824:	2182      	movs	r1, #130	; 0x82
 800d826:	4818      	ldr	r0, [pc, #96]	; (800d888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d828:	f000 fcb5 	bl	800e196 <USBD_GetEpDesc>
 800d82c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d82e:	2101      	movs	r1, #1
 800d830:	4815      	ldr	r0, [pc, #84]	; (800d888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d832:	f000 fcb0 	bl	800e196 <USBD_GetEpDesc>
 800d836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d838:	2181      	movs	r1, #129	; 0x81
 800d83a:	4813      	ldr	r0, [pc, #76]	; (800d888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d83c:	f000 fcab 	bl	800e196 <USBD_GetEpDesc>
 800d840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	2210      	movs	r2, #16
 800d84c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2200      	movs	r2, #0
 800d858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d85c:	711a      	strb	r2, [r3, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d006      	beq.n	800d876 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d870:	711a      	strb	r2, [r3, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2243      	movs	r2, #67	; 0x43
 800d87a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	2000006c 	.word	0x2000006c

0800d88c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	220a      	movs	r2, #10
 800d898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d89a:	4b03      	ldr	r3, [pc, #12]	; (800d8a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	20000028 	.word	0x20000028

0800d8ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e009      	b.n	800d8d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	33b0      	adds	r3, #176	; 0xb0
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	32b0      	adds	r2, #176	; 0xb0
 800d8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d902:	2303      	movs	r3, #3
 800d904:	e008      	b.n	800d918 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	32b0      	adds	r2, #176	; 0xb0
 800d938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d944:	2303      	movs	r3, #3
 800d946:	e004      	b.n	800d952 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
	...

0800d960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	32b0      	adds	r2, #176	; 0xb0
 800d972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d976:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	32b0      	adds	r2, #176	; 0xb0
 800d982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e018      	b.n	800d9c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	7c1b      	ldrb	r3, [r3, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10a      	bne.n	800d9ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d996:	4b0c      	ldr	r3, [pc, #48]	; (800d9c8 <USBD_CDC_ReceivePacket+0x68>)
 800d998:	7819      	ldrb	r1, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f002 f80b 	bl	800f9c0 <USBD_LL_PrepareReceive>
 800d9aa:	e008      	b.n	800d9be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9ac:	4b06      	ldr	r3, [pc, #24]	; (800d9c8 <USBD_CDC_ReceivePacket+0x68>)
 800d9ae:	7819      	ldrb	r1, [r3, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9b6:	2340      	movs	r3, #64	; 0x40
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f002 f801 	bl	800f9c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	200000b0 	.word	0x200000b0

0800d9cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10a      	bne.n	800d9f6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800d9e0:	4817      	ldr	r0, [pc, #92]	; (800da40 <USBD_Init+0x74>)
 800d9e2:	f003 fe77 	bl	80116d4 <iprintf>
 800d9e6:	4817      	ldr	r0, [pc, #92]	; (800da44 <USBD_Init+0x78>)
 800d9e8:	f003 fe74 	bl	80116d4 <iprintf>
 800d9ec:	200a      	movs	r0, #10
 800d9ee:	f003 fe83 	bl	80116f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e01f      	b.n	800da36 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d003      	beq.n	800da1c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	79fa      	ldrb	r2, [r7, #7]
 800da28:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f001 fe72 	bl	800f714 <USBD_LL_Init>
 800da30:	4603      	mov	r3, r0
 800da32:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da34:	7dfb      	ldrb	r3, [r7, #23]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	080136b8 	.word	0x080136b8
 800da44:	080136c0 	.word	0x080136c0

0800da48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da52:	2300      	movs	r3, #0
 800da54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800da5c:	481a      	ldr	r0, [pc, #104]	; (800dac8 <USBD_RegisterClass+0x80>)
 800da5e:	f003 fe39 	bl	80116d4 <iprintf>
 800da62:	481a      	ldr	r0, [pc, #104]	; (800dacc <USBD_RegisterClass+0x84>)
 800da64:	f003 fe36 	bl	80116d4 <iprintf>
 800da68:	200a      	movs	r0, #10
 800da6a:	f003 fe45 	bl	80116f8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da6e:	2303      	movs	r3, #3
 800da70:	e025      	b.n	800dabe <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	32ae      	adds	r2, #174	; 0xae
 800da84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00f      	beq.n	800daae <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	32ae      	adds	r2, #174	; 0xae
 800da98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9e:	f107 020e 	add.w	r2, r7, #14
 800daa2:	4610      	mov	r0, r2
 800daa4:	4798      	blx	r3
 800daa6:	4602      	mov	r2, r0
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	080136b8 	.word	0x080136b8
 800dacc:	080136d8 	.word	0x080136d8

0800dad0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f001 fe67 	bl	800f7ac <USBD_LL_Start>
 800dade:	4603      	mov	r3, r0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800daf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	78fa      	ldrb	r2, [r7, #3]
 800db22:	4611      	mov	r1, r2
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	4798      	blx	r3
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	460b      	mov	r3, r1
 800db40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	78fa      	ldrb	r2, [r7, #3]
 800db50:	4611      	mov	r1, r2
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800db5c:	2303      	movs	r3, #3
 800db5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db60:	7bfb      	ldrb	r3, [r7, #15]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f001 f908 	bl	800ed92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db90:	461a      	mov	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db9e:	f003 031f 	and.w	r3, r3, #31
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d01a      	beq.n	800dbdc <USBD_LL_SetupStage+0x72>
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d822      	bhi.n	800dbf0 <USBD_LL_SetupStage+0x86>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <USBD_LL_SetupStage+0x4a>
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d00a      	beq.n	800dbc8 <USBD_LL_SetupStage+0x5e>
 800dbb2:	e01d      	b.n	800dbf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fb5f 	bl	800e280 <USBD_StdDevReq>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc6:	e020      	b.n	800dc0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fbc7 	bl	800e364 <USBD_StdItfReq>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	73fb      	strb	r3, [r7, #15]
      break;
 800dbda:	e016      	b.n	800dc0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fc29 	bl	800e43c <USBD_StdEPReq>
 800dbea:	4603      	mov	r3, r0
 800dbec:	73fb      	strb	r3, [r7, #15]
      break;
 800dbee:	e00c      	b.n	800dc0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f001 fe34 	bl	800f86c <USBD_LL_StallEP>
 800dc04:	4603      	mov	r3, r0
 800dc06:	73fb      	strb	r3, [r7, #15]
      break;
 800dc08:	bf00      	nop
  }

  return ret;
 800dc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3710      	adds	r7, #16
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc26:	7afb      	ldrb	r3, [r7, #11]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d16e      	bne.n	800dd0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	f040 8098 	bne.w	800dd70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	689a      	ldr	r2, [r3, #8]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d913      	bls.n	800dc74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	689a      	ldr	r2, [r3, #8]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	1ad2      	subs	r2, r2, r3
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	68da      	ldr	r2, [r3, #12]
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	4293      	cmp	r3, r2
 800dc64:	bf28      	it	cs
 800dc66:	4613      	movcs	r3, r2
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f001 f984 	bl	800ef7a <USBD_CtlContinueRx>
 800dc72:	e07d      	b.n	800dd70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc7a:	f003 031f 	and.w	r3, r3, #31
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d014      	beq.n	800dcac <USBD_LL_DataOutStage+0x98>
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d81d      	bhi.n	800dcc2 <USBD_LL_DataOutStage+0xae>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <USBD_LL_DataOutStage+0x7c>
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d003      	beq.n	800dc96 <USBD_LL_DataOutStage+0x82>
 800dc8e:	e018      	b.n	800dcc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75bb      	strb	r3, [r7, #22]
            break;
 800dc94:	e018      	b.n	800dcc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	4619      	mov	r1, r3
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fa5e 	bl	800e162 <USBD_CoreFindIF>
 800dca6:	4603      	mov	r3, r0
 800dca8:	75bb      	strb	r3, [r7, #22]
            break;
 800dcaa:	e00d      	b.n	800dcc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f000 fa60 	bl	800e17c <USBD_CoreFindEP>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	75bb      	strb	r3, [r7, #22]
            break;
 800dcc0:	e002      	b.n	800dcc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	75bb      	strb	r3, [r7, #22]
            break;
 800dcc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dcc8:	7dbb      	ldrb	r3, [r7, #22]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d119      	bne.n	800dd02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d113      	bne.n	800dd02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dcda:	7dba      	ldrb	r2, [r7, #22]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	32ae      	adds	r2, #174	; 0xae
 800dce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d00b      	beq.n	800dd02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dcea:	7dba      	ldrb	r2, [r7, #22]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dcf2:	7dba      	ldrb	r2, [r7, #22]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	32ae      	adds	r2, #174	; 0xae
 800dcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f001 f94a 	bl	800ef9c <USBD_CtlSendStatus>
 800dd08:	e032      	b.n	800dd70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	4619      	mov	r1, r3
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 fa31 	bl	800e17c <USBD_CoreFindEP>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd1e:	7dbb      	ldrb	r3, [r7, #22]
 800dd20:	2bff      	cmp	r3, #255	; 0xff
 800dd22:	d025      	beq.n	800dd70 <USBD_LL_DataOutStage+0x15c>
 800dd24:	7dbb      	ldrb	r3, [r7, #22]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d122      	bne.n	800dd70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d117      	bne.n	800dd66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd36:	7dba      	ldrb	r2, [r7, #22]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	32ae      	adds	r2, #174	; 0xae
 800dd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00f      	beq.n	800dd66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dd46:	7dba      	ldrb	r2, [r7, #22]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dd4e:	7dba      	ldrb	r2, [r7, #22]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	32ae      	adds	r2, #174	; 0xae
 800dd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd58:	699b      	ldr	r3, [r3, #24]
 800dd5a:	7afa      	ldrb	r2, [r7, #11]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	4798      	blx	r3
 800dd62:	4603      	mov	r3, r0
 800dd64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dd66:	7dfb      	ldrb	r3, [r7, #23]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
 800dd6e:	e000      	b.n	800dd72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b086      	sub	sp, #24
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	460b      	mov	r3, r1
 800dd84:	607a      	str	r2, [r7, #4]
 800dd86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d16f      	bne.n	800de6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3314      	adds	r3, #20
 800dd92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d15a      	bne.n	800de54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d914      	bls.n	800ddd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	1ad2      	subs	r2, r2, r3
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	6879      	ldr	r1, [r7, #4]
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f001 f8ac 	bl	800ef1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	2200      	movs	r2, #0
 800ddca:	2100      	movs	r1, #0
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f001 fdf7 	bl	800f9c0 <USBD_LL_PrepareReceive>
 800ddd2:	e03f      	b.n	800de54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d11c      	bne.n	800de1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d316      	bcc.n	800de1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d20f      	bcs.n	800de1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f001 f88d 	bl	800ef1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2200      	movs	r2, #0
 800de08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de0c:	2300      	movs	r3, #0
 800de0e:	2200      	movs	r2, #0
 800de10:	2100      	movs	r1, #0
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f001 fdd4 	bl	800f9c0 <USBD_LL_PrepareReceive>
 800de18:	e01c      	b.n	800de54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b03      	cmp	r3, #3
 800de24:	d10f      	bne.n	800de46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d009      	beq.n	800de46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de46:	2180      	movs	r1, #128	; 0x80
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f001 fd0f 	bl	800f86c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f001 f8b7 	bl	800efc2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d03a      	beq.n	800ded4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff fe42 	bl	800dae8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800de6c:	e032      	b.n	800ded4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800de6e:	7afb      	ldrb	r3, [r7, #11]
 800de70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de74:	b2db      	uxtb	r3, r3
 800de76:	4619      	mov	r1, r3
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 f97f 	bl	800e17c <USBD_CoreFindEP>
 800de7e:	4603      	mov	r3, r0
 800de80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	2bff      	cmp	r3, #255	; 0xff
 800de86:	d025      	beq.n	800ded4 <USBD_LL_DataInStage+0x15a>
 800de88:	7dfb      	ldrb	r3, [r7, #23]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d122      	bne.n	800ded4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b03      	cmp	r3, #3
 800de98:	d11c      	bne.n	800ded4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de9a:	7dfa      	ldrb	r2, [r7, #23]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	32ae      	adds	r2, #174	; 0xae
 800dea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d014      	beq.n	800ded4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800deaa:	7dfa      	ldrb	r2, [r7, #23]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800deb2:	7dfa      	ldrb	r2, [r7, #23]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	32ae      	adds	r2, #174	; 0xae
 800deb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	7afa      	ldrb	r2, [r7, #11]
 800dec0:	4611      	mov	r1, r2
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	4798      	blx	r3
 800dec6:	4603      	mov	r3, r0
 800dec8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800deca:	7dbb      	ldrb	r3, [r7, #22]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ded0:	7dbb      	ldrb	r3, [r7, #22]
 800ded2:	e000      	b.n	800ded6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b084      	sub	sp, #16
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2201      	movs	r2, #1
 800deee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df16:	2b00      	cmp	r3, #0
 800df18:	d014      	beq.n	800df44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00e      	beq.n	800df44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	6852      	ldr	r2, [r2, #4]
 800df32:	b2d2      	uxtb	r2, r2
 800df34:	4611      	mov	r1, r2
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	4798      	blx	r3
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800df40:	2303      	movs	r3, #3
 800df42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df44:	2340      	movs	r3, #64	; 0x40
 800df46:	2200      	movs	r2, #0
 800df48:	2100      	movs	r1, #0
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f001 fc49 	bl	800f7e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2240      	movs	r2, #64	; 0x40
 800df5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df60:	2340      	movs	r3, #64	; 0x40
 800df62:	2200      	movs	r2, #0
 800df64:	2180      	movs	r1, #128	; 0x80
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f001 fc3b 	bl	800f7e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2201      	movs	r2, #1
 800df70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2240      	movs	r2, #64	; 0x40
 800df76:	621a      	str	r2, [r3, #32]

  return ret;
 800df78:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df82:	b480      	push	{r7}
 800df84:	b083      	sub	sp, #12
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	460b      	mov	r3, r1
 800df8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	78fa      	ldrb	r2, [r7, #3]
 800df92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2204      	movs	r2, #4
 800dfbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b04      	cmp	r3, #4
 800dfe0:	d106      	bne.n	800dff0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d110      	bne.n	800e034 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b082      	sub	sp, #8
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	460b      	mov	r3, r1
 800e048:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	32ae      	adds	r2, #174	; 0xae
 800e054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e01c      	b.n	800e09a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d115      	bne.n	800e098 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	32ae      	adds	r2, #174	; 0xae
 800e076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	32ae      	adds	r2, #174	; 0xae
 800e08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	78fa      	ldrb	r2, [r7, #3]
 800e092:	4611      	mov	r1, r2
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	32ae      	adds	r2, #174	; 0xae
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e01c      	b.n	800e0fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d115      	bne.n	800e0fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	32ae      	adds	r2, #174	; 0xae
 800e0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00b      	beq.n	800e0fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	32ae      	adds	r2, #174	; 0xae
 800e0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f4:	78fa      	ldrb	r2, [r7, #3]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e106:	b480      	push	{r7}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00e      	beq.n	800e158 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6852      	ldr	r2, [r2, #4]
 800e146:	b2d2      	uxtb	r2, r2
 800e148:	4611      	mov	r1, r2
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	4798      	blx	r3
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e154:	2303      	movs	r3, #3
 800e156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	460b      	mov	r3, r1
 800e16c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e16e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	885b      	ldrh	r3, [r3, #2]
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d920      	bls.n	800e200 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e1c6:	e013      	b.n	800e1f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e1c8:	f107 030a 	add.w	r3, r7, #10
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6978      	ldr	r0, [r7, #20]
 800e1d0:	f000 f81b 	bl	800e20a <USBD_GetNextDesc>
 800e1d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b05      	cmp	r3, #5
 800e1dc:	d108      	bne.n	800e1f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	789b      	ldrb	r3, [r3, #2]
 800e1e6:	78fa      	ldrb	r2, [r7, #3]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d008      	beq.n	800e1fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	885b      	ldrh	r3, [r3, #2]
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	897b      	ldrh	r3, [r7, #10]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d8e5      	bhi.n	800e1c8 <USBD_GetEpDesc+0x32>
 800e1fc:	e000      	b.n	800e200 <USBD_GetEpDesc+0x6a>
          break;
 800e1fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e200:	693b      	ldr	r3, [r7, #16]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3718      	adds	r7, #24
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b085      	sub	sp, #20
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	881a      	ldrh	r2, [r3, #0]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	b29b      	uxth	r3, r3
 800e222:	4413      	add	r3, r2
 800e224:	b29a      	uxth	r2, r3
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4413      	add	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e236:	68fb      	ldr	r3, [r7, #12]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	3301      	adds	r3, #1
 800e25a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e262:	8a3b      	ldrh	r3, [r7, #16]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	b21a      	sxth	r2, r3
 800e268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	b21b      	sxth	r3, r3
 800e270:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e272:	89fb      	ldrh	r3, [r7, #14]
}
 800e274:	4618      	mov	r0, r3
 800e276:	371c      	adds	r7, #28
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e28a:	2300      	movs	r3, #0
 800e28c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e296:	2b40      	cmp	r3, #64	; 0x40
 800e298:	d005      	beq.n	800e2a6 <USBD_StdDevReq+0x26>
 800e29a:	2b40      	cmp	r3, #64	; 0x40
 800e29c:	d857      	bhi.n	800e34e <USBD_StdDevReq+0xce>
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00f      	beq.n	800e2c2 <USBD_StdDevReq+0x42>
 800e2a2:	2b20      	cmp	r3, #32
 800e2a4:	d153      	bne.n	800e34e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	32ae      	adds	r2, #174	; 0xae
 800e2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	4798      	blx	r3
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73fb      	strb	r3, [r7, #15]
      break;
 800e2c0:	e04a      	b.n	800e358 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b09      	cmp	r3, #9
 800e2c8:	d83b      	bhi.n	800e342 <USBD_StdDevReq+0xc2>
 800e2ca:	a201      	add	r2, pc, #4	; (adr r2, 800e2d0 <USBD_StdDevReq+0x50>)
 800e2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d0:	0800e325 	.word	0x0800e325
 800e2d4:	0800e339 	.word	0x0800e339
 800e2d8:	0800e343 	.word	0x0800e343
 800e2dc:	0800e32f 	.word	0x0800e32f
 800e2e0:	0800e343 	.word	0x0800e343
 800e2e4:	0800e303 	.word	0x0800e303
 800e2e8:	0800e2f9 	.word	0x0800e2f9
 800e2ec:	0800e343 	.word	0x0800e343
 800e2f0:	0800e31b 	.word	0x0800e31b
 800e2f4:	0800e30d 	.word	0x0800e30d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fa3c 	bl	800e778 <USBD_GetDescriptor>
          break;
 800e300:	e024      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fba1 	bl	800ea4c <USBD_SetAddress>
          break;
 800e30a:	e01f      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fbe0 	bl	800ead4 <USBD_SetConfig>
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]
          break;
 800e318:	e018      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fc83 	bl	800ec28 <USBD_GetConfig>
          break;
 800e322:	e013      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fcb4 	bl	800ec94 <USBD_GetStatus>
          break;
 800e32c:	e00e      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fce3 	bl	800ecfc <USBD_SetFeature>
          break;
 800e336:	e009      	b.n	800e34c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fd07 	bl	800ed4e <USBD_ClrFeature>
          break;
 800e340:	e004      	b.n	800e34c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fd5e 	bl	800ee06 <USBD_CtlError>
          break;
 800e34a:	bf00      	nop
      }
      break;
 800e34c:	e004      	b.n	800e358 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fd58 	bl	800ee06 <USBD_CtlError>
      break;
 800e356:	bf00      	nop
  }

  return ret;
 800e358:	7bfb      	ldrb	r3, [r7, #15]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop

0800e364 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e37a:	2b40      	cmp	r3, #64	; 0x40
 800e37c:	d005      	beq.n	800e38a <USBD_StdItfReq+0x26>
 800e37e:	2b40      	cmp	r3, #64	; 0x40
 800e380:	d852      	bhi.n	800e428 <USBD_StdItfReq+0xc4>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <USBD_StdItfReq+0x26>
 800e386:	2b20      	cmp	r3, #32
 800e388:	d14e      	bne.n	800e428 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e390:	b2db      	uxtb	r3, r3
 800e392:	3b01      	subs	r3, #1
 800e394:	2b02      	cmp	r3, #2
 800e396:	d840      	bhi.n	800e41a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	889b      	ldrh	r3, [r3, #4]
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d836      	bhi.n	800e410 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	889b      	ldrh	r3, [r3, #4]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7ff fed9 	bl	800e162 <USBD_CoreFindIF>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3b4:	7bbb      	ldrb	r3, [r7, #14]
 800e3b6:	2bff      	cmp	r3, #255	; 0xff
 800e3b8:	d01d      	beq.n	800e3f6 <USBD_StdItfReq+0x92>
 800e3ba:	7bbb      	ldrb	r3, [r7, #14]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d11a      	bne.n	800e3f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e3c0:	7bba      	ldrb	r2, [r7, #14]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	32ae      	adds	r2, #174	; 0xae
 800e3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00f      	beq.n	800e3f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e3d0:	7bba      	ldrb	r2, [r7, #14]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e3d8:	7bba      	ldrb	r2, [r7, #14]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	32ae      	adds	r2, #174	; 0xae
 800e3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	4798      	blx	r3
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3ee:	e004      	b.n	800e3fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3f4:	e001      	b.n	800e3fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	88db      	ldrh	r3, [r3, #6]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d110      	bne.n	800e424 <USBD_StdItfReq+0xc0>
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10d      	bne.n	800e424 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 fdc7 	bl	800ef9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e40e:	e009      	b.n	800e424 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e410:	6839      	ldr	r1, [r7, #0]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fcf7 	bl	800ee06 <USBD_CtlError>
          break;
 800e418:	e004      	b.n	800e424 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e41a:	6839      	ldr	r1, [r7, #0]
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fcf2 	bl	800ee06 <USBD_CtlError>
          break;
 800e422:	e000      	b.n	800e426 <USBD_StdItfReq+0xc2>
          break;
 800e424:	bf00      	nop
      }
      break;
 800e426:	e004      	b.n	800e432 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fceb 	bl	800ee06 <USBD_CtlError>
      break;
 800e430:	bf00      	nop
  }

  return ret;
 800e432:	7bfb      	ldrb	r3, [r7, #15]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	889b      	ldrh	r3, [r3, #4]
 800e44e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e458:	2b40      	cmp	r3, #64	; 0x40
 800e45a:	d007      	beq.n	800e46c <USBD_StdEPReq+0x30>
 800e45c:	2b40      	cmp	r3, #64	; 0x40
 800e45e:	f200 817f 	bhi.w	800e760 <USBD_StdEPReq+0x324>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d02a      	beq.n	800e4bc <USBD_StdEPReq+0x80>
 800e466:	2b20      	cmp	r3, #32
 800e468:	f040 817a 	bne.w	800e760 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff fe83 	bl	800e17c <USBD_CoreFindEP>
 800e476:	4603      	mov	r3, r0
 800e478:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e47a:	7b7b      	ldrb	r3, [r7, #13]
 800e47c:	2bff      	cmp	r3, #255	; 0xff
 800e47e:	f000 8174 	beq.w	800e76a <USBD_StdEPReq+0x32e>
 800e482:	7b7b      	ldrb	r3, [r7, #13]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f040 8170 	bne.w	800e76a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e48a:	7b7a      	ldrb	r2, [r7, #13]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e492:	7b7a      	ldrb	r2, [r7, #13]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	32ae      	adds	r2, #174	; 0xae
 800e498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 8163 	beq.w	800e76a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e4a4:	7b7a      	ldrb	r2, [r7, #13]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	32ae      	adds	r2, #174	; 0xae
 800e4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e4ba:	e156      	b.n	800e76a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d008      	beq.n	800e4d6 <USBD_StdEPReq+0x9a>
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	f300 8145 	bgt.w	800e754 <USBD_StdEPReq+0x318>
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 809b 	beq.w	800e606 <USBD_StdEPReq+0x1ca>
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d03c      	beq.n	800e54e <USBD_StdEPReq+0x112>
 800e4d4:	e13e      	b.n	800e754 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d002      	beq.n	800e4e8 <USBD_StdEPReq+0xac>
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d016      	beq.n	800e514 <USBD_StdEPReq+0xd8>
 800e4e6:	e02c      	b.n	800e542 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4e8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00d      	beq.n	800e50a <USBD_StdEPReq+0xce>
 800e4ee:	7bbb      	ldrb	r3, [r7, #14]
 800e4f0:	2b80      	cmp	r3, #128	; 0x80
 800e4f2:	d00a      	beq.n	800e50a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f001 f9b7 	bl	800f86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4fe:	2180      	movs	r1, #128	; 0x80
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f001 f9b3 	bl	800f86c <USBD_LL_StallEP>
 800e506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e508:	e020      	b.n	800e54c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fc7a 	bl	800ee06 <USBD_CtlError>
              break;
 800e512:	e01b      	b.n	800e54c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	885b      	ldrh	r3, [r3, #2]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10e      	bne.n	800e53a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e51c:	7bbb      	ldrb	r3, [r7, #14]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00b      	beq.n	800e53a <USBD_StdEPReq+0xfe>
 800e522:	7bbb      	ldrb	r3, [r7, #14]
 800e524:	2b80      	cmp	r3, #128	; 0x80
 800e526:	d008      	beq.n	800e53a <USBD_StdEPReq+0xfe>
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	88db      	ldrh	r3, [r3, #6]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d104      	bne.n	800e53a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e530:	7bbb      	ldrb	r3, [r7, #14]
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f001 f999 	bl	800f86c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 fd2e 	bl	800ef9c <USBD_CtlSendStatus>

              break;
 800e540:	e004      	b.n	800e54c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fc5e 	bl	800ee06 <USBD_CtlError>
              break;
 800e54a:	bf00      	nop
          }
          break;
 800e54c:	e107      	b.n	800e75e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e554:	b2db      	uxtb	r3, r3
 800e556:	2b02      	cmp	r3, #2
 800e558:	d002      	beq.n	800e560 <USBD_StdEPReq+0x124>
 800e55a:	2b03      	cmp	r3, #3
 800e55c:	d016      	beq.n	800e58c <USBD_StdEPReq+0x150>
 800e55e:	e04b      	b.n	800e5f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e560:	7bbb      	ldrb	r3, [r7, #14]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00d      	beq.n	800e582 <USBD_StdEPReq+0x146>
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	2b80      	cmp	r3, #128	; 0x80
 800e56a:	d00a      	beq.n	800e582 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e56c:	7bbb      	ldrb	r3, [r7, #14]
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 f97b 	bl	800f86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e576:	2180      	movs	r1, #128	; 0x80
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 f977 	bl	800f86c <USBD_LL_StallEP>
 800e57e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e580:	e040      	b.n	800e604 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 fc3e 	bl	800ee06 <USBD_CtlError>
              break;
 800e58a:	e03b      	b.n	800e604 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	885b      	ldrh	r3, [r3, #2]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d136      	bne.n	800e602 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e594:	7bbb      	ldrb	r3, [r7, #14]
 800e596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d004      	beq.n	800e5a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e59e:	7bbb      	ldrb	r3, [r7, #14]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 f981 	bl	800f8aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fcf7 	bl	800ef9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff fde2 	bl	800e17c <USBD_CoreFindEP>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5bc:	7b7b      	ldrb	r3, [r7, #13]
 800e5be:	2bff      	cmp	r3, #255	; 0xff
 800e5c0:	d01f      	beq.n	800e602 <USBD_StdEPReq+0x1c6>
 800e5c2:	7b7b      	ldrb	r3, [r7, #13]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d11c      	bne.n	800e602 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e5c8:	7b7a      	ldrb	r2, [r7, #13]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e5d0:	7b7a      	ldrb	r2, [r7, #13]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	32ae      	adds	r2, #174	; 0xae
 800e5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d010      	beq.n	800e602 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5e0:	7b7a      	ldrb	r2, [r7, #13]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	32ae      	adds	r2, #174	; 0xae
 800e5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	4798      	blx	r3
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e5f6:	e004      	b.n	800e602 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fc03 	bl	800ee06 <USBD_CtlError>
              break;
 800e600:	e000      	b.n	800e604 <USBD_StdEPReq+0x1c8>
              break;
 800e602:	bf00      	nop
          }
          break;
 800e604:	e0ab      	b.n	800e75e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d002      	beq.n	800e618 <USBD_StdEPReq+0x1dc>
 800e612:	2b03      	cmp	r3, #3
 800e614:	d032      	beq.n	800e67c <USBD_StdEPReq+0x240>
 800e616:	e097      	b.n	800e748 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e618:	7bbb      	ldrb	r3, [r7, #14]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d007      	beq.n	800e62e <USBD_StdEPReq+0x1f2>
 800e61e:	7bbb      	ldrb	r3, [r7, #14]
 800e620:	2b80      	cmp	r3, #128	; 0x80
 800e622:	d004      	beq.n	800e62e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 fbed 	bl	800ee06 <USBD_CtlError>
                break;
 800e62c:	e091      	b.n	800e752 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e62e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e632:	2b00      	cmp	r3, #0
 800e634:	da0b      	bge.n	800e64e <USBD_StdEPReq+0x212>
 800e636:	7bbb      	ldrb	r3, [r7, #14]
 800e638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e63c:	4613      	mov	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	4413      	add	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	3310      	adds	r3, #16
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	4413      	add	r3, r2
 800e64a:	3304      	adds	r3, #4
 800e64c:	e00b      	b.n	800e666 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	4413      	add	r3, r2
 800e664:	3304      	adds	r3, #4
 800e666:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2202      	movs	r2, #2
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fc37 	bl	800eee8 <USBD_CtlSendData>
              break;
 800e67a:	e06a      	b.n	800e752 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e67c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e680:	2b00      	cmp	r3, #0
 800e682:	da11      	bge.n	800e6a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	f003 020f 	and.w	r2, r3, #15
 800e68a:	6879      	ldr	r1, [r7, #4]
 800e68c:	4613      	mov	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	440b      	add	r3, r1
 800e696:	3324      	adds	r3, #36	; 0x24
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d117      	bne.n	800e6ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fbb0 	bl	800ee06 <USBD_CtlError>
                  break;
 800e6a6:	e054      	b.n	800e752 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
 800e6aa:	f003 020f 	and.w	r2, r3, #15
 800e6ae:	6879      	ldr	r1, [r7, #4]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	440b      	add	r3, r1
 800e6ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d104      	bne.n	800e6ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fb9d 	bl	800ee06 <USBD_CtlError>
                  break;
 800e6cc:	e041      	b.n	800e752 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	da0b      	bge.n	800e6ee <USBD_StdEPReq+0x2b2>
 800e6d6:	7bbb      	ldrb	r3, [r7, #14]
 800e6d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6dc:	4613      	mov	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4413      	add	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	3310      	adds	r3, #16
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	e00b      	b.n	800e706 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4413      	add	r3, r2
 800e704:	3304      	adds	r3, #4
 800e706:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e708:	7bbb      	ldrb	r3, [r7, #14]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <USBD_StdEPReq+0x2d8>
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	2b80      	cmp	r3, #128	; 0x80
 800e712:	d103      	bne.n	800e71c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2200      	movs	r2, #0
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	e00e      	b.n	800e73a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e71c:	7bbb      	ldrb	r3, [r7, #14]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f001 f8e1 	bl	800f8e8 <USBD_LL_IsStallEP>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	2201      	movs	r2, #1
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	e002      	b.n	800e73a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	2202      	movs	r2, #2
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 fbd1 	bl	800eee8 <USBD_CtlSendData>
              break;
 800e746:	e004      	b.n	800e752 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fb5b 	bl	800ee06 <USBD_CtlError>
              break;
 800e750:	bf00      	nop
          }
          break;
 800e752:	e004      	b.n	800e75e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 fb55 	bl	800ee06 <USBD_CtlError>
          break;
 800e75c:	bf00      	nop
      }
      break;
 800e75e:	e005      	b.n	800e76c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fb4f 	bl	800ee06 <USBD_CtlError>
      break;
 800e768:	e000      	b.n	800e76c <USBD_StdEPReq+0x330>
      break;
 800e76a:	bf00      	nop
  }

  return ret;
 800e76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e782:	2300      	movs	r3, #0
 800e784:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e786:	2300      	movs	r3, #0
 800e788:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e78a:	2300      	movs	r3, #0
 800e78c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	885b      	ldrh	r3, [r3, #2]
 800e792:	0a1b      	lsrs	r3, r3, #8
 800e794:	b29b      	uxth	r3, r3
 800e796:	3b01      	subs	r3, #1
 800e798:	2b06      	cmp	r3, #6
 800e79a:	f200 8128 	bhi.w	800e9ee <USBD_GetDescriptor+0x276>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <USBD_GetDescriptor+0x2c>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7c1 	.word	0x0800e7c1
 800e7a8:	0800e7d9 	.word	0x0800e7d9
 800e7ac:	0800e819 	.word	0x0800e819
 800e7b0:	0800e9ef 	.word	0x0800e9ef
 800e7b4:	0800e9ef 	.word	0x0800e9ef
 800e7b8:	0800e98f 	.word	0x0800e98f
 800e7bc:	0800e9bb 	.word	0x0800e9bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	7c12      	ldrb	r2, [r2, #16]
 800e7cc:	f107 0108 	add.w	r1, r7, #8
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	60f8      	str	r0, [r7, #12]
      break;
 800e7d6:	e112      	b.n	800e9fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7c1b      	ldrb	r3, [r3, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10d      	bne.n	800e7fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e8:	f107 0208 	add.w	r2, r7, #8
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
 800e7f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	2202      	movs	r2, #2
 800e7f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e7fa:	e100      	b.n	800e9fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e804:	f107 0208 	add.w	r2, r7, #8
 800e808:	4610      	mov	r0, r2
 800e80a:	4798      	blx	r3
 800e80c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	3301      	adds	r3, #1
 800e812:	2202      	movs	r2, #2
 800e814:	701a      	strb	r2, [r3, #0]
      break;
 800e816:	e0f2      	b.n	800e9fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	885b      	ldrh	r3, [r3, #2]
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b05      	cmp	r3, #5
 800e820:	f200 80ac 	bhi.w	800e97c <USBD_GetDescriptor+0x204>
 800e824:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <USBD_GetDescriptor+0xb4>)
 800e826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82a:	bf00      	nop
 800e82c:	0800e845 	.word	0x0800e845
 800e830:	0800e879 	.word	0x0800e879
 800e834:	0800e8ad 	.word	0x0800e8ad
 800e838:	0800e8e1 	.word	0x0800e8e1
 800e83c:	0800e915 	.word	0x0800e915
 800e840:	0800e949 	.word	0x0800e949
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	7c12      	ldrb	r2, [r2, #16]
 800e85c:	f107 0108 	add.w	r1, r7, #8
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
 800e864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e866:	e091      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 facb 	bl	800ee06 <USBD_CtlError>
            err++;
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	3301      	adds	r3, #1
 800e874:	72fb      	strb	r3, [r7, #11]
          break;
 800e876:	e089      	b.n	800e98c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	7c12      	ldrb	r2, [r2, #16]
 800e890:	f107 0108 	add.w	r1, r7, #8
 800e894:	4610      	mov	r0, r2
 800e896:	4798      	blx	r3
 800e898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e89a:	e077      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fab1 	bl	800ee06 <USBD_CtlError>
            err++;
 800e8a4:	7afb      	ldrb	r3, [r7, #11]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e8aa:	e06f      	b.n	800e98c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00b      	beq.n	800e8d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	7c12      	ldrb	r2, [r2, #16]
 800e8c4:	f107 0108 	add.w	r1, r7, #8
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4798      	blx	r3
 800e8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ce:	e05d      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 fa97 	bl	800ee06 <USBD_CtlError>
            err++;
 800e8d8:	7afb      	ldrb	r3, [r7, #11]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8de:	e055      	b.n	800e98c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00b      	beq.n	800e904 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f2:	691b      	ldr	r3, [r3, #16]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	7c12      	ldrb	r2, [r2, #16]
 800e8f8:	f107 0108 	add.w	r1, r7, #8
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
 800e900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e902:	e043      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fa7d 	bl	800ee06 <USBD_CtlError>
            err++;
 800e90c:	7afb      	ldrb	r3, [r7, #11]
 800e90e:	3301      	adds	r3, #1
 800e910:	72fb      	strb	r3, [r7, #11]
          break;
 800e912:	e03b      	b.n	800e98c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91a:	695b      	ldr	r3, [r3, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00b      	beq.n	800e938 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e926:	695b      	ldr	r3, [r3, #20]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	7c12      	ldrb	r2, [r2, #16]
 800e92c:	f107 0108 	add.w	r1, r7, #8
 800e930:	4610      	mov	r0, r2
 800e932:	4798      	blx	r3
 800e934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e936:	e029      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fa63 	bl	800ee06 <USBD_CtlError>
            err++;
 800e940:	7afb      	ldrb	r3, [r7, #11]
 800e942:	3301      	adds	r3, #1
 800e944:	72fb      	strb	r3, [r7, #11]
          break;
 800e946:	e021      	b.n	800e98c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00b      	beq.n	800e96c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	7c12      	ldrb	r2, [r2, #16]
 800e960:	f107 0108 	add.w	r1, r7, #8
 800e964:	4610      	mov	r0, r2
 800e966:	4798      	blx	r3
 800e968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e96a:	e00f      	b.n	800e98c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e96c:	6839      	ldr	r1, [r7, #0]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 fa49 	bl	800ee06 <USBD_CtlError>
            err++;
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	3301      	adds	r3, #1
 800e978:	72fb      	strb	r3, [r7, #11]
          break;
 800e97a:	e007      	b.n	800e98c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fa41 	bl	800ee06 <USBD_CtlError>
          err++;
 800e984:	7afb      	ldrb	r3, [r7, #11]
 800e986:	3301      	adds	r3, #1
 800e988:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e98a:	bf00      	nop
      }
      break;
 800e98c:	e037      	b.n	800e9fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7c1b      	ldrb	r3, [r3, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99e:	f107 0208 	add.w	r2, r7, #8
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	4798      	blx	r3
 800e9a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9a8:	e029      	b.n	800e9fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 fa2a 	bl	800ee06 <USBD_CtlError>
        err++;
 800e9b2:	7afb      	ldrb	r3, [r7, #11]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e9b8:	e021      	b.n	800e9fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	7c1b      	ldrb	r3, [r3, #16]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10d      	bne.n	800e9de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ca:	f107 0208 	add.w	r2, r7, #8
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	4798      	blx	r3
 800e9d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	2207      	movs	r2, #7
 800e9da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9dc:	e00f      	b.n	800e9fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9de:	6839      	ldr	r1, [r7, #0]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 fa10 	bl	800ee06 <USBD_CtlError>
        err++;
 800e9e6:	7afb      	ldrb	r3, [r7, #11]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e9ec:	e007      	b.n	800e9fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 fa08 	bl	800ee06 <USBD_CtlError>
      err++;
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	72fb      	strb	r3, [r7, #11]
      break;
 800e9fc:	bf00      	nop
  }

  if (err != 0U)
 800e9fe:	7afb      	ldrb	r3, [r7, #11]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d11e      	bne.n	800ea42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	88db      	ldrh	r3, [r3, #6]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d016      	beq.n	800ea3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ea0c:	893b      	ldrh	r3, [r7, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00e      	beq.n	800ea30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	88da      	ldrh	r2, [r3, #6]
 800ea16:	893b      	ldrh	r3, [r7, #8]
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	bf28      	it	cs
 800ea1c:	4613      	movcs	r3, r2
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea22:	893b      	ldrh	r3, [r7, #8]
 800ea24:	461a      	mov	r2, r3
 800ea26:	68f9      	ldr	r1, [r7, #12]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 fa5d 	bl	800eee8 <USBD_CtlSendData>
 800ea2e:	e009      	b.n	800ea44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f9e7 	bl	800ee06 <USBD_CtlError>
 800ea38:	e004      	b.n	800ea44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 faae 	bl	800ef9c <USBD_CtlSendStatus>
 800ea40:	e000      	b.n	800ea44 <USBD_GetDescriptor+0x2cc>
    return;
 800ea42:	bf00      	nop
  }
}
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop

0800ea4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	889b      	ldrh	r3, [r3, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d131      	bne.n	800eac2 <USBD_SetAddress+0x76>
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	88db      	ldrh	r3, [r3, #6]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d12d      	bne.n	800eac2 <USBD_SetAddress+0x76>
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	885b      	ldrh	r3, [r3, #2]
 800ea6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea6c:	d829      	bhi.n	800eac2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	885b      	ldrh	r3, [r3, #2]
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d104      	bne.n	800ea90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea86:	6839      	ldr	r1, [r7, #0]
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 f9bc 	bl	800ee06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea8e:	e01d      	b.n	800eacc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7bfa      	ldrb	r2, [r7, #15]
 800ea94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 ff4f 	bl	800f940 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 fa7a 	bl	800ef9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d004      	beq.n	800eab8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2202      	movs	r2, #2
 800eab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eab6:	e009      	b.n	800eacc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac0:	e004      	b.n	800eacc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f99e 	bl	800ee06 <USBD_CtlError>
  }
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	885b      	ldrh	r3, [r3, #2]
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	4b4e      	ldr	r3, [pc, #312]	; (800ec24 <USBD_SetConfig+0x150>)
 800eaea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eaec:	4b4d      	ldr	r3, [pc, #308]	; (800ec24 <USBD_SetConfig+0x150>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d905      	bls.n	800eb00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f985 	bl	800ee06 <USBD_CtlError>
    return USBD_FAIL;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e08c      	b.n	800ec1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d002      	beq.n	800eb12 <USBD_SetConfig+0x3e>
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d029      	beq.n	800eb64 <USBD_SetConfig+0x90>
 800eb10:	e075      	b.n	800ebfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb12:	4b44      	ldr	r3, [pc, #272]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d020      	beq.n	800eb5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eb1a:	4b42      	ldr	r3, [pc, #264]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb24:	4b3f      	ldr	r3, [pc, #252]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7fe ffe7 	bl	800dafe <USBD_SetClassConfig>
 800eb30:	4603      	mov	r3, r0
 800eb32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb34:	7bfb      	ldrb	r3, [r7, #15]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d008      	beq.n	800eb4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f962 	bl	800ee06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2202      	movs	r2, #2
 800eb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb4a:	e065      	b.n	800ec18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 fa25 	bl	800ef9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2203      	movs	r2, #3
 800eb56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb5a:	e05d      	b.n	800ec18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fa1d 	bl	800ef9c <USBD_CtlSendStatus>
      break;
 800eb62:	e059      	b.n	800ec18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb64:	4b2f      	ldr	r3, [pc, #188]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d112      	bne.n	800eb92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb74:	4b2b      	ldr	r3, [pc, #172]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb7e:	4b29      	ldr	r3, [pc, #164]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7fe ffd6 	bl	800db36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 fa06 	bl	800ef9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb90:	e042      	b.n	800ec18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eb92:	4b24      	ldr	r3, [pc, #144]	; (800ec24 <USBD_SetConfig+0x150>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d02a      	beq.n	800ebf6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7fe ffc4 	bl	800db36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ebae:	4b1d      	ldr	r3, [pc, #116]	; (800ec24 <USBD_SetConfig+0x150>)
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebb8:	4b1a      	ldr	r3, [pc, #104]	; (800ec24 <USBD_SetConfig+0x150>)
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7fe ff9d 	bl	800dafe <USBD_SetClassConfig>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ebc8:	7bfb      	ldrb	r3, [r7, #15]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00f      	beq.n	800ebee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f918 	bl	800ee06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7fe ffa9 	bl	800db36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebec:	e014      	b.n	800ec18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f9d4 	bl	800ef9c <USBD_CtlSendStatus>
      break;
 800ebf4:	e010      	b.n	800ec18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f9d0 	bl	800ef9c <USBD_CtlSendStatus>
      break;
 800ebfc:	e00c      	b.n	800ec18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 f900 	bl	800ee06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec06:	4b07      	ldr	r3, [pc, #28]	; (800ec24 <USBD_SetConfig+0x150>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7fe ff92 	bl	800db36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec12:	2303      	movs	r3, #3
 800ec14:	73fb      	strb	r3, [r7, #15]
      break;
 800ec16:	bf00      	nop
  }

  return ret;
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20000938 	.word	0x20000938

0800ec28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	88db      	ldrh	r3, [r3, #6]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d004      	beq.n	800ec44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 f8e2 	bl	800ee06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec42:	e023      	b.n	800ec8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	dc02      	bgt.n	800ec56 <USBD_GetConfig+0x2e>
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dc03      	bgt.n	800ec5c <USBD_GetConfig+0x34>
 800ec54:	e015      	b.n	800ec82 <USBD_GetConfig+0x5a>
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	d00b      	beq.n	800ec72 <USBD_GetConfig+0x4a>
 800ec5a:	e012      	b.n	800ec82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3308      	adds	r3, #8
 800ec66:	2201      	movs	r2, #1
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f93c 	bl	800eee8 <USBD_CtlSendData>
        break;
 800ec70:	e00c      	b.n	800ec8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3304      	adds	r3, #4
 800ec76:	2201      	movs	r2, #1
 800ec78:	4619      	mov	r1, r3
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f934 	bl	800eee8 <USBD_CtlSendData>
        break;
 800ec80:	e004      	b.n	800ec8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 f8be 	bl	800ee06 <USBD_CtlError>
        break;
 800ec8a:	bf00      	nop
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	3b01      	subs	r3, #1
 800eca8:	2b02      	cmp	r3, #2
 800ecaa:	d81e      	bhi.n	800ecea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	88db      	ldrh	r3, [r3, #6]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d004      	beq.n	800ecbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f8a5 	bl	800ee06 <USBD_CtlError>
        break;
 800ecbc:	e01a      	b.n	800ecf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d005      	beq.n	800ecda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	f043 0202 	orr.w	r2, r3, #2
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	330c      	adds	r3, #12
 800ecde:	2202      	movs	r2, #2
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f900 	bl	800eee8 <USBD_CtlSendData>
      break;
 800ece8:	e004      	b.n	800ecf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f88a 	bl	800ee06 <USBD_CtlError>
      break;
 800ecf2:	bf00      	nop
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d107      	bne.n	800ed1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f940 	bl	800ef9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ed1c:	e013      	b.n	800ed46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	885b      	ldrh	r3, [r3, #2]
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d10b      	bne.n	800ed3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	889b      	ldrh	r3, [r3, #4]
 800ed2a:	0a1b      	lsrs	r3, r3, #8
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f930 	bl	800ef9c <USBD_CtlSendStatus>
}
 800ed3c:	e003      	b.n	800ed46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 f860 	bl	800ee06 <USBD_CtlError>
}
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	3b01      	subs	r3, #1
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d80b      	bhi.n	800ed7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	885b      	ldrh	r3, [r3, #2]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d10c      	bne.n	800ed88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f910 	bl	800ef9c <USBD_CtlSendStatus>
      }
      break;
 800ed7c:	e004      	b.n	800ed88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed7e:	6839      	ldr	r1, [r7, #0]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f840 	bl	800ee06 <USBD_CtlError>
      break;
 800ed86:	e000      	b.n	800ed8a <USBD_ClrFeature+0x3c>
      break;
 800ed88:	bf00      	nop
  }
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	781a      	ldrb	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3301      	adds	r3, #1
 800edac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	781a      	ldrb	r2, [r3, #0]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f7ff fa41 	bl	800e244 <SWAPBYTE>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3301      	adds	r3, #1
 800edce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7ff fa34 	bl	800e244 <SWAPBYTE>
 800eddc:	4603      	mov	r3, r0
 800edde:	461a      	mov	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3301      	adds	r3, #1
 800ede8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	3301      	adds	r3, #1
 800edee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f7ff fa27 	bl	800e244 <SWAPBYTE>
 800edf6:	4603      	mov	r3, r0
 800edf8:	461a      	mov	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	80da      	strh	r2, [r3, #6]
}
 800edfe:	bf00      	nop
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b082      	sub	sp, #8
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee10:	2180      	movs	r1, #128	; 0x80
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fd2a 	bl	800f86c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee18:	2100      	movs	r1, #0
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 fd26 	bl	800f86c <USBD_LL_StallEP>
}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b086      	sub	sp, #24
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d036      	beq.n	800eeac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee42:	6938      	ldr	r0, [r7, #16]
 800ee44:	f000 f836 	bl	800eeb4 <USBD_GetLen>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	005b      	lsls	r3, r3, #1
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	7812      	ldrb	r2, [r2, #0]
 800ee60:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee62:	7dfb      	ldrb	r3, [r7, #23]
 800ee64:	3301      	adds	r3, #1
 800ee66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	68ba      	ldr	r2, [r7, #8]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	2203      	movs	r2, #3
 800ee70:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	3301      	adds	r3, #1
 800ee76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee78:	e013      	b.n	800eea2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee7a:	7dfb      	ldrb	r3, [r7, #23]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	4413      	add	r3, r2
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	7812      	ldrb	r2, [r2, #0]
 800ee84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	613b      	str	r3, [r7, #16]
    idx++;
 800ee8c:	7dfb      	ldrb	r3, [r7, #23]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	4413      	add	r3, r2
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee9c:	7dfb      	ldrb	r3, [r7, #23]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1e7      	bne.n	800ee7a <USBD_GetString+0x52>
 800eeaa:	e000      	b.n	800eeae <USBD_GetString+0x86>
    return;
 800eeac:	bf00      	nop
  }
}
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eebc:	2300      	movs	r3, #0
 800eebe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eec4:	e005      	b.n	800eed2 <USBD_GetLen+0x1e>
  {
    len++;
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
 800eec8:	3301      	adds	r3, #1
 800eeca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	3301      	adds	r3, #1
 800eed0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f5      	bne.n	800eec6 <USBD_GetLen+0x12>
  }

  return len;
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f000 fd35 	bl	800f97e <USBD_LL_Transmit>

  return USBD_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	60b9      	str	r1, [r7, #8]
 800ef28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	2100      	movs	r1, #0
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 fd24 	bl	800f97e <USBD_LL_Transmit>

  return USBD_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2203      	movs	r2, #3
 800ef50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 fd28 	bl	800f9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 fd17 	bl	800f9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2204      	movs	r2, #4
 800efa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800efac:	2300      	movs	r3, #0
 800efae:	2200      	movs	r2, #0
 800efb0:	2100      	movs	r1, #0
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fce3 	bl	800f97e <USBD_LL_Transmit>

  return USBD_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2205      	movs	r2, #5
 800efce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efd2:	2300      	movs	r3, #0
 800efd4:	2200      	movs	r2, #0
 800efd6:	2100      	movs	r1, #0
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fcf1 	bl	800f9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800efe8:	b480      	push	{r7}
 800efea:	b087      	sub	sp, #28
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eff6:	2301      	movs	r3, #1
 800eff8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800effe:	4b1f      	ldr	r3, [pc, #124]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f000:	7a5b      	ldrb	r3, [r3, #9]
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d131      	bne.n	800f06c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f008:	4b1c      	ldr	r3, [pc, #112]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f00a:	7a5b      	ldrb	r3, [r3, #9]
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	461a      	mov	r2, r3
 800f010:	4b1a      	ldr	r3, [pc, #104]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f012:	2100      	movs	r1, #0
 800f014:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f016:	4b19      	ldr	r3, [pc, #100]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f018:	7a5b      	ldrb	r3, [r3, #9]
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	4a17      	ldr	r2, [pc, #92]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	4413      	add	r3, r2
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f026:	4b15      	ldr	r3, [pc, #84]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f028:	7a5b      	ldrb	r3, [r3, #9]
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	461a      	mov	r2, r3
 800f02e:	4b13      	ldr	r3, [pc, #76]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f030:	4413      	add	r3, r2
 800f032:	79fa      	ldrb	r2, [r7, #7]
 800f034:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f036:	4b11      	ldr	r3, [pc, #68]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f038:	7a5b      	ldrb	r3, [r3, #9]
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	1c5a      	adds	r2, r3, #1
 800f03e:	b2d1      	uxtb	r1, r2
 800f040:	4a0e      	ldr	r2, [pc, #56]	; (800f07c <FATFS_LinkDriverEx+0x94>)
 800f042:	7251      	strb	r1, [r2, #9]
 800f044:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f046:	7dbb      	ldrb	r3, [r7, #22]
 800f048:	3330      	adds	r3, #48	; 0x30
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3301      	adds	r3, #1
 800f054:	223a      	movs	r2, #58	; 0x3a
 800f056:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	3302      	adds	r3, #2
 800f05c:	222f      	movs	r2, #47	; 0x2f
 800f05e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	3303      	adds	r3, #3
 800f064:	2200      	movs	r2, #0
 800f066:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	371c      	adds	r7, #28
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	2000093c 	.word	0x2000093c

0800f080 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f08a:	2200      	movs	r2, #0
 800f08c:	6839      	ldr	r1, [r7, #0]
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff ffaa 	bl	800efe8 <FATFS_LinkDriverEx>
 800f094:	4603      	mov	r3, r0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
	...

0800f0a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	4912      	ldr	r1, [pc, #72]	; (800f0f0 <MX_USB_DEVICE_Init+0x50>)
 800f0a8:	4812      	ldr	r0, [pc, #72]	; (800f0f4 <MX_USB_DEVICE_Init+0x54>)
 800f0aa:	f7fe fc8f 	bl	800d9cc <USBD_Init>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f0b4:	f7f4 fe74 	bl	8003da0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0b8:	490f      	ldr	r1, [pc, #60]	; (800f0f8 <MX_USB_DEVICE_Init+0x58>)
 800f0ba:	480e      	ldr	r0, [pc, #56]	; (800f0f4 <MX_USB_DEVICE_Init+0x54>)
 800f0bc:	f7fe fcc4 	bl	800da48 <USBD_RegisterClass>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f0c6:	f7f4 fe6b 	bl	8003da0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f0ca:	490c      	ldr	r1, [pc, #48]	; (800f0fc <MX_USB_DEVICE_Init+0x5c>)
 800f0cc:	4809      	ldr	r0, [pc, #36]	; (800f0f4 <MX_USB_DEVICE_Init+0x54>)
 800f0ce:	f7fe fbed 	bl	800d8ac <USBD_CDC_RegisterInterface>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d001      	beq.n	800f0dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f0d8:	f7f4 fe62 	bl	8003da0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f0dc:	4805      	ldr	r0, [pc, #20]	; (800f0f4 <MX_USB_DEVICE_Init+0x54>)
 800f0de:	f7fe fcf7 	bl	800dad0 <USBD_Start>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d001      	beq.n	800f0ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f0e8:	f7f4 fe5a 	bl	8003da0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f0ec:	bf00      	nop
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	200000d0 	.word	0x200000d0
 800f0f4:	20000948 	.word	0x20000948
 800f0f8:	20000034 	.word	0x20000034
 800f0fc:	200000bc 	.word	0x200000bc

0800f100 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f104:	2200      	movs	r2, #0
 800f106:	4905      	ldr	r1, [pc, #20]	; (800f11c <CDC_Init_FS+0x1c>)
 800f108:	4805      	ldr	r0, [pc, #20]	; (800f120 <CDC_Init_FS+0x20>)
 800f10a:	f7fe fbe9 	bl	800d8e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f10e:	4905      	ldr	r1, [pc, #20]	; (800f124 <CDC_Init_FS+0x24>)
 800f110:	4803      	ldr	r0, [pc, #12]	; (800f120 <CDC_Init_FS+0x20>)
 800f112:	f7fe fc07 	bl	800d924 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f116:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f118:	4618      	mov	r0, r3
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	20001424 	.word	0x20001424
 800f120:	20000948 	.word	0x20000948
 800f124:	20000c24 	.word	0x20000c24

0800f128 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f128:	b480      	push	{r7}
 800f12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f12c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f12e:	4618      	mov	r0, r3
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	6039      	str	r1, [r7, #0]
 800f142:	71fb      	strb	r3, [r7, #7]
 800f144:	4613      	mov	r3, r2
 800f146:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	2b23      	cmp	r3, #35	; 0x23
 800f14c:	d85c      	bhi.n	800f208 <CDC_Control_FS+0xd0>
 800f14e:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <CDC_Control_FS+0x1c>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f209 	.word	0x0800f209
 800f158:	0800f209 	.word	0x0800f209
 800f15c:	0800f209 	.word	0x0800f209
 800f160:	0800f209 	.word	0x0800f209
 800f164:	0800f209 	.word	0x0800f209
 800f168:	0800f209 	.word	0x0800f209
 800f16c:	0800f209 	.word	0x0800f209
 800f170:	0800f209 	.word	0x0800f209
 800f174:	0800f209 	.word	0x0800f209
 800f178:	0800f209 	.word	0x0800f209
 800f17c:	0800f209 	.word	0x0800f209
 800f180:	0800f209 	.word	0x0800f209
 800f184:	0800f209 	.word	0x0800f209
 800f188:	0800f209 	.word	0x0800f209
 800f18c:	0800f209 	.word	0x0800f209
 800f190:	0800f209 	.word	0x0800f209
 800f194:	0800f209 	.word	0x0800f209
 800f198:	0800f209 	.word	0x0800f209
 800f19c:	0800f209 	.word	0x0800f209
 800f1a0:	0800f209 	.word	0x0800f209
 800f1a4:	0800f209 	.word	0x0800f209
 800f1a8:	0800f209 	.word	0x0800f209
 800f1ac:	0800f209 	.word	0x0800f209
 800f1b0:	0800f209 	.word	0x0800f209
 800f1b4:	0800f209 	.word	0x0800f209
 800f1b8:	0800f209 	.word	0x0800f209
 800f1bc:	0800f209 	.word	0x0800f209
 800f1c0:	0800f209 	.word	0x0800f209
 800f1c4:	0800f209 	.word	0x0800f209
 800f1c8:	0800f209 	.word	0x0800f209
 800f1cc:	0800f209 	.word	0x0800f209
 800f1d0:	0800f209 	.word	0x0800f209
 800f1d4:	0800f1e5 	.word	0x0800f1e5
 800f1d8:	0800f1f7 	.word	0x0800f1f7
 800f1dc:	0800f209 	.word	0x0800f209
 800f1e0:	0800f209 	.word	0x0800f209
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	  memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f1e4:	4b0c      	ldr	r3, [pc, #48]	; (800f218 <CDC_Control_FS+0xe0>)
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	6810      	ldr	r0, [r2, #0]
 800f1ea:	6018      	str	r0, [r3, #0]
 800f1ec:	8891      	ldrh	r1, [r2, #4]
 800f1ee:	7992      	ldrb	r2, [r2, #6]
 800f1f0:	8099      	strh	r1, [r3, #4]
 800f1f2:	719a      	strb	r2, [r3, #6]
    break;
 800f1f4:	e009      	b.n	800f20a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	  memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	4a07      	ldr	r2, [pc, #28]	; (800f218 <CDC_Control_FS+0xe0>)
 800f1fa:	6810      	ldr	r0, [r2, #0]
 800f1fc:	6018      	str	r0, [r3, #0]
 800f1fe:	8891      	ldrh	r1, [r2, #4]
 800f200:	7992      	ldrb	r2, [r2, #6]
 800f202:	8099      	strh	r1, [r3, #4]
 800f204:	719a      	strb	r2, [r3, #6]
    break;
 800f206:	e000      	b.n	800f20a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f208:	bf00      	nop
  }

  return (USBD_OK);
 800f20a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	200000b4 	.word	0x200000b4

0800f21c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	4805      	ldr	r0, [pc, #20]	; (800f240 <CDC_Receive_FS+0x24>)
 800f22a:	f7fe fb7b 	bl	800d924 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f22e:	4804      	ldr	r0, [pc, #16]	; (800f240 <CDC_Receive_FS+0x24>)
 800f230:	f7fe fb96 	bl	800d960 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f234:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	20000948 	.word	0x20000948

0800f244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	4613      	mov	r3, r2
 800f250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	371c      	adds	r7, #28
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
	...

0800f268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	4603      	mov	r3, r0
 800f270:	6039      	str	r1, [r7, #0]
 800f272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	2212      	movs	r2, #18
 800f278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f27a:	4b03      	ldr	r3, [pc, #12]	; (800f288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr
 800f288:	200000ec 	.word	0x200000ec

0800f28c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	4603      	mov	r3, r0
 800f294:	6039      	str	r1, [r7, #0]
 800f296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2204      	movs	r2, #4
 800f29c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f29e:	4b03      	ldr	r3, [pc, #12]	; (800f2ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20000100 	.word	0x20000100

0800f2b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	6039      	str	r1, [r7, #0]
 800f2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d105      	bne.n	800f2ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	4907      	ldr	r1, [pc, #28]	; (800f2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2c6:	4808      	ldr	r0, [pc, #32]	; (800f2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2c8:	f7ff fdae 	bl	800ee28 <USBD_GetString>
 800f2cc:	e004      	b.n	800f2d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	4904      	ldr	r1, [pc, #16]	; (800f2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2d2:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2d4:	f7ff fda8 	bl	800ee28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2d8:	4b02      	ldr	r3, [pc, #8]	; (800f2e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20001c24 	.word	0x20001c24
 800f2e8:	080136f0 	.word	0x080136f0

0800f2ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	6039      	str	r1, [r7, #0]
 800f2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	4904      	ldr	r1, [pc, #16]	; (800f30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2fc:	4804      	ldr	r0, [pc, #16]	; (800f310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2fe:	f7ff fd93 	bl	800ee28 <USBD_GetString>
  return USBD_StrDesc;
 800f302:	4b02      	ldr	r3, [pc, #8]	; (800f30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	20001c24 	.word	0x20001c24
 800f310:	08013708 	.word	0x08013708

0800f314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	6039      	str	r1, [r7, #0]
 800f31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	221a      	movs	r2, #26
 800f324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f326:	f000 f843 	bl	800f3b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f32a:	4b02      	ldr	r3, [pc, #8]	; (800f334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20000104 	.word	0x20000104

0800f338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	4603      	mov	r3, r0
 800f340:	6039      	str	r1, [r7, #0]
 800f342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f344:	79fb      	ldrb	r3, [r7, #7]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d105      	bne.n	800f356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4907      	ldr	r1, [pc, #28]	; (800f36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f34e:	4808      	ldr	r0, [pc, #32]	; (800f370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f350:	f7ff fd6a 	bl	800ee28 <USBD_GetString>
 800f354:	e004      	b.n	800f360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	4904      	ldr	r1, [pc, #16]	; (800f36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f35a:	4805      	ldr	r0, [pc, #20]	; (800f370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f35c:	f7ff fd64 	bl	800ee28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f360:	4b02      	ldr	r3, [pc, #8]	; (800f36c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f362:	4618      	mov	r0, r3
 800f364:	3708      	adds	r7, #8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	20001c24 	.word	0x20001c24
 800f370:	0801371c 	.word	0x0801371c

0800f374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	6039      	str	r1, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d105      	bne.n	800f392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	4907      	ldr	r1, [pc, #28]	; (800f3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f38a:	4808      	ldr	r0, [pc, #32]	; (800f3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f38c:	f7ff fd4c 	bl	800ee28 <USBD_GetString>
 800f390:	e004      	b.n	800f39c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	4904      	ldr	r1, [pc, #16]	; (800f3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f396:	4805      	ldr	r0, [pc, #20]	; (800f3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f398:	f7ff fd46 	bl	800ee28 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f39c:	4b02      	ldr	r3, [pc, #8]	; (800f3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20001c24 	.word	0x20001c24
 800f3ac:	08013728 	.word	0x08013728

0800f3b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f3b6:	4b0f      	ldr	r3, [pc, #60]	; (800f3f4 <Get_SerialNum+0x44>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3bc:	4b0e      	ldr	r3, [pc, #56]	; (800f3f8 <Get_SerialNum+0x48>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3c2:	4b0e      	ldr	r3, [pc, #56]	; (800f3fc <Get_SerialNum+0x4c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d009      	beq.n	800f3ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3d6:	2208      	movs	r2, #8
 800f3d8:	4909      	ldr	r1, [pc, #36]	; (800f400 <Get_SerialNum+0x50>)
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f000 f814 	bl	800f408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3e0:	2204      	movs	r2, #4
 800f3e2:	4908      	ldr	r1, [pc, #32]	; (800f404 <Get_SerialNum+0x54>)
 800f3e4:	68b8      	ldr	r0, [r7, #8]
 800f3e6:	f000 f80f 	bl	800f408 <IntToUnicode>
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	1fff7a10 	.word	0x1fff7a10
 800f3f8:	1fff7a14 	.word	0x1fff7a14
 800f3fc:	1fff7a18 	.word	0x1fff7a18
 800f400:	20000106 	.word	0x20000106
 800f404:	20000116 	.word	0x20000116

0800f408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f408:	b480      	push	{r7}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	4613      	mov	r3, r2
 800f414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f41a:	2300      	movs	r3, #0
 800f41c:	75fb      	strb	r3, [r7, #23]
 800f41e:	e027      	b.n	800f470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	0f1b      	lsrs	r3, r3, #28
 800f424:	2b09      	cmp	r3, #9
 800f426:	d80b      	bhi.n	800f440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	0f1b      	lsrs	r3, r3, #28
 800f42c:	b2da      	uxtb	r2, r3
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
 800f430:	005b      	lsls	r3, r3, #1
 800f432:	4619      	mov	r1, r3
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	440b      	add	r3, r1
 800f438:	3230      	adds	r2, #48	; 0x30
 800f43a:	b2d2      	uxtb	r2, r2
 800f43c:	701a      	strb	r2, [r3, #0]
 800f43e:	e00a      	b.n	800f456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	0f1b      	lsrs	r3, r3, #28
 800f444:	b2da      	uxtb	r2, r3
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	4619      	mov	r1, r3
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	440b      	add	r3, r1
 800f450:	3237      	adds	r2, #55	; 0x37
 800f452:	b2d2      	uxtb	r2, r2
 800f454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	011b      	lsls	r3, r3, #4
 800f45a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f45c:	7dfb      	ldrb	r3, [r7, #23]
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	3301      	adds	r3, #1
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	4413      	add	r3, r2
 800f466:	2200      	movs	r2, #0
 800f468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	3301      	adds	r3, #1
 800f46e:	75fb      	strb	r3, [r7, #23]
 800f470:	7dfa      	ldrb	r2, [r7, #23]
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	429a      	cmp	r2, r3
 800f476:	d3d3      	bcc.n	800f420 <IntToUnicode+0x18>
  }
}
 800f478:	bf00      	nop
 800f47a:	bf00      	nop
 800f47c:	371c      	adds	r7, #28
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
	...

0800f488 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08a      	sub	sp, #40	; 0x28
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f490:	f107 0314 	add.w	r3, r7, #20
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]
 800f498:	605a      	str	r2, [r3, #4]
 800f49a:	609a      	str	r2, [r3, #8]
 800f49c:	60da      	str	r2, [r3, #12]
 800f49e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4a8:	d13a      	bne.n	800f520 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	613b      	str	r3, [r7, #16]
 800f4ae:	4b1e      	ldr	r3, [pc, #120]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b2:	4a1d      	ldr	r2, [pc, #116]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4b4:	f043 0301 	orr.w	r3, r3, #1
 800f4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800f4ba:	4b1b      	ldr	r3, [pc, #108]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	613b      	str	r3, [r7, #16]
 800f4c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f4c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f4ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d4:	2303      	movs	r3, #3
 800f4d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4d8:	230a      	movs	r3, #10
 800f4da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4dc:	f107 0314 	add.w	r3, r7, #20
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4812      	ldr	r0, [pc, #72]	; (800f52c <HAL_PCD_MspInit+0xa4>)
 800f4e4:	f7f6 faba 	bl	8005a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4e8:	4b0f      	ldr	r3, [pc, #60]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ec:	4a0e      	ldr	r2, [pc, #56]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4f2:	6353      	str	r3, [r2, #52]	; 0x34
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	4b0b      	ldr	r3, [pc, #44]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fc:	4a0a      	ldr	r2, [pc, #40]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f4fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f502:	6453      	str	r3, [r2, #68]	; 0x44
 800f504:	4b08      	ldr	r3, [pc, #32]	; (800f528 <HAL_PCD_MspInit+0xa0>)
 800f506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f50c:	60fb      	str	r3, [r7, #12]
 800f50e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 800f510:	2200      	movs	r2, #0
 800f512:	2104      	movs	r1, #4
 800f514:	2043      	movs	r0, #67	; 0x43
 800f516:	f7f5 fe68 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f51a:	2043      	movs	r0, #67	; 0x43
 800f51c:	f7f5 fe81 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f520:	bf00      	nop
 800f522:	3728      	adds	r7, #40	; 0x28
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	40023800 	.word	0x40023800
 800f52c:	40020000 	.word	0x40020000

0800f530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f7fe fb0f 	bl	800db6a <USBD_LL_SetupStage>
}
 800f54c:	bf00      	nop
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f566:	78fa      	ldrb	r2, [r7, #3]
 800f568:	6879      	ldr	r1, [r7, #4]
 800f56a:	4613      	mov	r3, r2
 800f56c:	00db      	lsls	r3, r3, #3
 800f56e:	4413      	add	r3, r2
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	440b      	add	r3, r1
 800f574:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	78fb      	ldrb	r3, [r7, #3]
 800f57c:	4619      	mov	r1, r3
 800f57e:	f7fe fb49 	bl	800dc14 <USBD_LL_DataOutStage>
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b082      	sub	sp, #8
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	460b      	mov	r3, r1
 800f594:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f59c:	78fa      	ldrb	r2, [r7, #3]
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	4413      	add	r3, r2
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	440b      	add	r3, r1
 800f5aa:	334c      	adds	r3, #76	; 0x4c
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	78fb      	ldrb	r3, [r7, #3]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	f7fe fbe2 	bl	800dd7a <USBD_LL_DataInStage>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fd16 	bl	800dffe <USBD_LL_SOF>
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b084      	sub	sp, #16
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d102      	bne.n	800f5f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	73fb      	strb	r3, [r7, #15]
 800f5f2:	e008      	b.n	800f606 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d102      	bne.n	800f602 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	73fb      	strb	r3, [r7, #15]
 800f600:	e001      	b.n	800f606 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f602:	f7f4 fbcd 	bl	8003da0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f60c:	7bfa      	ldrb	r2, [r7, #15]
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f7fe fcb6 	bl	800df82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fe fc5e 	bl	800dede <USBD_LL_Reset>
}
 800f622:	bf00      	nop
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fcb1 	bl	800dfa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	6812      	ldr	r2, [r2, #0]
 800f64e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f652:	f043 0301 	orr.w	r3, r3, #1
 800f656:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6a1b      	ldr	r3, [r3, #32]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d005      	beq.n	800f66c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <HAL_PCD_SuspendCallback+0x48>)
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	4a03      	ldr	r2, [pc, #12]	; (800f674 <HAL_PCD_SuspendCallback+0x48>)
 800f666:	f043 0306 	orr.w	r3, r3, #6
 800f66a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	e000ed00 	.word	0xe000ed00

0800f678 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f686:	4618      	mov	r0, r3
 800f688:	f7fe fca1 	bl	800dfce <USBD_LL_Resume>
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	460b      	mov	r3, r1
 800f69e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6a6:	78fa      	ldrb	r2, [r7, #3]
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe fcf9 	bl	800e0a2 <USBD_LL_IsoOUTIncomplete>
}
 800f6b0:	bf00      	nop
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ca:	78fa      	ldrb	r2, [r7, #3]
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe fcb5 	bl	800e03e <USBD_LL_IsoINIncomplete>
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fe fd0b 	bl	800e106 <USBD_LL_DevConnected>
}
 800f6f0:	bf00      	nop
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fd08 	bl	800e11c <USBD_LL_DevDisconnected>
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d13c      	bne.n	800f79e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f724:	4a20      	ldr	r2, [pc, #128]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a1e      	ldr	r2, [pc, #120]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f730:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f734:	4b1c      	ldr	r3, [pc, #112]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f73a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f73c:	4b1a      	ldr	r3, [pc, #104]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f73e:	2204      	movs	r2, #4
 800f740:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f742:	4b19      	ldr	r3, [pc, #100]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f744:	2202      	movs	r2, #2
 800f746:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f748:	4b17      	ldr	r3, [pc, #92]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f74e:	4b16      	ldr	r3, [pc, #88]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f750:	2202      	movs	r2, #2
 800f752:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f754:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f756:	2200      	movs	r2, #0
 800f758:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f75a:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f760:	4b11      	ldr	r3, [pc, #68]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f762:	2200      	movs	r2, #0
 800f764:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f766:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f768:	2200      	movs	r2, #0
 800f76a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f76c:	4b0e      	ldr	r3, [pc, #56]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f76e:	2200      	movs	r2, #0
 800f770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f772:	480d      	ldr	r0, [pc, #52]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f774:	f7f7 fb19 	bl	8006daa <HAL_PCD_Init>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f77e:	f7f4 fb0f 	bl	8003da0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f782:	2180      	movs	r1, #128	; 0x80
 800f784:	4808      	ldr	r0, [pc, #32]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f786:	f7f8 fd70 	bl	800826a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f78a:	2240      	movs	r2, #64	; 0x40
 800f78c:	2100      	movs	r1, #0
 800f78e:	4806      	ldr	r0, [pc, #24]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f790:	f7f8 fd24 	bl	80081dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f794:	2280      	movs	r2, #128	; 0x80
 800f796:	2101      	movs	r1, #1
 800f798:	4803      	ldr	r0, [pc, #12]	; (800f7a8 <USBD_LL_Init+0x94>)
 800f79a:	f7f8 fd1f 	bl	80081dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20001e24 	.word	0x20001e24

0800f7ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f7 fc0e 	bl	8006fe4 <HAL_PCD_Start>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7cc:	7bfb      	ldrb	r3, [r7, #15]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f000 f942 	bl	800fa58 <USBD_Get_USB_Status>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b084      	sub	sp, #16
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
 800f7ea:	4608      	mov	r0, r1
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	70fb      	strb	r3, [r7, #3]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70bb      	strb	r3, [r7, #2]
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f80a:	78bb      	ldrb	r3, [r7, #2]
 800f80c:	883a      	ldrh	r2, [r7, #0]
 800f80e:	78f9      	ldrb	r1, [r7, #3]
 800f810:	f7f8 f8df 	bl	80079d2 <HAL_PCD_EP_Open>
 800f814:	4603      	mov	r3, r0
 800f816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f818:	7bfb      	ldrb	r3, [r7, #15]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f000 f91c 	bl	800fa58 <USBD_Get_USB_Status>
 800f820:	4603      	mov	r3, r0
 800f822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f824:	7bbb      	ldrb	r3, [r7, #14]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	460b      	mov	r3, r1
 800f838:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f848:	78fa      	ldrb	r2, [r7, #3]
 800f84a:	4611      	mov	r1, r2
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7f8 f928 	bl	8007aa2 <HAL_PCD_EP_Close>
 800f852:	4603      	mov	r3, r0
 800f854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	4618      	mov	r0, r3
 800f85a:	f000 f8fd 	bl	800fa58 <USBD_Get_USB_Status>
 800f85e:	4603      	mov	r3, r0
 800f860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f862:	7bbb      	ldrb	r3, [r7, #14]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f878:	2300      	movs	r3, #0
 800f87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f886:	78fa      	ldrb	r2, [r7, #3]
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f8 fa00 	bl	8007c90 <HAL_PCD_EP_SetStall>
 800f890:	4603      	mov	r3, r0
 800f892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	4618      	mov	r0, r3
 800f898:	f000 f8de 	bl	800fa58 <USBD_Get_USB_Status>
 800f89c:	4603      	mov	r3, r0
 800f89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8c4:	78fa      	ldrb	r2, [r7, #3]
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7f8 fa45 	bl	8007d58 <HAL_PCD_EP_ClrStall>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8d2:	7bfb      	ldrb	r3, [r7, #15]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 f8bf 	bl	800fa58 <USBD_Get_USB_Status>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f8fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f900:	2b00      	cmp	r3, #0
 800f902:	da0b      	bge.n	800f91c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f90a:	68f9      	ldr	r1, [r7, #12]
 800f90c:	4613      	mov	r3, r2
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	4413      	add	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	440b      	add	r3, r1
 800f916:	333e      	adds	r3, #62	; 0x3e
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	e00b      	b.n	800f934 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f91c:	78fb      	ldrb	r3, [r7, #3]
 800f91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f922:	68f9      	ldr	r1, [r7, #12]
 800f924:	4613      	mov	r3, r2
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	4413      	add	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	440b      	add	r3, r1
 800f92e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f932:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f934:	4618      	mov	r0, r3
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f950:	2300      	movs	r3, #0
 800f952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f95a:	78fa      	ldrb	r2, [r7, #3]
 800f95c:	4611      	mov	r1, r2
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f8 f812 	bl	8007988 <HAL_PCD_SetAddress>
 800f964:	4603      	mov	r3, r0
 800f966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f968:	7bfb      	ldrb	r3, [r7, #15]
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 f874 	bl	800fa58 <USBD_Get_USB_Status>
 800f970:	4603      	mov	r3, r0
 800f972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f974:	7bbb      	ldrb	r3, [r7, #14]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b086      	sub	sp, #24
 800f982:	af00      	add	r7, sp, #0
 800f984:	60f8      	str	r0, [r7, #12]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
 800f98a:	460b      	mov	r3, r1
 800f98c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f99c:	7af9      	ldrb	r1, [r7, #11]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	f7f8 f92b 	bl	8007bfc <HAL_PCD_EP_Transmit>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 f853 	bl	800fa58 <USBD_Get_USB_Status>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3718      	adds	r7, #24
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	607a      	str	r2, [r7, #4]
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9de:	7af9      	ldrb	r1, [r7, #11]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	f7f8 f8a7 	bl	8007b36 <HAL_PCD_EP_Receive>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f000 f832 	bl	800fa58 <USBD_Get_USB_Status>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3718      	adds	r7, #24
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}

0800fa02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b082      	sub	sp, #8
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa14:	78fa      	ldrb	r2, [r7, #3]
 800fa16:	4611      	mov	r1, r2
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f8 f8d7 	bl	8007bcc <HAL_PCD_EP_GetRxCount>
 800fa1e:	4603      	mov	r3, r0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa30:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <USBD_static_malloc+0x18>)
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	20002330 	.word	0x20002330

0800fa44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]

}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa66:	79fb      	ldrb	r3, [r7, #7]
 800fa68:	2b03      	cmp	r3, #3
 800fa6a:	d817      	bhi.n	800fa9c <USBD_Get_USB_Status+0x44>
 800fa6c:	a201      	add	r2, pc, #4	; (adr r2, 800fa74 <USBD_Get_USB_Status+0x1c>)
 800fa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa72:	bf00      	nop
 800fa74:	0800fa85 	.word	0x0800fa85
 800fa78:	0800fa8b 	.word	0x0800fa8b
 800fa7c:	0800fa91 	.word	0x0800fa91
 800fa80:	0800fa97 	.word	0x0800fa97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73fb      	strb	r3, [r7, #15]
    break;
 800fa88:	e00b      	b.n	800faa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa8a:	2303      	movs	r3, #3
 800fa8c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa8e:	e008      	b.n	800faa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa90:	2301      	movs	r3, #1
 800fa92:	73fb      	strb	r3, [r7, #15]
    break;
 800fa94:	e005      	b.n	800faa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa96:	2303      	movs	r3, #3
 800fa98:	73fb      	strb	r3, [r7, #15]
    break;
 800fa9a:	e002      	b.n	800faa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	73fb      	strb	r3, [r7, #15]
    break;
 800faa0:	bf00      	nop
  }
  return usb_status;
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <pow>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	ed2d 8b02 	vpush	{d8}
 800fab6:	eeb0 8a40 	vmov.f32	s16, s0
 800faba:	eef0 8a60 	vmov.f32	s17, s1
 800fabe:	ec55 4b11 	vmov	r4, r5, d1
 800fac2:	f000 fa3d 	bl	800ff40 <__ieee754_pow>
 800fac6:	4622      	mov	r2, r4
 800fac8:	462b      	mov	r3, r5
 800faca:	4620      	mov	r0, r4
 800facc:	4629      	mov	r1, r5
 800face:	ec57 6b10 	vmov	r6, r7, d0
 800fad2:	f7f1 f82b 	bl	8000b2c <__aeabi_dcmpun>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d13b      	bne.n	800fb52 <pow+0xa2>
 800fada:	ec51 0b18 	vmov	r0, r1, d8
 800fade:	2200      	movs	r2, #0
 800fae0:	2300      	movs	r3, #0
 800fae2:	f7f0 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 800fae6:	b1b8      	cbz	r0, 800fb18 <pow+0x68>
 800fae8:	2200      	movs	r2, #0
 800faea:	2300      	movs	r3, #0
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f0 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d146      	bne.n	800fb86 <pow+0xd6>
 800faf8:	ec45 4b10 	vmov	d0, r4, r5
 800fafc:	f000 fa10 	bl	800ff20 <finite>
 800fb00:	b338      	cbz	r0, 800fb52 <pow+0xa2>
 800fb02:	2200      	movs	r2, #0
 800fb04:	2300      	movs	r3, #0
 800fb06:	4620      	mov	r0, r4
 800fb08:	4629      	mov	r1, r5
 800fb0a:	f7f0 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800fb0e:	b300      	cbz	r0, 800fb52 <pow+0xa2>
 800fb10:	f001 fe90 	bl	8011834 <__errno>
 800fb14:	2322      	movs	r3, #34	; 0x22
 800fb16:	e01b      	b.n	800fb50 <pow+0xa0>
 800fb18:	ec47 6b10 	vmov	d0, r6, r7
 800fb1c:	f000 fa00 	bl	800ff20 <finite>
 800fb20:	b9e0      	cbnz	r0, 800fb5c <pow+0xac>
 800fb22:	eeb0 0a48 	vmov.f32	s0, s16
 800fb26:	eef0 0a68 	vmov.f32	s1, s17
 800fb2a:	f000 f9f9 	bl	800ff20 <finite>
 800fb2e:	b1a8      	cbz	r0, 800fb5c <pow+0xac>
 800fb30:	ec45 4b10 	vmov	d0, r4, r5
 800fb34:	f000 f9f4 	bl	800ff20 <finite>
 800fb38:	b180      	cbz	r0, 800fb5c <pow+0xac>
 800fb3a:	4632      	mov	r2, r6
 800fb3c:	463b      	mov	r3, r7
 800fb3e:	4630      	mov	r0, r6
 800fb40:	4639      	mov	r1, r7
 800fb42:	f7f0 fff3 	bl	8000b2c <__aeabi_dcmpun>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d0e2      	beq.n	800fb10 <pow+0x60>
 800fb4a:	f001 fe73 	bl	8011834 <__errno>
 800fb4e:	2321      	movs	r3, #33	; 0x21
 800fb50:	6003      	str	r3, [r0, #0]
 800fb52:	ecbd 8b02 	vpop	{d8}
 800fb56:	ec47 6b10 	vmov	d0, r6, r7
 800fb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2300      	movs	r3, #0
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f0 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d0f2      	beq.n	800fb52 <pow+0xa2>
 800fb6c:	eeb0 0a48 	vmov.f32	s0, s16
 800fb70:	eef0 0a68 	vmov.f32	s1, s17
 800fb74:	f000 f9d4 	bl	800ff20 <finite>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0ea      	beq.n	800fb52 <pow+0xa2>
 800fb7c:	ec45 4b10 	vmov	d0, r4, r5
 800fb80:	f000 f9ce 	bl	800ff20 <finite>
 800fb84:	e7c3      	b.n	800fb0e <pow+0x5e>
 800fb86:	4f01      	ldr	r7, [pc, #4]	; (800fb8c <pow+0xdc>)
 800fb88:	2600      	movs	r6, #0
 800fb8a:	e7e2      	b.n	800fb52 <pow+0xa2>
 800fb8c:	3ff00000 	.word	0x3ff00000

0800fb90 <atan>:
 800fb90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb94:	ec55 4b10 	vmov	r4, r5, d0
 800fb98:	4bc3      	ldr	r3, [pc, #780]	; (800fea8 <atan+0x318>)
 800fb9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb9e:	429e      	cmp	r6, r3
 800fba0:	46ab      	mov	fp, r5
 800fba2:	dd18      	ble.n	800fbd6 <atan+0x46>
 800fba4:	4bc1      	ldr	r3, [pc, #772]	; (800feac <atan+0x31c>)
 800fba6:	429e      	cmp	r6, r3
 800fba8:	dc01      	bgt.n	800fbae <atan+0x1e>
 800fbaa:	d109      	bne.n	800fbc0 <atan+0x30>
 800fbac:	b144      	cbz	r4, 800fbc0 <atan+0x30>
 800fbae:	4622      	mov	r2, r4
 800fbb0:	462b      	mov	r3, r5
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	f7f0 fb69 	bl	800028c <__adddf3>
 800fbba:	4604      	mov	r4, r0
 800fbbc:	460d      	mov	r5, r1
 800fbbe:	e006      	b.n	800fbce <atan+0x3e>
 800fbc0:	f1bb 0f00 	cmp.w	fp, #0
 800fbc4:	f300 8131 	bgt.w	800fe2a <atan+0x29a>
 800fbc8:	a59b      	add	r5, pc, #620	; (adr r5, 800fe38 <atan+0x2a8>)
 800fbca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fbce:	ec45 4b10 	vmov	d0, r4, r5
 800fbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd6:	4bb6      	ldr	r3, [pc, #728]	; (800feb0 <atan+0x320>)
 800fbd8:	429e      	cmp	r6, r3
 800fbda:	dc14      	bgt.n	800fc06 <atan+0x76>
 800fbdc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fbe0:	429e      	cmp	r6, r3
 800fbe2:	dc0d      	bgt.n	800fc00 <atan+0x70>
 800fbe4:	a396      	add	r3, pc, #600	; (adr r3, 800fe40 <atan+0x2b0>)
 800fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbea:	ee10 0a10 	vmov	r0, s0
 800fbee:	4629      	mov	r1, r5
 800fbf0:	f7f0 fb4c 	bl	800028c <__adddf3>
 800fbf4:	4baf      	ldr	r3, [pc, #700]	; (800feb4 <atan+0x324>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f7f0 ff8e 	bl	8000b18 <__aeabi_dcmpgt>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d1e6      	bne.n	800fbce <atan+0x3e>
 800fc00:	f04f 3aff 	mov.w	sl, #4294967295
 800fc04:	e02b      	b.n	800fc5e <atan+0xce>
 800fc06:	f000 f963 	bl	800fed0 <fabs>
 800fc0a:	4bab      	ldr	r3, [pc, #684]	; (800feb8 <atan+0x328>)
 800fc0c:	429e      	cmp	r6, r3
 800fc0e:	ec55 4b10 	vmov	r4, r5, d0
 800fc12:	f300 80bf 	bgt.w	800fd94 <atan+0x204>
 800fc16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fc1a:	429e      	cmp	r6, r3
 800fc1c:	f300 80a0 	bgt.w	800fd60 <atan+0x1d0>
 800fc20:	ee10 2a10 	vmov	r2, s0
 800fc24:	ee10 0a10 	vmov	r0, s0
 800fc28:	462b      	mov	r3, r5
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	f7f0 fb2e 	bl	800028c <__adddf3>
 800fc30:	4ba0      	ldr	r3, [pc, #640]	; (800feb4 <atan+0x324>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	f7f0 fb28 	bl	8000288 <__aeabi_dsub>
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4606      	mov	r6, r0
 800fc3c:	460f      	mov	r7, r1
 800fc3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc42:	4620      	mov	r0, r4
 800fc44:	4629      	mov	r1, r5
 800fc46:	f7f0 fb21 	bl	800028c <__adddf3>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4630      	mov	r0, r6
 800fc50:	4639      	mov	r1, r7
 800fc52:	f7f0 fdfb 	bl	800084c <__aeabi_ddiv>
 800fc56:	f04f 0a00 	mov.w	sl, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	460d      	mov	r5, r1
 800fc5e:	4622      	mov	r2, r4
 800fc60:	462b      	mov	r3, r5
 800fc62:	4620      	mov	r0, r4
 800fc64:	4629      	mov	r1, r5
 800fc66:	f7f0 fcc7 	bl	80005f8 <__aeabi_dmul>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	4680      	mov	r8, r0
 800fc70:	4689      	mov	r9, r1
 800fc72:	f7f0 fcc1 	bl	80005f8 <__aeabi_dmul>
 800fc76:	a374      	add	r3, pc, #464	; (adr r3, 800fe48 <atan+0x2b8>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	4606      	mov	r6, r0
 800fc7e:	460f      	mov	r7, r1
 800fc80:	f7f0 fcba 	bl	80005f8 <__aeabi_dmul>
 800fc84:	a372      	add	r3, pc, #456	; (adr r3, 800fe50 <atan+0x2c0>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	f7f0 faff 	bl	800028c <__adddf3>
 800fc8e:	4632      	mov	r2, r6
 800fc90:	463b      	mov	r3, r7
 800fc92:	f7f0 fcb1 	bl	80005f8 <__aeabi_dmul>
 800fc96:	a370      	add	r3, pc, #448	; (adr r3, 800fe58 <atan+0x2c8>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	f7f0 faf6 	bl	800028c <__adddf3>
 800fca0:	4632      	mov	r2, r6
 800fca2:	463b      	mov	r3, r7
 800fca4:	f7f0 fca8 	bl	80005f8 <__aeabi_dmul>
 800fca8:	a36d      	add	r3, pc, #436	; (adr r3, 800fe60 <atan+0x2d0>)
 800fcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcae:	f7f0 faed 	bl	800028c <__adddf3>
 800fcb2:	4632      	mov	r2, r6
 800fcb4:	463b      	mov	r3, r7
 800fcb6:	f7f0 fc9f 	bl	80005f8 <__aeabi_dmul>
 800fcba:	a36b      	add	r3, pc, #428	; (adr r3, 800fe68 <atan+0x2d8>)
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	f7f0 fae4 	bl	800028c <__adddf3>
 800fcc4:	4632      	mov	r2, r6
 800fcc6:	463b      	mov	r3, r7
 800fcc8:	f7f0 fc96 	bl	80005f8 <__aeabi_dmul>
 800fccc:	a368      	add	r3, pc, #416	; (adr r3, 800fe70 <atan+0x2e0>)
 800fcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd2:	f7f0 fadb 	bl	800028c <__adddf3>
 800fcd6:	4642      	mov	r2, r8
 800fcd8:	464b      	mov	r3, r9
 800fcda:	f7f0 fc8d 	bl	80005f8 <__aeabi_dmul>
 800fcde:	a366      	add	r3, pc, #408	; (adr r3, 800fe78 <atan+0x2e8>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	4680      	mov	r8, r0
 800fce6:	4689      	mov	r9, r1
 800fce8:	4630      	mov	r0, r6
 800fcea:	4639      	mov	r1, r7
 800fcec:	f7f0 fc84 	bl	80005f8 <__aeabi_dmul>
 800fcf0:	a363      	add	r3, pc, #396	; (adr r3, 800fe80 <atan+0x2f0>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	f7f0 fac7 	bl	8000288 <__aeabi_dsub>
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	463b      	mov	r3, r7
 800fcfe:	f7f0 fc7b 	bl	80005f8 <__aeabi_dmul>
 800fd02:	a361      	add	r3, pc, #388	; (adr r3, 800fe88 <atan+0x2f8>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f7f0 fabe 	bl	8000288 <__aeabi_dsub>
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	463b      	mov	r3, r7
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	a35e      	add	r3, pc, #376	; (adr r3, 800fe90 <atan+0x300>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	f7f0 fab5 	bl	8000288 <__aeabi_dsub>
 800fd1e:	4632      	mov	r2, r6
 800fd20:	463b      	mov	r3, r7
 800fd22:	f7f0 fc69 	bl	80005f8 <__aeabi_dmul>
 800fd26:	a35c      	add	r3, pc, #368	; (adr r3, 800fe98 <atan+0x308>)
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	f7f0 faac 	bl	8000288 <__aeabi_dsub>
 800fd30:	4632      	mov	r2, r6
 800fd32:	463b      	mov	r3, r7
 800fd34:	f7f0 fc60 	bl	80005f8 <__aeabi_dmul>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4640      	mov	r0, r8
 800fd3e:	4649      	mov	r1, r9
 800fd40:	f7f0 faa4 	bl	800028c <__adddf3>
 800fd44:	4622      	mov	r2, r4
 800fd46:	462b      	mov	r3, r5
 800fd48:	f7f0 fc56 	bl	80005f8 <__aeabi_dmul>
 800fd4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fd50:	4602      	mov	r2, r0
 800fd52:	460b      	mov	r3, r1
 800fd54:	d14b      	bne.n	800fdee <atan+0x25e>
 800fd56:	4620      	mov	r0, r4
 800fd58:	4629      	mov	r1, r5
 800fd5a:	f7f0 fa95 	bl	8000288 <__aeabi_dsub>
 800fd5e:	e72c      	b.n	800fbba <atan+0x2a>
 800fd60:	ee10 0a10 	vmov	r0, s0
 800fd64:	4b53      	ldr	r3, [pc, #332]	; (800feb4 <atan+0x324>)
 800fd66:	2200      	movs	r2, #0
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 fa8d 	bl	8000288 <__aeabi_dsub>
 800fd6e:	4b51      	ldr	r3, [pc, #324]	; (800feb4 <atan+0x324>)
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	2200      	movs	r2, #0
 800fd76:	4620      	mov	r0, r4
 800fd78:	4629      	mov	r1, r5
 800fd7a:	f7f0 fa87 	bl	800028c <__adddf3>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	4630      	mov	r0, r6
 800fd84:	4639      	mov	r1, r7
 800fd86:	f7f0 fd61 	bl	800084c <__aeabi_ddiv>
 800fd8a:	f04f 0a01 	mov.w	sl, #1
 800fd8e:	4604      	mov	r4, r0
 800fd90:	460d      	mov	r5, r1
 800fd92:	e764      	b.n	800fc5e <atan+0xce>
 800fd94:	4b49      	ldr	r3, [pc, #292]	; (800febc <atan+0x32c>)
 800fd96:	429e      	cmp	r6, r3
 800fd98:	da1d      	bge.n	800fdd6 <atan+0x246>
 800fd9a:	ee10 0a10 	vmov	r0, s0
 800fd9e:	4b48      	ldr	r3, [pc, #288]	; (800fec0 <atan+0x330>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	4629      	mov	r1, r5
 800fda4:	f7f0 fa70 	bl	8000288 <__aeabi_dsub>
 800fda8:	4b45      	ldr	r3, [pc, #276]	; (800fec0 <atan+0x330>)
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	2200      	movs	r2, #0
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	f7f0 fc20 	bl	80005f8 <__aeabi_dmul>
 800fdb8:	4b3e      	ldr	r3, [pc, #248]	; (800feb4 <atan+0x324>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f7f0 fa66 	bl	800028c <__adddf3>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	4639      	mov	r1, r7
 800fdc8:	f7f0 fd40 	bl	800084c <__aeabi_ddiv>
 800fdcc:	f04f 0a02 	mov.w	sl, #2
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	460d      	mov	r5, r1
 800fdd4:	e743      	b.n	800fc5e <atan+0xce>
 800fdd6:	462b      	mov	r3, r5
 800fdd8:	ee10 2a10 	vmov	r2, s0
 800fddc:	4939      	ldr	r1, [pc, #228]	; (800fec4 <atan+0x334>)
 800fdde:	2000      	movs	r0, #0
 800fde0:	f7f0 fd34 	bl	800084c <__aeabi_ddiv>
 800fde4:	f04f 0a03 	mov.w	sl, #3
 800fde8:	4604      	mov	r4, r0
 800fdea:	460d      	mov	r5, r1
 800fdec:	e737      	b.n	800fc5e <atan+0xce>
 800fdee:	4b36      	ldr	r3, [pc, #216]	; (800fec8 <atan+0x338>)
 800fdf0:	4e36      	ldr	r6, [pc, #216]	; (800fecc <atan+0x33c>)
 800fdf2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f7f0 fa45 	bl	8000288 <__aeabi_dsub>
 800fdfe:	4622      	mov	r2, r4
 800fe00:	462b      	mov	r3, r5
 800fe02:	f7f0 fa41 	bl	8000288 <__aeabi_dsub>
 800fe06:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fe12:	f7f0 fa39 	bl	8000288 <__aeabi_dsub>
 800fe16:	f1bb 0f00 	cmp.w	fp, #0
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	f6bf aed6 	bge.w	800fbce <atan+0x3e>
 800fe22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe26:	461d      	mov	r5, r3
 800fe28:	e6d1      	b.n	800fbce <atan+0x3e>
 800fe2a:	a51d      	add	r5, pc, #116	; (adr r5, 800fea0 <atan+0x310>)
 800fe2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe30:	e6cd      	b.n	800fbce <atan+0x3e>
 800fe32:	bf00      	nop
 800fe34:	f3af 8000 	nop.w
 800fe38:	54442d18 	.word	0x54442d18
 800fe3c:	bff921fb 	.word	0xbff921fb
 800fe40:	8800759c 	.word	0x8800759c
 800fe44:	7e37e43c 	.word	0x7e37e43c
 800fe48:	e322da11 	.word	0xe322da11
 800fe4c:	3f90ad3a 	.word	0x3f90ad3a
 800fe50:	24760deb 	.word	0x24760deb
 800fe54:	3fa97b4b 	.word	0x3fa97b4b
 800fe58:	a0d03d51 	.word	0xa0d03d51
 800fe5c:	3fb10d66 	.word	0x3fb10d66
 800fe60:	c54c206e 	.word	0xc54c206e
 800fe64:	3fb745cd 	.word	0x3fb745cd
 800fe68:	920083ff 	.word	0x920083ff
 800fe6c:	3fc24924 	.word	0x3fc24924
 800fe70:	5555550d 	.word	0x5555550d
 800fe74:	3fd55555 	.word	0x3fd55555
 800fe78:	2c6a6c2f 	.word	0x2c6a6c2f
 800fe7c:	bfa2b444 	.word	0xbfa2b444
 800fe80:	52defd9a 	.word	0x52defd9a
 800fe84:	3fadde2d 	.word	0x3fadde2d
 800fe88:	af749a6d 	.word	0xaf749a6d
 800fe8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800fe90:	fe231671 	.word	0xfe231671
 800fe94:	3fbc71c6 	.word	0x3fbc71c6
 800fe98:	9998ebc4 	.word	0x9998ebc4
 800fe9c:	3fc99999 	.word	0x3fc99999
 800fea0:	54442d18 	.word	0x54442d18
 800fea4:	3ff921fb 	.word	0x3ff921fb
 800fea8:	440fffff 	.word	0x440fffff
 800feac:	7ff00000 	.word	0x7ff00000
 800feb0:	3fdbffff 	.word	0x3fdbffff
 800feb4:	3ff00000 	.word	0x3ff00000
 800feb8:	3ff2ffff 	.word	0x3ff2ffff
 800febc:	40038000 	.word	0x40038000
 800fec0:	3ff80000 	.word	0x3ff80000
 800fec4:	bff00000 	.word	0xbff00000
 800fec8:	080137d8 	.word	0x080137d8
 800fecc:	080137b8 	.word	0x080137b8

0800fed0 <fabs>:
 800fed0:	ec51 0b10 	vmov	r0, r1, d0
 800fed4:	ee10 2a10 	vmov	r2, s0
 800fed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fedc:	ec43 2b10 	vmov	d0, r2, r3
 800fee0:	4770      	bx	lr
	...

0800fee4 <sqrtf>:
 800fee4:	b508      	push	{r3, lr}
 800fee6:	ed2d 8b02 	vpush	{d8}
 800feea:	eeb0 8a40 	vmov.f32	s16, s0
 800feee:	f000 f822 	bl	800ff36 <__ieee754_sqrtf>
 800fef2:	eeb4 8a48 	vcmp.f32	s16, s16
 800fef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefa:	d60c      	bvs.n	800ff16 <sqrtf+0x32>
 800fefc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ff1c <sqrtf+0x38>
 800ff00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff08:	d505      	bpl.n	800ff16 <sqrtf+0x32>
 800ff0a:	f001 fc93 	bl	8011834 <__errno>
 800ff0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ff12:	2321      	movs	r3, #33	; 0x21
 800ff14:	6003      	str	r3, [r0, #0]
 800ff16:	ecbd 8b02 	vpop	{d8}
 800ff1a:	bd08      	pop	{r3, pc}
 800ff1c:	00000000 	.word	0x00000000

0800ff20 <finite>:
 800ff20:	b082      	sub	sp, #8
 800ff22:	ed8d 0b00 	vstr	d0, [sp]
 800ff26:	9801      	ldr	r0, [sp, #4]
 800ff28:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff2c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff30:	0fc0      	lsrs	r0, r0, #31
 800ff32:	b002      	add	sp, #8
 800ff34:	4770      	bx	lr

0800ff36 <__ieee754_sqrtf>:
 800ff36:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ff3a:	4770      	bx	lr
 800ff3c:	0000      	movs	r0, r0
	...

0800ff40 <__ieee754_pow>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	ed2d 8b06 	vpush	{d8-d10}
 800ff48:	b089      	sub	sp, #36	; 0x24
 800ff4a:	ed8d 1b00 	vstr	d1, [sp]
 800ff4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ff52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ff56:	ea58 0102 	orrs.w	r1, r8, r2
 800ff5a:	ec57 6b10 	vmov	r6, r7, d0
 800ff5e:	d115      	bne.n	800ff8c <__ieee754_pow+0x4c>
 800ff60:	19b3      	adds	r3, r6, r6
 800ff62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ff66:	4152      	adcs	r2, r2
 800ff68:	4299      	cmp	r1, r3
 800ff6a:	4b89      	ldr	r3, [pc, #548]	; (8010190 <__ieee754_pow+0x250>)
 800ff6c:	4193      	sbcs	r3, r2
 800ff6e:	f080 84d1 	bcs.w	8010914 <__ieee754_pow+0x9d4>
 800ff72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff76:	4630      	mov	r0, r6
 800ff78:	4639      	mov	r1, r7
 800ff7a:	f7f0 f987 	bl	800028c <__adddf3>
 800ff7e:	ec41 0b10 	vmov	d0, r0, r1
 800ff82:	b009      	add	sp, #36	; 0x24
 800ff84:	ecbd 8b06 	vpop	{d8-d10}
 800ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8c:	4b81      	ldr	r3, [pc, #516]	; (8010194 <__ieee754_pow+0x254>)
 800ff8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ff92:	429c      	cmp	r4, r3
 800ff94:	ee10 aa10 	vmov	sl, s0
 800ff98:	463d      	mov	r5, r7
 800ff9a:	dc06      	bgt.n	800ffaa <__ieee754_pow+0x6a>
 800ff9c:	d101      	bne.n	800ffa2 <__ieee754_pow+0x62>
 800ff9e:	2e00      	cmp	r6, #0
 800ffa0:	d1e7      	bne.n	800ff72 <__ieee754_pow+0x32>
 800ffa2:	4598      	cmp	r8, r3
 800ffa4:	dc01      	bgt.n	800ffaa <__ieee754_pow+0x6a>
 800ffa6:	d10f      	bne.n	800ffc8 <__ieee754_pow+0x88>
 800ffa8:	b172      	cbz	r2, 800ffc8 <__ieee754_pow+0x88>
 800ffaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ffae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ffb2:	ea55 050a 	orrs.w	r5, r5, sl
 800ffb6:	d1dc      	bne.n	800ff72 <__ieee754_pow+0x32>
 800ffb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ffbc:	18db      	adds	r3, r3, r3
 800ffbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ffc2:	4152      	adcs	r2, r2
 800ffc4:	429d      	cmp	r5, r3
 800ffc6:	e7d0      	b.n	800ff6a <__ieee754_pow+0x2a>
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	da3b      	bge.n	8010044 <__ieee754_pow+0x104>
 800ffcc:	4b72      	ldr	r3, [pc, #456]	; (8010198 <__ieee754_pow+0x258>)
 800ffce:	4598      	cmp	r8, r3
 800ffd0:	dc51      	bgt.n	8010076 <__ieee754_pow+0x136>
 800ffd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ffd6:	4598      	cmp	r8, r3
 800ffd8:	f340 84ab 	ble.w	8010932 <__ieee754_pow+0x9f2>
 800ffdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ffe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ffe4:	2b14      	cmp	r3, #20
 800ffe6:	dd0f      	ble.n	8010008 <__ieee754_pow+0xc8>
 800ffe8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ffec:	fa22 f103 	lsr.w	r1, r2, r3
 800fff0:	fa01 f303 	lsl.w	r3, r1, r3
 800fff4:	4293      	cmp	r3, r2
 800fff6:	f040 849c 	bne.w	8010932 <__ieee754_pow+0x9f2>
 800fffa:	f001 0101 	and.w	r1, r1, #1
 800fffe:	f1c1 0302 	rsb	r3, r1, #2
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	b182      	cbz	r2, 8010028 <__ieee754_pow+0xe8>
 8010006:	e05f      	b.n	80100c8 <__ieee754_pow+0x188>
 8010008:	2a00      	cmp	r2, #0
 801000a:	d15b      	bne.n	80100c4 <__ieee754_pow+0x184>
 801000c:	f1c3 0314 	rsb	r3, r3, #20
 8010010:	fa48 f103 	asr.w	r1, r8, r3
 8010014:	fa01 f303 	lsl.w	r3, r1, r3
 8010018:	4543      	cmp	r3, r8
 801001a:	f040 8487 	bne.w	801092c <__ieee754_pow+0x9ec>
 801001e:	f001 0101 	and.w	r1, r1, #1
 8010022:	f1c1 0302 	rsb	r3, r1, #2
 8010026:	9304      	str	r3, [sp, #16]
 8010028:	4b5c      	ldr	r3, [pc, #368]	; (801019c <__ieee754_pow+0x25c>)
 801002a:	4598      	cmp	r8, r3
 801002c:	d132      	bne.n	8010094 <__ieee754_pow+0x154>
 801002e:	f1b9 0f00 	cmp.w	r9, #0
 8010032:	f280 8477 	bge.w	8010924 <__ieee754_pow+0x9e4>
 8010036:	4959      	ldr	r1, [pc, #356]	; (801019c <__ieee754_pow+0x25c>)
 8010038:	4632      	mov	r2, r6
 801003a:	463b      	mov	r3, r7
 801003c:	2000      	movs	r0, #0
 801003e:	f7f0 fc05 	bl	800084c <__aeabi_ddiv>
 8010042:	e79c      	b.n	800ff7e <__ieee754_pow+0x3e>
 8010044:	2300      	movs	r3, #0
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	2a00      	cmp	r2, #0
 801004a:	d13d      	bne.n	80100c8 <__ieee754_pow+0x188>
 801004c:	4b51      	ldr	r3, [pc, #324]	; (8010194 <__ieee754_pow+0x254>)
 801004e:	4598      	cmp	r8, r3
 8010050:	d1ea      	bne.n	8010028 <__ieee754_pow+0xe8>
 8010052:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010056:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801005a:	ea53 030a 	orrs.w	r3, r3, sl
 801005e:	f000 8459 	beq.w	8010914 <__ieee754_pow+0x9d4>
 8010062:	4b4f      	ldr	r3, [pc, #316]	; (80101a0 <__ieee754_pow+0x260>)
 8010064:	429c      	cmp	r4, r3
 8010066:	dd08      	ble.n	801007a <__ieee754_pow+0x13a>
 8010068:	f1b9 0f00 	cmp.w	r9, #0
 801006c:	f2c0 8456 	blt.w	801091c <__ieee754_pow+0x9dc>
 8010070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010074:	e783      	b.n	800ff7e <__ieee754_pow+0x3e>
 8010076:	2302      	movs	r3, #2
 8010078:	e7e5      	b.n	8010046 <__ieee754_pow+0x106>
 801007a:	f1b9 0f00 	cmp.w	r9, #0
 801007e:	f04f 0000 	mov.w	r0, #0
 8010082:	f04f 0100 	mov.w	r1, #0
 8010086:	f6bf af7a 	bge.w	800ff7e <__ieee754_pow+0x3e>
 801008a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801008e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010092:	e774      	b.n	800ff7e <__ieee754_pow+0x3e>
 8010094:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010098:	d106      	bne.n	80100a8 <__ieee754_pow+0x168>
 801009a:	4632      	mov	r2, r6
 801009c:	463b      	mov	r3, r7
 801009e:	4630      	mov	r0, r6
 80100a0:	4639      	mov	r1, r7
 80100a2:	f7f0 faa9 	bl	80005f8 <__aeabi_dmul>
 80100a6:	e76a      	b.n	800ff7e <__ieee754_pow+0x3e>
 80100a8:	4b3e      	ldr	r3, [pc, #248]	; (80101a4 <__ieee754_pow+0x264>)
 80100aa:	4599      	cmp	r9, r3
 80100ac:	d10c      	bne.n	80100c8 <__ieee754_pow+0x188>
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	db0a      	blt.n	80100c8 <__ieee754_pow+0x188>
 80100b2:	ec47 6b10 	vmov	d0, r6, r7
 80100b6:	b009      	add	sp, #36	; 0x24
 80100b8:	ecbd 8b06 	vpop	{d8-d10}
 80100bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c0:	f000 bd18 	b.w	8010af4 <__ieee754_sqrt>
 80100c4:	2300      	movs	r3, #0
 80100c6:	9304      	str	r3, [sp, #16]
 80100c8:	ec47 6b10 	vmov	d0, r6, r7
 80100cc:	f7ff ff00 	bl	800fed0 <fabs>
 80100d0:	ec51 0b10 	vmov	r0, r1, d0
 80100d4:	f1ba 0f00 	cmp.w	sl, #0
 80100d8:	d129      	bne.n	801012e <__ieee754_pow+0x1ee>
 80100da:	b124      	cbz	r4, 80100e6 <__ieee754_pow+0x1a6>
 80100dc:	4b2f      	ldr	r3, [pc, #188]	; (801019c <__ieee754_pow+0x25c>)
 80100de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d123      	bne.n	801012e <__ieee754_pow+0x1ee>
 80100e6:	f1b9 0f00 	cmp.w	r9, #0
 80100ea:	da05      	bge.n	80100f8 <__ieee754_pow+0x1b8>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	2000      	movs	r0, #0
 80100f2:	492a      	ldr	r1, [pc, #168]	; (801019c <__ieee754_pow+0x25c>)
 80100f4:	f7f0 fbaa 	bl	800084c <__aeabi_ddiv>
 80100f8:	2d00      	cmp	r5, #0
 80100fa:	f6bf af40 	bge.w	800ff7e <__ieee754_pow+0x3e>
 80100fe:	9b04      	ldr	r3, [sp, #16]
 8010100:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010104:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010108:	431c      	orrs	r4, r3
 801010a:	d108      	bne.n	801011e <__ieee754_pow+0x1de>
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	4610      	mov	r0, r2
 8010112:	4619      	mov	r1, r3
 8010114:	f7f0 f8b8 	bl	8000288 <__aeabi_dsub>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	e78f      	b.n	801003e <__ieee754_pow+0xfe>
 801011e:	9b04      	ldr	r3, [sp, #16]
 8010120:	2b01      	cmp	r3, #1
 8010122:	f47f af2c 	bne.w	800ff7e <__ieee754_pow+0x3e>
 8010126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801012a:	4619      	mov	r1, r3
 801012c:	e727      	b.n	800ff7e <__ieee754_pow+0x3e>
 801012e:	0feb      	lsrs	r3, r5, #31
 8010130:	3b01      	subs	r3, #1
 8010132:	9306      	str	r3, [sp, #24]
 8010134:	9a06      	ldr	r2, [sp, #24]
 8010136:	9b04      	ldr	r3, [sp, #16]
 8010138:	4313      	orrs	r3, r2
 801013a:	d102      	bne.n	8010142 <__ieee754_pow+0x202>
 801013c:	4632      	mov	r2, r6
 801013e:	463b      	mov	r3, r7
 8010140:	e7e6      	b.n	8010110 <__ieee754_pow+0x1d0>
 8010142:	4b19      	ldr	r3, [pc, #100]	; (80101a8 <__ieee754_pow+0x268>)
 8010144:	4598      	cmp	r8, r3
 8010146:	f340 80fb 	ble.w	8010340 <__ieee754_pow+0x400>
 801014a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801014e:	4598      	cmp	r8, r3
 8010150:	4b13      	ldr	r3, [pc, #76]	; (80101a0 <__ieee754_pow+0x260>)
 8010152:	dd0c      	ble.n	801016e <__ieee754_pow+0x22e>
 8010154:	429c      	cmp	r4, r3
 8010156:	dc0f      	bgt.n	8010178 <__ieee754_pow+0x238>
 8010158:	f1b9 0f00 	cmp.w	r9, #0
 801015c:	da0f      	bge.n	801017e <__ieee754_pow+0x23e>
 801015e:	2000      	movs	r0, #0
 8010160:	b009      	add	sp, #36	; 0x24
 8010162:	ecbd 8b06 	vpop	{d8-d10}
 8010166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016a:	f000 bcba 	b.w	8010ae2 <__math_oflow>
 801016e:	429c      	cmp	r4, r3
 8010170:	dbf2      	blt.n	8010158 <__ieee754_pow+0x218>
 8010172:	4b0a      	ldr	r3, [pc, #40]	; (801019c <__ieee754_pow+0x25c>)
 8010174:	429c      	cmp	r4, r3
 8010176:	dd19      	ble.n	80101ac <__ieee754_pow+0x26c>
 8010178:	f1b9 0f00 	cmp.w	r9, #0
 801017c:	dcef      	bgt.n	801015e <__ieee754_pow+0x21e>
 801017e:	2000      	movs	r0, #0
 8010180:	b009      	add	sp, #36	; 0x24
 8010182:	ecbd 8b06 	vpop	{d8-d10}
 8010186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018a:	f000 bca1 	b.w	8010ad0 <__math_uflow>
 801018e:	bf00      	nop
 8010190:	fff00000 	.word	0xfff00000
 8010194:	7ff00000 	.word	0x7ff00000
 8010198:	433fffff 	.word	0x433fffff
 801019c:	3ff00000 	.word	0x3ff00000
 80101a0:	3fefffff 	.word	0x3fefffff
 80101a4:	3fe00000 	.word	0x3fe00000
 80101a8:	41e00000 	.word	0x41e00000
 80101ac:	4b60      	ldr	r3, [pc, #384]	; (8010330 <__ieee754_pow+0x3f0>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	f7f0 f86a 	bl	8000288 <__aeabi_dsub>
 80101b4:	a354      	add	r3, pc, #336	; (adr r3, 8010308 <__ieee754_pow+0x3c8>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	4604      	mov	r4, r0
 80101bc:	460d      	mov	r5, r1
 80101be:	f7f0 fa1b 	bl	80005f8 <__aeabi_dmul>
 80101c2:	a353      	add	r3, pc, #332	; (adr r3, 8010310 <__ieee754_pow+0x3d0>)
 80101c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c8:	4606      	mov	r6, r0
 80101ca:	460f      	mov	r7, r1
 80101cc:	4620      	mov	r0, r4
 80101ce:	4629      	mov	r1, r5
 80101d0:	f7f0 fa12 	bl	80005f8 <__aeabi_dmul>
 80101d4:	4b57      	ldr	r3, [pc, #348]	; (8010334 <__ieee754_pow+0x3f4>)
 80101d6:	4682      	mov	sl, r0
 80101d8:	468b      	mov	fp, r1
 80101da:	2200      	movs	r2, #0
 80101dc:	4620      	mov	r0, r4
 80101de:	4629      	mov	r1, r5
 80101e0:	f7f0 fa0a 	bl	80005f8 <__aeabi_dmul>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	a14b      	add	r1, pc, #300	; (adr r1, 8010318 <__ieee754_pow+0x3d8>)
 80101ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101ee:	f7f0 f84b 	bl	8000288 <__aeabi_dsub>
 80101f2:	4622      	mov	r2, r4
 80101f4:	462b      	mov	r3, r5
 80101f6:	f7f0 f9ff 	bl	80005f8 <__aeabi_dmul>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	2000      	movs	r0, #0
 8010200:	494d      	ldr	r1, [pc, #308]	; (8010338 <__ieee754_pow+0x3f8>)
 8010202:	f7f0 f841 	bl	8000288 <__aeabi_dsub>
 8010206:	4622      	mov	r2, r4
 8010208:	4680      	mov	r8, r0
 801020a:	4689      	mov	r9, r1
 801020c:	462b      	mov	r3, r5
 801020e:	4620      	mov	r0, r4
 8010210:	4629      	mov	r1, r5
 8010212:	f7f0 f9f1 	bl	80005f8 <__aeabi_dmul>
 8010216:	4602      	mov	r2, r0
 8010218:	460b      	mov	r3, r1
 801021a:	4640      	mov	r0, r8
 801021c:	4649      	mov	r1, r9
 801021e:	f7f0 f9eb 	bl	80005f8 <__aeabi_dmul>
 8010222:	a33f      	add	r3, pc, #252	; (adr r3, 8010320 <__ieee754_pow+0x3e0>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7f0 f9e6 	bl	80005f8 <__aeabi_dmul>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4650      	mov	r0, sl
 8010232:	4659      	mov	r1, fp
 8010234:	f7f0 f828 	bl	8000288 <__aeabi_dsub>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	4680      	mov	r8, r0
 801023e:	4689      	mov	r9, r1
 8010240:	4630      	mov	r0, r6
 8010242:	4639      	mov	r1, r7
 8010244:	f7f0 f822 	bl	800028c <__adddf3>
 8010248:	2000      	movs	r0, #0
 801024a:	4632      	mov	r2, r6
 801024c:	463b      	mov	r3, r7
 801024e:	4604      	mov	r4, r0
 8010250:	460d      	mov	r5, r1
 8010252:	f7f0 f819 	bl	8000288 <__aeabi_dsub>
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	4640      	mov	r0, r8
 801025c:	4649      	mov	r1, r9
 801025e:	f7f0 f813 	bl	8000288 <__aeabi_dsub>
 8010262:	9b04      	ldr	r3, [sp, #16]
 8010264:	9a06      	ldr	r2, [sp, #24]
 8010266:	3b01      	subs	r3, #1
 8010268:	4313      	orrs	r3, r2
 801026a:	4682      	mov	sl, r0
 801026c:	468b      	mov	fp, r1
 801026e:	f040 81e7 	bne.w	8010640 <__ieee754_pow+0x700>
 8010272:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010328 <__ieee754_pow+0x3e8>
 8010276:	eeb0 8a47 	vmov.f32	s16, s14
 801027a:	eef0 8a67 	vmov.f32	s17, s15
 801027e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010282:	2600      	movs	r6, #0
 8010284:	4632      	mov	r2, r6
 8010286:	463b      	mov	r3, r7
 8010288:	e9dd 0100 	ldrd	r0, r1, [sp]
 801028c:	f7ef fffc 	bl	8000288 <__aeabi_dsub>
 8010290:	4622      	mov	r2, r4
 8010292:	462b      	mov	r3, r5
 8010294:	f7f0 f9b0 	bl	80005f8 <__aeabi_dmul>
 8010298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801029c:	4680      	mov	r8, r0
 801029e:	4689      	mov	r9, r1
 80102a0:	4650      	mov	r0, sl
 80102a2:	4659      	mov	r1, fp
 80102a4:	f7f0 f9a8 	bl	80005f8 <__aeabi_dmul>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4640      	mov	r0, r8
 80102ae:	4649      	mov	r1, r9
 80102b0:	f7ef ffec 	bl	800028c <__adddf3>
 80102b4:	4632      	mov	r2, r6
 80102b6:	463b      	mov	r3, r7
 80102b8:	4680      	mov	r8, r0
 80102ba:	4689      	mov	r9, r1
 80102bc:	4620      	mov	r0, r4
 80102be:	4629      	mov	r1, r5
 80102c0:	f7f0 f99a 	bl	80005f8 <__aeabi_dmul>
 80102c4:	460b      	mov	r3, r1
 80102c6:	4604      	mov	r4, r0
 80102c8:	460d      	mov	r5, r1
 80102ca:	4602      	mov	r2, r0
 80102cc:	4649      	mov	r1, r9
 80102ce:	4640      	mov	r0, r8
 80102d0:	f7ef ffdc 	bl	800028c <__adddf3>
 80102d4:	4b19      	ldr	r3, [pc, #100]	; (801033c <__ieee754_pow+0x3fc>)
 80102d6:	4299      	cmp	r1, r3
 80102d8:	ec45 4b19 	vmov	d9, r4, r5
 80102dc:	4606      	mov	r6, r0
 80102de:	460f      	mov	r7, r1
 80102e0:	468b      	mov	fp, r1
 80102e2:	f340 82f0 	ble.w	80108c6 <__ieee754_pow+0x986>
 80102e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80102ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80102ee:	4303      	orrs	r3, r0
 80102f0:	f000 81e4 	beq.w	80106bc <__ieee754_pow+0x77c>
 80102f4:	ec51 0b18 	vmov	r0, r1, d8
 80102f8:	2200      	movs	r2, #0
 80102fa:	2300      	movs	r3, #0
 80102fc:	f7f0 fbee 	bl	8000adc <__aeabi_dcmplt>
 8010300:	3800      	subs	r0, #0
 8010302:	bf18      	it	ne
 8010304:	2001      	movne	r0, #1
 8010306:	e72b      	b.n	8010160 <__ieee754_pow+0x220>
 8010308:	60000000 	.word	0x60000000
 801030c:	3ff71547 	.word	0x3ff71547
 8010310:	f85ddf44 	.word	0xf85ddf44
 8010314:	3e54ae0b 	.word	0x3e54ae0b
 8010318:	55555555 	.word	0x55555555
 801031c:	3fd55555 	.word	0x3fd55555
 8010320:	652b82fe 	.word	0x652b82fe
 8010324:	3ff71547 	.word	0x3ff71547
 8010328:	00000000 	.word	0x00000000
 801032c:	bff00000 	.word	0xbff00000
 8010330:	3ff00000 	.word	0x3ff00000
 8010334:	3fd00000 	.word	0x3fd00000
 8010338:	3fe00000 	.word	0x3fe00000
 801033c:	408fffff 	.word	0x408fffff
 8010340:	4bd5      	ldr	r3, [pc, #852]	; (8010698 <__ieee754_pow+0x758>)
 8010342:	402b      	ands	r3, r5
 8010344:	2200      	movs	r2, #0
 8010346:	b92b      	cbnz	r3, 8010354 <__ieee754_pow+0x414>
 8010348:	4bd4      	ldr	r3, [pc, #848]	; (801069c <__ieee754_pow+0x75c>)
 801034a:	f7f0 f955 	bl	80005f8 <__aeabi_dmul>
 801034e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010352:	460c      	mov	r4, r1
 8010354:	1523      	asrs	r3, r4, #20
 8010356:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801035a:	4413      	add	r3, r2
 801035c:	9305      	str	r3, [sp, #20]
 801035e:	4bd0      	ldr	r3, [pc, #832]	; (80106a0 <__ieee754_pow+0x760>)
 8010360:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010364:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010368:	429c      	cmp	r4, r3
 801036a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801036e:	dd08      	ble.n	8010382 <__ieee754_pow+0x442>
 8010370:	4bcc      	ldr	r3, [pc, #816]	; (80106a4 <__ieee754_pow+0x764>)
 8010372:	429c      	cmp	r4, r3
 8010374:	f340 8162 	ble.w	801063c <__ieee754_pow+0x6fc>
 8010378:	9b05      	ldr	r3, [sp, #20]
 801037a:	3301      	adds	r3, #1
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010382:	2400      	movs	r4, #0
 8010384:	00e3      	lsls	r3, r4, #3
 8010386:	9307      	str	r3, [sp, #28]
 8010388:	4bc7      	ldr	r3, [pc, #796]	; (80106a8 <__ieee754_pow+0x768>)
 801038a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801038e:	ed93 7b00 	vldr	d7, [r3]
 8010392:	4629      	mov	r1, r5
 8010394:	ec53 2b17 	vmov	r2, r3, d7
 8010398:	eeb0 9a47 	vmov.f32	s18, s14
 801039c:	eef0 9a67 	vmov.f32	s19, s15
 80103a0:	4682      	mov	sl, r0
 80103a2:	f7ef ff71 	bl	8000288 <__aeabi_dsub>
 80103a6:	4652      	mov	r2, sl
 80103a8:	4606      	mov	r6, r0
 80103aa:	460f      	mov	r7, r1
 80103ac:	462b      	mov	r3, r5
 80103ae:	ec51 0b19 	vmov	r0, r1, d9
 80103b2:	f7ef ff6b 	bl	800028c <__adddf3>
 80103b6:	4602      	mov	r2, r0
 80103b8:	460b      	mov	r3, r1
 80103ba:	2000      	movs	r0, #0
 80103bc:	49bb      	ldr	r1, [pc, #748]	; (80106ac <__ieee754_pow+0x76c>)
 80103be:	f7f0 fa45 	bl	800084c <__aeabi_ddiv>
 80103c2:	ec41 0b1a 	vmov	d10, r0, r1
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4630      	mov	r0, r6
 80103cc:	4639      	mov	r1, r7
 80103ce:	f7f0 f913 	bl	80005f8 <__aeabi_dmul>
 80103d2:	2300      	movs	r3, #0
 80103d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103d8:	9302      	str	r3, [sp, #8]
 80103da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80103de:	46ab      	mov	fp, r5
 80103e0:	106d      	asrs	r5, r5, #1
 80103e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80103e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80103ea:	ec41 0b18 	vmov	d8, r0, r1
 80103ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80103f2:	2200      	movs	r2, #0
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	4614      	mov	r4, r2
 80103fa:	461d      	mov	r5, r3
 80103fc:	f7f0 f8fc 	bl	80005f8 <__aeabi_dmul>
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4630      	mov	r0, r6
 8010406:	4639      	mov	r1, r7
 8010408:	f7ef ff3e 	bl	8000288 <__aeabi_dsub>
 801040c:	ec53 2b19 	vmov	r2, r3, d9
 8010410:	4606      	mov	r6, r0
 8010412:	460f      	mov	r7, r1
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7ef ff36 	bl	8000288 <__aeabi_dsub>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	4650      	mov	r0, sl
 8010422:	4659      	mov	r1, fp
 8010424:	f7ef ff30 	bl	8000288 <__aeabi_dsub>
 8010428:	4642      	mov	r2, r8
 801042a:	464b      	mov	r3, r9
 801042c:	f7f0 f8e4 	bl	80005f8 <__aeabi_dmul>
 8010430:	4602      	mov	r2, r0
 8010432:	460b      	mov	r3, r1
 8010434:	4630      	mov	r0, r6
 8010436:	4639      	mov	r1, r7
 8010438:	f7ef ff26 	bl	8000288 <__aeabi_dsub>
 801043c:	ec53 2b1a 	vmov	r2, r3, d10
 8010440:	f7f0 f8da 	bl	80005f8 <__aeabi_dmul>
 8010444:	ec53 2b18 	vmov	r2, r3, d8
 8010448:	ec41 0b19 	vmov	d9, r0, r1
 801044c:	ec51 0b18 	vmov	r0, r1, d8
 8010450:	f7f0 f8d2 	bl	80005f8 <__aeabi_dmul>
 8010454:	a37c      	add	r3, pc, #496	; (adr r3, 8010648 <__ieee754_pow+0x708>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	4604      	mov	r4, r0
 801045c:	460d      	mov	r5, r1
 801045e:	f7f0 f8cb 	bl	80005f8 <__aeabi_dmul>
 8010462:	a37b      	add	r3, pc, #492	; (adr r3, 8010650 <__ieee754_pow+0x710>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	f7ef ff10 	bl	800028c <__adddf3>
 801046c:	4622      	mov	r2, r4
 801046e:	462b      	mov	r3, r5
 8010470:	f7f0 f8c2 	bl	80005f8 <__aeabi_dmul>
 8010474:	a378      	add	r3, pc, #480	; (adr r3, 8010658 <__ieee754_pow+0x718>)
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	f7ef ff07 	bl	800028c <__adddf3>
 801047e:	4622      	mov	r2, r4
 8010480:	462b      	mov	r3, r5
 8010482:	f7f0 f8b9 	bl	80005f8 <__aeabi_dmul>
 8010486:	a376      	add	r3, pc, #472	; (adr r3, 8010660 <__ieee754_pow+0x720>)
 8010488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048c:	f7ef fefe 	bl	800028c <__adddf3>
 8010490:	4622      	mov	r2, r4
 8010492:	462b      	mov	r3, r5
 8010494:	f7f0 f8b0 	bl	80005f8 <__aeabi_dmul>
 8010498:	a373      	add	r3, pc, #460	; (adr r3, 8010668 <__ieee754_pow+0x728>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	f7ef fef5 	bl	800028c <__adddf3>
 80104a2:	4622      	mov	r2, r4
 80104a4:	462b      	mov	r3, r5
 80104a6:	f7f0 f8a7 	bl	80005f8 <__aeabi_dmul>
 80104aa:	a371      	add	r3, pc, #452	; (adr r3, 8010670 <__ieee754_pow+0x730>)
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	f7ef feec 	bl	800028c <__adddf3>
 80104b4:	4622      	mov	r2, r4
 80104b6:	4606      	mov	r6, r0
 80104b8:	460f      	mov	r7, r1
 80104ba:	462b      	mov	r3, r5
 80104bc:	4620      	mov	r0, r4
 80104be:	4629      	mov	r1, r5
 80104c0:	f7f0 f89a 	bl	80005f8 <__aeabi_dmul>
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	4630      	mov	r0, r6
 80104ca:	4639      	mov	r1, r7
 80104cc:	f7f0 f894 	bl	80005f8 <__aeabi_dmul>
 80104d0:	4642      	mov	r2, r8
 80104d2:	4604      	mov	r4, r0
 80104d4:	460d      	mov	r5, r1
 80104d6:	464b      	mov	r3, r9
 80104d8:	ec51 0b18 	vmov	r0, r1, d8
 80104dc:	f7ef fed6 	bl	800028c <__adddf3>
 80104e0:	ec53 2b19 	vmov	r2, r3, d9
 80104e4:	f7f0 f888 	bl	80005f8 <__aeabi_dmul>
 80104e8:	4622      	mov	r2, r4
 80104ea:	462b      	mov	r3, r5
 80104ec:	f7ef fece 	bl	800028c <__adddf3>
 80104f0:	4642      	mov	r2, r8
 80104f2:	4682      	mov	sl, r0
 80104f4:	468b      	mov	fp, r1
 80104f6:	464b      	mov	r3, r9
 80104f8:	4640      	mov	r0, r8
 80104fa:	4649      	mov	r1, r9
 80104fc:	f7f0 f87c 	bl	80005f8 <__aeabi_dmul>
 8010500:	4b6b      	ldr	r3, [pc, #428]	; (80106b0 <__ieee754_pow+0x770>)
 8010502:	2200      	movs	r2, #0
 8010504:	4606      	mov	r6, r0
 8010506:	460f      	mov	r7, r1
 8010508:	f7ef fec0 	bl	800028c <__adddf3>
 801050c:	4652      	mov	r2, sl
 801050e:	465b      	mov	r3, fp
 8010510:	f7ef febc 	bl	800028c <__adddf3>
 8010514:	2000      	movs	r0, #0
 8010516:	4604      	mov	r4, r0
 8010518:	460d      	mov	r5, r1
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4640      	mov	r0, r8
 8010520:	4649      	mov	r1, r9
 8010522:	f7f0 f869 	bl	80005f8 <__aeabi_dmul>
 8010526:	4b62      	ldr	r3, [pc, #392]	; (80106b0 <__ieee754_pow+0x770>)
 8010528:	4680      	mov	r8, r0
 801052a:	4689      	mov	r9, r1
 801052c:	2200      	movs	r2, #0
 801052e:	4620      	mov	r0, r4
 8010530:	4629      	mov	r1, r5
 8010532:	f7ef fea9 	bl	8000288 <__aeabi_dsub>
 8010536:	4632      	mov	r2, r6
 8010538:	463b      	mov	r3, r7
 801053a:	f7ef fea5 	bl	8000288 <__aeabi_dsub>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	4650      	mov	r0, sl
 8010544:	4659      	mov	r1, fp
 8010546:	f7ef fe9f 	bl	8000288 <__aeabi_dsub>
 801054a:	ec53 2b18 	vmov	r2, r3, d8
 801054e:	f7f0 f853 	bl	80005f8 <__aeabi_dmul>
 8010552:	4622      	mov	r2, r4
 8010554:	4606      	mov	r6, r0
 8010556:	460f      	mov	r7, r1
 8010558:	462b      	mov	r3, r5
 801055a:	ec51 0b19 	vmov	r0, r1, d9
 801055e:	f7f0 f84b 	bl	80005f8 <__aeabi_dmul>
 8010562:	4602      	mov	r2, r0
 8010564:	460b      	mov	r3, r1
 8010566:	4630      	mov	r0, r6
 8010568:	4639      	mov	r1, r7
 801056a:	f7ef fe8f 	bl	800028c <__adddf3>
 801056e:	4606      	mov	r6, r0
 8010570:	460f      	mov	r7, r1
 8010572:	4602      	mov	r2, r0
 8010574:	460b      	mov	r3, r1
 8010576:	4640      	mov	r0, r8
 8010578:	4649      	mov	r1, r9
 801057a:	f7ef fe87 	bl	800028c <__adddf3>
 801057e:	a33e      	add	r3, pc, #248	; (adr r3, 8010678 <__ieee754_pow+0x738>)
 8010580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010584:	2000      	movs	r0, #0
 8010586:	4604      	mov	r4, r0
 8010588:	460d      	mov	r5, r1
 801058a:	f7f0 f835 	bl	80005f8 <__aeabi_dmul>
 801058e:	4642      	mov	r2, r8
 8010590:	ec41 0b18 	vmov	d8, r0, r1
 8010594:	464b      	mov	r3, r9
 8010596:	4620      	mov	r0, r4
 8010598:	4629      	mov	r1, r5
 801059a:	f7ef fe75 	bl	8000288 <__aeabi_dsub>
 801059e:	4602      	mov	r2, r0
 80105a0:	460b      	mov	r3, r1
 80105a2:	4630      	mov	r0, r6
 80105a4:	4639      	mov	r1, r7
 80105a6:	f7ef fe6f 	bl	8000288 <__aeabi_dsub>
 80105aa:	a335      	add	r3, pc, #212	; (adr r3, 8010680 <__ieee754_pow+0x740>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	f7f0 f822 	bl	80005f8 <__aeabi_dmul>
 80105b4:	a334      	add	r3, pc, #208	; (adr r3, 8010688 <__ieee754_pow+0x748>)
 80105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	4620      	mov	r0, r4
 80105c0:	4629      	mov	r1, r5
 80105c2:	f7f0 f819 	bl	80005f8 <__aeabi_dmul>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4630      	mov	r0, r6
 80105cc:	4639      	mov	r1, r7
 80105ce:	f7ef fe5d 	bl	800028c <__adddf3>
 80105d2:	9a07      	ldr	r2, [sp, #28]
 80105d4:	4b37      	ldr	r3, [pc, #220]	; (80106b4 <__ieee754_pow+0x774>)
 80105d6:	4413      	add	r3, r2
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	f7ef fe56 	bl	800028c <__adddf3>
 80105e0:	4682      	mov	sl, r0
 80105e2:	9805      	ldr	r0, [sp, #20]
 80105e4:	468b      	mov	fp, r1
 80105e6:	f7ef ff9d 	bl	8000524 <__aeabi_i2d>
 80105ea:	9a07      	ldr	r2, [sp, #28]
 80105ec:	4b32      	ldr	r3, [pc, #200]	; (80106b8 <__ieee754_pow+0x778>)
 80105ee:	4413      	add	r3, r2
 80105f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105f4:	4606      	mov	r6, r0
 80105f6:	460f      	mov	r7, r1
 80105f8:	4652      	mov	r2, sl
 80105fa:	465b      	mov	r3, fp
 80105fc:	ec51 0b18 	vmov	r0, r1, d8
 8010600:	f7ef fe44 	bl	800028c <__adddf3>
 8010604:	4642      	mov	r2, r8
 8010606:	464b      	mov	r3, r9
 8010608:	f7ef fe40 	bl	800028c <__adddf3>
 801060c:	4632      	mov	r2, r6
 801060e:	463b      	mov	r3, r7
 8010610:	f7ef fe3c 	bl	800028c <__adddf3>
 8010614:	2000      	movs	r0, #0
 8010616:	4632      	mov	r2, r6
 8010618:	463b      	mov	r3, r7
 801061a:	4604      	mov	r4, r0
 801061c:	460d      	mov	r5, r1
 801061e:	f7ef fe33 	bl	8000288 <__aeabi_dsub>
 8010622:	4642      	mov	r2, r8
 8010624:	464b      	mov	r3, r9
 8010626:	f7ef fe2f 	bl	8000288 <__aeabi_dsub>
 801062a:	ec53 2b18 	vmov	r2, r3, d8
 801062e:	f7ef fe2b 	bl	8000288 <__aeabi_dsub>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4650      	mov	r0, sl
 8010638:	4659      	mov	r1, fp
 801063a:	e610      	b.n	801025e <__ieee754_pow+0x31e>
 801063c:	2401      	movs	r4, #1
 801063e:	e6a1      	b.n	8010384 <__ieee754_pow+0x444>
 8010640:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010690 <__ieee754_pow+0x750>
 8010644:	e617      	b.n	8010276 <__ieee754_pow+0x336>
 8010646:	bf00      	nop
 8010648:	4a454eef 	.word	0x4a454eef
 801064c:	3fca7e28 	.word	0x3fca7e28
 8010650:	93c9db65 	.word	0x93c9db65
 8010654:	3fcd864a 	.word	0x3fcd864a
 8010658:	a91d4101 	.word	0xa91d4101
 801065c:	3fd17460 	.word	0x3fd17460
 8010660:	518f264d 	.word	0x518f264d
 8010664:	3fd55555 	.word	0x3fd55555
 8010668:	db6fabff 	.word	0xdb6fabff
 801066c:	3fdb6db6 	.word	0x3fdb6db6
 8010670:	33333303 	.word	0x33333303
 8010674:	3fe33333 	.word	0x3fe33333
 8010678:	e0000000 	.word	0xe0000000
 801067c:	3feec709 	.word	0x3feec709
 8010680:	dc3a03fd 	.word	0xdc3a03fd
 8010684:	3feec709 	.word	0x3feec709
 8010688:	145b01f5 	.word	0x145b01f5
 801068c:	be3e2fe0 	.word	0xbe3e2fe0
 8010690:	00000000 	.word	0x00000000
 8010694:	3ff00000 	.word	0x3ff00000
 8010698:	7ff00000 	.word	0x7ff00000
 801069c:	43400000 	.word	0x43400000
 80106a0:	0003988e 	.word	0x0003988e
 80106a4:	000bb679 	.word	0x000bb679
 80106a8:	080137f8 	.word	0x080137f8
 80106ac:	3ff00000 	.word	0x3ff00000
 80106b0:	40080000 	.word	0x40080000
 80106b4:	08013818 	.word	0x08013818
 80106b8:	08013808 	.word	0x08013808
 80106bc:	a3b3      	add	r3, pc, #716	; (adr r3, 801098c <__ieee754_pow+0xa4c>)
 80106be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c2:	4640      	mov	r0, r8
 80106c4:	4649      	mov	r1, r9
 80106c6:	f7ef fde1 	bl	800028c <__adddf3>
 80106ca:	4622      	mov	r2, r4
 80106cc:	ec41 0b1a 	vmov	d10, r0, r1
 80106d0:	462b      	mov	r3, r5
 80106d2:	4630      	mov	r0, r6
 80106d4:	4639      	mov	r1, r7
 80106d6:	f7ef fdd7 	bl	8000288 <__aeabi_dsub>
 80106da:	4602      	mov	r2, r0
 80106dc:	460b      	mov	r3, r1
 80106de:	ec51 0b1a 	vmov	r0, r1, d10
 80106e2:	f7f0 fa19 	bl	8000b18 <__aeabi_dcmpgt>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f47f ae04 	bne.w	80102f4 <__ieee754_pow+0x3b4>
 80106ec:	4aa2      	ldr	r2, [pc, #648]	; (8010978 <__ieee754_pow+0xa38>)
 80106ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106f2:	4293      	cmp	r3, r2
 80106f4:	f340 8107 	ble.w	8010906 <__ieee754_pow+0x9c6>
 80106f8:	151b      	asrs	r3, r3, #20
 80106fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80106fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010702:	fa4a fa03 	asr.w	sl, sl, r3
 8010706:	44da      	add	sl, fp
 8010708:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801070c:	489b      	ldr	r0, [pc, #620]	; (801097c <__ieee754_pow+0xa3c>)
 801070e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010712:	4108      	asrs	r0, r1
 8010714:	ea00 030a 	and.w	r3, r0, sl
 8010718:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801071c:	f1c1 0114 	rsb	r1, r1, #20
 8010720:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010724:	fa4a fa01 	asr.w	sl, sl, r1
 8010728:	f1bb 0f00 	cmp.w	fp, #0
 801072c:	f04f 0200 	mov.w	r2, #0
 8010730:	4620      	mov	r0, r4
 8010732:	4629      	mov	r1, r5
 8010734:	bfb8      	it	lt
 8010736:	f1ca 0a00 	rsblt	sl, sl, #0
 801073a:	f7ef fda5 	bl	8000288 <__aeabi_dsub>
 801073e:	ec41 0b19 	vmov	d9, r0, r1
 8010742:	4642      	mov	r2, r8
 8010744:	464b      	mov	r3, r9
 8010746:	ec51 0b19 	vmov	r0, r1, d9
 801074a:	f7ef fd9f 	bl	800028c <__adddf3>
 801074e:	a37a      	add	r3, pc, #488	; (adr r3, 8010938 <__ieee754_pow+0x9f8>)
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	2000      	movs	r0, #0
 8010756:	4604      	mov	r4, r0
 8010758:	460d      	mov	r5, r1
 801075a:	f7ef ff4d 	bl	80005f8 <__aeabi_dmul>
 801075e:	ec53 2b19 	vmov	r2, r3, d9
 8010762:	4606      	mov	r6, r0
 8010764:	460f      	mov	r7, r1
 8010766:	4620      	mov	r0, r4
 8010768:	4629      	mov	r1, r5
 801076a:	f7ef fd8d 	bl	8000288 <__aeabi_dsub>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4640      	mov	r0, r8
 8010774:	4649      	mov	r1, r9
 8010776:	f7ef fd87 	bl	8000288 <__aeabi_dsub>
 801077a:	a371      	add	r3, pc, #452	; (adr r3, 8010940 <__ieee754_pow+0xa00>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	f7ef ff3a 	bl	80005f8 <__aeabi_dmul>
 8010784:	a370      	add	r3, pc, #448	; (adr r3, 8010948 <__ieee754_pow+0xa08>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	4680      	mov	r8, r0
 801078c:	4689      	mov	r9, r1
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7ef ff31 	bl	80005f8 <__aeabi_dmul>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	4640      	mov	r0, r8
 801079c:	4649      	mov	r1, r9
 801079e:	f7ef fd75 	bl	800028c <__adddf3>
 80107a2:	4604      	mov	r4, r0
 80107a4:	460d      	mov	r5, r1
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	4630      	mov	r0, r6
 80107ac:	4639      	mov	r1, r7
 80107ae:	f7ef fd6d 	bl	800028c <__adddf3>
 80107b2:	4632      	mov	r2, r6
 80107b4:	463b      	mov	r3, r7
 80107b6:	4680      	mov	r8, r0
 80107b8:	4689      	mov	r9, r1
 80107ba:	f7ef fd65 	bl	8000288 <__aeabi_dsub>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4620      	mov	r0, r4
 80107c4:	4629      	mov	r1, r5
 80107c6:	f7ef fd5f 	bl	8000288 <__aeabi_dsub>
 80107ca:	4642      	mov	r2, r8
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	464b      	mov	r3, r9
 80107d2:	4640      	mov	r0, r8
 80107d4:	4649      	mov	r1, r9
 80107d6:	f7ef ff0f 	bl	80005f8 <__aeabi_dmul>
 80107da:	a35d      	add	r3, pc, #372	; (adr r3, 8010950 <__ieee754_pow+0xa10>)
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	4604      	mov	r4, r0
 80107e2:	460d      	mov	r5, r1
 80107e4:	f7ef ff08 	bl	80005f8 <__aeabi_dmul>
 80107e8:	a35b      	add	r3, pc, #364	; (adr r3, 8010958 <__ieee754_pow+0xa18>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef fd4b 	bl	8000288 <__aeabi_dsub>
 80107f2:	4622      	mov	r2, r4
 80107f4:	462b      	mov	r3, r5
 80107f6:	f7ef feff 	bl	80005f8 <__aeabi_dmul>
 80107fa:	a359      	add	r3, pc, #356	; (adr r3, 8010960 <__ieee754_pow+0xa20>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7ef fd44 	bl	800028c <__adddf3>
 8010804:	4622      	mov	r2, r4
 8010806:	462b      	mov	r3, r5
 8010808:	f7ef fef6 	bl	80005f8 <__aeabi_dmul>
 801080c:	a356      	add	r3, pc, #344	; (adr r3, 8010968 <__ieee754_pow+0xa28>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef fd39 	bl	8000288 <__aeabi_dsub>
 8010816:	4622      	mov	r2, r4
 8010818:	462b      	mov	r3, r5
 801081a:	f7ef feed 	bl	80005f8 <__aeabi_dmul>
 801081e:	a354      	add	r3, pc, #336	; (adr r3, 8010970 <__ieee754_pow+0xa30>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7ef fd32 	bl	800028c <__adddf3>
 8010828:	4622      	mov	r2, r4
 801082a:	462b      	mov	r3, r5
 801082c:	f7ef fee4 	bl	80005f8 <__aeabi_dmul>
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	4640      	mov	r0, r8
 8010836:	4649      	mov	r1, r9
 8010838:	f7ef fd26 	bl	8000288 <__aeabi_dsub>
 801083c:	4604      	mov	r4, r0
 801083e:	460d      	mov	r5, r1
 8010840:	4602      	mov	r2, r0
 8010842:	460b      	mov	r3, r1
 8010844:	4640      	mov	r0, r8
 8010846:	4649      	mov	r1, r9
 8010848:	f7ef fed6 	bl	80005f8 <__aeabi_dmul>
 801084c:	2200      	movs	r2, #0
 801084e:	ec41 0b19 	vmov	d9, r0, r1
 8010852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010856:	4620      	mov	r0, r4
 8010858:	4629      	mov	r1, r5
 801085a:	f7ef fd15 	bl	8000288 <__aeabi_dsub>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	ec51 0b19 	vmov	r0, r1, d9
 8010866:	f7ef fff1 	bl	800084c <__aeabi_ddiv>
 801086a:	4632      	mov	r2, r6
 801086c:	4604      	mov	r4, r0
 801086e:	460d      	mov	r5, r1
 8010870:	463b      	mov	r3, r7
 8010872:	4640      	mov	r0, r8
 8010874:	4649      	mov	r1, r9
 8010876:	f7ef febf 	bl	80005f8 <__aeabi_dmul>
 801087a:	4632      	mov	r2, r6
 801087c:	463b      	mov	r3, r7
 801087e:	f7ef fd05 	bl	800028c <__adddf3>
 8010882:	4602      	mov	r2, r0
 8010884:	460b      	mov	r3, r1
 8010886:	4620      	mov	r0, r4
 8010888:	4629      	mov	r1, r5
 801088a:	f7ef fcfd 	bl	8000288 <__aeabi_dsub>
 801088e:	4642      	mov	r2, r8
 8010890:	464b      	mov	r3, r9
 8010892:	f7ef fcf9 	bl	8000288 <__aeabi_dsub>
 8010896:	460b      	mov	r3, r1
 8010898:	4602      	mov	r2, r0
 801089a:	4939      	ldr	r1, [pc, #228]	; (8010980 <__ieee754_pow+0xa40>)
 801089c:	2000      	movs	r0, #0
 801089e:	f7ef fcf3 	bl	8000288 <__aeabi_dsub>
 80108a2:	ec41 0b10 	vmov	d0, r0, r1
 80108a6:	ee10 3a90 	vmov	r3, s1
 80108aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80108ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108b2:	da2b      	bge.n	801090c <__ieee754_pow+0x9cc>
 80108b4:	4650      	mov	r0, sl
 80108b6:	f000 f86f 	bl	8010998 <scalbn>
 80108ba:	ec51 0b10 	vmov	r0, r1, d0
 80108be:	ec53 2b18 	vmov	r2, r3, d8
 80108c2:	f7ff bbee 	b.w	80100a2 <__ieee754_pow+0x162>
 80108c6:	4b2f      	ldr	r3, [pc, #188]	; (8010984 <__ieee754_pow+0xa44>)
 80108c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80108cc:	429e      	cmp	r6, r3
 80108ce:	f77f af0d 	ble.w	80106ec <__ieee754_pow+0x7ac>
 80108d2:	4b2d      	ldr	r3, [pc, #180]	; (8010988 <__ieee754_pow+0xa48>)
 80108d4:	440b      	add	r3, r1
 80108d6:	4303      	orrs	r3, r0
 80108d8:	d009      	beq.n	80108ee <__ieee754_pow+0x9ae>
 80108da:	ec51 0b18 	vmov	r0, r1, d8
 80108de:	2200      	movs	r2, #0
 80108e0:	2300      	movs	r3, #0
 80108e2:	f7f0 f8fb 	bl	8000adc <__aeabi_dcmplt>
 80108e6:	3800      	subs	r0, #0
 80108e8:	bf18      	it	ne
 80108ea:	2001      	movne	r0, #1
 80108ec:	e448      	b.n	8010180 <__ieee754_pow+0x240>
 80108ee:	4622      	mov	r2, r4
 80108f0:	462b      	mov	r3, r5
 80108f2:	f7ef fcc9 	bl	8000288 <__aeabi_dsub>
 80108f6:	4642      	mov	r2, r8
 80108f8:	464b      	mov	r3, r9
 80108fa:	f7f0 f903 	bl	8000b04 <__aeabi_dcmpge>
 80108fe:	2800      	cmp	r0, #0
 8010900:	f43f aef4 	beq.w	80106ec <__ieee754_pow+0x7ac>
 8010904:	e7e9      	b.n	80108da <__ieee754_pow+0x99a>
 8010906:	f04f 0a00 	mov.w	sl, #0
 801090a:	e71a      	b.n	8010742 <__ieee754_pow+0x802>
 801090c:	ec51 0b10 	vmov	r0, r1, d0
 8010910:	4619      	mov	r1, r3
 8010912:	e7d4      	b.n	80108be <__ieee754_pow+0x97e>
 8010914:	491a      	ldr	r1, [pc, #104]	; (8010980 <__ieee754_pow+0xa40>)
 8010916:	2000      	movs	r0, #0
 8010918:	f7ff bb31 	b.w	800ff7e <__ieee754_pow+0x3e>
 801091c:	2000      	movs	r0, #0
 801091e:	2100      	movs	r1, #0
 8010920:	f7ff bb2d 	b.w	800ff7e <__ieee754_pow+0x3e>
 8010924:	4630      	mov	r0, r6
 8010926:	4639      	mov	r1, r7
 8010928:	f7ff bb29 	b.w	800ff7e <__ieee754_pow+0x3e>
 801092c:	9204      	str	r2, [sp, #16]
 801092e:	f7ff bb7b 	b.w	8010028 <__ieee754_pow+0xe8>
 8010932:	2300      	movs	r3, #0
 8010934:	f7ff bb65 	b.w	8010002 <__ieee754_pow+0xc2>
 8010938:	00000000 	.word	0x00000000
 801093c:	3fe62e43 	.word	0x3fe62e43
 8010940:	fefa39ef 	.word	0xfefa39ef
 8010944:	3fe62e42 	.word	0x3fe62e42
 8010948:	0ca86c39 	.word	0x0ca86c39
 801094c:	be205c61 	.word	0xbe205c61
 8010950:	72bea4d0 	.word	0x72bea4d0
 8010954:	3e663769 	.word	0x3e663769
 8010958:	c5d26bf1 	.word	0xc5d26bf1
 801095c:	3ebbbd41 	.word	0x3ebbbd41
 8010960:	af25de2c 	.word	0xaf25de2c
 8010964:	3f11566a 	.word	0x3f11566a
 8010968:	16bebd93 	.word	0x16bebd93
 801096c:	3f66c16c 	.word	0x3f66c16c
 8010970:	5555553e 	.word	0x5555553e
 8010974:	3fc55555 	.word	0x3fc55555
 8010978:	3fe00000 	.word	0x3fe00000
 801097c:	fff00000 	.word	0xfff00000
 8010980:	3ff00000 	.word	0x3ff00000
 8010984:	4090cbff 	.word	0x4090cbff
 8010988:	3f6f3400 	.word	0x3f6f3400
 801098c:	652b82fe 	.word	0x652b82fe
 8010990:	3c971547 	.word	0x3c971547
 8010994:	00000000 	.word	0x00000000

08010998 <scalbn>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	ec55 4b10 	vmov	r4, r5, d0
 801099e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80109a2:	4606      	mov	r6, r0
 80109a4:	462b      	mov	r3, r5
 80109a6:	b999      	cbnz	r1, 80109d0 <scalbn+0x38>
 80109a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80109ac:	4323      	orrs	r3, r4
 80109ae:	d03f      	beq.n	8010a30 <scalbn+0x98>
 80109b0:	4b35      	ldr	r3, [pc, #212]	; (8010a88 <scalbn+0xf0>)
 80109b2:	4629      	mov	r1, r5
 80109b4:	ee10 0a10 	vmov	r0, s0
 80109b8:	2200      	movs	r2, #0
 80109ba:	f7ef fe1d 	bl	80005f8 <__aeabi_dmul>
 80109be:	4b33      	ldr	r3, [pc, #204]	; (8010a8c <scalbn+0xf4>)
 80109c0:	429e      	cmp	r6, r3
 80109c2:	4604      	mov	r4, r0
 80109c4:	460d      	mov	r5, r1
 80109c6:	da10      	bge.n	80109ea <scalbn+0x52>
 80109c8:	a327      	add	r3, pc, #156	; (adr r3, 8010a68 <scalbn+0xd0>)
 80109ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ce:	e01f      	b.n	8010a10 <scalbn+0x78>
 80109d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80109d4:	4291      	cmp	r1, r2
 80109d6:	d10c      	bne.n	80109f2 <scalbn+0x5a>
 80109d8:	ee10 2a10 	vmov	r2, s0
 80109dc:	4620      	mov	r0, r4
 80109de:	4629      	mov	r1, r5
 80109e0:	f7ef fc54 	bl	800028c <__adddf3>
 80109e4:	4604      	mov	r4, r0
 80109e6:	460d      	mov	r5, r1
 80109e8:	e022      	b.n	8010a30 <scalbn+0x98>
 80109ea:	460b      	mov	r3, r1
 80109ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80109f0:	3936      	subs	r1, #54	; 0x36
 80109f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80109f6:	4296      	cmp	r6, r2
 80109f8:	dd0d      	ble.n	8010a16 <scalbn+0x7e>
 80109fa:	2d00      	cmp	r5, #0
 80109fc:	a11c      	add	r1, pc, #112	; (adr r1, 8010a70 <scalbn+0xd8>)
 80109fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a02:	da02      	bge.n	8010a0a <scalbn+0x72>
 8010a04:	a11c      	add	r1, pc, #112	; (adr r1, 8010a78 <scalbn+0xe0>)
 8010a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a0a:	a319      	add	r3, pc, #100	; (adr r3, 8010a70 <scalbn+0xd8>)
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	f7ef fdf2 	bl	80005f8 <__aeabi_dmul>
 8010a14:	e7e6      	b.n	80109e4 <scalbn+0x4c>
 8010a16:	1872      	adds	r2, r6, r1
 8010a18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010a1c:	428a      	cmp	r2, r1
 8010a1e:	dcec      	bgt.n	80109fa <scalbn+0x62>
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	dd08      	ble.n	8010a36 <scalbn+0x9e>
 8010a24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a30:	ec45 4b10 	vmov	d0, r4, r5
 8010a34:	bd70      	pop	{r4, r5, r6, pc}
 8010a36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010a3a:	da08      	bge.n	8010a4e <scalbn+0xb6>
 8010a3c:	2d00      	cmp	r5, #0
 8010a3e:	a10a      	add	r1, pc, #40	; (adr r1, 8010a68 <scalbn+0xd0>)
 8010a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a44:	dac0      	bge.n	80109c8 <scalbn+0x30>
 8010a46:	a10e      	add	r1, pc, #56	; (adr r1, 8010a80 <scalbn+0xe8>)
 8010a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a4c:	e7bc      	b.n	80109c8 <scalbn+0x30>
 8010a4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a52:	3236      	adds	r2, #54	; 0x36
 8010a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	4b0c      	ldr	r3, [pc, #48]	; (8010a90 <scalbn+0xf8>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	e7d5      	b.n	8010a10 <scalbn+0x78>
 8010a64:	f3af 8000 	nop.w
 8010a68:	c2f8f359 	.word	0xc2f8f359
 8010a6c:	01a56e1f 	.word	0x01a56e1f
 8010a70:	8800759c 	.word	0x8800759c
 8010a74:	7e37e43c 	.word	0x7e37e43c
 8010a78:	8800759c 	.word	0x8800759c
 8010a7c:	fe37e43c 	.word	0xfe37e43c
 8010a80:	c2f8f359 	.word	0xc2f8f359
 8010a84:	81a56e1f 	.word	0x81a56e1f
 8010a88:	43500000 	.word	0x43500000
 8010a8c:	ffff3cb0 	.word	0xffff3cb0
 8010a90:	3c900000 	.word	0x3c900000

08010a94 <with_errno>:
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	4604      	mov	r4, r0
 8010a98:	460d      	mov	r5, r1
 8010a9a:	4616      	mov	r6, r2
 8010a9c:	f000 feca 	bl	8011834 <__errno>
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	6006      	str	r6, [r0, #0]
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}

08010aa8 <xflow>:
 8010aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aaa:	4614      	mov	r4, r2
 8010aac:	461d      	mov	r5, r3
 8010aae:	b108      	cbz	r0, 8010ab4 <xflow+0xc>
 8010ab0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ab4:	e9cd 2300 	strd	r2, r3, [sp]
 8010ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010abc:	4620      	mov	r0, r4
 8010abe:	4629      	mov	r1, r5
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	2222      	movs	r2, #34	; 0x22
 8010ac6:	b003      	add	sp, #12
 8010ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010acc:	f7ff bfe2 	b.w	8010a94 <with_errno>

08010ad0 <__math_uflow>:
 8010ad0:	b508      	push	{r3, lr}
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ad8:	f7ff ffe6 	bl	8010aa8 <xflow>
 8010adc:	ec41 0b10 	vmov	d0, r0, r1
 8010ae0:	bd08      	pop	{r3, pc}

08010ae2 <__math_oflow>:
 8010ae2:	b508      	push	{r3, lr}
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010aea:	f7ff ffdd 	bl	8010aa8 <xflow>
 8010aee:	ec41 0b10 	vmov	d0, r0, r1
 8010af2:	bd08      	pop	{r3, pc}

08010af4 <__ieee754_sqrt>:
 8010af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	ec55 4b10 	vmov	r4, r5, d0
 8010afc:	4e67      	ldr	r6, [pc, #412]	; (8010c9c <__ieee754_sqrt+0x1a8>)
 8010afe:	43ae      	bics	r6, r5
 8010b00:	ee10 0a10 	vmov	r0, s0
 8010b04:	ee10 2a10 	vmov	r2, s0
 8010b08:	4629      	mov	r1, r5
 8010b0a:	462b      	mov	r3, r5
 8010b0c:	d10d      	bne.n	8010b2a <__ieee754_sqrt+0x36>
 8010b0e:	f7ef fd73 	bl	80005f8 <__aeabi_dmul>
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	4620      	mov	r0, r4
 8010b18:	4629      	mov	r1, r5
 8010b1a:	f7ef fbb7 	bl	800028c <__adddf3>
 8010b1e:	4604      	mov	r4, r0
 8010b20:	460d      	mov	r5, r1
 8010b22:	ec45 4b10 	vmov	d0, r4, r5
 8010b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	dc0b      	bgt.n	8010b46 <__ieee754_sqrt+0x52>
 8010b2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010b32:	4326      	orrs	r6, r4
 8010b34:	d0f5      	beq.n	8010b22 <__ieee754_sqrt+0x2e>
 8010b36:	b135      	cbz	r5, 8010b46 <__ieee754_sqrt+0x52>
 8010b38:	f7ef fba6 	bl	8000288 <__aeabi_dsub>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	460b      	mov	r3, r1
 8010b40:	f7ef fe84 	bl	800084c <__aeabi_ddiv>
 8010b44:	e7eb      	b.n	8010b1e <__ieee754_sqrt+0x2a>
 8010b46:	1509      	asrs	r1, r1, #20
 8010b48:	f000 808d 	beq.w	8010c66 <__ieee754_sqrt+0x172>
 8010b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b50:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b58:	07c9      	lsls	r1, r1, #31
 8010b5a:	bf5c      	itt	pl
 8010b5c:	005b      	lslpl	r3, r3, #1
 8010b5e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010b62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b66:	bf58      	it	pl
 8010b68:	0052      	lslpl	r2, r2, #1
 8010b6a:	2500      	movs	r5, #0
 8010b6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b70:	1076      	asrs	r6, r6, #1
 8010b72:	0052      	lsls	r2, r2, #1
 8010b74:	f04f 0e16 	mov.w	lr, #22
 8010b78:	46ac      	mov	ip, r5
 8010b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010b7e:	eb0c 0001 	add.w	r0, ip, r1
 8010b82:	4298      	cmp	r0, r3
 8010b84:	bfde      	ittt	le
 8010b86:	1a1b      	suble	r3, r3, r0
 8010b88:	eb00 0c01 	addle.w	ip, r0, r1
 8010b8c:	186d      	addle	r5, r5, r1
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	f1be 0e01 	subs.w	lr, lr, #1
 8010b94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010b9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010ba0:	d1ed      	bne.n	8010b7e <__ieee754_sqrt+0x8a>
 8010ba2:	4674      	mov	r4, lr
 8010ba4:	2720      	movs	r7, #32
 8010ba6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010baa:	4563      	cmp	r3, ip
 8010bac:	eb01 000e 	add.w	r0, r1, lr
 8010bb0:	dc02      	bgt.n	8010bb8 <__ieee754_sqrt+0xc4>
 8010bb2:	d113      	bne.n	8010bdc <__ieee754_sqrt+0xe8>
 8010bb4:	4290      	cmp	r0, r2
 8010bb6:	d811      	bhi.n	8010bdc <__ieee754_sqrt+0xe8>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	eb00 0e01 	add.w	lr, r0, r1
 8010bbe:	da57      	bge.n	8010c70 <__ieee754_sqrt+0x17c>
 8010bc0:	f1be 0f00 	cmp.w	lr, #0
 8010bc4:	db54      	blt.n	8010c70 <__ieee754_sqrt+0x17c>
 8010bc6:	f10c 0801 	add.w	r8, ip, #1
 8010bca:	eba3 030c 	sub.w	r3, r3, ip
 8010bce:	4290      	cmp	r0, r2
 8010bd0:	bf88      	it	hi
 8010bd2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010bd6:	1a12      	subs	r2, r2, r0
 8010bd8:	440c      	add	r4, r1
 8010bda:	46c4      	mov	ip, r8
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	3f01      	subs	r7, #1
 8010be0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010be4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010be8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010bec:	d1dd      	bne.n	8010baa <__ieee754_sqrt+0xb6>
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	d01b      	beq.n	8010c2a <__ieee754_sqrt+0x136>
 8010bf2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010ca0 <__ieee754_sqrt+0x1ac>
 8010bf6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010ca4 <__ieee754_sqrt+0x1b0>
 8010bfa:	e9da 0100 	ldrd	r0, r1, [sl]
 8010bfe:	e9db 2300 	ldrd	r2, r3, [fp]
 8010c02:	f7ef fb41 	bl	8000288 <__aeabi_dsub>
 8010c06:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	4640      	mov	r0, r8
 8010c10:	4649      	mov	r1, r9
 8010c12:	f7ef ff6d 	bl	8000af0 <__aeabi_dcmple>
 8010c16:	b140      	cbz	r0, 8010c2a <__ieee754_sqrt+0x136>
 8010c18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010c1c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010c20:	e9db 2300 	ldrd	r2, r3, [fp]
 8010c24:	d126      	bne.n	8010c74 <__ieee754_sqrt+0x180>
 8010c26:	3501      	adds	r5, #1
 8010c28:	463c      	mov	r4, r7
 8010c2a:	106a      	asrs	r2, r5, #1
 8010c2c:	0863      	lsrs	r3, r4, #1
 8010c2e:	07e9      	lsls	r1, r5, #31
 8010c30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010c34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010c38:	bf48      	it	mi
 8010c3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010c3e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010c42:	461c      	mov	r4, r3
 8010c44:	e76d      	b.n	8010b22 <__ieee754_sqrt+0x2e>
 8010c46:	0ad3      	lsrs	r3, r2, #11
 8010c48:	3815      	subs	r0, #21
 8010c4a:	0552      	lsls	r2, r2, #21
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d0fa      	beq.n	8010c46 <__ieee754_sqrt+0x152>
 8010c50:	02dc      	lsls	r4, r3, #11
 8010c52:	d50a      	bpl.n	8010c6a <__ieee754_sqrt+0x176>
 8010c54:	f1c1 0420 	rsb	r4, r1, #32
 8010c58:	fa22 f404 	lsr.w	r4, r2, r4
 8010c5c:	1e4d      	subs	r5, r1, #1
 8010c5e:	408a      	lsls	r2, r1
 8010c60:	4323      	orrs	r3, r4
 8010c62:	1b41      	subs	r1, r0, r5
 8010c64:	e772      	b.n	8010b4c <__ieee754_sqrt+0x58>
 8010c66:	4608      	mov	r0, r1
 8010c68:	e7f0      	b.n	8010c4c <__ieee754_sqrt+0x158>
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	3101      	adds	r1, #1
 8010c6e:	e7ef      	b.n	8010c50 <__ieee754_sqrt+0x15c>
 8010c70:	46e0      	mov	r8, ip
 8010c72:	e7aa      	b.n	8010bca <__ieee754_sqrt+0xd6>
 8010c74:	f7ef fb0a 	bl	800028c <__adddf3>
 8010c78:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	4640      	mov	r0, r8
 8010c82:	4649      	mov	r1, r9
 8010c84:	f7ef ff2a 	bl	8000adc <__aeabi_dcmplt>
 8010c88:	b120      	cbz	r0, 8010c94 <__ieee754_sqrt+0x1a0>
 8010c8a:	1ca0      	adds	r0, r4, #2
 8010c8c:	bf08      	it	eq
 8010c8e:	3501      	addeq	r5, #1
 8010c90:	3402      	adds	r4, #2
 8010c92:	e7ca      	b.n	8010c2a <__ieee754_sqrt+0x136>
 8010c94:	3401      	adds	r4, #1
 8010c96:	f024 0401 	bic.w	r4, r4, #1
 8010c9a:	e7c6      	b.n	8010c2a <__ieee754_sqrt+0x136>
 8010c9c:	7ff00000 	.word	0x7ff00000
 8010ca0:	20000120 	.word	0x20000120
 8010ca4:	20000128 	.word	0x20000128

08010ca8 <__cvt>:
 8010ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cac:	ec55 4b10 	vmov	r4, r5, d0
 8010cb0:	2d00      	cmp	r5, #0
 8010cb2:	460e      	mov	r6, r1
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	462b      	mov	r3, r5
 8010cb8:	bfbb      	ittet	lt
 8010cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010cbe:	461d      	movlt	r5, r3
 8010cc0:	2300      	movge	r3, #0
 8010cc2:	232d      	movlt	r3, #45	; 0x2d
 8010cc4:	700b      	strb	r3, [r1, #0]
 8010cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ccc:	4691      	mov	r9, r2
 8010cce:	f023 0820 	bic.w	r8, r3, #32
 8010cd2:	bfbc      	itt	lt
 8010cd4:	4622      	movlt	r2, r4
 8010cd6:	4614      	movlt	r4, r2
 8010cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cdc:	d005      	beq.n	8010cea <__cvt+0x42>
 8010cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ce2:	d100      	bne.n	8010ce6 <__cvt+0x3e>
 8010ce4:	3601      	adds	r6, #1
 8010ce6:	2102      	movs	r1, #2
 8010ce8:	e000      	b.n	8010cec <__cvt+0x44>
 8010cea:	2103      	movs	r1, #3
 8010cec:	ab03      	add	r3, sp, #12
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	ab02      	add	r3, sp, #8
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	ec45 4b10 	vmov	d0, r4, r5
 8010cf8:	4653      	mov	r3, sl
 8010cfa:	4632      	mov	r2, r6
 8010cfc:	f000 fe50 	bl	80119a0 <_dtoa_r>
 8010d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d04:	4607      	mov	r7, r0
 8010d06:	d102      	bne.n	8010d0e <__cvt+0x66>
 8010d08:	f019 0f01 	tst.w	r9, #1
 8010d0c:	d022      	beq.n	8010d54 <__cvt+0xac>
 8010d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d12:	eb07 0906 	add.w	r9, r7, r6
 8010d16:	d110      	bne.n	8010d3a <__cvt+0x92>
 8010d18:	783b      	ldrb	r3, [r7, #0]
 8010d1a:	2b30      	cmp	r3, #48	; 0x30
 8010d1c:	d10a      	bne.n	8010d34 <__cvt+0x8c>
 8010d1e:	2200      	movs	r2, #0
 8010d20:	2300      	movs	r3, #0
 8010d22:	4620      	mov	r0, r4
 8010d24:	4629      	mov	r1, r5
 8010d26:	f7ef fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d2a:	b918      	cbnz	r0, 8010d34 <__cvt+0x8c>
 8010d2c:	f1c6 0601 	rsb	r6, r6, #1
 8010d30:	f8ca 6000 	str.w	r6, [sl]
 8010d34:	f8da 3000 	ldr.w	r3, [sl]
 8010d38:	4499      	add	r9, r3
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4620      	mov	r0, r4
 8010d40:	4629      	mov	r1, r5
 8010d42:	f7ef fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d46:	b108      	cbz	r0, 8010d4c <__cvt+0xa4>
 8010d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d4c:	2230      	movs	r2, #48	; 0x30
 8010d4e:	9b03      	ldr	r3, [sp, #12]
 8010d50:	454b      	cmp	r3, r9
 8010d52:	d307      	bcc.n	8010d64 <__cvt+0xbc>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d58:	1bdb      	subs	r3, r3, r7
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	b004      	add	sp, #16
 8010d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d64:	1c59      	adds	r1, r3, #1
 8010d66:	9103      	str	r1, [sp, #12]
 8010d68:	701a      	strb	r2, [r3, #0]
 8010d6a:	e7f0      	b.n	8010d4e <__cvt+0xa6>

08010d6c <__exponent>:
 8010d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d6e:	4603      	mov	r3, r0
 8010d70:	2900      	cmp	r1, #0
 8010d72:	bfb8      	it	lt
 8010d74:	4249      	neglt	r1, r1
 8010d76:	f803 2b02 	strb.w	r2, [r3], #2
 8010d7a:	bfb4      	ite	lt
 8010d7c:	222d      	movlt	r2, #45	; 0x2d
 8010d7e:	222b      	movge	r2, #43	; 0x2b
 8010d80:	2909      	cmp	r1, #9
 8010d82:	7042      	strb	r2, [r0, #1]
 8010d84:	dd2a      	ble.n	8010ddc <__exponent+0x70>
 8010d86:	f10d 0207 	add.w	r2, sp, #7
 8010d8a:	4617      	mov	r7, r2
 8010d8c:	260a      	movs	r6, #10
 8010d8e:	4694      	mov	ip, r2
 8010d90:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d94:	fb06 1415 	mls	r4, r6, r5, r1
 8010d98:	3430      	adds	r4, #48	; 0x30
 8010d9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010d9e:	460c      	mov	r4, r1
 8010da0:	2c63      	cmp	r4, #99	; 0x63
 8010da2:	f102 32ff 	add.w	r2, r2, #4294967295
 8010da6:	4629      	mov	r1, r5
 8010da8:	dcf1      	bgt.n	8010d8e <__exponent+0x22>
 8010daa:	3130      	adds	r1, #48	; 0x30
 8010dac:	f1ac 0402 	sub.w	r4, ip, #2
 8010db0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010db4:	1c41      	adds	r1, r0, #1
 8010db6:	4622      	mov	r2, r4
 8010db8:	42ba      	cmp	r2, r7
 8010dba:	d30a      	bcc.n	8010dd2 <__exponent+0x66>
 8010dbc:	f10d 0209 	add.w	r2, sp, #9
 8010dc0:	eba2 020c 	sub.w	r2, r2, ip
 8010dc4:	42bc      	cmp	r4, r7
 8010dc6:	bf88      	it	hi
 8010dc8:	2200      	movhi	r2, #0
 8010dca:	4413      	add	r3, r2
 8010dcc:	1a18      	subs	r0, r3, r0
 8010dce:	b003      	add	sp, #12
 8010dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010dd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010dda:	e7ed      	b.n	8010db8 <__exponent+0x4c>
 8010ddc:	2330      	movs	r3, #48	; 0x30
 8010dde:	3130      	adds	r1, #48	; 0x30
 8010de0:	7083      	strb	r3, [r0, #2]
 8010de2:	70c1      	strb	r1, [r0, #3]
 8010de4:	1d03      	adds	r3, r0, #4
 8010de6:	e7f1      	b.n	8010dcc <__exponent+0x60>

08010de8 <_printf_float>:
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	ed2d 8b02 	vpush	{d8}
 8010df0:	b08d      	sub	sp, #52	; 0x34
 8010df2:	460c      	mov	r4, r1
 8010df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010df8:	4616      	mov	r6, r2
 8010dfa:	461f      	mov	r7, r3
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	f000 fccf 	bl	80117a0 <_localeconv_r>
 8010e02:	f8d0 a000 	ldr.w	sl, [r0]
 8010e06:	4650      	mov	r0, sl
 8010e08:	f7ef fa32 	bl	8000270 <strlen>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	9305      	str	r3, [sp, #20]
 8010e14:	f8d8 3000 	ldr.w	r3, [r8]
 8010e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e1c:	3307      	adds	r3, #7
 8010e1e:	f023 0307 	bic.w	r3, r3, #7
 8010e22:	f103 0208 	add.w	r2, r3, #8
 8010e26:	f8c8 2000 	str.w	r2, [r8]
 8010e2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e32:	9307      	str	r3, [sp, #28]
 8010e34:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e38:	ee08 0a10 	vmov	s16, r0
 8010e3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e44:	4b9e      	ldr	r3, [pc, #632]	; (80110c0 <_printf_float+0x2d8>)
 8010e46:	f04f 32ff 	mov.w	r2, #4294967295
 8010e4a:	f7ef fe6f 	bl	8000b2c <__aeabi_dcmpun>
 8010e4e:	bb88      	cbnz	r0, 8010eb4 <_printf_float+0xcc>
 8010e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e54:	4b9a      	ldr	r3, [pc, #616]	; (80110c0 <_printf_float+0x2d8>)
 8010e56:	f04f 32ff 	mov.w	r2, #4294967295
 8010e5a:	f7ef fe49 	bl	8000af0 <__aeabi_dcmple>
 8010e5e:	bb48      	cbnz	r0, 8010eb4 <_printf_float+0xcc>
 8010e60:	2200      	movs	r2, #0
 8010e62:	2300      	movs	r3, #0
 8010e64:	4640      	mov	r0, r8
 8010e66:	4649      	mov	r1, r9
 8010e68:	f7ef fe38 	bl	8000adc <__aeabi_dcmplt>
 8010e6c:	b110      	cbz	r0, 8010e74 <_printf_float+0x8c>
 8010e6e:	232d      	movs	r3, #45	; 0x2d
 8010e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e74:	4a93      	ldr	r2, [pc, #588]	; (80110c4 <_printf_float+0x2dc>)
 8010e76:	4b94      	ldr	r3, [pc, #592]	; (80110c8 <_printf_float+0x2e0>)
 8010e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e7c:	bf94      	ite	ls
 8010e7e:	4690      	movls	r8, r2
 8010e80:	4698      	movhi	r8, r3
 8010e82:	2303      	movs	r3, #3
 8010e84:	6123      	str	r3, [r4, #16]
 8010e86:	9b05      	ldr	r3, [sp, #20]
 8010e88:	f023 0304 	bic.w	r3, r3, #4
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	f04f 0900 	mov.w	r9, #0
 8010e92:	9700      	str	r7, [sp, #0]
 8010e94:	4633      	mov	r3, r6
 8010e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 f9da 	bl	8011254 <_printf_common>
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	f040 8090 	bne.w	8010fc6 <_printf_float+0x1de>
 8010ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eaa:	b00d      	add	sp, #52	; 0x34
 8010eac:	ecbd 8b02 	vpop	{d8}
 8010eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb4:	4642      	mov	r2, r8
 8010eb6:	464b      	mov	r3, r9
 8010eb8:	4640      	mov	r0, r8
 8010eba:	4649      	mov	r1, r9
 8010ebc:	f7ef fe36 	bl	8000b2c <__aeabi_dcmpun>
 8010ec0:	b140      	cbz	r0, 8010ed4 <_printf_float+0xec>
 8010ec2:	464b      	mov	r3, r9
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	bfbc      	itt	lt
 8010ec8:	232d      	movlt	r3, #45	; 0x2d
 8010eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010ece:	4a7f      	ldr	r2, [pc, #508]	; (80110cc <_printf_float+0x2e4>)
 8010ed0:	4b7f      	ldr	r3, [pc, #508]	; (80110d0 <_printf_float+0x2e8>)
 8010ed2:	e7d1      	b.n	8010e78 <_printf_float+0x90>
 8010ed4:	6863      	ldr	r3, [r4, #4]
 8010ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010eda:	9206      	str	r2, [sp, #24]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	d13f      	bne.n	8010f60 <_printf_float+0x178>
 8010ee0:	2306      	movs	r3, #6
 8010ee2:	6063      	str	r3, [r4, #4]
 8010ee4:	9b05      	ldr	r3, [sp, #20]
 8010ee6:	6861      	ldr	r1, [r4, #4]
 8010ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010eec:	2300      	movs	r3, #0
 8010eee:	9303      	str	r3, [sp, #12]
 8010ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8010ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ef6:	ab09      	add	r3, sp, #36	; 0x24
 8010ef8:	ec49 8b10 	vmov	d0, r8, r9
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	6022      	str	r2, [r4, #0]
 8010f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f04:	4628      	mov	r0, r5
 8010f06:	f7ff fecf 	bl	8010ca8 <__cvt>
 8010f0a:	9b06      	ldr	r3, [sp, #24]
 8010f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f0e:	2b47      	cmp	r3, #71	; 0x47
 8010f10:	4680      	mov	r8, r0
 8010f12:	d108      	bne.n	8010f26 <_printf_float+0x13e>
 8010f14:	1cc8      	adds	r0, r1, #3
 8010f16:	db02      	blt.n	8010f1e <_printf_float+0x136>
 8010f18:	6863      	ldr	r3, [r4, #4]
 8010f1a:	4299      	cmp	r1, r3
 8010f1c:	dd41      	ble.n	8010fa2 <_printf_float+0x1ba>
 8010f1e:	f1ab 0302 	sub.w	r3, fp, #2
 8010f22:	fa5f fb83 	uxtb.w	fp, r3
 8010f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f2a:	d820      	bhi.n	8010f6e <_printf_float+0x186>
 8010f2c:	3901      	subs	r1, #1
 8010f2e:	465a      	mov	r2, fp
 8010f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f34:	9109      	str	r1, [sp, #36]	; 0x24
 8010f36:	f7ff ff19 	bl	8010d6c <__exponent>
 8010f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f3c:	1813      	adds	r3, r2, r0
 8010f3e:	2a01      	cmp	r2, #1
 8010f40:	4681      	mov	r9, r0
 8010f42:	6123      	str	r3, [r4, #16]
 8010f44:	dc02      	bgt.n	8010f4c <_printf_float+0x164>
 8010f46:	6822      	ldr	r2, [r4, #0]
 8010f48:	07d2      	lsls	r2, r2, #31
 8010f4a:	d501      	bpl.n	8010f50 <_printf_float+0x168>
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	6123      	str	r3, [r4, #16]
 8010f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d09c      	beq.n	8010e92 <_printf_float+0xaa>
 8010f58:	232d      	movs	r3, #45	; 0x2d
 8010f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f5e:	e798      	b.n	8010e92 <_printf_float+0xaa>
 8010f60:	9a06      	ldr	r2, [sp, #24]
 8010f62:	2a47      	cmp	r2, #71	; 0x47
 8010f64:	d1be      	bne.n	8010ee4 <_printf_float+0xfc>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1bc      	bne.n	8010ee4 <_printf_float+0xfc>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e7b9      	b.n	8010ee2 <_printf_float+0xfa>
 8010f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f72:	d118      	bne.n	8010fa6 <_printf_float+0x1be>
 8010f74:	2900      	cmp	r1, #0
 8010f76:	6863      	ldr	r3, [r4, #4]
 8010f78:	dd0b      	ble.n	8010f92 <_printf_float+0x1aa>
 8010f7a:	6121      	str	r1, [r4, #16]
 8010f7c:	b913      	cbnz	r3, 8010f84 <_printf_float+0x19c>
 8010f7e:	6822      	ldr	r2, [r4, #0]
 8010f80:	07d0      	lsls	r0, r2, #31
 8010f82:	d502      	bpl.n	8010f8a <_printf_float+0x1a2>
 8010f84:	3301      	adds	r3, #1
 8010f86:	440b      	add	r3, r1
 8010f88:	6123      	str	r3, [r4, #16]
 8010f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f8c:	f04f 0900 	mov.w	r9, #0
 8010f90:	e7de      	b.n	8010f50 <_printf_float+0x168>
 8010f92:	b913      	cbnz	r3, 8010f9a <_printf_float+0x1b2>
 8010f94:	6822      	ldr	r2, [r4, #0]
 8010f96:	07d2      	lsls	r2, r2, #31
 8010f98:	d501      	bpl.n	8010f9e <_printf_float+0x1b6>
 8010f9a:	3302      	adds	r3, #2
 8010f9c:	e7f4      	b.n	8010f88 <_printf_float+0x1a0>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e7f2      	b.n	8010f88 <_printf_float+0x1a0>
 8010fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa8:	4299      	cmp	r1, r3
 8010faa:	db05      	blt.n	8010fb8 <_printf_float+0x1d0>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	6121      	str	r1, [r4, #16]
 8010fb0:	07d8      	lsls	r0, r3, #31
 8010fb2:	d5ea      	bpl.n	8010f8a <_printf_float+0x1a2>
 8010fb4:	1c4b      	adds	r3, r1, #1
 8010fb6:	e7e7      	b.n	8010f88 <_printf_float+0x1a0>
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	bfd4      	ite	le
 8010fbc:	f1c1 0202 	rsble	r2, r1, #2
 8010fc0:	2201      	movgt	r2, #1
 8010fc2:	4413      	add	r3, r2
 8010fc4:	e7e0      	b.n	8010f88 <_printf_float+0x1a0>
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	055a      	lsls	r2, r3, #21
 8010fca:	d407      	bmi.n	8010fdc <_printf_float+0x1f4>
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	4642      	mov	r2, r8
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	47b8      	blx	r7
 8010fd6:	3001      	adds	r0, #1
 8010fd8:	d12c      	bne.n	8011034 <_printf_float+0x24c>
 8010fda:	e764      	b.n	8010ea6 <_printf_float+0xbe>
 8010fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fe0:	f240 80e0 	bls.w	80111a4 <_printf_float+0x3bc>
 8010fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fe8:	2200      	movs	r2, #0
 8010fea:	2300      	movs	r3, #0
 8010fec:	f7ef fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d034      	beq.n	801105e <_printf_float+0x276>
 8010ff4:	4a37      	ldr	r2, [pc, #220]	; (80110d4 <_printf_float+0x2ec>)
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	4631      	mov	r1, r6
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	47b8      	blx	r7
 8010ffe:	3001      	adds	r0, #1
 8011000:	f43f af51 	beq.w	8010ea6 <_printf_float+0xbe>
 8011004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011008:	429a      	cmp	r2, r3
 801100a:	db02      	blt.n	8011012 <_printf_float+0x22a>
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	07d8      	lsls	r0, r3, #31
 8011010:	d510      	bpl.n	8011034 <_printf_float+0x24c>
 8011012:	ee18 3a10 	vmov	r3, s16
 8011016:	4652      	mov	r2, sl
 8011018:	4631      	mov	r1, r6
 801101a:	4628      	mov	r0, r5
 801101c:	47b8      	blx	r7
 801101e:	3001      	adds	r0, #1
 8011020:	f43f af41 	beq.w	8010ea6 <_printf_float+0xbe>
 8011024:	f04f 0800 	mov.w	r8, #0
 8011028:	f104 091a 	add.w	r9, r4, #26
 801102c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801102e:	3b01      	subs	r3, #1
 8011030:	4543      	cmp	r3, r8
 8011032:	dc09      	bgt.n	8011048 <_printf_float+0x260>
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	079b      	lsls	r3, r3, #30
 8011038:	f100 8107 	bmi.w	801124a <_printf_float+0x462>
 801103c:	68e0      	ldr	r0, [r4, #12]
 801103e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011040:	4298      	cmp	r0, r3
 8011042:	bfb8      	it	lt
 8011044:	4618      	movlt	r0, r3
 8011046:	e730      	b.n	8010eaa <_printf_float+0xc2>
 8011048:	2301      	movs	r3, #1
 801104a:	464a      	mov	r2, r9
 801104c:	4631      	mov	r1, r6
 801104e:	4628      	mov	r0, r5
 8011050:	47b8      	blx	r7
 8011052:	3001      	adds	r0, #1
 8011054:	f43f af27 	beq.w	8010ea6 <_printf_float+0xbe>
 8011058:	f108 0801 	add.w	r8, r8, #1
 801105c:	e7e6      	b.n	801102c <_printf_float+0x244>
 801105e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011060:	2b00      	cmp	r3, #0
 8011062:	dc39      	bgt.n	80110d8 <_printf_float+0x2f0>
 8011064:	4a1b      	ldr	r2, [pc, #108]	; (80110d4 <_printf_float+0x2ec>)
 8011066:	2301      	movs	r3, #1
 8011068:	4631      	mov	r1, r6
 801106a:	4628      	mov	r0, r5
 801106c:	47b8      	blx	r7
 801106e:	3001      	adds	r0, #1
 8011070:	f43f af19 	beq.w	8010ea6 <_printf_float+0xbe>
 8011074:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011078:	4313      	orrs	r3, r2
 801107a:	d102      	bne.n	8011082 <_printf_float+0x29a>
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	07d9      	lsls	r1, r3, #31
 8011080:	d5d8      	bpl.n	8011034 <_printf_float+0x24c>
 8011082:	ee18 3a10 	vmov	r3, s16
 8011086:	4652      	mov	r2, sl
 8011088:	4631      	mov	r1, r6
 801108a:	4628      	mov	r0, r5
 801108c:	47b8      	blx	r7
 801108e:	3001      	adds	r0, #1
 8011090:	f43f af09 	beq.w	8010ea6 <_printf_float+0xbe>
 8011094:	f04f 0900 	mov.w	r9, #0
 8011098:	f104 0a1a 	add.w	sl, r4, #26
 801109c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801109e:	425b      	negs	r3, r3
 80110a0:	454b      	cmp	r3, r9
 80110a2:	dc01      	bgt.n	80110a8 <_printf_float+0x2c0>
 80110a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110a6:	e792      	b.n	8010fce <_printf_float+0x1e6>
 80110a8:	2301      	movs	r3, #1
 80110aa:	4652      	mov	r2, sl
 80110ac:	4631      	mov	r1, r6
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b8      	blx	r7
 80110b2:	3001      	adds	r0, #1
 80110b4:	f43f aef7 	beq.w	8010ea6 <_printf_float+0xbe>
 80110b8:	f109 0901 	add.w	r9, r9, #1
 80110bc:	e7ee      	b.n	801109c <_printf_float+0x2b4>
 80110be:	bf00      	nop
 80110c0:	7fefffff 	.word	0x7fefffff
 80110c4:	08013828 	.word	0x08013828
 80110c8:	0801382c 	.word	0x0801382c
 80110cc:	08013830 	.word	0x08013830
 80110d0:	08013834 	.word	0x08013834
 80110d4:	08013838 	.word	0x08013838
 80110d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110dc:	429a      	cmp	r2, r3
 80110de:	bfa8      	it	ge
 80110e0:	461a      	movge	r2, r3
 80110e2:	2a00      	cmp	r2, #0
 80110e4:	4691      	mov	r9, r2
 80110e6:	dc37      	bgt.n	8011158 <_printf_float+0x370>
 80110e8:	f04f 0b00 	mov.w	fp, #0
 80110ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110f0:	f104 021a 	add.w	r2, r4, #26
 80110f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110f6:	9305      	str	r3, [sp, #20]
 80110f8:	eba3 0309 	sub.w	r3, r3, r9
 80110fc:	455b      	cmp	r3, fp
 80110fe:	dc33      	bgt.n	8011168 <_printf_float+0x380>
 8011100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011104:	429a      	cmp	r2, r3
 8011106:	db3b      	blt.n	8011180 <_printf_float+0x398>
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	07da      	lsls	r2, r3, #31
 801110c:	d438      	bmi.n	8011180 <_printf_float+0x398>
 801110e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011112:	eba2 0903 	sub.w	r9, r2, r3
 8011116:	9b05      	ldr	r3, [sp, #20]
 8011118:	1ad2      	subs	r2, r2, r3
 801111a:	4591      	cmp	r9, r2
 801111c:	bfa8      	it	ge
 801111e:	4691      	movge	r9, r2
 8011120:	f1b9 0f00 	cmp.w	r9, #0
 8011124:	dc35      	bgt.n	8011192 <_printf_float+0x3aa>
 8011126:	f04f 0800 	mov.w	r8, #0
 801112a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801112e:	f104 0a1a 	add.w	sl, r4, #26
 8011132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011136:	1a9b      	subs	r3, r3, r2
 8011138:	eba3 0309 	sub.w	r3, r3, r9
 801113c:	4543      	cmp	r3, r8
 801113e:	f77f af79 	ble.w	8011034 <_printf_float+0x24c>
 8011142:	2301      	movs	r3, #1
 8011144:	4652      	mov	r2, sl
 8011146:	4631      	mov	r1, r6
 8011148:	4628      	mov	r0, r5
 801114a:	47b8      	blx	r7
 801114c:	3001      	adds	r0, #1
 801114e:	f43f aeaa 	beq.w	8010ea6 <_printf_float+0xbe>
 8011152:	f108 0801 	add.w	r8, r8, #1
 8011156:	e7ec      	b.n	8011132 <_printf_float+0x34a>
 8011158:	4613      	mov	r3, r2
 801115a:	4631      	mov	r1, r6
 801115c:	4642      	mov	r2, r8
 801115e:	4628      	mov	r0, r5
 8011160:	47b8      	blx	r7
 8011162:	3001      	adds	r0, #1
 8011164:	d1c0      	bne.n	80110e8 <_printf_float+0x300>
 8011166:	e69e      	b.n	8010ea6 <_printf_float+0xbe>
 8011168:	2301      	movs	r3, #1
 801116a:	4631      	mov	r1, r6
 801116c:	4628      	mov	r0, r5
 801116e:	9205      	str	r2, [sp, #20]
 8011170:	47b8      	blx	r7
 8011172:	3001      	adds	r0, #1
 8011174:	f43f ae97 	beq.w	8010ea6 <_printf_float+0xbe>
 8011178:	9a05      	ldr	r2, [sp, #20]
 801117a:	f10b 0b01 	add.w	fp, fp, #1
 801117e:	e7b9      	b.n	80110f4 <_printf_float+0x30c>
 8011180:	ee18 3a10 	vmov	r3, s16
 8011184:	4652      	mov	r2, sl
 8011186:	4631      	mov	r1, r6
 8011188:	4628      	mov	r0, r5
 801118a:	47b8      	blx	r7
 801118c:	3001      	adds	r0, #1
 801118e:	d1be      	bne.n	801110e <_printf_float+0x326>
 8011190:	e689      	b.n	8010ea6 <_printf_float+0xbe>
 8011192:	9a05      	ldr	r2, [sp, #20]
 8011194:	464b      	mov	r3, r9
 8011196:	4442      	add	r2, r8
 8011198:	4631      	mov	r1, r6
 801119a:	4628      	mov	r0, r5
 801119c:	47b8      	blx	r7
 801119e:	3001      	adds	r0, #1
 80111a0:	d1c1      	bne.n	8011126 <_printf_float+0x33e>
 80111a2:	e680      	b.n	8010ea6 <_printf_float+0xbe>
 80111a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111a6:	2a01      	cmp	r2, #1
 80111a8:	dc01      	bgt.n	80111ae <_printf_float+0x3c6>
 80111aa:	07db      	lsls	r3, r3, #31
 80111ac:	d53a      	bpl.n	8011224 <_printf_float+0x43c>
 80111ae:	2301      	movs	r3, #1
 80111b0:	4642      	mov	r2, r8
 80111b2:	4631      	mov	r1, r6
 80111b4:	4628      	mov	r0, r5
 80111b6:	47b8      	blx	r7
 80111b8:	3001      	adds	r0, #1
 80111ba:	f43f ae74 	beq.w	8010ea6 <_printf_float+0xbe>
 80111be:	ee18 3a10 	vmov	r3, s16
 80111c2:	4652      	mov	r2, sl
 80111c4:	4631      	mov	r1, r6
 80111c6:	4628      	mov	r0, r5
 80111c8:	47b8      	blx	r7
 80111ca:	3001      	adds	r0, #1
 80111cc:	f43f ae6b 	beq.w	8010ea6 <_printf_float+0xbe>
 80111d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80111d4:	2200      	movs	r2, #0
 80111d6:	2300      	movs	r3, #0
 80111d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80111dc:	f7ef fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80111e0:	b9d8      	cbnz	r0, 801121a <_printf_float+0x432>
 80111e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80111e6:	f108 0201 	add.w	r2, r8, #1
 80111ea:	4631      	mov	r1, r6
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b8      	blx	r7
 80111f0:	3001      	adds	r0, #1
 80111f2:	d10e      	bne.n	8011212 <_printf_float+0x42a>
 80111f4:	e657      	b.n	8010ea6 <_printf_float+0xbe>
 80111f6:	2301      	movs	r3, #1
 80111f8:	4652      	mov	r2, sl
 80111fa:	4631      	mov	r1, r6
 80111fc:	4628      	mov	r0, r5
 80111fe:	47b8      	blx	r7
 8011200:	3001      	adds	r0, #1
 8011202:	f43f ae50 	beq.w	8010ea6 <_printf_float+0xbe>
 8011206:	f108 0801 	add.w	r8, r8, #1
 801120a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801120c:	3b01      	subs	r3, #1
 801120e:	4543      	cmp	r3, r8
 8011210:	dcf1      	bgt.n	80111f6 <_printf_float+0x40e>
 8011212:	464b      	mov	r3, r9
 8011214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011218:	e6da      	b.n	8010fd0 <_printf_float+0x1e8>
 801121a:	f04f 0800 	mov.w	r8, #0
 801121e:	f104 0a1a 	add.w	sl, r4, #26
 8011222:	e7f2      	b.n	801120a <_printf_float+0x422>
 8011224:	2301      	movs	r3, #1
 8011226:	4642      	mov	r2, r8
 8011228:	e7df      	b.n	80111ea <_printf_float+0x402>
 801122a:	2301      	movs	r3, #1
 801122c:	464a      	mov	r2, r9
 801122e:	4631      	mov	r1, r6
 8011230:	4628      	mov	r0, r5
 8011232:	47b8      	blx	r7
 8011234:	3001      	adds	r0, #1
 8011236:	f43f ae36 	beq.w	8010ea6 <_printf_float+0xbe>
 801123a:	f108 0801 	add.w	r8, r8, #1
 801123e:	68e3      	ldr	r3, [r4, #12]
 8011240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011242:	1a5b      	subs	r3, r3, r1
 8011244:	4543      	cmp	r3, r8
 8011246:	dcf0      	bgt.n	801122a <_printf_float+0x442>
 8011248:	e6f8      	b.n	801103c <_printf_float+0x254>
 801124a:	f04f 0800 	mov.w	r8, #0
 801124e:	f104 0919 	add.w	r9, r4, #25
 8011252:	e7f4      	b.n	801123e <_printf_float+0x456>

08011254 <_printf_common>:
 8011254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011258:	4616      	mov	r6, r2
 801125a:	4699      	mov	r9, r3
 801125c:	688a      	ldr	r2, [r1, #8]
 801125e:	690b      	ldr	r3, [r1, #16]
 8011260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011264:	4293      	cmp	r3, r2
 8011266:	bfb8      	it	lt
 8011268:	4613      	movlt	r3, r2
 801126a:	6033      	str	r3, [r6, #0]
 801126c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011270:	4607      	mov	r7, r0
 8011272:	460c      	mov	r4, r1
 8011274:	b10a      	cbz	r2, 801127a <_printf_common+0x26>
 8011276:	3301      	adds	r3, #1
 8011278:	6033      	str	r3, [r6, #0]
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	0699      	lsls	r1, r3, #26
 801127e:	bf42      	ittt	mi
 8011280:	6833      	ldrmi	r3, [r6, #0]
 8011282:	3302      	addmi	r3, #2
 8011284:	6033      	strmi	r3, [r6, #0]
 8011286:	6825      	ldr	r5, [r4, #0]
 8011288:	f015 0506 	ands.w	r5, r5, #6
 801128c:	d106      	bne.n	801129c <_printf_common+0x48>
 801128e:	f104 0a19 	add.w	sl, r4, #25
 8011292:	68e3      	ldr	r3, [r4, #12]
 8011294:	6832      	ldr	r2, [r6, #0]
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	42ab      	cmp	r3, r5
 801129a:	dc26      	bgt.n	80112ea <_printf_common+0x96>
 801129c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112a0:	1e13      	subs	r3, r2, #0
 80112a2:	6822      	ldr	r2, [r4, #0]
 80112a4:	bf18      	it	ne
 80112a6:	2301      	movne	r3, #1
 80112a8:	0692      	lsls	r2, r2, #26
 80112aa:	d42b      	bmi.n	8011304 <_printf_common+0xb0>
 80112ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112b0:	4649      	mov	r1, r9
 80112b2:	4638      	mov	r0, r7
 80112b4:	47c0      	blx	r8
 80112b6:	3001      	adds	r0, #1
 80112b8:	d01e      	beq.n	80112f8 <_printf_common+0xa4>
 80112ba:	6823      	ldr	r3, [r4, #0]
 80112bc:	6922      	ldr	r2, [r4, #16]
 80112be:	f003 0306 	and.w	r3, r3, #6
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	bf02      	ittt	eq
 80112c6:	68e5      	ldreq	r5, [r4, #12]
 80112c8:	6833      	ldreq	r3, [r6, #0]
 80112ca:	1aed      	subeq	r5, r5, r3
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	bf0c      	ite	eq
 80112d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112d4:	2500      	movne	r5, #0
 80112d6:	4293      	cmp	r3, r2
 80112d8:	bfc4      	itt	gt
 80112da:	1a9b      	subgt	r3, r3, r2
 80112dc:	18ed      	addgt	r5, r5, r3
 80112de:	2600      	movs	r6, #0
 80112e0:	341a      	adds	r4, #26
 80112e2:	42b5      	cmp	r5, r6
 80112e4:	d11a      	bne.n	801131c <_printf_common+0xc8>
 80112e6:	2000      	movs	r0, #0
 80112e8:	e008      	b.n	80112fc <_printf_common+0xa8>
 80112ea:	2301      	movs	r3, #1
 80112ec:	4652      	mov	r2, sl
 80112ee:	4649      	mov	r1, r9
 80112f0:	4638      	mov	r0, r7
 80112f2:	47c0      	blx	r8
 80112f4:	3001      	adds	r0, #1
 80112f6:	d103      	bne.n	8011300 <_printf_common+0xac>
 80112f8:	f04f 30ff 	mov.w	r0, #4294967295
 80112fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011300:	3501      	adds	r5, #1
 8011302:	e7c6      	b.n	8011292 <_printf_common+0x3e>
 8011304:	18e1      	adds	r1, r4, r3
 8011306:	1c5a      	adds	r2, r3, #1
 8011308:	2030      	movs	r0, #48	; 0x30
 801130a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801130e:	4422      	add	r2, r4
 8011310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011318:	3302      	adds	r3, #2
 801131a:	e7c7      	b.n	80112ac <_printf_common+0x58>
 801131c:	2301      	movs	r3, #1
 801131e:	4622      	mov	r2, r4
 8011320:	4649      	mov	r1, r9
 8011322:	4638      	mov	r0, r7
 8011324:	47c0      	blx	r8
 8011326:	3001      	adds	r0, #1
 8011328:	d0e6      	beq.n	80112f8 <_printf_common+0xa4>
 801132a:	3601      	adds	r6, #1
 801132c:	e7d9      	b.n	80112e2 <_printf_common+0x8e>
	...

08011330 <_printf_i>:
 8011330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011334:	7e0f      	ldrb	r7, [r1, #24]
 8011336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011338:	2f78      	cmp	r7, #120	; 0x78
 801133a:	4691      	mov	r9, r2
 801133c:	4680      	mov	r8, r0
 801133e:	460c      	mov	r4, r1
 8011340:	469a      	mov	sl, r3
 8011342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011346:	d807      	bhi.n	8011358 <_printf_i+0x28>
 8011348:	2f62      	cmp	r7, #98	; 0x62
 801134a:	d80a      	bhi.n	8011362 <_printf_i+0x32>
 801134c:	2f00      	cmp	r7, #0
 801134e:	f000 80d4 	beq.w	80114fa <_printf_i+0x1ca>
 8011352:	2f58      	cmp	r7, #88	; 0x58
 8011354:	f000 80c0 	beq.w	80114d8 <_printf_i+0x1a8>
 8011358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801135c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011360:	e03a      	b.n	80113d8 <_printf_i+0xa8>
 8011362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011366:	2b15      	cmp	r3, #21
 8011368:	d8f6      	bhi.n	8011358 <_printf_i+0x28>
 801136a:	a101      	add	r1, pc, #4	; (adr r1, 8011370 <_printf_i+0x40>)
 801136c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011370:	080113c9 	.word	0x080113c9
 8011374:	080113dd 	.word	0x080113dd
 8011378:	08011359 	.word	0x08011359
 801137c:	08011359 	.word	0x08011359
 8011380:	08011359 	.word	0x08011359
 8011384:	08011359 	.word	0x08011359
 8011388:	080113dd 	.word	0x080113dd
 801138c:	08011359 	.word	0x08011359
 8011390:	08011359 	.word	0x08011359
 8011394:	08011359 	.word	0x08011359
 8011398:	08011359 	.word	0x08011359
 801139c:	080114e1 	.word	0x080114e1
 80113a0:	08011409 	.word	0x08011409
 80113a4:	0801149b 	.word	0x0801149b
 80113a8:	08011359 	.word	0x08011359
 80113ac:	08011359 	.word	0x08011359
 80113b0:	08011503 	.word	0x08011503
 80113b4:	08011359 	.word	0x08011359
 80113b8:	08011409 	.word	0x08011409
 80113bc:	08011359 	.word	0x08011359
 80113c0:	08011359 	.word	0x08011359
 80113c4:	080114a3 	.word	0x080114a3
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	1d1a      	adds	r2, r3, #4
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	602a      	str	r2, [r5, #0]
 80113d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113d8:	2301      	movs	r3, #1
 80113da:	e09f      	b.n	801151c <_printf_i+0x1ec>
 80113dc:	6820      	ldr	r0, [r4, #0]
 80113de:	682b      	ldr	r3, [r5, #0]
 80113e0:	0607      	lsls	r7, r0, #24
 80113e2:	f103 0104 	add.w	r1, r3, #4
 80113e6:	6029      	str	r1, [r5, #0]
 80113e8:	d501      	bpl.n	80113ee <_printf_i+0xbe>
 80113ea:	681e      	ldr	r6, [r3, #0]
 80113ec:	e003      	b.n	80113f6 <_printf_i+0xc6>
 80113ee:	0646      	lsls	r6, r0, #25
 80113f0:	d5fb      	bpl.n	80113ea <_printf_i+0xba>
 80113f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80113f6:	2e00      	cmp	r6, #0
 80113f8:	da03      	bge.n	8011402 <_printf_i+0xd2>
 80113fa:	232d      	movs	r3, #45	; 0x2d
 80113fc:	4276      	negs	r6, r6
 80113fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011402:	485a      	ldr	r0, [pc, #360]	; (801156c <_printf_i+0x23c>)
 8011404:	230a      	movs	r3, #10
 8011406:	e012      	b.n	801142e <_printf_i+0xfe>
 8011408:	682b      	ldr	r3, [r5, #0]
 801140a:	6820      	ldr	r0, [r4, #0]
 801140c:	1d19      	adds	r1, r3, #4
 801140e:	6029      	str	r1, [r5, #0]
 8011410:	0605      	lsls	r5, r0, #24
 8011412:	d501      	bpl.n	8011418 <_printf_i+0xe8>
 8011414:	681e      	ldr	r6, [r3, #0]
 8011416:	e002      	b.n	801141e <_printf_i+0xee>
 8011418:	0641      	lsls	r1, r0, #25
 801141a:	d5fb      	bpl.n	8011414 <_printf_i+0xe4>
 801141c:	881e      	ldrh	r6, [r3, #0]
 801141e:	4853      	ldr	r0, [pc, #332]	; (801156c <_printf_i+0x23c>)
 8011420:	2f6f      	cmp	r7, #111	; 0x6f
 8011422:	bf0c      	ite	eq
 8011424:	2308      	moveq	r3, #8
 8011426:	230a      	movne	r3, #10
 8011428:	2100      	movs	r1, #0
 801142a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801142e:	6865      	ldr	r5, [r4, #4]
 8011430:	60a5      	str	r5, [r4, #8]
 8011432:	2d00      	cmp	r5, #0
 8011434:	bfa2      	ittt	ge
 8011436:	6821      	ldrge	r1, [r4, #0]
 8011438:	f021 0104 	bicge.w	r1, r1, #4
 801143c:	6021      	strge	r1, [r4, #0]
 801143e:	b90e      	cbnz	r6, 8011444 <_printf_i+0x114>
 8011440:	2d00      	cmp	r5, #0
 8011442:	d04b      	beq.n	80114dc <_printf_i+0x1ac>
 8011444:	4615      	mov	r5, r2
 8011446:	fbb6 f1f3 	udiv	r1, r6, r3
 801144a:	fb03 6711 	mls	r7, r3, r1, r6
 801144e:	5dc7      	ldrb	r7, [r0, r7]
 8011450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011454:	4637      	mov	r7, r6
 8011456:	42bb      	cmp	r3, r7
 8011458:	460e      	mov	r6, r1
 801145a:	d9f4      	bls.n	8011446 <_printf_i+0x116>
 801145c:	2b08      	cmp	r3, #8
 801145e:	d10b      	bne.n	8011478 <_printf_i+0x148>
 8011460:	6823      	ldr	r3, [r4, #0]
 8011462:	07de      	lsls	r6, r3, #31
 8011464:	d508      	bpl.n	8011478 <_printf_i+0x148>
 8011466:	6923      	ldr	r3, [r4, #16]
 8011468:	6861      	ldr	r1, [r4, #4]
 801146a:	4299      	cmp	r1, r3
 801146c:	bfde      	ittt	le
 801146e:	2330      	movle	r3, #48	; 0x30
 8011470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011478:	1b52      	subs	r2, r2, r5
 801147a:	6122      	str	r2, [r4, #16]
 801147c:	f8cd a000 	str.w	sl, [sp]
 8011480:	464b      	mov	r3, r9
 8011482:	aa03      	add	r2, sp, #12
 8011484:	4621      	mov	r1, r4
 8011486:	4640      	mov	r0, r8
 8011488:	f7ff fee4 	bl	8011254 <_printf_common>
 801148c:	3001      	adds	r0, #1
 801148e:	d14a      	bne.n	8011526 <_printf_i+0x1f6>
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	b004      	add	sp, #16
 8011496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	f043 0320 	orr.w	r3, r3, #32
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	4833      	ldr	r0, [pc, #204]	; (8011570 <_printf_i+0x240>)
 80114a4:	2778      	movs	r7, #120	; 0x78
 80114a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	6829      	ldr	r1, [r5, #0]
 80114ae:	061f      	lsls	r7, r3, #24
 80114b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80114b4:	d402      	bmi.n	80114bc <_printf_i+0x18c>
 80114b6:	065f      	lsls	r7, r3, #25
 80114b8:	bf48      	it	mi
 80114ba:	b2b6      	uxthmi	r6, r6
 80114bc:	07df      	lsls	r7, r3, #31
 80114be:	bf48      	it	mi
 80114c0:	f043 0320 	orrmi.w	r3, r3, #32
 80114c4:	6029      	str	r1, [r5, #0]
 80114c6:	bf48      	it	mi
 80114c8:	6023      	strmi	r3, [r4, #0]
 80114ca:	b91e      	cbnz	r6, 80114d4 <_printf_i+0x1a4>
 80114cc:	6823      	ldr	r3, [r4, #0]
 80114ce:	f023 0320 	bic.w	r3, r3, #32
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	2310      	movs	r3, #16
 80114d6:	e7a7      	b.n	8011428 <_printf_i+0xf8>
 80114d8:	4824      	ldr	r0, [pc, #144]	; (801156c <_printf_i+0x23c>)
 80114da:	e7e4      	b.n	80114a6 <_printf_i+0x176>
 80114dc:	4615      	mov	r5, r2
 80114de:	e7bd      	b.n	801145c <_printf_i+0x12c>
 80114e0:	682b      	ldr	r3, [r5, #0]
 80114e2:	6826      	ldr	r6, [r4, #0]
 80114e4:	6961      	ldr	r1, [r4, #20]
 80114e6:	1d18      	adds	r0, r3, #4
 80114e8:	6028      	str	r0, [r5, #0]
 80114ea:	0635      	lsls	r5, r6, #24
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	d501      	bpl.n	80114f4 <_printf_i+0x1c4>
 80114f0:	6019      	str	r1, [r3, #0]
 80114f2:	e002      	b.n	80114fa <_printf_i+0x1ca>
 80114f4:	0670      	lsls	r0, r6, #25
 80114f6:	d5fb      	bpl.n	80114f0 <_printf_i+0x1c0>
 80114f8:	8019      	strh	r1, [r3, #0]
 80114fa:	2300      	movs	r3, #0
 80114fc:	6123      	str	r3, [r4, #16]
 80114fe:	4615      	mov	r5, r2
 8011500:	e7bc      	b.n	801147c <_printf_i+0x14c>
 8011502:	682b      	ldr	r3, [r5, #0]
 8011504:	1d1a      	adds	r2, r3, #4
 8011506:	602a      	str	r2, [r5, #0]
 8011508:	681d      	ldr	r5, [r3, #0]
 801150a:	6862      	ldr	r2, [r4, #4]
 801150c:	2100      	movs	r1, #0
 801150e:	4628      	mov	r0, r5
 8011510:	f7ee fe5e 	bl	80001d0 <memchr>
 8011514:	b108      	cbz	r0, 801151a <_printf_i+0x1ea>
 8011516:	1b40      	subs	r0, r0, r5
 8011518:	6060      	str	r0, [r4, #4]
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	6123      	str	r3, [r4, #16]
 801151e:	2300      	movs	r3, #0
 8011520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011524:	e7aa      	b.n	801147c <_printf_i+0x14c>
 8011526:	6923      	ldr	r3, [r4, #16]
 8011528:	462a      	mov	r2, r5
 801152a:	4649      	mov	r1, r9
 801152c:	4640      	mov	r0, r8
 801152e:	47d0      	blx	sl
 8011530:	3001      	adds	r0, #1
 8011532:	d0ad      	beq.n	8011490 <_printf_i+0x160>
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	079b      	lsls	r3, r3, #30
 8011538:	d413      	bmi.n	8011562 <_printf_i+0x232>
 801153a:	68e0      	ldr	r0, [r4, #12]
 801153c:	9b03      	ldr	r3, [sp, #12]
 801153e:	4298      	cmp	r0, r3
 8011540:	bfb8      	it	lt
 8011542:	4618      	movlt	r0, r3
 8011544:	e7a6      	b.n	8011494 <_printf_i+0x164>
 8011546:	2301      	movs	r3, #1
 8011548:	4632      	mov	r2, r6
 801154a:	4649      	mov	r1, r9
 801154c:	4640      	mov	r0, r8
 801154e:	47d0      	blx	sl
 8011550:	3001      	adds	r0, #1
 8011552:	d09d      	beq.n	8011490 <_printf_i+0x160>
 8011554:	3501      	adds	r5, #1
 8011556:	68e3      	ldr	r3, [r4, #12]
 8011558:	9903      	ldr	r1, [sp, #12]
 801155a:	1a5b      	subs	r3, r3, r1
 801155c:	42ab      	cmp	r3, r5
 801155e:	dcf2      	bgt.n	8011546 <_printf_i+0x216>
 8011560:	e7eb      	b.n	801153a <_printf_i+0x20a>
 8011562:	2500      	movs	r5, #0
 8011564:	f104 0619 	add.w	r6, r4, #25
 8011568:	e7f5      	b.n	8011556 <_printf_i+0x226>
 801156a:	bf00      	nop
 801156c:	0801383a 	.word	0x0801383a
 8011570:	0801384b 	.word	0x0801384b

08011574 <std>:
 8011574:	2300      	movs	r3, #0
 8011576:	b510      	push	{r4, lr}
 8011578:	4604      	mov	r4, r0
 801157a:	e9c0 3300 	strd	r3, r3, [r0]
 801157e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011582:	6083      	str	r3, [r0, #8]
 8011584:	8181      	strh	r1, [r0, #12]
 8011586:	6643      	str	r3, [r0, #100]	; 0x64
 8011588:	81c2      	strh	r2, [r0, #14]
 801158a:	6183      	str	r3, [r0, #24]
 801158c:	4619      	mov	r1, r3
 801158e:	2208      	movs	r2, #8
 8011590:	305c      	adds	r0, #92	; 0x5c
 8011592:	f000 f8fc 	bl	801178e <memset>
 8011596:	4b05      	ldr	r3, [pc, #20]	; (80115ac <std+0x38>)
 8011598:	6263      	str	r3, [r4, #36]	; 0x24
 801159a:	4b05      	ldr	r3, [pc, #20]	; (80115b0 <std+0x3c>)
 801159c:	62a3      	str	r3, [r4, #40]	; 0x28
 801159e:	4b05      	ldr	r3, [pc, #20]	; (80115b4 <std+0x40>)
 80115a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115a2:	4b05      	ldr	r3, [pc, #20]	; (80115b8 <std+0x44>)
 80115a4:	6224      	str	r4, [r4, #32]
 80115a6:	6323      	str	r3, [r4, #48]	; 0x30
 80115a8:	bd10      	pop	{r4, pc}
 80115aa:	bf00      	nop
 80115ac:	08011709 	.word	0x08011709
 80115b0:	0801172b 	.word	0x0801172b
 80115b4:	08011763 	.word	0x08011763
 80115b8:	08011787 	.word	0x08011787

080115bc <stdio_exit_handler>:
 80115bc:	4a02      	ldr	r2, [pc, #8]	; (80115c8 <stdio_exit_handler+0xc>)
 80115be:	4903      	ldr	r1, [pc, #12]	; (80115cc <stdio_exit_handler+0x10>)
 80115c0:	4803      	ldr	r0, [pc, #12]	; (80115d0 <stdio_exit_handler+0x14>)
 80115c2:	f000 b869 	b.w	8011698 <_fwalk_sglue>
 80115c6:	bf00      	nop
 80115c8:	20000130 	.word	0x20000130
 80115cc:	08013211 	.word	0x08013211
 80115d0:	2000013c 	.word	0x2000013c

080115d4 <cleanup_stdio>:
 80115d4:	6841      	ldr	r1, [r0, #4]
 80115d6:	4b0c      	ldr	r3, [pc, #48]	; (8011608 <cleanup_stdio+0x34>)
 80115d8:	4299      	cmp	r1, r3
 80115da:	b510      	push	{r4, lr}
 80115dc:	4604      	mov	r4, r0
 80115de:	d001      	beq.n	80115e4 <cleanup_stdio+0x10>
 80115e0:	f001 fe16 	bl	8013210 <_fflush_r>
 80115e4:	68a1      	ldr	r1, [r4, #8]
 80115e6:	4b09      	ldr	r3, [pc, #36]	; (801160c <cleanup_stdio+0x38>)
 80115e8:	4299      	cmp	r1, r3
 80115ea:	d002      	beq.n	80115f2 <cleanup_stdio+0x1e>
 80115ec:	4620      	mov	r0, r4
 80115ee:	f001 fe0f 	bl	8013210 <_fflush_r>
 80115f2:	68e1      	ldr	r1, [r4, #12]
 80115f4:	4b06      	ldr	r3, [pc, #24]	; (8011610 <cleanup_stdio+0x3c>)
 80115f6:	4299      	cmp	r1, r3
 80115f8:	d004      	beq.n	8011604 <cleanup_stdio+0x30>
 80115fa:	4620      	mov	r0, r4
 80115fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011600:	f001 be06 	b.w	8013210 <_fflush_r>
 8011604:	bd10      	pop	{r4, pc}
 8011606:	bf00      	nop
 8011608:	20002550 	.word	0x20002550
 801160c:	200025b8 	.word	0x200025b8
 8011610:	20002620 	.word	0x20002620

08011614 <global_stdio_init.part.0>:
 8011614:	b510      	push	{r4, lr}
 8011616:	4b0b      	ldr	r3, [pc, #44]	; (8011644 <global_stdio_init.part.0+0x30>)
 8011618:	4c0b      	ldr	r4, [pc, #44]	; (8011648 <global_stdio_init.part.0+0x34>)
 801161a:	4a0c      	ldr	r2, [pc, #48]	; (801164c <global_stdio_init.part.0+0x38>)
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	4620      	mov	r0, r4
 8011620:	2200      	movs	r2, #0
 8011622:	2104      	movs	r1, #4
 8011624:	f7ff ffa6 	bl	8011574 <std>
 8011628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801162c:	2201      	movs	r2, #1
 801162e:	2109      	movs	r1, #9
 8011630:	f7ff ffa0 	bl	8011574 <std>
 8011634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011638:	2202      	movs	r2, #2
 801163a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801163e:	2112      	movs	r1, #18
 8011640:	f7ff bf98 	b.w	8011574 <std>
 8011644:	20002688 	.word	0x20002688
 8011648:	20002550 	.word	0x20002550
 801164c:	080115bd 	.word	0x080115bd

08011650 <__sfp_lock_acquire>:
 8011650:	4801      	ldr	r0, [pc, #4]	; (8011658 <__sfp_lock_acquire+0x8>)
 8011652:	f000 b919 	b.w	8011888 <__retarget_lock_acquire_recursive>
 8011656:	bf00      	nop
 8011658:	20002691 	.word	0x20002691

0801165c <__sfp_lock_release>:
 801165c:	4801      	ldr	r0, [pc, #4]	; (8011664 <__sfp_lock_release+0x8>)
 801165e:	f000 b914 	b.w	801188a <__retarget_lock_release_recursive>
 8011662:	bf00      	nop
 8011664:	20002691 	.word	0x20002691

08011668 <__sinit>:
 8011668:	b510      	push	{r4, lr}
 801166a:	4604      	mov	r4, r0
 801166c:	f7ff fff0 	bl	8011650 <__sfp_lock_acquire>
 8011670:	6a23      	ldr	r3, [r4, #32]
 8011672:	b11b      	cbz	r3, 801167c <__sinit+0x14>
 8011674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011678:	f7ff bff0 	b.w	801165c <__sfp_lock_release>
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <__sinit+0x28>)
 801167e:	6223      	str	r3, [r4, #32]
 8011680:	4b04      	ldr	r3, [pc, #16]	; (8011694 <__sinit+0x2c>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d1f5      	bne.n	8011674 <__sinit+0xc>
 8011688:	f7ff ffc4 	bl	8011614 <global_stdio_init.part.0>
 801168c:	e7f2      	b.n	8011674 <__sinit+0xc>
 801168e:	bf00      	nop
 8011690:	080115d5 	.word	0x080115d5
 8011694:	20002688 	.word	0x20002688

08011698 <_fwalk_sglue>:
 8011698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801169c:	4607      	mov	r7, r0
 801169e:	4688      	mov	r8, r1
 80116a0:	4614      	mov	r4, r2
 80116a2:	2600      	movs	r6, #0
 80116a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116a8:	f1b9 0901 	subs.w	r9, r9, #1
 80116ac:	d505      	bpl.n	80116ba <_fwalk_sglue+0x22>
 80116ae:	6824      	ldr	r4, [r4, #0]
 80116b0:	2c00      	cmp	r4, #0
 80116b2:	d1f7      	bne.n	80116a4 <_fwalk_sglue+0xc>
 80116b4:	4630      	mov	r0, r6
 80116b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ba:	89ab      	ldrh	r3, [r5, #12]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d907      	bls.n	80116d0 <_fwalk_sglue+0x38>
 80116c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116c4:	3301      	adds	r3, #1
 80116c6:	d003      	beq.n	80116d0 <_fwalk_sglue+0x38>
 80116c8:	4629      	mov	r1, r5
 80116ca:	4638      	mov	r0, r7
 80116cc:	47c0      	blx	r8
 80116ce:	4306      	orrs	r6, r0
 80116d0:	3568      	adds	r5, #104	; 0x68
 80116d2:	e7e9      	b.n	80116a8 <_fwalk_sglue+0x10>

080116d4 <iprintf>:
 80116d4:	b40f      	push	{r0, r1, r2, r3}
 80116d6:	b507      	push	{r0, r1, r2, lr}
 80116d8:	4906      	ldr	r1, [pc, #24]	; (80116f4 <iprintf+0x20>)
 80116da:	ab04      	add	r3, sp, #16
 80116dc:	6808      	ldr	r0, [r1, #0]
 80116de:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e2:	6881      	ldr	r1, [r0, #8]
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	f001 fbf3 	bl	8012ed0 <_vfiprintf_r>
 80116ea:	b003      	add	sp, #12
 80116ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80116f0:	b004      	add	sp, #16
 80116f2:	4770      	bx	lr
 80116f4:	20000188 	.word	0x20000188

080116f8 <putchar>:
 80116f8:	4b02      	ldr	r3, [pc, #8]	; (8011704 <putchar+0xc>)
 80116fa:	4601      	mov	r1, r0
 80116fc:	6818      	ldr	r0, [r3, #0]
 80116fe:	6882      	ldr	r2, [r0, #8]
 8011700:	f001 bdae 	b.w	8013260 <_putc_r>
 8011704:	20000188 	.word	0x20000188

08011708 <__sread>:
 8011708:	b510      	push	{r4, lr}
 801170a:	460c      	mov	r4, r1
 801170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011710:	f000 f86c 	bl	80117ec <_read_r>
 8011714:	2800      	cmp	r0, #0
 8011716:	bfab      	itete	ge
 8011718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801171a:	89a3      	ldrhlt	r3, [r4, #12]
 801171c:	181b      	addge	r3, r3, r0
 801171e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011722:	bfac      	ite	ge
 8011724:	6563      	strge	r3, [r4, #84]	; 0x54
 8011726:	81a3      	strhlt	r3, [r4, #12]
 8011728:	bd10      	pop	{r4, pc}

0801172a <__swrite>:
 801172a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801172e:	461f      	mov	r7, r3
 8011730:	898b      	ldrh	r3, [r1, #12]
 8011732:	05db      	lsls	r3, r3, #23
 8011734:	4605      	mov	r5, r0
 8011736:	460c      	mov	r4, r1
 8011738:	4616      	mov	r6, r2
 801173a:	d505      	bpl.n	8011748 <__swrite+0x1e>
 801173c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011740:	2302      	movs	r3, #2
 8011742:	2200      	movs	r2, #0
 8011744:	f000 f840 	bl	80117c8 <_lseek_r>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801174e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	4632      	mov	r2, r6
 8011756:	463b      	mov	r3, r7
 8011758:	4628      	mov	r0, r5
 801175a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801175e:	f000 b857 	b.w	8011810 <_write_r>

08011762 <__sseek>:
 8011762:	b510      	push	{r4, lr}
 8011764:	460c      	mov	r4, r1
 8011766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801176a:	f000 f82d 	bl	80117c8 <_lseek_r>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	bf15      	itete	ne
 8011774:	6560      	strne	r0, [r4, #84]	; 0x54
 8011776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801177a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801177e:	81a3      	strheq	r3, [r4, #12]
 8011780:	bf18      	it	ne
 8011782:	81a3      	strhne	r3, [r4, #12]
 8011784:	bd10      	pop	{r4, pc}

08011786 <__sclose>:
 8011786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801178a:	f000 b80d 	b.w	80117a8 <_close_r>

0801178e <memset>:
 801178e:	4402      	add	r2, r0
 8011790:	4603      	mov	r3, r0
 8011792:	4293      	cmp	r3, r2
 8011794:	d100      	bne.n	8011798 <memset+0xa>
 8011796:	4770      	bx	lr
 8011798:	f803 1b01 	strb.w	r1, [r3], #1
 801179c:	e7f9      	b.n	8011792 <memset+0x4>
	...

080117a0 <_localeconv_r>:
 80117a0:	4800      	ldr	r0, [pc, #0]	; (80117a4 <_localeconv_r+0x4>)
 80117a2:	4770      	bx	lr
 80117a4:	2000027c 	.word	0x2000027c

080117a8 <_close_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d06      	ldr	r5, [pc, #24]	; (80117c4 <_close_r+0x1c>)
 80117ac:	2300      	movs	r3, #0
 80117ae:	4604      	mov	r4, r0
 80117b0:	4608      	mov	r0, r1
 80117b2:	602b      	str	r3, [r5, #0]
 80117b4:	f7f2 fef9 	bl	80045aa <_close>
 80117b8:	1c43      	adds	r3, r0, #1
 80117ba:	d102      	bne.n	80117c2 <_close_r+0x1a>
 80117bc:	682b      	ldr	r3, [r5, #0]
 80117be:	b103      	cbz	r3, 80117c2 <_close_r+0x1a>
 80117c0:	6023      	str	r3, [r4, #0]
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
 80117c4:	2000268c 	.word	0x2000268c

080117c8 <_lseek_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d07      	ldr	r5, [pc, #28]	; (80117e8 <_lseek_r+0x20>)
 80117cc:	4604      	mov	r4, r0
 80117ce:	4608      	mov	r0, r1
 80117d0:	4611      	mov	r1, r2
 80117d2:	2200      	movs	r2, #0
 80117d4:	602a      	str	r2, [r5, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	f7f2 ff0e 	bl	80045f8 <_lseek>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_lseek_r+0x1e>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_lseek_r+0x1e>
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	2000268c 	.word	0x2000268c

080117ec <_read_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	4d07      	ldr	r5, [pc, #28]	; (801180c <_read_r+0x20>)
 80117f0:	4604      	mov	r4, r0
 80117f2:	4608      	mov	r0, r1
 80117f4:	4611      	mov	r1, r2
 80117f6:	2200      	movs	r2, #0
 80117f8:	602a      	str	r2, [r5, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	f7f2 fe9c 	bl	8004538 <_read>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d102      	bne.n	801180a <_read_r+0x1e>
 8011804:	682b      	ldr	r3, [r5, #0]
 8011806:	b103      	cbz	r3, 801180a <_read_r+0x1e>
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	2000268c 	.word	0x2000268c

08011810 <_write_r>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4d07      	ldr	r5, [pc, #28]	; (8011830 <_write_r+0x20>)
 8011814:	4604      	mov	r4, r0
 8011816:	4608      	mov	r0, r1
 8011818:	4611      	mov	r1, r2
 801181a:	2200      	movs	r2, #0
 801181c:	602a      	str	r2, [r5, #0]
 801181e:	461a      	mov	r2, r3
 8011820:	f7f2 fea7 	bl	8004572 <_write>
 8011824:	1c43      	adds	r3, r0, #1
 8011826:	d102      	bne.n	801182e <_write_r+0x1e>
 8011828:	682b      	ldr	r3, [r5, #0]
 801182a:	b103      	cbz	r3, 801182e <_write_r+0x1e>
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	bd38      	pop	{r3, r4, r5, pc}
 8011830:	2000268c 	.word	0x2000268c

08011834 <__errno>:
 8011834:	4b01      	ldr	r3, [pc, #4]	; (801183c <__errno+0x8>)
 8011836:	6818      	ldr	r0, [r3, #0]
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	20000188 	.word	0x20000188

08011840 <__libc_init_array>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	4d0d      	ldr	r5, [pc, #52]	; (8011878 <__libc_init_array+0x38>)
 8011844:	4c0d      	ldr	r4, [pc, #52]	; (801187c <__libc_init_array+0x3c>)
 8011846:	1b64      	subs	r4, r4, r5
 8011848:	10a4      	asrs	r4, r4, #2
 801184a:	2600      	movs	r6, #0
 801184c:	42a6      	cmp	r6, r4
 801184e:	d109      	bne.n	8011864 <__libc_init_array+0x24>
 8011850:	4d0b      	ldr	r5, [pc, #44]	; (8011880 <__libc_init_array+0x40>)
 8011852:	4c0c      	ldr	r4, [pc, #48]	; (8011884 <__libc_init_array+0x44>)
 8011854:	f001 ff22 	bl	801369c <_init>
 8011858:	1b64      	subs	r4, r4, r5
 801185a:	10a4      	asrs	r4, r4, #2
 801185c:	2600      	movs	r6, #0
 801185e:	42a6      	cmp	r6, r4
 8011860:	d105      	bne.n	801186e <__libc_init_array+0x2e>
 8011862:	bd70      	pop	{r4, r5, r6, pc}
 8011864:	f855 3b04 	ldr.w	r3, [r5], #4
 8011868:	4798      	blx	r3
 801186a:	3601      	adds	r6, #1
 801186c:	e7ee      	b.n	801184c <__libc_init_array+0xc>
 801186e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011872:	4798      	blx	r3
 8011874:	3601      	adds	r6, #1
 8011876:	e7f2      	b.n	801185e <__libc_init_array+0x1e>
 8011878:	08013ba4 	.word	0x08013ba4
 801187c:	08013ba4 	.word	0x08013ba4
 8011880:	08013ba4 	.word	0x08013ba4
 8011884:	08013ba8 	.word	0x08013ba8

08011888 <__retarget_lock_acquire_recursive>:
 8011888:	4770      	bx	lr

0801188a <__retarget_lock_release_recursive>:
 801188a:	4770      	bx	lr

0801188c <quorem>:
 801188c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011890:	6903      	ldr	r3, [r0, #16]
 8011892:	690c      	ldr	r4, [r1, #16]
 8011894:	42a3      	cmp	r3, r4
 8011896:	4607      	mov	r7, r0
 8011898:	db7e      	blt.n	8011998 <quorem+0x10c>
 801189a:	3c01      	subs	r4, #1
 801189c:	f101 0814 	add.w	r8, r1, #20
 80118a0:	f100 0514 	add.w	r5, r0, #20
 80118a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118a8:	9301      	str	r3, [sp, #4]
 80118aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118b2:	3301      	adds	r3, #1
 80118b4:	429a      	cmp	r2, r3
 80118b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118be:	fbb2 f6f3 	udiv	r6, r2, r3
 80118c2:	d331      	bcc.n	8011928 <quorem+0x9c>
 80118c4:	f04f 0e00 	mov.w	lr, #0
 80118c8:	4640      	mov	r0, r8
 80118ca:	46ac      	mov	ip, r5
 80118cc:	46f2      	mov	sl, lr
 80118ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80118d2:	b293      	uxth	r3, r2
 80118d4:	fb06 e303 	mla	r3, r6, r3, lr
 80118d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80118dc:	0c1a      	lsrs	r2, r3, #16
 80118de:	b29b      	uxth	r3, r3
 80118e0:	ebaa 0303 	sub.w	r3, sl, r3
 80118e4:	f8dc a000 	ldr.w	sl, [ip]
 80118e8:	fa13 f38a 	uxtah	r3, r3, sl
 80118ec:	fb06 220e 	mla	r2, r6, lr, r2
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	9b00      	ldr	r3, [sp, #0]
 80118f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80118f8:	b292      	uxth	r2, r2
 80118fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80118fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011902:	f8bd 3000 	ldrh.w	r3, [sp]
 8011906:	4581      	cmp	r9, r0
 8011908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801190c:	f84c 3b04 	str.w	r3, [ip], #4
 8011910:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011914:	d2db      	bcs.n	80118ce <quorem+0x42>
 8011916:	f855 300b 	ldr.w	r3, [r5, fp]
 801191a:	b92b      	cbnz	r3, 8011928 <quorem+0x9c>
 801191c:	9b01      	ldr	r3, [sp, #4]
 801191e:	3b04      	subs	r3, #4
 8011920:	429d      	cmp	r5, r3
 8011922:	461a      	mov	r2, r3
 8011924:	d32c      	bcc.n	8011980 <quorem+0xf4>
 8011926:	613c      	str	r4, [r7, #16]
 8011928:	4638      	mov	r0, r7
 801192a:	f001 f9a7 	bl	8012c7c <__mcmp>
 801192e:	2800      	cmp	r0, #0
 8011930:	db22      	blt.n	8011978 <quorem+0xec>
 8011932:	3601      	adds	r6, #1
 8011934:	4629      	mov	r1, r5
 8011936:	2000      	movs	r0, #0
 8011938:	f858 2b04 	ldr.w	r2, [r8], #4
 801193c:	f8d1 c000 	ldr.w	ip, [r1]
 8011940:	b293      	uxth	r3, r2
 8011942:	1ac3      	subs	r3, r0, r3
 8011944:	0c12      	lsrs	r2, r2, #16
 8011946:	fa13 f38c 	uxtah	r3, r3, ip
 801194a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801194e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011952:	b29b      	uxth	r3, r3
 8011954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011958:	45c1      	cmp	r9, r8
 801195a:	f841 3b04 	str.w	r3, [r1], #4
 801195e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011962:	d2e9      	bcs.n	8011938 <quorem+0xac>
 8011964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801196c:	b922      	cbnz	r2, 8011978 <quorem+0xec>
 801196e:	3b04      	subs	r3, #4
 8011970:	429d      	cmp	r5, r3
 8011972:	461a      	mov	r2, r3
 8011974:	d30a      	bcc.n	801198c <quorem+0x100>
 8011976:	613c      	str	r4, [r7, #16]
 8011978:	4630      	mov	r0, r6
 801197a:	b003      	add	sp, #12
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	3b04      	subs	r3, #4
 8011984:	2a00      	cmp	r2, #0
 8011986:	d1ce      	bne.n	8011926 <quorem+0x9a>
 8011988:	3c01      	subs	r4, #1
 801198a:	e7c9      	b.n	8011920 <quorem+0x94>
 801198c:	6812      	ldr	r2, [r2, #0]
 801198e:	3b04      	subs	r3, #4
 8011990:	2a00      	cmp	r2, #0
 8011992:	d1f0      	bne.n	8011976 <quorem+0xea>
 8011994:	3c01      	subs	r4, #1
 8011996:	e7eb      	b.n	8011970 <quorem+0xe4>
 8011998:	2000      	movs	r0, #0
 801199a:	e7ee      	b.n	801197a <quorem+0xee>
 801199c:	0000      	movs	r0, r0
	...

080119a0 <_dtoa_r>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	ed2d 8b04 	vpush	{d8-d9}
 80119a8:	69c5      	ldr	r5, [r0, #28]
 80119aa:	b093      	sub	sp, #76	; 0x4c
 80119ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119b0:	ec57 6b10 	vmov	r6, r7, d0
 80119b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80119b8:	9107      	str	r1, [sp, #28]
 80119ba:	4604      	mov	r4, r0
 80119bc:	920a      	str	r2, [sp, #40]	; 0x28
 80119be:	930d      	str	r3, [sp, #52]	; 0x34
 80119c0:	b975      	cbnz	r5, 80119e0 <_dtoa_r+0x40>
 80119c2:	2010      	movs	r0, #16
 80119c4:	f000 fe2a 	bl	801261c <malloc>
 80119c8:	4602      	mov	r2, r0
 80119ca:	61e0      	str	r0, [r4, #28]
 80119cc:	b920      	cbnz	r0, 80119d8 <_dtoa_r+0x38>
 80119ce:	4bae      	ldr	r3, [pc, #696]	; (8011c88 <_dtoa_r+0x2e8>)
 80119d0:	21ef      	movs	r1, #239	; 0xef
 80119d2:	48ae      	ldr	r0, [pc, #696]	; (8011c8c <_dtoa_r+0x2ec>)
 80119d4:	f001 fd2c 	bl	8013430 <__assert_func>
 80119d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119dc:	6005      	str	r5, [r0, #0]
 80119de:	60c5      	str	r5, [r0, #12]
 80119e0:	69e3      	ldr	r3, [r4, #28]
 80119e2:	6819      	ldr	r1, [r3, #0]
 80119e4:	b151      	cbz	r1, 80119fc <_dtoa_r+0x5c>
 80119e6:	685a      	ldr	r2, [r3, #4]
 80119e8:	604a      	str	r2, [r1, #4]
 80119ea:	2301      	movs	r3, #1
 80119ec:	4093      	lsls	r3, r2
 80119ee:	608b      	str	r3, [r1, #8]
 80119f0:	4620      	mov	r0, r4
 80119f2:	f000 ff07 	bl	8012804 <_Bfree>
 80119f6:	69e3      	ldr	r3, [r4, #28]
 80119f8:	2200      	movs	r2, #0
 80119fa:	601a      	str	r2, [r3, #0]
 80119fc:	1e3b      	subs	r3, r7, #0
 80119fe:	bfbb      	ittet	lt
 8011a00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a04:	9303      	strlt	r3, [sp, #12]
 8011a06:	2300      	movge	r3, #0
 8011a08:	2201      	movlt	r2, #1
 8011a0a:	bfac      	ite	ge
 8011a0c:	f8c8 3000 	strge.w	r3, [r8]
 8011a10:	f8c8 2000 	strlt.w	r2, [r8]
 8011a14:	4b9e      	ldr	r3, [pc, #632]	; (8011c90 <_dtoa_r+0x2f0>)
 8011a16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011a1a:	ea33 0308 	bics.w	r3, r3, r8
 8011a1e:	d11b      	bne.n	8011a58 <_dtoa_r+0xb8>
 8011a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a22:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011a2c:	4333      	orrs	r3, r6
 8011a2e:	f000 8593 	beq.w	8012558 <_dtoa_r+0xbb8>
 8011a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a34:	b963      	cbnz	r3, 8011a50 <_dtoa_r+0xb0>
 8011a36:	4b97      	ldr	r3, [pc, #604]	; (8011c94 <_dtoa_r+0x2f4>)
 8011a38:	e027      	b.n	8011a8a <_dtoa_r+0xea>
 8011a3a:	4b97      	ldr	r3, [pc, #604]	; (8011c98 <_dtoa_r+0x2f8>)
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	3308      	adds	r3, #8
 8011a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a42:	6013      	str	r3, [r2, #0]
 8011a44:	9800      	ldr	r0, [sp, #0]
 8011a46:	b013      	add	sp, #76	; 0x4c
 8011a48:	ecbd 8b04 	vpop	{d8-d9}
 8011a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a50:	4b90      	ldr	r3, [pc, #576]	; (8011c94 <_dtoa_r+0x2f4>)
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	3303      	adds	r3, #3
 8011a56:	e7f3      	b.n	8011a40 <_dtoa_r+0xa0>
 8011a58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	ec51 0b17 	vmov	r0, r1, d7
 8011a62:	eeb0 8a47 	vmov.f32	s16, s14
 8011a66:	eef0 8a67 	vmov.f32	s17, s15
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f7ef f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a70:	4681      	mov	r9, r0
 8011a72:	b160      	cbz	r0, 8011a8e <_dtoa_r+0xee>
 8011a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a76:	2301      	movs	r3, #1
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f000 8568 	beq.w	8012552 <_dtoa_r+0xbb2>
 8011a82:	4b86      	ldr	r3, [pc, #536]	; (8011c9c <_dtoa_r+0x2fc>)
 8011a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	3b01      	subs	r3, #1
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	e7da      	b.n	8011a44 <_dtoa_r+0xa4>
 8011a8e:	aa10      	add	r2, sp, #64	; 0x40
 8011a90:	a911      	add	r1, sp, #68	; 0x44
 8011a92:	4620      	mov	r0, r4
 8011a94:	eeb0 0a48 	vmov.f32	s0, s16
 8011a98:	eef0 0a68 	vmov.f32	s1, s17
 8011a9c:	f001 f994 	bl	8012dc8 <__d2b>
 8011aa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011aa4:	4682      	mov	sl, r0
 8011aa6:	2d00      	cmp	r5, #0
 8011aa8:	d07f      	beq.n	8011baa <_dtoa_r+0x20a>
 8011aaa:	ee18 3a90 	vmov	r3, s17
 8011aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ab2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011ab6:	ec51 0b18 	vmov	r0, r1, d8
 8011aba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011ac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	2200      	movs	r2, #0
 8011aca:	4b75      	ldr	r3, [pc, #468]	; (8011ca0 <_dtoa_r+0x300>)
 8011acc:	f7ee fbdc 	bl	8000288 <__aeabi_dsub>
 8011ad0:	a367      	add	r3, pc, #412	; (adr r3, 8011c70 <_dtoa_r+0x2d0>)
 8011ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad6:	f7ee fd8f 	bl	80005f8 <__aeabi_dmul>
 8011ada:	a367      	add	r3, pc, #412	; (adr r3, 8011c78 <_dtoa_r+0x2d8>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	f7ee fbd4 	bl	800028c <__adddf3>
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	460f      	mov	r7, r1
 8011aea:	f7ee fd1b 	bl	8000524 <__aeabi_i2d>
 8011aee:	a364      	add	r3, pc, #400	; (adr r3, 8011c80 <_dtoa_r+0x2e0>)
 8011af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	4630      	mov	r0, r6
 8011afe:	4639      	mov	r1, r7
 8011b00:	f7ee fbc4 	bl	800028c <__adddf3>
 8011b04:	4606      	mov	r6, r0
 8011b06:	460f      	mov	r7, r1
 8011b08:	f7ef f826 	bl	8000b58 <__aeabi_d2iz>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	4683      	mov	fp, r0
 8011b10:	2300      	movs	r3, #0
 8011b12:	4630      	mov	r0, r6
 8011b14:	4639      	mov	r1, r7
 8011b16:	f7ee ffe1 	bl	8000adc <__aeabi_dcmplt>
 8011b1a:	b148      	cbz	r0, 8011b30 <_dtoa_r+0x190>
 8011b1c:	4658      	mov	r0, fp
 8011b1e:	f7ee fd01 	bl	8000524 <__aeabi_i2d>
 8011b22:	4632      	mov	r2, r6
 8011b24:	463b      	mov	r3, r7
 8011b26:	f7ee ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b2a:	b908      	cbnz	r0, 8011b30 <_dtoa_r+0x190>
 8011b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b30:	f1bb 0f16 	cmp.w	fp, #22
 8011b34:	d857      	bhi.n	8011be6 <_dtoa_r+0x246>
 8011b36:	4b5b      	ldr	r3, [pc, #364]	; (8011ca4 <_dtoa_r+0x304>)
 8011b38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	ec51 0b18 	vmov	r0, r1, d8
 8011b44:	f7ee ffca 	bl	8000adc <__aeabi_dcmplt>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d04e      	beq.n	8011bea <_dtoa_r+0x24a>
 8011b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b50:	2300      	movs	r3, #0
 8011b52:	930c      	str	r3, [sp, #48]	; 0x30
 8011b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b56:	1b5b      	subs	r3, r3, r5
 8011b58:	1e5a      	subs	r2, r3, #1
 8011b5a:	bf45      	ittet	mi
 8011b5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8011b60:	9305      	strmi	r3, [sp, #20]
 8011b62:	2300      	movpl	r3, #0
 8011b64:	2300      	movmi	r3, #0
 8011b66:	9206      	str	r2, [sp, #24]
 8011b68:	bf54      	ite	pl
 8011b6a:	9305      	strpl	r3, [sp, #20]
 8011b6c:	9306      	strmi	r3, [sp, #24]
 8011b6e:	f1bb 0f00 	cmp.w	fp, #0
 8011b72:	db3c      	blt.n	8011bee <_dtoa_r+0x24e>
 8011b74:	9b06      	ldr	r3, [sp, #24]
 8011b76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011b7a:	445b      	add	r3, fp
 8011b7c:	9306      	str	r3, [sp, #24]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	9308      	str	r3, [sp, #32]
 8011b82:	9b07      	ldr	r3, [sp, #28]
 8011b84:	2b09      	cmp	r3, #9
 8011b86:	d868      	bhi.n	8011c5a <_dtoa_r+0x2ba>
 8011b88:	2b05      	cmp	r3, #5
 8011b8a:	bfc4      	itt	gt
 8011b8c:	3b04      	subgt	r3, #4
 8011b8e:	9307      	strgt	r3, [sp, #28]
 8011b90:	9b07      	ldr	r3, [sp, #28]
 8011b92:	f1a3 0302 	sub.w	r3, r3, #2
 8011b96:	bfcc      	ite	gt
 8011b98:	2500      	movgt	r5, #0
 8011b9a:	2501      	movle	r5, #1
 8011b9c:	2b03      	cmp	r3, #3
 8011b9e:	f200 8085 	bhi.w	8011cac <_dtoa_r+0x30c>
 8011ba2:	e8df f003 	tbb	[pc, r3]
 8011ba6:	3b2e      	.short	0x3b2e
 8011ba8:	5839      	.short	0x5839
 8011baa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011bae:	441d      	add	r5, r3
 8011bb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011bb4:	2b20      	cmp	r3, #32
 8011bb6:	bfc1      	itttt	gt
 8011bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011bbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8011bc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011bc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011bc8:	bfd6      	itet	le
 8011bca:	f1c3 0320 	rsble	r3, r3, #32
 8011bce:	ea48 0003 	orrgt.w	r0, r8, r3
 8011bd2:	fa06 f003 	lslle.w	r0, r6, r3
 8011bd6:	f7ee fc95 	bl	8000504 <__aeabi_ui2d>
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011be0:	3d01      	subs	r5, #1
 8011be2:	920e      	str	r2, [sp, #56]	; 0x38
 8011be4:	e76f      	b.n	8011ac6 <_dtoa_r+0x126>
 8011be6:	2301      	movs	r3, #1
 8011be8:	e7b3      	b.n	8011b52 <_dtoa_r+0x1b2>
 8011bea:	900c      	str	r0, [sp, #48]	; 0x30
 8011bec:	e7b2      	b.n	8011b54 <_dtoa_r+0x1b4>
 8011bee:	9b05      	ldr	r3, [sp, #20]
 8011bf0:	eba3 030b 	sub.w	r3, r3, fp
 8011bf4:	9305      	str	r3, [sp, #20]
 8011bf6:	f1cb 0300 	rsb	r3, fp, #0
 8011bfa:	9308      	str	r3, [sp, #32]
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c00:	e7bf      	b.n	8011b82 <_dtoa_r+0x1e2>
 8011c02:	2300      	movs	r3, #0
 8011c04:	9309      	str	r3, [sp, #36]	; 0x24
 8011c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	dc52      	bgt.n	8011cb2 <_dtoa_r+0x312>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	9301      	str	r3, [sp, #4]
 8011c10:	9304      	str	r3, [sp, #16]
 8011c12:	461a      	mov	r2, r3
 8011c14:	920a      	str	r2, [sp, #40]	; 0x28
 8011c16:	e00b      	b.n	8011c30 <_dtoa_r+0x290>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e7f3      	b.n	8011c04 <_dtoa_r+0x264>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c22:	445b      	add	r3, fp
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	3301      	adds	r3, #1
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	9304      	str	r3, [sp, #16]
 8011c2c:	bfb8      	it	lt
 8011c2e:	2301      	movlt	r3, #1
 8011c30:	69e0      	ldr	r0, [r4, #28]
 8011c32:	2100      	movs	r1, #0
 8011c34:	2204      	movs	r2, #4
 8011c36:	f102 0614 	add.w	r6, r2, #20
 8011c3a:	429e      	cmp	r6, r3
 8011c3c:	d93d      	bls.n	8011cba <_dtoa_r+0x31a>
 8011c3e:	6041      	str	r1, [r0, #4]
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fd9f 	bl	8012784 <_Balloc>
 8011c46:	9000      	str	r0, [sp, #0]
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d139      	bne.n	8011cc0 <_dtoa_r+0x320>
 8011c4c:	4b16      	ldr	r3, [pc, #88]	; (8011ca8 <_dtoa_r+0x308>)
 8011c4e:	4602      	mov	r2, r0
 8011c50:	f240 11af 	movw	r1, #431	; 0x1af
 8011c54:	e6bd      	b.n	80119d2 <_dtoa_r+0x32>
 8011c56:	2301      	movs	r3, #1
 8011c58:	e7e1      	b.n	8011c1e <_dtoa_r+0x27e>
 8011c5a:	2501      	movs	r5, #1
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	9307      	str	r3, [sp, #28]
 8011c60:	9509      	str	r5, [sp, #36]	; 0x24
 8011c62:	f04f 33ff 	mov.w	r3, #4294967295
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	9304      	str	r3, [sp, #16]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	2312      	movs	r3, #18
 8011c6e:	e7d1      	b.n	8011c14 <_dtoa_r+0x274>
 8011c70:	636f4361 	.word	0x636f4361
 8011c74:	3fd287a7 	.word	0x3fd287a7
 8011c78:	8b60c8b3 	.word	0x8b60c8b3
 8011c7c:	3fc68a28 	.word	0x3fc68a28
 8011c80:	509f79fb 	.word	0x509f79fb
 8011c84:	3fd34413 	.word	0x3fd34413
 8011c88:	08013869 	.word	0x08013869
 8011c8c:	08013880 	.word	0x08013880
 8011c90:	7ff00000 	.word	0x7ff00000
 8011c94:	08013865 	.word	0x08013865
 8011c98:	0801385c 	.word	0x0801385c
 8011c9c:	08013839 	.word	0x08013839
 8011ca0:	3ff80000 	.word	0x3ff80000
 8011ca4:	08013970 	.word	0x08013970
 8011ca8:	080138d8 	.word	0x080138d8
 8011cac:	2301      	movs	r3, #1
 8011cae:	9309      	str	r3, [sp, #36]	; 0x24
 8011cb0:	e7d7      	b.n	8011c62 <_dtoa_r+0x2c2>
 8011cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	9304      	str	r3, [sp, #16]
 8011cb8:	e7ba      	b.n	8011c30 <_dtoa_r+0x290>
 8011cba:	3101      	adds	r1, #1
 8011cbc:	0052      	lsls	r2, r2, #1
 8011cbe:	e7ba      	b.n	8011c36 <_dtoa_r+0x296>
 8011cc0:	69e3      	ldr	r3, [r4, #28]
 8011cc2:	9a00      	ldr	r2, [sp, #0]
 8011cc4:	601a      	str	r2, [r3, #0]
 8011cc6:	9b04      	ldr	r3, [sp, #16]
 8011cc8:	2b0e      	cmp	r3, #14
 8011cca:	f200 80a8 	bhi.w	8011e1e <_dtoa_r+0x47e>
 8011cce:	2d00      	cmp	r5, #0
 8011cd0:	f000 80a5 	beq.w	8011e1e <_dtoa_r+0x47e>
 8011cd4:	f1bb 0f00 	cmp.w	fp, #0
 8011cd8:	dd38      	ble.n	8011d4c <_dtoa_r+0x3ac>
 8011cda:	4bc0      	ldr	r3, [pc, #768]	; (8011fdc <_dtoa_r+0x63c>)
 8011cdc:	f00b 020f 	and.w	r2, fp, #15
 8011ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ce4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011ce8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011cec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011cf0:	d019      	beq.n	8011d26 <_dtoa_r+0x386>
 8011cf2:	4bbb      	ldr	r3, [pc, #748]	; (8011fe0 <_dtoa_r+0x640>)
 8011cf4:	ec51 0b18 	vmov	r0, r1, d8
 8011cf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011cfc:	f7ee fda6 	bl	800084c <__aeabi_ddiv>
 8011d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d04:	f008 080f 	and.w	r8, r8, #15
 8011d08:	2503      	movs	r5, #3
 8011d0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011fe0 <_dtoa_r+0x640>
 8011d0e:	f1b8 0f00 	cmp.w	r8, #0
 8011d12:	d10a      	bne.n	8011d2a <_dtoa_r+0x38a>
 8011d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d18:	4632      	mov	r2, r6
 8011d1a:	463b      	mov	r3, r7
 8011d1c:	f7ee fd96 	bl	800084c <__aeabi_ddiv>
 8011d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d24:	e02b      	b.n	8011d7e <_dtoa_r+0x3de>
 8011d26:	2502      	movs	r5, #2
 8011d28:	e7ef      	b.n	8011d0a <_dtoa_r+0x36a>
 8011d2a:	f018 0f01 	tst.w	r8, #1
 8011d2e:	d008      	beq.n	8011d42 <_dtoa_r+0x3a2>
 8011d30:	4630      	mov	r0, r6
 8011d32:	4639      	mov	r1, r7
 8011d34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011d38:	f7ee fc5e 	bl	80005f8 <__aeabi_dmul>
 8011d3c:	3501      	adds	r5, #1
 8011d3e:	4606      	mov	r6, r0
 8011d40:	460f      	mov	r7, r1
 8011d42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011d46:	f109 0908 	add.w	r9, r9, #8
 8011d4a:	e7e0      	b.n	8011d0e <_dtoa_r+0x36e>
 8011d4c:	f000 809f 	beq.w	8011e8e <_dtoa_r+0x4ee>
 8011d50:	f1cb 0600 	rsb	r6, fp, #0
 8011d54:	4ba1      	ldr	r3, [pc, #644]	; (8011fdc <_dtoa_r+0x63c>)
 8011d56:	4fa2      	ldr	r7, [pc, #648]	; (8011fe0 <_dtoa_r+0x640>)
 8011d58:	f006 020f 	and.w	r2, r6, #15
 8011d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	ec51 0b18 	vmov	r0, r1, d8
 8011d68:	f7ee fc46 	bl	80005f8 <__aeabi_dmul>
 8011d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d70:	1136      	asrs	r6, r6, #4
 8011d72:	2300      	movs	r3, #0
 8011d74:	2502      	movs	r5, #2
 8011d76:	2e00      	cmp	r6, #0
 8011d78:	d17e      	bne.n	8011e78 <_dtoa_r+0x4d8>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1d0      	bne.n	8011d20 <_dtoa_r+0x380>
 8011d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f000 8084 	beq.w	8011e92 <_dtoa_r+0x4f2>
 8011d8a:	4b96      	ldr	r3, [pc, #600]	; (8011fe4 <_dtoa_r+0x644>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	4640      	mov	r0, r8
 8011d90:	4649      	mov	r1, r9
 8011d92:	f7ee fea3 	bl	8000adc <__aeabi_dcmplt>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d07b      	beq.n	8011e92 <_dtoa_r+0x4f2>
 8011d9a:	9b04      	ldr	r3, [sp, #16]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d078      	beq.n	8011e92 <_dtoa_r+0x4f2>
 8011da0:	9b01      	ldr	r3, [sp, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	dd39      	ble.n	8011e1a <_dtoa_r+0x47a>
 8011da6:	4b90      	ldr	r3, [pc, #576]	; (8011fe8 <_dtoa_r+0x648>)
 8011da8:	2200      	movs	r2, #0
 8011daa:	4640      	mov	r0, r8
 8011dac:	4649      	mov	r1, r9
 8011dae:	f7ee fc23 	bl	80005f8 <__aeabi_dmul>
 8011db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011db6:	9e01      	ldr	r6, [sp, #4]
 8011db8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011dbc:	3501      	adds	r5, #1
 8011dbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	f7ee fbae 	bl	8000524 <__aeabi_i2d>
 8011dc8:	4642      	mov	r2, r8
 8011dca:	464b      	mov	r3, r9
 8011dcc:	f7ee fc14 	bl	80005f8 <__aeabi_dmul>
 8011dd0:	4b86      	ldr	r3, [pc, #536]	; (8011fec <_dtoa_r+0x64c>)
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f7ee fa5a 	bl	800028c <__adddf3>
 8011dd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011de0:	9303      	str	r3, [sp, #12]
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	d158      	bne.n	8011e98 <_dtoa_r+0x4f8>
 8011de6:	4b82      	ldr	r3, [pc, #520]	; (8011ff0 <_dtoa_r+0x650>)
 8011de8:	2200      	movs	r2, #0
 8011dea:	4640      	mov	r0, r8
 8011dec:	4649      	mov	r1, r9
 8011dee:	f7ee fa4b 	bl	8000288 <__aeabi_dsub>
 8011df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011df6:	4680      	mov	r8, r0
 8011df8:	4689      	mov	r9, r1
 8011dfa:	f7ee fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f040 8296 	bne.w	8012330 <_dtoa_r+0x990>
 8011e04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011e08:	4640      	mov	r0, r8
 8011e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e0e:	4649      	mov	r1, r9
 8011e10:	f7ee fe64 	bl	8000adc <__aeabi_dcmplt>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f040 8289 	bne.w	801232c <_dtoa_r+0x98c>
 8011e1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f2c0 814e 	blt.w	80120c2 <_dtoa_r+0x722>
 8011e26:	f1bb 0f0e 	cmp.w	fp, #14
 8011e2a:	f300 814a 	bgt.w	80120c2 <_dtoa_r+0x722>
 8011e2e:	4b6b      	ldr	r3, [pc, #428]	; (8011fdc <_dtoa_r+0x63c>)
 8011e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f280 80dc 	bge.w	8011ff8 <_dtoa_r+0x658>
 8011e40:	9b04      	ldr	r3, [sp, #16]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f300 80d8 	bgt.w	8011ff8 <_dtoa_r+0x658>
 8011e48:	f040 826f 	bne.w	801232a <_dtoa_r+0x98a>
 8011e4c:	4b68      	ldr	r3, [pc, #416]	; (8011ff0 <_dtoa_r+0x650>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	4640      	mov	r0, r8
 8011e52:	4649      	mov	r1, r9
 8011e54:	f7ee fbd0 	bl	80005f8 <__aeabi_dmul>
 8011e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e5c:	f7ee fe52 	bl	8000b04 <__aeabi_dcmpge>
 8011e60:	9e04      	ldr	r6, [sp, #16]
 8011e62:	4637      	mov	r7, r6
 8011e64:	2800      	cmp	r0, #0
 8011e66:	f040 8245 	bne.w	80122f4 <_dtoa_r+0x954>
 8011e6a:	9d00      	ldr	r5, [sp, #0]
 8011e6c:	2331      	movs	r3, #49	; 0x31
 8011e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8011e72:	f10b 0b01 	add.w	fp, fp, #1
 8011e76:	e241      	b.n	80122fc <_dtoa_r+0x95c>
 8011e78:	07f2      	lsls	r2, r6, #31
 8011e7a:	d505      	bpl.n	8011e88 <_dtoa_r+0x4e8>
 8011e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e80:	f7ee fbba 	bl	80005f8 <__aeabi_dmul>
 8011e84:	3501      	adds	r5, #1
 8011e86:	2301      	movs	r3, #1
 8011e88:	1076      	asrs	r6, r6, #1
 8011e8a:	3708      	adds	r7, #8
 8011e8c:	e773      	b.n	8011d76 <_dtoa_r+0x3d6>
 8011e8e:	2502      	movs	r5, #2
 8011e90:	e775      	b.n	8011d7e <_dtoa_r+0x3de>
 8011e92:	9e04      	ldr	r6, [sp, #16]
 8011e94:	465f      	mov	r7, fp
 8011e96:	e792      	b.n	8011dbe <_dtoa_r+0x41e>
 8011e98:	9900      	ldr	r1, [sp, #0]
 8011e9a:	4b50      	ldr	r3, [pc, #320]	; (8011fdc <_dtoa_r+0x63c>)
 8011e9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ea0:	4431      	add	r1, r6
 8011ea2:	9102      	str	r1, [sp, #8]
 8011ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ea6:	eeb0 9a47 	vmov.f32	s18, s14
 8011eaa:	eef0 9a67 	vmov.f32	s19, s15
 8011eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	d044      	beq.n	8011f44 <_dtoa_r+0x5a4>
 8011eba:	494e      	ldr	r1, [pc, #312]	; (8011ff4 <_dtoa_r+0x654>)
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	f7ee fcc5 	bl	800084c <__aeabi_ddiv>
 8011ec2:	ec53 2b19 	vmov	r2, r3, d9
 8011ec6:	f7ee f9df 	bl	8000288 <__aeabi_dsub>
 8011eca:	9d00      	ldr	r5, [sp, #0]
 8011ecc:	ec41 0b19 	vmov	d9, r0, r1
 8011ed0:	4649      	mov	r1, r9
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	f7ee fe40 	bl	8000b58 <__aeabi_d2iz>
 8011ed8:	4606      	mov	r6, r0
 8011eda:	f7ee fb23 	bl	8000524 <__aeabi_i2d>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	4649      	mov	r1, r9
 8011ee6:	f7ee f9cf 	bl	8000288 <__aeabi_dsub>
 8011eea:	3630      	adds	r6, #48	; 0x30
 8011eec:	f805 6b01 	strb.w	r6, [r5], #1
 8011ef0:	ec53 2b19 	vmov	r2, r3, d9
 8011ef4:	4680      	mov	r8, r0
 8011ef6:	4689      	mov	r9, r1
 8011ef8:	f7ee fdf0 	bl	8000adc <__aeabi_dcmplt>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d164      	bne.n	8011fca <_dtoa_r+0x62a>
 8011f00:	4642      	mov	r2, r8
 8011f02:	464b      	mov	r3, r9
 8011f04:	4937      	ldr	r1, [pc, #220]	; (8011fe4 <_dtoa_r+0x644>)
 8011f06:	2000      	movs	r0, #0
 8011f08:	f7ee f9be 	bl	8000288 <__aeabi_dsub>
 8011f0c:	ec53 2b19 	vmov	r2, r3, d9
 8011f10:	f7ee fde4 	bl	8000adc <__aeabi_dcmplt>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	f040 80b6 	bne.w	8012086 <_dtoa_r+0x6e6>
 8011f1a:	9b02      	ldr	r3, [sp, #8]
 8011f1c:	429d      	cmp	r5, r3
 8011f1e:	f43f af7c 	beq.w	8011e1a <_dtoa_r+0x47a>
 8011f22:	4b31      	ldr	r3, [pc, #196]	; (8011fe8 <_dtoa_r+0x648>)
 8011f24:	ec51 0b19 	vmov	r0, r1, d9
 8011f28:	2200      	movs	r2, #0
 8011f2a:	f7ee fb65 	bl	80005f8 <__aeabi_dmul>
 8011f2e:	4b2e      	ldr	r3, [pc, #184]	; (8011fe8 <_dtoa_r+0x648>)
 8011f30:	ec41 0b19 	vmov	d9, r0, r1
 8011f34:	2200      	movs	r2, #0
 8011f36:	4640      	mov	r0, r8
 8011f38:	4649      	mov	r1, r9
 8011f3a:	f7ee fb5d 	bl	80005f8 <__aeabi_dmul>
 8011f3e:	4680      	mov	r8, r0
 8011f40:	4689      	mov	r9, r1
 8011f42:	e7c5      	b.n	8011ed0 <_dtoa_r+0x530>
 8011f44:	ec51 0b17 	vmov	r0, r1, d7
 8011f48:	f7ee fb56 	bl	80005f8 <__aeabi_dmul>
 8011f4c:	9b02      	ldr	r3, [sp, #8]
 8011f4e:	9d00      	ldr	r5, [sp, #0]
 8011f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f52:	ec41 0b19 	vmov	d9, r0, r1
 8011f56:	4649      	mov	r1, r9
 8011f58:	4640      	mov	r0, r8
 8011f5a:	f7ee fdfd 	bl	8000b58 <__aeabi_d2iz>
 8011f5e:	4606      	mov	r6, r0
 8011f60:	f7ee fae0 	bl	8000524 <__aeabi_i2d>
 8011f64:	3630      	adds	r6, #48	; 0x30
 8011f66:	4602      	mov	r2, r0
 8011f68:	460b      	mov	r3, r1
 8011f6a:	4640      	mov	r0, r8
 8011f6c:	4649      	mov	r1, r9
 8011f6e:	f7ee f98b 	bl	8000288 <__aeabi_dsub>
 8011f72:	f805 6b01 	strb.w	r6, [r5], #1
 8011f76:	9b02      	ldr	r3, [sp, #8]
 8011f78:	429d      	cmp	r5, r3
 8011f7a:	4680      	mov	r8, r0
 8011f7c:	4689      	mov	r9, r1
 8011f7e:	f04f 0200 	mov.w	r2, #0
 8011f82:	d124      	bne.n	8011fce <_dtoa_r+0x62e>
 8011f84:	4b1b      	ldr	r3, [pc, #108]	; (8011ff4 <_dtoa_r+0x654>)
 8011f86:	ec51 0b19 	vmov	r0, r1, d9
 8011f8a:	f7ee f97f 	bl	800028c <__adddf3>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	460b      	mov	r3, r1
 8011f92:	4640      	mov	r0, r8
 8011f94:	4649      	mov	r1, r9
 8011f96:	f7ee fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d173      	bne.n	8012086 <_dtoa_r+0x6e6>
 8011f9e:	ec53 2b19 	vmov	r2, r3, d9
 8011fa2:	4914      	ldr	r1, [pc, #80]	; (8011ff4 <_dtoa_r+0x654>)
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	f7ee f96f 	bl	8000288 <__aeabi_dsub>
 8011faa:	4602      	mov	r2, r0
 8011fac:	460b      	mov	r3, r1
 8011fae:	4640      	mov	r0, r8
 8011fb0:	4649      	mov	r1, r9
 8011fb2:	f7ee fd93 	bl	8000adc <__aeabi_dcmplt>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f43f af2f 	beq.w	8011e1a <_dtoa_r+0x47a>
 8011fbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011fbe:	1e6b      	subs	r3, r5, #1
 8011fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011fc6:	2b30      	cmp	r3, #48	; 0x30
 8011fc8:	d0f8      	beq.n	8011fbc <_dtoa_r+0x61c>
 8011fca:	46bb      	mov	fp, r7
 8011fcc:	e04a      	b.n	8012064 <_dtoa_r+0x6c4>
 8011fce:	4b06      	ldr	r3, [pc, #24]	; (8011fe8 <_dtoa_r+0x648>)
 8011fd0:	f7ee fb12 	bl	80005f8 <__aeabi_dmul>
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	4689      	mov	r9, r1
 8011fd8:	e7bd      	b.n	8011f56 <_dtoa_r+0x5b6>
 8011fda:	bf00      	nop
 8011fdc:	08013970 	.word	0x08013970
 8011fe0:	08013948 	.word	0x08013948
 8011fe4:	3ff00000 	.word	0x3ff00000
 8011fe8:	40240000 	.word	0x40240000
 8011fec:	401c0000 	.word	0x401c0000
 8011ff0:	40140000 	.word	0x40140000
 8011ff4:	3fe00000 	.word	0x3fe00000
 8011ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011ffc:	9d00      	ldr	r5, [sp, #0]
 8011ffe:	4642      	mov	r2, r8
 8012000:	464b      	mov	r3, r9
 8012002:	4630      	mov	r0, r6
 8012004:	4639      	mov	r1, r7
 8012006:	f7ee fc21 	bl	800084c <__aeabi_ddiv>
 801200a:	f7ee fda5 	bl	8000b58 <__aeabi_d2iz>
 801200e:	9001      	str	r0, [sp, #4]
 8012010:	f7ee fa88 	bl	8000524 <__aeabi_i2d>
 8012014:	4642      	mov	r2, r8
 8012016:	464b      	mov	r3, r9
 8012018:	f7ee faee 	bl	80005f8 <__aeabi_dmul>
 801201c:	4602      	mov	r2, r0
 801201e:	460b      	mov	r3, r1
 8012020:	4630      	mov	r0, r6
 8012022:	4639      	mov	r1, r7
 8012024:	f7ee f930 	bl	8000288 <__aeabi_dsub>
 8012028:	9e01      	ldr	r6, [sp, #4]
 801202a:	9f04      	ldr	r7, [sp, #16]
 801202c:	3630      	adds	r6, #48	; 0x30
 801202e:	f805 6b01 	strb.w	r6, [r5], #1
 8012032:	9e00      	ldr	r6, [sp, #0]
 8012034:	1bae      	subs	r6, r5, r6
 8012036:	42b7      	cmp	r7, r6
 8012038:	4602      	mov	r2, r0
 801203a:	460b      	mov	r3, r1
 801203c:	d134      	bne.n	80120a8 <_dtoa_r+0x708>
 801203e:	f7ee f925 	bl	800028c <__adddf3>
 8012042:	4642      	mov	r2, r8
 8012044:	464b      	mov	r3, r9
 8012046:	4606      	mov	r6, r0
 8012048:	460f      	mov	r7, r1
 801204a:	f7ee fd65 	bl	8000b18 <__aeabi_dcmpgt>
 801204e:	b9c8      	cbnz	r0, 8012084 <_dtoa_r+0x6e4>
 8012050:	4642      	mov	r2, r8
 8012052:	464b      	mov	r3, r9
 8012054:	4630      	mov	r0, r6
 8012056:	4639      	mov	r1, r7
 8012058:	f7ee fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 801205c:	b110      	cbz	r0, 8012064 <_dtoa_r+0x6c4>
 801205e:	9b01      	ldr	r3, [sp, #4]
 8012060:	07db      	lsls	r3, r3, #31
 8012062:	d40f      	bmi.n	8012084 <_dtoa_r+0x6e4>
 8012064:	4651      	mov	r1, sl
 8012066:	4620      	mov	r0, r4
 8012068:	f000 fbcc 	bl	8012804 <_Bfree>
 801206c:	2300      	movs	r3, #0
 801206e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012070:	702b      	strb	r3, [r5, #0]
 8012072:	f10b 0301 	add.w	r3, fp, #1
 8012076:	6013      	str	r3, [r2, #0]
 8012078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801207a:	2b00      	cmp	r3, #0
 801207c:	f43f ace2 	beq.w	8011a44 <_dtoa_r+0xa4>
 8012080:	601d      	str	r5, [r3, #0]
 8012082:	e4df      	b.n	8011a44 <_dtoa_r+0xa4>
 8012084:	465f      	mov	r7, fp
 8012086:	462b      	mov	r3, r5
 8012088:	461d      	mov	r5, r3
 801208a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801208e:	2a39      	cmp	r2, #57	; 0x39
 8012090:	d106      	bne.n	80120a0 <_dtoa_r+0x700>
 8012092:	9a00      	ldr	r2, [sp, #0]
 8012094:	429a      	cmp	r2, r3
 8012096:	d1f7      	bne.n	8012088 <_dtoa_r+0x6e8>
 8012098:	9900      	ldr	r1, [sp, #0]
 801209a:	2230      	movs	r2, #48	; 0x30
 801209c:	3701      	adds	r7, #1
 801209e:	700a      	strb	r2, [r1, #0]
 80120a0:	781a      	ldrb	r2, [r3, #0]
 80120a2:	3201      	adds	r2, #1
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	e790      	b.n	8011fca <_dtoa_r+0x62a>
 80120a8:	4ba3      	ldr	r3, [pc, #652]	; (8012338 <_dtoa_r+0x998>)
 80120aa:	2200      	movs	r2, #0
 80120ac:	f7ee faa4 	bl	80005f8 <__aeabi_dmul>
 80120b0:	2200      	movs	r2, #0
 80120b2:	2300      	movs	r3, #0
 80120b4:	4606      	mov	r6, r0
 80120b6:	460f      	mov	r7, r1
 80120b8:	f7ee fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d09e      	beq.n	8011ffe <_dtoa_r+0x65e>
 80120c0:	e7d0      	b.n	8012064 <_dtoa_r+0x6c4>
 80120c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120c4:	2a00      	cmp	r2, #0
 80120c6:	f000 80ca 	beq.w	801225e <_dtoa_r+0x8be>
 80120ca:	9a07      	ldr	r2, [sp, #28]
 80120cc:	2a01      	cmp	r2, #1
 80120ce:	f300 80ad 	bgt.w	801222c <_dtoa_r+0x88c>
 80120d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120d4:	2a00      	cmp	r2, #0
 80120d6:	f000 80a5 	beq.w	8012224 <_dtoa_r+0x884>
 80120da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80120de:	9e08      	ldr	r6, [sp, #32]
 80120e0:	9d05      	ldr	r5, [sp, #20]
 80120e2:	9a05      	ldr	r2, [sp, #20]
 80120e4:	441a      	add	r2, r3
 80120e6:	9205      	str	r2, [sp, #20]
 80120e8:	9a06      	ldr	r2, [sp, #24]
 80120ea:	2101      	movs	r1, #1
 80120ec:	441a      	add	r2, r3
 80120ee:	4620      	mov	r0, r4
 80120f0:	9206      	str	r2, [sp, #24]
 80120f2:	f000 fc3d 	bl	8012970 <__i2b>
 80120f6:	4607      	mov	r7, r0
 80120f8:	b165      	cbz	r5, 8012114 <_dtoa_r+0x774>
 80120fa:	9b06      	ldr	r3, [sp, #24]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	dd09      	ble.n	8012114 <_dtoa_r+0x774>
 8012100:	42ab      	cmp	r3, r5
 8012102:	9a05      	ldr	r2, [sp, #20]
 8012104:	bfa8      	it	ge
 8012106:	462b      	movge	r3, r5
 8012108:	1ad2      	subs	r2, r2, r3
 801210a:	9205      	str	r2, [sp, #20]
 801210c:	9a06      	ldr	r2, [sp, #24]
 801210e:	1aed      	subs	r5, r5, r3
 8012110:	1ad3      	subs	r3, r2, r3
 8012112:	9306      	str	r3, [sp, #24]
 8012114:	9b08      	ldr	r3, [sp, #32]
 8012116:	b1f3      	cbz	r3, 8012156 <_dtoa_r+0x7b6>
 8012118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801211a:	2b00      	cmp	r3, #0
 801211c:	f000 80a3 	beq.w	8012266 <_dtoa_r+0x8c6>
 8012120:	2e00      	cmp	r6, #0
 8012122:	dd10      	ble.n	8012146 <_dtoa_r+0x7a6>
 8012124:	4639      	mov	r1, r7
 8012126:	4632      	mov	r2, r6
 8012128:	4620      	mov	r0, r4
 801212a:	f000 fce1 	bl	8012af0 <__pow5mult>
 801212e:	4652      	mov	r2, sl
 8012130:	4601      	mov	r1, r0
 8012132:	4607      	mov	r7, r0
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fc31 	bl	801299c <__multiply>
 801213a:	4651      	mov	r1, sl
 801213c:	4680      	mov	r8, r0
 801213e:	4620      	mov	r0, r4
 8012140:	f000 fb60 	bl	8012804 <_Bfree>
 8012144:	46c2      	mov	sl, r8
 8012146:	9b08      	ldr	r3, [sp, #32]
 8012148:	1b9a      	subs	r2, r3, r6
 801214a:	d004      	beq.n	8012156 <_dtoa_r+0x7b6>
 801214c:	4651      	mov	r1, sl
 801214e:	4620      	mov	r0, r4
 8012150:	f000 fcce 	bl	8012af0 <__pow5mult>
 8012154:	4682      	mov	sl, r0
 8012156:	2101      	movs	r1, #1
 8012158:	4620      	mov	r0, r4
 801215a:	f000 fc09 	bl	8012970 <__i2b>
 801215e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012160:	2b00      	cmp	r3, #0
 8012162:	4606      	mov	r6, r0
 8012164:	f340 8081 	ble.w	801226a <_dtoa_r+0x8ca>
 8012168:	461a      	mov	r2, r3
 801216a:	4601      	mov	r1, r0
 801216c:	4620      	mov	r0, r4
 801216e:	f000 fcbf 	bl	8012af0 <__pow5mult>
 8012172:	9b07      	ldr	r3, [sp, #28]
 8012174:	2b01      	cmp	r3, #1
 8012176:	4606      	mov	r6, r0
 8012178:	dd7a      	ble.n	8012270 <_dtoa_r+0x8d0>
 801217a:	f04f 0800 	mov.w	r8, #0
 801217e:	6933      	ldr	r3, [r6, #16]
 8012180:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012184:	6918      	ldr	r0, [r3, #16]
 8012186:	f000 fba5 	bl	80128d4 <__hi0bits>
 801218a:	f1c0 0020 	rsb	r0, r0, #32
 801218e:	9b06      	ldr	r3, [sp, #24]
 8012190:	4418      	add	r0, r3
 8012192:	f010 001f 	ands.w	r0, r0, #31
 8012196:	f000 8094 	beq.w	80122c2 <_dtoa_r+0x922>
 801219a:	f1c0 0320 	rsb	r3, r0, #32
 801219e:	2b04      	cmp	r3, #4
 80121a0:	f340 8085 	ble.w	80122ae <_dtoa_r+0x90e>
 80121a4:	9b05      	ldr	r3, [sp, #20]
 80121a6:	f1c0 001c 	rsb	r0, r0, #28
 80121aa:	4403      	add	r3, r0
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	9b06      	ldr	r3, [sp, #24]
 80121b0:	4403      	add	r3, r0
 80121b2:	4405      	add	r5, r0
 80121b4:	9306      	str	r3, [sp, #24]
 80121b6:	9b05      	ldr	r3, [sp, #20]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dd05      	ble.n	80121c8 <_dtoa_r+0x828>
 80121bc:	4651      	mov	r1, sl
 80121be:	461a      	mov	r2, r3
 80121c0:	4620      	mov	r0, r4
 80121c2:	f000 fcef 	bl	8012ba4 <__lshift>
 80121c6:	4682      	mov	sl, r0
 80121c8:	9b06      	ldr	r3, [sp, #24]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	dd05      	ble.n	80121da <_dtoa_r+0x83a>
 80121ce:	4631      	mov	r1, r6
 80121d0:	461a      	mov	r2, r3
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 fce6 	bl	8012ba4 <__lshift>
 80121d8:	4606      	mov	r6, r0
 80121da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d072      	beq.n	80122c6 <_dtoa_r+0x926>
 80121e0:	4631      	mov	r1, r6
 80121e2:	4650      	mov	r0, sl
 80121e4:	f000 fd4a 	bl	8012c7c <__mcmp>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	da6c      	bge.n	80122c6 <_dtoa_r+0x926>
 80121ec:	2300      	movs	r3, #0
 80121ee:	4651      	mov	r1, sl
 80121f0:	220a      	movs	r2, #10
 80121f2:	4620      	mov	r0, r4
 80121f4:	f000 fb28 	bl	8012848 <__multadd>
 80121f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80121fe:	4682      	mov	sl, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	f000 81b0 	beq.w	8012566 <_dtoa_r+0xbc6>
 8012206:	2300      	movs	r3, #0
 8012208:	4639      	mov	r1, r7
 801220a:	220a      	movs	r2, #10
 801220c:	4620      	mov	r0, r4
 801220e:	f000 fb1b 	bl	8012848 <__multadd>
 8012212:	9b01      	ldr	r3, [sp, #4]
 8012214:	2b00      	cmp	r3, #0
 8012216:	4607      	mov	r7, r0
 8012218:	f300 8096 	bgt.w	8012348 <_dtoa_r+0x9a8>
 801221c:	9b07      	ldr	r3, [sp, #28]
 801221e:	2b02      	cmp	r3, #2
 8012220:	dc59      	bgt.n	80122d6 <_dtoa_r+0x936>
 8012222:	e091      	b.n	8012348 <_dtoa_r+0x9a8>
 8012224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801222a:	e758      	b.n	80120de <_dtoa_r+0x73e>
 801222c:	9b04      	ldr	r3, [sp, #16]
 801222e:	1e5e      	subs	r6, r3, #1
 8012230:	9b08      	ldr	r3, [sp, #32]
 8012232:	42b3      	cmp	r3, r6
 8012234:	bfbf      	itttt	lt
 8012236:	9b08      	ldrlt	r3, [sp, #32]
 8012238:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801223a:	9608      	strlt	r6, [sp, #32]
 801223c:	1af3      	sublt	r3, r6, r3
 801223e:	bfb4      	ite	lt
 8012240:	18d2      	addlt	r2, r2, r3
 8012242:	1b9e      	subge	r6, r3, r6
 8012244:	9b04      	ldr	r3, [sp, #16]
 8012246:	bfbc      	itt	lt
 8012248:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801224a:	2600      	movlt	r6, #0
 801224c:	2b00      	cmp	r3, #0
 801224e:	bfb7      	itett	lt
 8012250:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012254:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012258:	1a9d      	sublt	r5, r3, r2
 801225a:	2300      	movlt	r3, #0
 801225c:	e741      	b.n	80120e2 <_dtoa_r+0x742>
 801225e:	9e08      	ldr	r6, [sp, #32]
 8012260:	9d05      	ldr	r5, [sp, #20]
 8012262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012264:	e748      	b.n	80120f8 <_dtoa_r+0x758>
 8012266:	9a08      	ldr	r2, [sp, #32]
 8012268:	e770      	b.n	801214c <_dtoa_r+0x7ac>
 801226a:	9b07      	ldr	r3, [sp, #28]
 801226c:	2b01      	cmp	r3, #1
 801226e:	dc19      	bgt.n	80122a4 <_dtoa_r+0x904>
 8012270:	9b02      	ldr	r3, [sp, #8]
 8012272:	b9bb      	cbnz	r3, 80122a4 <_dtoa_r+0x904>
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801227a:	b99b      	cbnz	r3, 80122a4 <_dtoa_r+0x904>
 801227c:	9b03      	ldr	r3, [sp, #12]
 801227e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012282:	0d1b      	lsrs	r3, r3, #20
 8012284:	051b      	lsls	r3, r3, #20
 8012286:	b183      	cbz	r3, 80122aa <_dtoa_r+0x90a>
 8012288:	9b05      	ldr	r3, [sp, #20]
 801228a:	3301      	adds	r3, #1
 801228c:	9305      	str	r3, [sp, #20]
 801228e:	9b06      	ldr	r3, [sp, #24]
 8012290:	3301      	adds	r3, #1
 8012292:	9306      	str	r3, [sp, #24]
 8012294:	f04f 0801 	mov.w	r8, #1
 8012298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801229a:	2b00      	cmp	r3, #0
 801229c:	f47f af6f 	bne.w	801217e <_dtoa_r+0x7de>
 80122a0:	2001      	movs	r0, #1
 80122a2:	e774      	b.n	801218e <_dtoa_r+0x7ee>
 80122a4:	f04f 0800 	mov.w	r8, #0
 80122a8:	e7f6      	b.n	8012298 <_dtoa_r+0x8f8>
 80122aa:	4698      	mov	r8, r3
 80122ac:	e7f4      	b.n	8012298 <_dtoa_r+0x8f8>
 80122ae:	d082      	beq.n	80121b6 <_dtoa_r+0x816>
 80122b0:	9a05      	ldr	r2, [sp, #20]
 80122b2:	331c      	adds	r3, #28
 80122b4:	441a      	add	r2, r3
 80122b6:	9205      	str	r2, [sp, #20]
 80122b8:	9a06      	ldr	r2, [sp, #24]
 80122ba:	441a      	add	r2, r3
 80122bc:	441d      	add	r5, r3
 80122be:	9206      	str	r2, [sp, #24]
 80122c0:	e779      	b.n	80121b6 <_dtoa_r+0x816>
 80122c2:	4603      	mov	r3, r0
 80122c4:	e7f4      	b.n	80122b0 <_dtoa_r+0x910>
 80122c6:	9b04      	ldr	r3, [sp, #16]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	dc37      	bgt.n	801233c <_dtoa_r+0x99c>
 80122cc:	9b07      	ldr	r3, [sp, #28]
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	dd34      	ble.n	801233c <_dtoa_r+0x99c>
 80122d2:	9b04      	ldr	r3, [sp, #16]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	9b01      	ldr	r3, [sp, #4]
 80122d8:	b963      	cbnz	r3, 80122f4 <_dtoa_r+0x954>
 80122da:	4631      	mov	r1, r6
 80122dc:	2205      	movs	r2, #5
 80122de:	4620      	mov	r0, r4
 80122e0:	f000 fab2 	bl	8012848 <__multadd>
 80122e4:	4601      	mov	r1, r0
 80122e6:	4606      	mov	r6, r0
 80122e8:	4650      	mov	r0, sl
 80122ea:	f000 fcc7 	bl	8012c7c <__mcmp>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	f73f adbb 	bgt.w	8011e6a <_dtoa_r+0x4ca>
 80122f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f6:	9d00      	ldr	r5, [sp, #0]
 80122f8:	ea6f 0b03 	mvn.w	fp, r3
 80122fc:	f04f 0800 	mov.w	r8, #0
 8012300:	4631      	mov	r1, r6
 8012302:	4620      	mov	r0, r4
 8012304:	f000 fa7e 	bl	8012804 <_Bfree>
 8012308:	2f00      	cmp	r7, #0
 801230a:	f43f aeab 	beq.w	8012064 <_dtoa_r+0x6c4>
 801230e:	f1b8 0f00 	cmp.w	r8, #0
 8012312:	d005      	beq.n	8012320 <_dtoa_r+0x980>
 8012314:	45b8      	cmp	r8, r7
 8012316:	d003      	beq.n	8012320 <_dtoa_r+0x980>
 8012318:	4641      	mov	r1, r8
 801231a:	4620      	mov	r0, r4
 801231c:	f000 fa72 	bl	8012804 <_Bfree>
 8012320:	4639      	mov	r1, r7
 8012322:	4620      	mov	r0, r4
 8012324:	f000 fa6e 	bl	8012804 <_Bfree>
 8012328:	e69c      	b.n	8012064 <_dtoa_r+0x6c4>
 801232a:	2600      	movs	r6, #0
 801232c:	4637      	mov	r7, r6
 801232e:	e7e1      	b.n	80122f4 <_dtoa_r+0x954>
 8012330:	46bb      	mov	fp, r7
 8012332:	4637      	mov	r7, r6
 8012334:	e599      	b.n	8011e6a <_dtoa_r+0x4ca>
 8012336:	bf00      	nop
 8012338:	40240000 	.word	0x40240000
 801233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	f000 80c8 	beq.w	80124d4 <_dtoa_r+0xb34>
 8012344:	9b04      	ldr	r3, [sp, #16]
 8012346:	9301      	str	r3, [sp, #4]
 8012348:	2d00      	cmp	r5, #0
 801234a:	dd05      	ble.n	8012358 <_dtoa_r+0x9b8>
 801234c:	4639      	mov	r1, r7
 801234e:	462a      	mov	r2, r5
 8012350:	4620      	mov	r0, r4
 8012352:	f000 fc27 	bl	8012ba4 <__lshift>
 8012356:	4607      	mov	r7, r0
 8012358:	f1b8 0f00 	cmp.w	r8, #0
 801235c:	d05b      	beq.n	8012416 <_dtoa_r+0xa76>
 801235e:	6879      	ldr	r1, [r7, #4]
 8012360:	4620      	mov	r0, r4
 8012362:	f000 fa0f 	bl	8012784 <_Balloc>
 8012366:	4605      	mov	r5, r0
 8012368:	b928      	cbnz	r0, 8012376 <_dtoa_r+0x9d6>
 801236a:	4b83      	ldr	r3, [pc, #524]	; (8012578 <_dtoa_r+0xbd8>)
 801236c:	4602      	mov	r2, r0
 801236e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012372:	f7ff bb2e 	b.w	80119d2 <_dtoa_r+0x32>
 8012376:	693a      	ldr	r2, [r7, #16]
 8012378:	3202      	adds	r2, #2
 801237a:	0092      	lsls	r2, r2, #2
 801237c:	f107 010c 	add.w	r1, r7, #12
 8012380:	300c      	adds	r0, #12
 8012382:	f001 f847 	bl	8013414 <memcpy>
 8012386:	2201      	movs	r2, #1
 8012388:	4629      	mov	r1, r5
 801238a:	4620      	mov	r0, r4
 801238c:	f000 fc0a 	bl	8012ba4 <__lshift>
 8012390:	9b00      	ldr	r3, [sp, #0]
 8012392:	3301      	adds	r3, #1
 8012394:	9304      	str	r3, [sp, #16]
 8012396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801239a:	4413      	add	r3, r2
 801239c:	9308      	str	r3, [sp, #32]
 801239e:	9b02      	ldr	r3, [sp, #8]
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	46b8      	mov	r8, r7
 80123a6:	9306      	str	r3, [sp, #24]
 80123a8:	4607      	mov	r7, r0
 80123aa:	9b04      	ldr	r3, [sp, #16]
 80123ac:	4631      	mov	r1, r6
 80123ae:	3b01      	subs	r3, #1
 80123b0:	4650      	mov	r0, sl
 80123b2:	9301      	str	r3, [sp, #4]
 80123b4:	f7ff fa6a 	bl	801188c <quorem>
 80123b8:	4641      	mov	r1, r8
 80123ba:	9002      	str	r0, [sp, #8]
 80123bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80123c0:	4650      	mov	r0, sl
 80123c2:	f000 fc5b 	bl	8012c7c <__mcmp>
 80123c6:	463a      	mov	r2, r7
 80123c8:	9005      	str	r0, [sp, #20]
 80123ca:	4631      	mov	r1, r6
 80123cc:	4620      	mov	r0, r4
 80123ce:	f000 fc71 	bl	8012cb4 <__mdiff>
 80123d2:	68c2      	ldr	r2, [r0, #12]
 80123d4:	4605      	mov	r5, r0
 80123d6:	bb02      	cbnz	r2, 801241a <_dtoa_r+0xa7a>
 80123d8:	4601      	mov	r1, r0
 80123da:	4650      	mov	r0, sl
 80123dc:	f000 fc4e 	bl	8012c7c <__mcmp>
 80123e0:	4602      	mov	r2, r0
 80123e2:	4629      	mov	r1, r5
 80123e4:	4620      	mov	r0, r4
 80123e6:	9209      	str	r2, [sp, #36]	; 0x24
 80123e8:	f000 fa0c 	bl	8012804 <_Bfree>
 80123ec:	9b07      	ldr	r3, [sp, #28]
 80123ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123f0:	9d04      	ldr	r5, [sp, #16]
 80123f2:	ea43 0102 	orr.w	r1, r3, r2
 80123f6:	9b06      	ldr	r3, [sp, #24]
 80123f8:	4319      	orrs	r1, r3
 80123fa:	d110      	bne.n	801241e <_dtoa_r+0xa7e>
 80123fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012400:	d029      	beq.n	8012456 <_dtoa_r+0xab6>
 8012402:	9b05      	ldr	r3, [sp, #20]
 8012404:	2b00      	cmp	r3, #0
 8012406:	dd02      	ble.n	801240e <_dtoa_r+0xa6e>
 8012408:	9b02      	ldr	r3, [sp, #8]
 801240a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801240e:	9b01      	ldr	r3, [sp, #4]
 8012410:	f883 9000 	strb.w	r9, [r3]
 8012414:	e774      	b.n	8012300 <_dtoa_r+0x960>
 8012416:	4638      	mov	r0, r7
 8012418:	e7ba      	b.n	8012390 <_dtoa_r+0x9f0>
 801241a:	2201      	movs	r2, #1
 801241c:	e7e1      	b.n	80123e2 <_dtoa_r+0xa42>
 801241e:	9b05      	ldr	r3, [sp, #20]
 8012420:	2b00      	cmp	r3, #0
 8012422:	db04      	blt.n	801242e <_dtoa_r+0xa8e>
 8012424:	9907      	ldr	r1, [sp, #28]
 8012426:	430b      	orrs	r3, r1
 8012428:	9906      	ldr	r1, [sp, #24]
 801242a:	430b      	orrs	r3, r1
 801242c:	d120      	bne.n	8012470 <_dtoa_r+0xad0>
 801242e:	2a00      	cmp	r2, #0
 8012430:	dded      	ble.n	801240e <_dtoa_r+0xa6e>
 8012432:	4651      	mov	r1, sl
 8012434:	2201      	movs	r2, #1
 8012436:	4620      	mov	r0, r4
 8012438:	f000 fbb4 	bl	8012ba4 <__lshift>
 801243c:	4631      	mov	r1, r6
 801243e:	4682      	mov	sl, r0
 8012440:	f000 fc1c 	bl	8012c7c <__mcmp>
 8012444:	2800      	cmp	r0, #0
 8012446:	dc03      	bgt.n	8012450 <_dtoa_r+0xab0>
 8012448:	d1e1      	bne.n	801240e <_dtoa_r+0xa6e>
 801244a:	f019 0f01 	tst.w	r9, #1
 801244e:	d0de      	beq.n	801240e <_dtoa_r+0xa6e>
 8012450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012454:	d1d8      	bne.n	8012408 <_dtoa_r+0xa68>
 8012456:	9a01      	ldr	r2, [sp, #4]
 8012458:	2339      	movs	r3, #57	; 0x39
 801245a:	7013      	strb	r3, [r2, #0]
 801245c:	462b      	mov	r3, r5
 801245e:	461d      	mov	r5, r3
 8012460:	3b01      	subs	r3, #1
 8012462:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012466:	2a39      	cmp	r2, #57	; 0x39
 8012468:	d06c      	beq.n	8012544 <_dtoa_r+0xba4>
 801246a:	3201      	adds	r2, #1
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	e747      	b.n	8012300 <_dtoa_r+0x960>
 8012470:	2a00      	cmp	r2, #0
 8012472:	dd07      	ble.n	8012484 <_dtoa_r+0xae4>
 8012474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012478:	d0ed      	beq.n	8012456 <_dtoa_r+0xab6>
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	f109 0301 	add.w	r3, r9, #1
 8012480:	7013      	strb	r3, [r2, #0]
 8012482:	e73d      	b.n	8012300 <_dtoa_r+0x960>
 8012484:	9b04      	ldr	r3, [sp, #16]
 8012486:	9a08      	ldr	r2, [sp, #32]
 8012488:	f803 9c01 	strb.w	r9, [r3, #-1]
 801248c:	4293      	cmp	r3, r2
 801248e:	d043      	beq.n	8012518 <_dtoa_r+0xb78>
 8012490:	4651      	mov	r1, sl
 8012492:	2300      	movs	r3, #0
 8012494:	220a      	movs	r2, #10
 8012496:	4620      	mov	r0, r4
 8012498:	f000 f9d6 	bl	8012848 <__multadd>
 801249c:	45b8      	cmp	r8, r7
 801249e:	4682      	mov	sl, r0
 80124a0:	f04f 0300 	mov.w	r3, #0
 80124a4:	f04f 020a 	mov.w	r2, #10
 80124a8:	4641      	mov	r1, r8
 80124aa:	4620      	mov	r0, r4
 80124ac:	d107      	bne.n	80124be <_dtoa_r+0xb1e>
 80124ae:	f000 f9cb 	bl	8012848 <__multadd>
 80124b2:	4680      	mov	r8, r0
 80124b4:	4607      	mov	r7, r0
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	3301      	adds	r3, #1
 80124ba:	9304      	str	r3, [sp, #16]
 80124bc:	e775      	b.n	80123aa <_dtoa_r+0xa0a>
 80124be:	f000 f9c3 	bl	8012848 <__multadd>
 80124c2:	4639      	mov	r1, r7
 80124c4:	4680      	mov	r8, r0
 80124c6:	2300      	movs	r3, #0
 80124c8:	220a      	movs	r2, #10
 80124ca:	4620      	mov	r0, r4
 80124cc:	f000 f9bc 	bl	8012848 <__multadd>
 80124d0:	4607      	mov	r7, r0
 80124d2:	e7f0      	b.n	80124b6 <_dtoa_r+0xb16>
 80124d4:	9b04      	ldr	r3, [sp, #16]
 80124d6:	9301      	str	r3, [sp, #4]
 80124d8:	9d00      	ldr	r5, [sp, #0]
 80124da:	4631      	mov	r1, r6
 80124dc:	4650      	mov	r0, sl
 80124de:	f7ff f9d5 	bl	801188c <quorem>
 80124e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80124e6:	9b00      	ldr	r3, [sp, #0]
 80124e8:	f805 9b01 	strb.w	r9, [r5], #1
 80124ec:	1aea      	subs	r2, r5, r3
 80124ee:	9b01      	ldr	r3, [sp, #4]
 80124f0:	4293      	cmp	r3, r2
 80124f2:	dd07      	ble.n	8012504 <_dtoa_r+0xb64>
 80124f4:	4651      	mov	r1, sl
 80124f6:	2300      	movs	r3, #0
 80124f8:	220a      	movs	r2, #10
 80124fa:	4620      	mov	r0, r4
 80124fc:	f000 f9a4 	bl	8012848 <__multadd>
 8012500:	4682      	mov	sl, r0
 8012502:	e7ea      	b.n	80124da <_dtoa_r+0xb3a>
 8012504:	9b01      	ldr	r3, [sp, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	bfc8      	it	gt
 801250a:	461d      	movgt	r5, r3
 801250c:	9b00      	ldr	r3, [sp, #0]
 801250e:	bfd8      	it	le
 8012510:	2501      	movle	r5, #1
 8012512:	441d      	add	r5, r3
 8012514:	f04f 0800 	mov.w	r8, #0
 8012518:	4651      	mov	r1, sl
 801251a:	2201      	movs	r2, #1
 801251c:	4620      	mov	r0, r4
 801251e:	f000 fb41 	bl	8012ba4 <__lshift>
 8012522:	4631      	mov	r1, r6
 8012524:	4682      	mov	sl, r0
 8012526:	f000 fba9 	bl	8012c7c <__mcmp>
 801252a:	2800      	cmp	r0, #0
 801252c:	dc96      	bgt.n	801245c <_dtoa_r+0xabc>
 801252e:	d102      	bne.n	8012536 <_dtoa_r+0xb96>
 8012530:	f019 0f01 	tst.w	r9, #1
 8012534:	d192      	bne.n	801245c <_dtoa_r+0xabc>
 8012536:	462b      	mov	r3, r5
 8012538:	461d      	mov	r5, r3
 801253a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801253e:	2a30      	cmp	r2, #48	; 0x30
 8012540:	d0fa      	beq.n	8012538 <_dtoa_r+0xb98>
 8012542:	e6dd      	b.n	8012300 <_dtoa_r+0x960>
 8012544:	9a00      	ldr	r2, [sp, #0]
 8012546:	429a      	cmp	r2, r3
 8012548:	d189      	bne.n	801245e <_dtoa_r+0xabe>
 801254a:	f10b 0b01 	add.w	fp, fp, #1
 801254e:	2331      	movs	r3, #49	; 0x31
 8012550:	e796      	b.n	8012480 <_dtoa_r+0xae0>
 8012552:	4b0a      	ldr	r3, [pc, #40]	; (801257c <_dtoa_r+0xbdc>)
 8012554:	f7ff ba99 	b.w	8011a8a <_dtoa_r+0xea>
 8012558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801255a:	2b00      	cmp	r3, #0
 801255c:	f47f aa6d 	bne.w	8011a3a <_dtoa_r+0x9a>
 8012560:	4b07      	ldr	r3, [pc, #28]	; (8012580 <_dtoa_r+0xbe0>)
 8012562:	f7ff ba92 	b.w	8011a8a <_dtoa_r+0xea>
 8012566:	9b01      	ldr	r3, [sp, #4]
 8012568:	2b00      	cmp	r3, #0
 801256a:	dcb5      	bgt.n	80124d8 <_dtoa_r+0xb38>
 801256c:	9b07      	ldr	r3, [sp, #28]
 801256e:	2b02      	cmp	r3, #2
 8012570:	f73f aeb1 	bgt.w	80122d6 <_dtoa_r+0x936>
 8012574:	e7b0      	b.n	80124d8 <_dtoa_r+0xb38>
 8012576:	bf00      	nop
 8012578:	080138d8 	.word	0x080138d8
 801257c:	08013838 	.word	0x08013838
 8012580:	0801385c 	.word	0x0801385c

08012584 <_free_r>:
 8012584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012586:	2900      	cmp	r1, #0
 8012588:	d044      	beq.n	8012614 <_free_r+0x90>
 801258a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801258e:	9001      	str	r0, [sp, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	f1a1 0404 	sub.w	r4, r1, #4
 8012596:	bfb8      	it	lt
 8012598:	18e4      	addlt	r4, r4, r3
 801259a:	f000 f8e7 	bl	801276c <__malloc_lock>
 801259e:	4a1e      	ldr	r2, [pc, #120]	; (8012618 <_free_r+0x94>)
 80125a0:	9801      	ldr	r0, [sp, #4]
 80125a2:	6813      	ldr	r3, [r2, #0]
 80125a4:	b933      	cbnz	r3, 80125b4 <_free_r+0x30>
 80125a6:	6063      	str	r3, [r4, #4]
 80125a8:	6014      	str	r4, [r2, #0]
 80125aa:	b003      	add	sp, #12
 80125ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125b0:	f000 b8e2 	b.w	8012778 <__malloc_unlock>
 80125b4:	42a3      	cmp	r3, r4
 80125b6:	d908      	bls.n	80125ca <_free_r+0x46>
 80125b8:	6825      	ldr	r5, [r4, #0]
 80125ba:	1961      	adds	r1, r4, r5
 80125bc:	428b      	cmp	r3, r1
 80125be:	bf01      	itttt	eq
 80125c0:	6819      	ldreq	r1, [r3, #0]
 80125c2:	685b      	ldreq	r3, [r3, #4]
 80125c4:	1949      	addeq	r1, r1, r5
 80125c6:	6021      	streq	r1, [r4, #0]
 80125c8:	e7ed      	b.n	80125a6 <_free_r+0x22>
 80125ca:	461a      	mov	r2, r3
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	b10b      	cbz	r3, 80125d4 <_free_r+0x50>
 80125d0:	42a3      	cmp	r3, r4
 80125d2:	d9fa      	bls.n	80125ca <_free_r+0x46>
 80125d4:	6811      	ldr	r1, [r2, #0]
 80125d6:	1855      	adds	r5, r2, r1
 80125d8:	42a5      	cmp	r5, r4
 80125da:	d10b      	bne.n	80125f4 <_free_r+0x70>
 80125dc:	6824      	ldr	r4, [r4, #0]
 80125de:	4421      	add	r1, r4
 80125e0:	1854      	adds	r4, r2, r1
 80125e2:	42a3      	cmp	r3, r4
 80125e4:	6011      	str	r1, [r2, #0]
 80125e6:	d1e0      	bne.n	80125aa <_free_r+0x26>
 80125e8:	681c      	ldr	r4, [r3, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	6053      	str	r3, [r2, #4]
 80125ee:	440c      	add	r4, r1
 80125f0:	6014      	str	r4, [r2, #0]
 80125f2:	e7da      	b.n	80125aa <_free_r+0x26>
 80125f4:	d902      	bls.n	80125fc <_free_r+0x78>
 80125f6:	230c      	movs	r3, #12
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	e7d6      	b.n	80125aa <_free_r+0x26>
 80125fc:	6825      	ldr	r5, [r4, #0]
 80125fe:	1961      	adds	r1, r4, r5
 8012600:	428b      	cmp	r3, r1
 8012602:	bf04      	itt	eq
 8012604:	6819      	ldreq	r1, [r3, #0]
 8012606:	685b      	ldreq	r3, [r3, #4]
 8012608:	6063      	str	r3, [r4, #4]
 801260a:	bf04      	itt	eq
 801260c:	1949      	addeq	r1, r1, r5
 801260e:	6021      	streq	r1, [r4, #0]
 8012610:	6054      	str	r4, [r2, #4]
 8012612:	e7ca      	b.n	80125aa <_free_r+0x26>
 8012614:	b003      	add	sp, #12
 8012616:	bd30      	pop	{r4, r5, pc}
 8012618:	20002694 	.word	0x20002694

0801261c <malloc>:
 801261c:	4b02      	ldr	r3, [pc, #8]	; (8012628 <malloc+0xc>)
 801261e:	4601      	mov	r1, r0
 8012620:	6818      	ldr	r0, [r3, #0]
 8012622:	f000 b823 	b.w	801266c <_malloc_r>
 8012626:	bf00      	nop
 8012628:	20000188 	.word	0x20000188

0801262c <sbrk_aligned>:
 801262c:	b570      	push	{r4, r5, r6, lr}
 801262e:	4e0e      	ldr	r6, [pc, #56]	; (8012668 <sbrk_aligned+0x3c>)
 8012630:	460c      	mov	r4, r1
 8012632:	6831      	ldr	r1, [r6, #0]
 8012634:	4605      	mov	r5, r0
 8012636:	b911      	cbnz	r1, 801263e <sbrk_aligned+0x12>
 8012638:	f000 fedc 	bl	80133f4 <_sbrk_r>
 801263c:	6030      	str	r0, [r6, #0]
 801263e:	4621      	mov	r1, r4
 8012640:	4628      	mov	r0, r5
 8012642:	f000 fed7 	bl	80133f4 <_sbrk_r>
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	d00a      	beq.n	8012660 <sbrk_aligned+0x34>
 801264a:	1cc4      	adds	r4, r0, #3
 801264c:	f024 0403 	bic.w	r4, r4, #3
 8012650:	42a0      	cmp	r0, r4
 8012652:	d007      	beq.n	8012664 <sbrk_aligned+0x38>
 8012654:	1a21      	subs	r1, r4, r0
 8012656:	4628      	mov	r0, r5
 8012658:	f000 fecc 	bl	80133f4 <_sbrk_r>
 801265c:	3001      	adds	r0, #1
 801265e:	d101      	bne.n	8012664 <sbrk_aligned+0x38>
 8012660:	f04f 34ff 	mov.w	r4, #4294967295
 8012664:	4620      	mov	r0, r4
 8012666:	bd70      	pop	{r4, r5, r6, pc}
 8012668:	20002698 	.word	0x20002698

0801266c <_malloc_r>:
 801266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012670:	1ccd      	adds	r5, r1, #3
 8012672:	f025 0503 	bic.w	r5, r5, #3
 8012676:	3508      	adds	r5, #8
 8012678:	2d0c      	cmp	r5, #12
 801267a:	bf38      	it	cc
 801267c:	250c      	movcc	r5, #12
 801267e:	2d00      	cmp	r5, #0
 8012680:	4607      	mov	r7, r0
 8012682:	db01      	blt.n	8012688 <_malloc_r+0x1c>
 8012684:	42a9      	cmp	r1, r5
 8012686:	d905      	bls.n	8012694 <_malloc_r+0x28>
 8012688:	230c      	movs	r3, #12
 801268a:	603b      	str	r3, [r7, #0]
 801268c:	2600      	movs	r6, #0
 801268e:	4630      	mov	r0, r6
 8012690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012694:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012768 <_malloc_r+0xfc>
 8012698:	f000 f868 	bl	801276c <__malloc_lock>
 801269c:	f8d8 3000 	ldr.w	r3, [r8]
 80126a0:	461c      	mov	r4, r3
 80126a2:	bb5c      	cbnz	r4, 80126fc <_malloc_r+0x90>
 80126a4:	4629      	mov	r1, r5
 80126a6:	4638      	mov	r0, r7
 80126a8:	f7ff ffc0 	bl	801262c <sbrk_aligned>
 80126ac:	1c43      	adds	r3, r0, #1
 80126ae:	4604      	mov	r4, r0
 80126b0:	d155      	bne.n	801275e <_malloc_r+0xf2>
 80126b2:	f8d8 4000 	ldr.w	r4, [r8]
 80126b6:	4626      	mov	r6, r4
 80126b8:	2e00      	cmp	r6, #0
 80126ba:	d145      	bne.n	8012748 <_malloc_r+0xdc>
 80126bc:	2c00      	cmp	r4, #0
 80126be:	d048      	beq.n	8012752 <_malloc_r+0xe6>
 80126c0:	6823      	ldr	r3, [r4, #0]
 80126c2:	4631      	mov	r1, r6
 80126c4:	4638      	mov	r0, r7
 80126c6:	eb04 0903 	add.w	r9, r4, r3
 80126ca:	f000 fe93 	bl	80133f4 <_sbrk_r>
 80126ce:	4581      	cmp	r9, r0
 80126d0:	d13f      	bne.n	8012752 <_malloc_r+0xe6>
 80126d2:	6821      	ldr	r1, [r4, #0]
 80126d4:	1a6d      	subs	r5, r5, r1
 80126d6:	4629      	mov	r1, r5
 80126d8:	4638      	mov	r0, r7
 80126da:	f7ff ffa7 	bl	801262c <sbrk_aligned>
 80126de:	3001      	adds	r0, #1
 80126e0:	d037      	beq.n	8012752 <_malloc_r+0xe6>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	442b      	add	r3, r5
 80126e6:	6023      	str	r3, [r4, #0]
 80126e8:	f8d8 3000 	ldr.w	r3, [r8]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d038      	beq.n	8012762 <_malloc_r+0xf6>
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	42a2      	cmp	r2, r4
 80126f4:	d12b      	bne.n	801274e <_malloc_r+0xe2>
 80126f6:	2200      	movs	r2, #0
 80126f8:	605a      	str	r2, [r3, #4]
 80126fa:	e00f      	b.n	801271c <_malloc_r+0xb0>
 80126fc:	6822      	ldr	r2, [r4, #0]
 80126fe:	1b52      	subs	r2, r2, r5
 8012700:	d41f      	bmi.n	8012742 <_malloc_r+0xd6>
 8012702:	2a0b      	cmp	r2, #11
 8012704:	d917      	bls.n	8012736 <_malloc_r+0xca>
 8012706:	1961      	adds	r1, r4, r5
 8012708:	42a3      	cmp	r3, r4
 801270a:	6025      	str	r5, [r4, #0]
 801270c:	bf18      	it	ne
 801270e:	6059      	strne	r1, [r3, #4]
 8012710:	6863      	ldr	r3, [r4, #4]
 8012712:	bf08      	it	eq
 8012714:	f8c8 1000 	streq.w	r1, [r8]
 8012718:	5162      	str	r2, [r4, r5]
 801271a:	604b      	str	r3, [r1, #4]
 801271c:	4638      	mov	r0, r7
 801271e:	f104 060b 	add.w	r6, r4, #11
 8012722:	f000 f829 	bl	8012778 <__malloc_unlock>
 8012726:	f026 0607 	bic.w	r6, r6, #7
 801272a:	1d23      	adds	r3, r4, #4
 801272c:	1af2      	subs	r2, r6, r3
 801272e:	d0ae      	beq.n	801268e <_malloc_r+0x22>
 8012730:	1b9b      	subs	r3, r3, r6
 8012732:	50a3      	str	r3, [r4, r2]
 8012734:	e7ab      	b.n	801268e <_malloc_r+0x22>
 8012736:	42a3      	cmp	r3, r4
 8012738:	6862      	ldr	r2, [r4, #4]
 801273a:	d1dd      	bne.n	80126f8 <_malloc_r+0x8c>
 801273c:	f8c8 2000 	str.w	r2, [r8]
 8012740:	e7ec      	b.n	801271c <_malloc_r+0xb0>
 8012742:	4623      	mov	r3, r4
 8012744:	6864      	ldr	r4, [r4, #4]
 8012746:	e7ac      	b.n	80126a2 <_malloc_r+0x36>
 8012748:	4634      	mov	r4, r6
 801274a:	6876      	ldr	r6, [r6, #4]
 801274c:	e7b4      	b.n	80126b8 <_malloc_r+0x4c>
 801274e:	4613      	mov	r3, r2
 8012750:	e7cc      	b.n	80126ec <_malloc_r+0x80>
 8012752:	230c      	movs	r3, #12
 8012754:	603b      	str	r3, [r7, #0]
 8012756:	4638      	mov	r0, r7
 8012758:	f000 f80e 	bl	8012778 <__malloc_unlock>
 801275c:	e797      	b.n	801268e <_malloc_r+0x22>
 801275e:	6025      	str	r5, [r4, #0]
 8012760:	e7dc      	b.n	801271c <_malloc_r+0xb0>
 8012762:	605b      	str	r3, [r3, #4]
 8012764:	deff      	udf	#255	; 0xff
 8012766:	bf00      	nop
 8012768:	20002694 	.word	0x20002694

0801276c <__malloc_lock>:
 801276c:	4801      	ldr	r0, [pc, #4]	; (8012774 <__malloc_lock+0x8>)
 801276e:	f7ff b88b 	b.w	8011888 <__retarget_lock_acquire_recursive>
 8012772:	bf00      	nop
 8012774:	20002690 	.word	0x20002690

08012778 <__malloc_unlock>:
 8012778:	4801      	ldr	r0, [pc, #4]	; (8012780 <__malloc_unlock+0x8>)
 801277a:	f7ff b886 	b.w	801188a <__retarget_lock_release_recursive>
 801277e:	bf00      	nop
 8012780:	20002690 	.word	0x20002690

08012784 <_Balloc>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	69c6      	ldr	r6, [r0, #28]
 8012788:	4604      	mov	r4, r0
 801278a:	460d      	mov	r5, r1
 801278c:	b976      	cbnz	r6, 80127ac <_Balloc+0x28>
 801278e:	2010      	movs	r0, #16
 8012790:	f7ff ff44 	bl	801261c <malloc>
 8012794:	4602      	mov	r2, r0
 8012796:	61e0      	str	r0, [r4, #28]
 8012798:	b920      	cbnz	r0, 80127a4 <_Balloc+0x20>
 801279a:	4b18      	ldr	r3, [pc, #96]	; (80127fc <_Balloc+0x78>)
 801279c:	4818      	ldr	r0, [pc, #96]	; (8012800 <_Balloc+0x7c>)
 801279e:	216b      	movs	r1, #107	; 0x6b
 80127a0:	f000 fe46 	bl	8013430 <__assert_func>
 80127a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127a8:	6006      	str	r6, [r0, #0]
 80127aa:	60c6      	str	r6, [r0, #12]
 80127ac:	69e6      	ldr	r6, [r4, #28]
 80127ae:	68f3      	ldr	r3, [r6, #12]
 80127b0:	b183      	cbz	r3, 80127d4 <_Balloc+0x50>
 80127b2:	69e3      	ldr	r3, [r4, #28]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80127ba:	b9b8      	cbnz	r0, 80127ec <_Balloc+0x68>
 80127bc:	2101      	movs	r1, #1
 80127be:	fa01 f605 	lsl.w	r6, r1, r5
 80127c2:	1d72      	adds	r2, r6, #5
 80127c4:	0092      	lsls	r2, r2, #2
 80127c6:	4620      	mov	r0, r4
 80127c8:	f000 fe50 	bl	801346c <_calloc_r>
 80127cc:	b160      	cbz	r0, 80127e8 <_Balloc+0x64>
 80127ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80127d2:	e00e      	b.n	80127f2 <_Balloc+0x6e>
 80127d4:	2221      	movs	r2, #33	; 0x21
 80127d6:	2104      	movs	r1, #4
 80127d8:	4620      	mov	r0, r4
 80127da:	f000 fe47 	bl	801346c <_calloc_r>
 80127de:	69e3      	ldr	r3, [r4, #28]
 80127e0:	60f0      	str	r0, [r6, #12]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d1e4      	bne.n	80127b2 <_Balloc+0x2e>
 80127e8:	2000      	movs	r0, #0
 80127ea:	bd70      	pop	{r4, r5, r6, pc}
 80127ec:	6802      	ldr	r2, [r0, #0]
 80127ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127f2:	2300      	movs	r3, #0
 80127f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127f8:	e7f7      	b.n	80127ea <_Balloc+0x66>
 80127fa:	bf00      	nop
 80127fc:	08013869 	.word	0x08013869
 8012800:	080138e9 	.word	0x080138e9

08012804 <_Bfree>:
 8012804:	b570      	push	{r4, r5, r6, lr}
 8012806:	69c6      	ldr	r6, [r0, #28]
 8012808:	4605      	mov	r5, r0
 801280a:	460c      	mov	r4, r1
 801280c:	b976      	cbnz	r6, 801282c <_Bfree+0x28>
 801280e:	2010      	movs	r0, #16
 8012810:	f7ff ff04 	bl	801261c <malloc>
 8012814:	4602      	mov	r2, r0
 8012816:	61e8      	str	r0, [r5, #28]
 8012818:	b920      	cbnz	r0, 8012824 <_Bfree+0x20>
 801281a:	4b09      	ldr	r3, [pc, #36]	; (8012840 <_Bfree+0x3c>)
 801281c:	4809      	ldr	r0, [pc, #36]	; (8012844 <_Bfree+0x40>)
 801281e:	218f      	movs	r1, #143	; 0x8f
 8012820:	f000 fe06 	bl	8013430 <__assert_func>
 8012824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012828:	6006      	str	r6, [r0, #0]
 801282a:	60c6      	str	r6, [r0, #12]
 801282c:	b13c      	cbz	r4, 801283e <_Bfree+0x3a>
 801282e:	69eb      	ldr	r3, [r5, #28]
 8012830:	6862      	ldr	r2, [r4, #4]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012838:	6021      	str	r1, [r4, #0]
 801283a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801283e:	bd70      	pop	{r4, r5, r6, pc}
 8012840:	08013869 	.word	0x08013869
 8012844:	080138e9 	.word	0x080138e9

08012848 <__multadd>:
 8012848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801284c:	690d      	ldr	r5, [r1, #16]
 801284e:	4607      	mov	r7, r0
 8012850:	460c      	mov	r4, r1
 8012852:	461e      	mov	r6, r3
 8012854:	f101 0c14 	add.w	ip, r1, #20
 8012858:	2000      	movs	r0, #0
 801285a:	f8dc 3000 	ldr.w	r3, [ip]
 801285e:	b299      	uxth	r1, r3
 8012860:	fb02 6101 	mla	r1, r2, r1, r6
 8012864:	0c1e      	lsrs	r6, r3, #16
 8012866:	0c0b      	lsrs	r3, r1, #16
 8012868:	fb02 3306 	mla	r3, r2, r6, r3
 801286c:	b289      	uxth	r1, r1
 801286e:	3001      	adds	r0, #1
 8012870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012874:	4285      	cmp	r5, r0
 8012876:	f84c 1b04 	str.w	r1, [ip], #4
 801287a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801287e:	dcec      	bgt.n	801285a <__multadd+0x12>
 8012880:	b30e      	cbz	r6, 80128c6 <__multadd+0x7e>
 8012882:	68a3      	ldr	r3, [r4, #8]
 8012884:	42ab      	cmp	r3, r5
 8012886:	dc19      	bgt.n	80128bc <__multadd+0x74>
 8012888:	6861      	ldr	r1, [r4, #4]
 801288a:	4638      	mov	r0, r7
 801288c:	3101      	adds	r1, #1
 801288e:	f7ff ff79 	bl	8012784 <_Balloc>
 8012892:	4680      	mov	r8, r0
 8012894:	b928      	cbnz	r0, 80128a2 <__multadd+0x5a>
 8012896:	4602      	mov	r2, r0
 8012898:	4b0c      	ldr	r3, [pc, #48]	; (80128cc <__multadd+0x84>)
 801289a:	480d      	ldr	r0, [pc, #52]	; (80128d0 <__multadd+0x88>)
 801289c:	21ba      	movs	r1, #186	; 0xba
 801289e:	f000 fdc7 	bl	8013430 <__assert_func>
 80128a2:	6922      	ldr	r2, [r4, #16]
 80128a4:	3202      	adds	r2, #2
 80128a6:	f104 010c 	add.w	r1, r4, #12
 80128aa:	0092      	lsls	r2, r2, #2
 80128ac:	300c      	adds	r0, #12
 80128ae:	f000 fdb1 	bl	8013414 <memcpy>
 80128b2:	4621      	mov	r1, r4
 80128b4:	4638      	mov	r0, r7
 80128b6:	f7ff ffa5 	bl	8012804 <_Bfree>
 80128ba:	4644      	mov	r4, r8
 80128bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128c0:	3501      	adds	r5, #1
 80128c2:	615e      	str	r6, [r3, #20]
 80128c4:	6125      	str	r5, [r4, #16]
 80128c6:	4620      	mov	r0, r4
 80128c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128cc:	080138d8 	.word	0x080138d8
 80128d0:	080138e9 	.word	0x080138e9

080128d4 <__hi0bits>:
 80128d4:	0c03      	lsrs	r3, r0, #16
 80128d6:	041b      	lsls	r3, r3, #16
 80128d8:	b9d3      	cbnz	r3, 8012910 <__hi0bits+0x3c>
 80128da:	0400      	lsls	r0, r0, #16
 80128dc:	2310      	movs	r3, #16
 80128de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80128e2:	bf04      	itt	eq
 80128e4:	0200      	lsleq	r0, r0, #8
 80128e6:	3308      	addeq	r3, #8
 80128e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80128ec:	bf04      	itt	eq
 80128ee:	0100      	lsleq	r0, r0, #4
 80128f0:	3304      	addeq	r3, #4
 80128f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80128f6:	bf04      	itt	eq
 80128f8:	0080      	lsleq	r0, r0, #2
 80128fa:	3302      	addeq	r3, #2
 80128fc:	2800      	cmp	r0, #0
 80128fe:	db05      	blt.n	801290c <__hi0bits+0x38>
 8012900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012904:	f103 0301 	add.w	r3, r3, #1
 8012908:	bf08      	it	eq
 801290a:	2320      	moveq	r3, #32
 801290c:	4618      	mov	r0, r3
 801290e:	4770      	bx	lr
 8012910:	2300      	movs	r3, #0
 8012912:	e7e4      	b.n	80128de <__hi0bits+0xa>

08012914 <__lo0bits>:
 8012914:	6803      	ldr	r3, [r0, #0]
 8012916:	f013 0207 	ands.w	r2, r3, #7
 801291a:	d00c      	beq.n	8012936 <__lo0bits+0x22>
 801291c:	07d9      	lsls	r1, r3, #31
 801291e:	d422      	bmi.n	8012966 <__lo0bits+0x52>
 8012920:	079a      	lsls	r2, r3, #30
 8012922:	bf49      	itett	mi
 8012924:	085b      	lsrmi	r3, r3, #1
 8012926:	089b      	lsrpl	r3, r3, #2
 8012928:	6003      	strmi	r3, [r0, #0]
 801292a:	2201      	movmi	r2, #1
 801292c:	bf5c      	itt	pl
 801292e:	6003      	strpl	r3, [r0, #0]
 8012930:	2202      	movpl	r2, #2
 8012932:	4610      	mov	r0, r2
 8012934:	4770      	bx	lr
 8012936:	b299      	uxth	r1, r3
 8012938:	b909      	cbnz	r1, 801293e <__lo0bits+0x2a>
 801293a:	0c1b      	lsrs	r3, r3, #16
 801293c:	2210      	movs	r2, #16
 801293e:	b2d9      	uxtb	r1, r3
 8012940:	b909      	cbnz	r1, 8012946 <__lo0bits+0x32>
 8012942:	3208      	adds	r2, #8
 8012944:	0a1b      	lsrs	r3, r3, #8
 8012946:	0719      	lsls	r1, r3, #28
 8012948:	bf04      	itt	eq
 801294a:	091b      	lsreq	r3, r3, #4
 801294c:	3204      	addeq	r2, #4
 801294e:	0799      	lsls	r1, r3, #30
 8012950:	bf04      	itt	eq
 8012952:	089b      	lsreq	r3, r3, #2
 8012954:	3202      	addeq	r2, #2
 8012956:	07d9      	lsls	r1, r3, #31
 8012958:	d403      	bmi.n	8012962 <__lo0bits+0x4e>
 801295a:	085b      	lsrs	r3, r3, #1
 801295c:	f102 0201 	add.w	r2, r2, #1
 8012960:	d003      	beq.n	801296a <__lo0bits+0x56>
 8012962:	6003      	str	r3, [r0, #0]
 8012964:	e7e5      	b.n	8012932 <__lo0bits+0x1e>
 8012966:	2200      	movs	r2, #0
 8012968:	e7e3      	b.n	8012932 <__lo0bits+0x1e>
 801296a:	2220      	movs	r2, #32
 801296c:	e7e1      	b.n	8012932 <__lo0bits+0x1e>
	...

08012970 <__i2b>:
 8012970:	b510      	push	{r4, lr}
 8012972:	460c      	mov	r4, r1
 8012974:	2101      	movs	r1, #1
 8012976:	f7ff ff05 	bl	8012784 <_Balloc>
 801297a:	4602      	mov	r2, r0
 801297c:	b928      	cbnz	r0, 801298a <__i2b+0x1a>
 801297e:	4b05      	ldr	r3, [pc, #20]	; (8012994 <__i2b+0x24>)
 8012980:	4805      	ldr	r0, [pc, #20]	; (8012998 <__i2b+0x28>)
 8012982:	f240 1145 	movw	r1, #325	; 0x145
 8012986:	f000 fd53 	bl	8013430 <__assert_func>
 801298a:	2301      	movs	r3, #1
 801298c:	6144      	str	r4, [r0, #20]
 801298e:	6103      	str	r3, [r0, #16]
 8012990:	bd10      	pop	{r4, pc}
 8012992:	bf00      	nop
 8012994:	080138d8 	.word	0x080138d8
 8012998:	080138e9 	.word	0x080138e9

0801299c <__multiply>:
 801299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a0:	4691      	mov	r9, r2
 80129a2:	690a      	ldr	r2, [r1, #16]
 80129a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	bfb8      	it	lt
 80129ac:	460b      	movlt	r3, r1
 80129ae:	460c      	mov	r4, r1
 80129b0:	bfbc      	itt	lt
 80129b2:	464c      	movlt	r4, r9
 80129b4:	4699      	movlt	r9, r3
 80129b6:	6927      	ldr	r7, [r4, #16]
 80129b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	6861      	ldr	r1, [r4, #4]
 80129c0:	eb07 060a 	add.w	r6, r7, sl
 80129c4:	42b3      	cmp	r3, r6
 80129c6:	b085      	sub	sp, #20
 80129c8:	bfb8      	it	lt
 80129ca:	3101      	addlt	r1, #1
 80129cc:	f7ff feda 	bl	8012784 <_Balloc>
 80129d0:	b930      	cbnz	r0, 80129e0 <__multiply+0x44>
 80129d2:	4602      	mov	r2, r0
 80129d4:	4b44      	ldr	r3, [pc, #272]	; (8012ae8 <__multiply+0x14c>)
 80129d6:	4845      	ldr	r0, [pc, #276]	; (8012aec <__multiply+0x150>)
 80129d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80129dc:	f000 fd28 	bl	8013430 <__assert_func>
 80129e0:	f100 0514 	add.w	r5, r0, #20
 80129e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80129e8:	462b      	mov	r3, r5
 80129ea:	2200      	movs	r2, #0
 80129ec:	4543      	cmp	r3, r8
 80129ee:	d321      	bcc.n	8012a34 <__multiply+0x98>
 80129f0:	f104 0314 	add.w	r3, r4, #20
 80129f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80129f8:	f109 0314 	add.w	r3, r9, #20
 80129fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a00:	9202      	str	r2, [sp, #8]
 8012a02:	1b3a      	subs	r2, r7, r4
 8012a04:	3a15      	subs	r2, #21
 8012a06:	f022 0203 	bic.w	r2, r2, #3
 8012a0a:	3204      	adds	r2, #4
 8012a0c:	f104 0115 	add.w	r1, r4, #21
 8012a10:	428f      	cmp	r7, r1
 8012a12:	bf38      	it	cc
 8012a14:	2204      	movcc	r2, #4
 8012a16:	9201      	str	r2, [sp, #4]
 8012a18:	9a02      	ldr	r2, [sp, #8]
 8012a1a:	9303      	str	r3, [sp, #12]
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d80c      	bhi.n	8012a3a <__multiply+0x9e>
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	dd03      	ble.n	8012a2c <__multiply+0x90>
 8012a24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d05b      	beq.n	8012ae4 <__multiply+0x148>
 8012a2c:	6106      	str	r6, [r0, #16]
 8012a2e:	b005      	add	sp, #20
 8012a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a34:	f843 2b04 	str.w	r2, [r3], #4
 8012a38:	e7d8      	b.n	80129ec <__multiply+0x50>
 8012a3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a3e:	f1ba 0f00 	cmp.w	sl, #0
 8012a42:	d024      	beq.n	8012a8e <__multiply+0xf2>
 8012a44:	f104 0e14 	add.w	lr, r4, #20
 8012a48:	46a9      	mov	r9, r5
 8012a4a:	f04f 0c00 	mov.w	ip, #0
 8012a4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a52:	f8d9 1000 	ldr.w	r1, [r9]
 8012a56:	fa1f fb82 	uxth.w	fp, r2
 8012a5a:	b289      	uxth	r1, r1
 8012a5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012a60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012a64:	f8d9 2000 	ldr.w	r2, [r9]
 8012a68:	4461      	add	r1, ip
 8012a6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012a72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012a76:	b289      	uxth	r1, r1
 8012a78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012a7c:	4577      	cmp	r7, lr
 8012a7e:	f849 1b04 	str.w	r1, [r9], #4
 8012a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a86:	d8e2      	bhi.n	8012a4e <__multiply+0xb2>
 8012a88:	9a01      	ldr	r2, [sp, #4]
 8012a8a:	f845 c002 	str.w	ip, [r5, r2]
 8012a8e:	9a03      	ldr	r2, [sp, #12]
 8012a90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a94:	3304      	adds	r3, #4
 8012a96:	f1b9 0f00 	cmp.w	r9, #0
 8012a9a:	d021      	beq.n	8012ae0 <__multiply+0x144>
 8012a9c:	6829      	ldr	r1, [r5, #0]
 8012a9e:	f104 0c14 	add.w	ip, r4, #20
 8012aa2:	46ae      	mov	lr, r5
 8012aa4:	f04f 0a00 	mov.w	sl, #0
 8012aa8:	f8bc b000 	ldrh.w	fp, [ip]
 8012aac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ab0:	fb09 220b 	mla	r2, r9, fp, r2
 8012ab4:	4452      	add	r2, sl
 8012ab6:	b289      	uxth	r1, r1
 8012ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012abc:	f84e 1b04 	str.w	r1, [lr], #4
 8012ac0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012ac4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ac8:	f8be 1000 	ldrh.w	r1, [lr]
 8012acc:	fb09 110a 	mla	r1, r9, sl, r1
 8012ad0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012ad4:	4567      	cmp	r7, ip
 8012ad6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ada:	d8e5      	bhi.n	8012aa8 <__multiply+0x10c>
 8012adc:	9a01      	ldr	r2, [sp, #4]
 8012ade:	50a9      	str	r1, [r5, r2]
 8012ae0:	3504      	adds	r5, #4
 8012ae2:	e799      	b.n	8012a18 <__multiply+0x7c>
 8012ae4:	3e01      	subs	r6, #1
 8012ae6:	e79b      	b.n	8012a20 <__multiply+0x84>
 8012ae8:	080138d8 	.word	0x080138d8
 8012aec:	080138e9 	.word	0x080138e9

08012af0 <__pow5mult>:
 8012af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012af4:	4615      	mov	r5, r2
 8012af6:	f012 0203 	ands.w	r2, r2, #3
 8012afa:	4606      	mov	r6, r0
 8012afc:	460f      	mov	r7, r1
 8012afe:	d007      	beq.n	8012b10 <__pow5mult+0x20>
 8012b00:	4c25      	ldr	r4, [pc, #148]	; (8012b98 <__pow5mult+0xa8>)
 8012b02:	3a01      	subs	r2, #1
 8012b04:	2300      	movs	r3, #0
 8012b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b0a:	f7ff fe9d 	bl	8012848 <__multadd>
 8012b0e:	4607      	mov	r7, r0
 8012b10:	10ad      	asrs	r5, r5, #2
 8012b12:	d03d      	beq.n	8012b90 <__pow5mult+0xa0>
 8012b14:	69f4      	ldr	r4, [r6, #28]
 8012b16:	b97c      	cbnz	r4, 8012b38 <__pow5mult+0x48>
 8012b18:	2010      	movs	r0, #16
 8012b1a:	f7ff fd7f 	bl	801261c <malloc>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	61f0      	str	r0, [r6, #28]
 8012b22:	b928      	cbnz	r0, 8012b30 <__pow5mult+0x40>
 8012b24:	4b1d      	ldr	r3, [pc, #116]	; (8012b9c <__pow5mult+0xac>)
 8012b26:	481e      	ldr	r0, [pc, #120]	; (8012ba0 <__pow5mult+0xb0>)
 8012b28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012b2c:	f000 fc80 	bl	8013430 <__assert_func>
 8012b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b34:	6004      	str	r4, [r0, #0]
 8012b36:	60c4      	str	r4, [r0, #12]
 8012b38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b40:	b94c      	cbnz	r4, 8012b56 <__pow5mult+0x66>
 8012b42:	f240 2171 	movw	r1, #625	; 0x271
 8012b46:	4630      	mov	r0, r6
 8012b48:	f7ff ff12 	bl	8012970 <__i2b>
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b52:	4604      	mov	r4, r0
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	f04f 0900 	mov.w	r9, #0
 8012b5a:	07eb      	lsls	r3, r5, #31
 8012b5c:	d50a      	bpl.n	8012b74 <__pow5mult+0x84>
 8012b5e:	4639      	mov	r1, r7
 8012b60:	4622      	mov	r2, r4
 8012b62:	4630      	mov	r0, r6
 8012b64:	f7ff ff1a 	bl	801299c <__multiply>
 8012b68:	4639      	mov	r1, r7
 8012b6a:	4680      	mov	r8, r0
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f7ff fe49 	bl	8012804 <_Bfree>
 8012b72:	4647      	mov	r7, r8
 8012b74:	106d      	asrs	r5, r5, #1
 8012b76:	d00b      	beq.n	8012b90 <__pow5mult+0xa0>
 8012b78:	6820      	ldr	r0, [r4, #0]
 8012b7a:	b938      	cbnz	r0, 8012b8c <__pow5mult+0x9c>
 8012b7c:	4622      	mov	r2, r4
 8012b7e:	4621      	mov	r1, r4
 8012b80:	4630      	mov	r0, r6
 8012b82:	f7ff ff0b 	bl	801299c <__multiply>
 8012b86:	6020      	str	r0, [r4, #0]
 8012b88:	f8c0 9000 	str.w	r9, [r0]
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	e7e4      	b.n	8012b5a <__pow5mult+0x6a>
 8012b90:	4638      	mov	r0, r7
 8012b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b96:	bf00      	nop
 8012b98:	08013a38 	.word	0x08013a38
 8012b9c:	08013869 	.word	0x08013869
 8012ba0:	080138e9 	.word	0x080138e9

08012ba4 <__lshift>:
 8012ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba8:	460c      	mov	r4, r1
 8012baa:	6849      	ldr	r1, [r1, #4]
 8012bac:	6923      	ldr	r3, [r4, #16]
 8012bae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bb2:	68a3      	ldr	r3, [r4, #8]
 8012bb4:	4607      	mov	r7, r0
 8012bb6:	4691      	mov	r9, r2
 8012bb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bbc:	f108 0601 	add.w	r6, r8, #1
 8012bc0:	42b3      	cmp	r3, r6
 8012bc2:	db0b      	blt.n	8012bdc <__lshift+0x38>
 8012bc4:	4638      	mov	r0, r7
 8012bc6:	f7ff fddd 	bl	8012784 <_Balloc>
 8012bca:	4605      	mov	r5, r0
 8012bcc:	b948      	cbnz	r0, 8012be2 <__lshift+0x3e>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	4b28      	ldr	r3, [pc, #160]	; (8012c74 <__lshift+0xd0>)
 8012bd2:	4829      	ldr	r0, [pc, #164]	; (8012c78 <__lshift+0xd4>)
 8012bd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012bd8:	f000 fc2a 	bl	8013430 <__assert_func>
 8012bdc:	3101      	adds	r1, #1
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	e7ee      	b.n	8012bc0 <__lshift+0x1c>
 8012be2:	2300      	movs	r3, #0
 8012be4:	f100 0114 	add.w	r1, r0, #20
 8012be8:	f100 0210 	add.w	r2, r0, #16
 8012bec:	4618      	mov	r0, r3
 8012bee:	4553      	cmp	r3, sl
 8012bf0:	db33      	blt.n	8012c5a <__lshift+0xb6>
 8012bf2:	6920      	ldr	r0, [r4, #16]
 8012bf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012bf8:	f104 0314 	add.w	r3, r4, #20
 8012bfc:	f019 091f 	ands.w	r9, r9, #31
 8012c00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c08:	d02b      	beq.n	8012c62 <__lshift+0xbe>
 8012c0a:	f1c9 0e20 	rsb	lr, r9, #32
 8012c0e:	468a      	mov	sl, r1
 8012c10:	2200      	movs	r2, #0
 8012c12:	6818      	ldr	r0, [r3, #0]
 8012c14:	fa00 f009 	lsl.w	r0, r0, r9
 8012c18:	4310      	orrs	r0, r2
 8012c1a:	f84a 0b04 	str.w	r0, [sl], #4
 8012c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c22:	459c      	cmp	ip, r3
 8012c24:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c28:	d8f3      	bhi.n	8012c12 <__lshift+0x6e>
 8012c2a:	ebac 0304 	sub.w	r3, ip, r4
 8012c2e:	3b15      	subs	r3, #21
 8012c30:	f023 0303 	bic.w	r3, r3, #3
 8012c34:	3304      	adds	r3, #4
 8012c36:	f104 0015 	add.w	r0, r4, #21
 8012c3a:	4584      	cmp	ip, r0
 8012c3c:	bf38      	it	cc
 8012c3e:	2304      	movcc	r3, #4
 8012c40:	50ca      	str	r2, [r1, r3]
 8012c42:	b10a      	cbz	r2, 8012c48 <__lshift+0xa4>
 8012c44:	f108 0602 	add.w	r6, r8, #2
 8012c48:	3e01      	subs	r6, #1
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	612e      	str	r6, [r5, #16]
 8012c4e:	4621      	mov	r1, r4
 8012c50:	f7ff fdd8 	bl	8012804 <_Bfree>
 8012c54:	4628      	mov	r0, r5
 8012c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c5e:	3301      	adds	r3, #1
 8012c60:	e7c5      	b.n	8012bee <__lshift+0x4a>
 8012c62:	3904      	subs	r1, #4
 8012c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c68:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c6c:	459c      	cmp	ip, r3
 8012c6e:	d8f9      	bhi.n	8012c64 <__lshift+0xc0>
 8012c70:	e7ea      	b.n	8012c48 <__lshift+0xa4>
 8012c72:	bf00      	nop
 8012c74:	080138d8 	.word	0x080138d8
 8012c78:	080138e9 	.word	0x080138e9

08012c7c <__mcmp>:
 8012c7c:	b530      	push	{r4, r5, lr}
 8012c7e:	6902      	ldr	r2, [r0, #16]
 8012c80:	690c      	ldr	r4, [r1, #16]
 8012c82:	1b12      	subs	r2, r2, r4
 8012c84:	d10e      	bne.n	8012ca4 <__mcmp+0x28>
 8012c86:	f100 0314 	add.w	r3, r0, #20
 8012c8a:	3114      	adds	r1, #20
 8012c8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012c90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012c94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012c98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012c9c:	42a5      	cmp	r5, r4
 8012c9e:	d003      	beq.n	8012ca8 <__mcmp+0x2c>
 8012ca0:	d305      	bcc.n	8012cae <__mcmp+0x32>
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	bd30      	pop	{r4, r5, pc}
 8012ca8:	4283      	cmp	r3, r0
 8012caa:	d3f3      	bcc.n	8012c94 <__mcmp+0x18>
 8012cac:	e7fa      	b.n	8012ca4 <__mcmp+0x28>
 8012cae:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb2:	e7f7      	b.n	8012ca4 <__mcmp+0x28>

08012cb4 <__mdiff>:
 8012cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	460c      	mov	r4, r1
 8012cba:	4606      	mov	r6, r0
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	4690      	mov	r8, r2
 8012cc2:	f7ff ffdb 	bl	8012c7c <__mcmp>
 8012cc6:	1e05      	subs	r5, r0, #0
 8012cc8:	d110      	bne.n	8012cec <__mdiff+0x38>
 8012cca:	4629      	mov	r1, r5
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f7ff fd59 	bl	8012784 <_Balloc>
 8012cd2:	b930      	cbnz	r0, 8012ce2 <__mdiff+0x2e>
 8012cd4:	4b3a      	ldr	r3, [pc, #232]	; (8012dc0 <__mdiff+0x10c>)
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	f240 2137 	movw	r1, #567	; 0x237
 8012cdc:	4839      	ldr	r0, [pc, #228]	; (8012dc4 <__mdiff+0x110>)
 8012cde:	f000 fba7 	bl	8013430 <__assert_func>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cec:	bfa4      	itt	ge
 8012cee:	4643      	movge	r3, r8
 8012cf0:	46a0      	movge	r8, r4
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012cf8:	bfa6      	itte	ge
 8012cfa:	461c      	movge	r4, r3
 8012cfc:	2500      	movge	r5, #0
 8012cfe:	2501      	movlt	r5, #1
 8012d00:	f7ff fd40 	bl	8012784 <_Balloc>
 8012d04:	b920      	cbnz	r0, 8012d10 <__mdiff+0x5c>
 8012d06:	4b2e      	ldr	r3, [pc, #184]	; (8012dc0 <__mdiff+0x10c>)
 8012d08:	4602      	mov	r2, r0
 8012d0a:	f240 2145 	movw	r1, #581	; 0x245
 8012d0e:	e7e5      	b.n	8012cdc <__mdiff+0x28>
 8012d10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d14:	6926      	ldr	r6, [r4, #16]
 8012d16:	60c5      	str	r5, [r0, #12]
 8012d18:	f104 0914 	add.w	r9, r4, #20
 8012d1c:	f108 0514 	add.w	r5, r8, #20
 8012d20:	f100 0e14 	add.w	lr, r0, #20
 8012d24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d2c:	f108 0210 	add.w	r2, r8, #16
 8012d30:	46f2      	mov	sl, lr
 8012d32:	2100      	movs	r1, #0
 8012d34:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d3c:	fa11 f88b 	uxtah	r8, r1, fp
 8012d40:	b299      	uxth	r1, r3
 8012d42:	0c1b      	lsrs	r3, r3, #16
 8012d44:	eba8 0801 	sub.w	r8, r8, r1
 8012d48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d50:	fa1f f888 	uxth.w	r8, r8
 8012d54:	1419      	asrs	r1, r3, #16
 8012d56:	454e      	cmp	r6, r9
 8012d58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d5c:	f84a 3b04 	str.w	r3, [sl], #4
 8012d60:	d8e8      	bhi.n	8012d34 <__mdiff+0x80>
 8012d62:	1b33      	subs	r3, r6, r4
 8012d64:	3b15      	subs	r3, #21
 8012d66:	f023 0303 	bic.w	r3, r3, #3
 8012d6a:	3304      	adds	r3, #4
 8012d6c:	3415      	adds	r4, #21
 8012d6e:	42a6      	cmp	r6, r4
 8012d70:	bf38      	it	cc
 8012d72:	2304      	movcc	r3, #4
 8012d74:	441d      	add	r5, r3
 8012d76:	4473      	add	r3, lr
 8012d78:	469e      	mov	lr, r3
 8012d7a:	462e      	mov	r6, r5
 8012d7c:	4566      	cmp	r6, ip
 8012d7e:	d30e      	bcc.n	8012d9e <__mdiff+0xea>
 8012d80:	f10c 0203 	add.w	r2, ip, #3
 8012d84:	1b52      	subs	r2, r2, r5
 8012d86:	f022 0203 	bic.w	r2, r2, #3
 8012d8a:	3d03      	subs	r5, #3
 8012d8c:	45ac      	cmp	ip, r5
 8012d8e:	bf38      	it	cc
 8012d90:	2200      	movcc	r2, #0
 8012d92:	4413      	add	r3, r2
 8012d94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012d98:	b17a      	cbz	r2, 8012dba <__mdiff+0x106>
 8012d9a:	6107      	str	r7, [r0, #16]
 8012d9c:	e7a4      	b.n	8012ce8 <__mdiff+0x34>
 8012d9e:	f856 8b04 	ldr.w	r8, [r6], #4
 8012da2:	fa11 f288 	uxtah	r2, r1, r8
 8012da6:	1414      	asrs	r4, r2, #16
 8012da8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012dac:	b292      	uxth	r2, r2
 8012dae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012db2:	f84e 2b04 	str.w	r2, [lr], #4
 8012db6:	1421      	asrs	r1, r4, #16
 8012db8:	e7e0      	b.n	8012d7c <__mdiff+0xc8>
 8012dba:	3f01      	subs	r7, #1
 8012dbc:	e7ea      	b.n	8012d94 <__mdiff+0xe0>
 8012dbe:	bf00      	nop
 8012dc0:	080138d8 	.word	0x080138d8
 8012dc4:	080138e9 	.word	0x080138e9

08012dc8 <__d2b>:
 8012dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dcc:	460f      	mov	r7, r1
 8012dce:	2101      	movs	r1, #1
 8012dd0:	ec59 8b10 	vmov	r8, r9, d0
 8012dd4:	4616      	mov	r6, r2
 8012dd6:	f7ff fcd5 	bl	8012784 <_Balloc>
 8012dda:	4604      	mov	r4, r0
 8012ddc:	b930      	cbnz	r0, 8012dec <__d2b+0x24>
 8012dde:	4602      	mov	r2, r0
 8012de0:	4b24      	ldr	r3, [pc, #144]	; (8012e74 <__d2b+0xac>)
 8012de2:	4825      	ldr	r0, [pc, #148]	; (8012e78 <__d2b+0xb0>)
 8012de4:	f240 310f 	movw	r1, #783	; 0x30f
 8012de8:	f000 fb22 	bl	8013430 <__assert_func>
 8012dec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012df4:	bb2d      	cbnz	r5, 8012e42 <__d2b+0x7a>
 8012df6:	9301      	str	r3, [sp, #4]
 8012df8:	f1b8 0300 	subs.w	r3, r8, #0
 8012dfc:	d026      	beq.n	8012e4c <__d2b+0x84>
 8012dfe:	4668      	mov	r0, sp
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	f7ff fd87 	bl	8012914 <__lo0bits>
 8012e06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e0a:	b1e8      	cbz	r0, 8012e48 <__d2b+0x80>
 8012e0c:	f1c0 0320 	rsb	r3, r0, #32
 8012e10:	fa02 f303 	lsl.w	r3, r2, r3
 8012e14:	430b      	orrs	r3, r1
 8012e16:	40c2      	lsrs	r2, r0
 8012e18:	6163      	str	r3, [r4, #20]
 8012e1a:	9201      	str	r2, [sp, #4]
 8012e1c:	9b01      	ldr	r3, [sp, #4]
 8012e1e:	61a3      	str	r3, [r4, #24]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	bf14      	ite	ne
 8012e24:	2202      	movne	r2, #2
 8012e26:	2201      	moveq	r2, #1
 8012e28:	6122      	str	r2, [r4, #16]
 8012e2a:	b1bd      	cbz	r5, 8012e5c <__d2b+0x94>
 8012e2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012e30:	4405      	add	r5, r0
 8012e32:	603d      	str	r5, [r7, #0]
 8012e34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e38:	6030      	str	r0, [r6, #0]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	b003      	add	sp, #12
 8012e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e46:	e7d6      	b.n	8012df6 <__d2b+0x2e>
 8012e48:	6161      	str	r1, [r4, #20]
 8012e4a:	e7e7      	b.n	8012e1c <__d2b+0x54>
 8012e4c:	a801      	add	r0, sp, #4
 8012e4e:	f7ff fd61 	bl	8012914 <__lo0bits>
 8012e52:	9b01      	ldr	r3, [sp, #4]
 8012e54:	6163      	str	r3, [r4, #20]
 8012e56:	3020      	adds	r0, #32
 8012e58:	2201      	movs	r2, #1
 8012e5a:	e7e5      	b.n	8012e28 <__d2b+0x60>
 8012e5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012e64:	6038      	str	r0, [r7, #0]
 8012e66:	6918      	ldr	r0, [r3, #16]
 8012e68:	f7ff fd34 	bl	80128d4 <__hi0bits>
 8012e6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e70:	e7e2      	b.n	8012e38 <__d2b+0x70>
 8012e72:	bf00      	nop
 8012e74:	080138d8 	.word	0x080138d8
 8012e78:	080138e9 	.word	0x080138e9

08012e7c <__sfputc_r>:
 8012e7c:	6893      	ldr	r3, [r2, #8]
 8012e7e:	3b01      	subs	r3, #1
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	b410      	push	{r4}
 8012e84:	6093      	str	r3, [r2, #8]
 8012e86:	da08      	bge.n	8012e9a <__sfputc_r+0x1e>
 8012e88:	6994      	ldr	r4, [r2, #24]
 8012e8a:	42a3      	cmp	r3, r4
 8012e8c:	db01      	blt.n	8012e92 <__sfputc_r+0x16>
 8012e8e:	290a      	cmp	r1, #10
 8012e90:	d103      	bne.n	8012e9a <__sfputc_r+0x1e>
 8012e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e96:	f000 ba17 	b.w	80132c8 <__swbuf_r>
 8012e9a:	6813      	ldr	r3, [r2, #0]
 8012e9c:	1c58      	adds	r0, r3, #1
 8012e9e:	6010      	str	r0, [r2, #0]
 8012ea0:	7019      	strb	r1, [r3, #0]
 8012ea2:	4608      	mov	r0, r1
 8012ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ea8:	4770      	bx	lr

08012eaa <__sfputs_r>:
 8012eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eac:	4606      	mov	r6, r0
 8012eae:	460f      	mov	r7, r1
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	18d5      	adds	r5, r2, r3
 8012eb4:	42ac      	cmp	r4, r5
 8012eb6:	d101      	bne.n	8012ebc <__sfputs_r+0x12>
 8012eb8:	2000      	movs	r0, #0
 8012eba:	e007      	b.n	8012ecc <__sfputs_r+0x22>
 8012ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ec0:	463a      	mov	r2, r7
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f7ff ffda 	bl	8012e7c <__sfputc_r>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d1f3      	bne.n	8012eb4 <__sfputs_r+0xa>
 8012ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ed0 <_vfiprintf_r>:
 8012ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed4:	460d      	mov	r5, r1
 8012ed6:	b09d      	sub	sp, #116	; 0x74
 8012ed8:	4614      	mov	r4, r2
 8012eda:	4698      	mov	r8, r3
 8012edc:	4606      	mov	r6, r0
 8012ede:	b118      	cbz	r0, 8012ee8 <_vfiprintf_r+0x18>
 8012ee0:	6a03      	ldr	r3, [r0, #32]
 8012ee2:	b90b      	cbnz	r3, 8012ee8 <_vfiprintf_r+0x18>
 8012ee4:	f7fe fbc0 	bl	8011668 <__sinit>
 8012ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eea:	07d9      	lsls	r1, r3, #31
 8012eec:	d405      	bmi.n	8012efa <_vfiprintf_r+0x2a>
 8012eee:	89ab      	ldrh	r3, [r5, #12]
 8012ef0:	059a      	lsls	r2, r3, #22
 8012ef2:	d402      	bmi.n	8012efa <_vfiprintf_r+0x2a>
 8012ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ef6:	f7fe fcc7 	bl	8011888 <__retarget_lock_acquire_recursive>
 8012efa:	89ab      	ldrh	r3, [r5, #12]
 8012efc:	071b      	lsls	r3, r3, #28
 8012efe:	d501      	bpl.n	8012f04 <_vfiprintf_r+0x34>
 8012f00:	692b      	ldr	r3, [r5, #16]
 8012f02:	b99b      	cbnz	r3, 8012f2c <_vfiprintf_r+0x5c>
 8012f04:	4629      	mov	r1, r5
 8012f06:	4630      	mov	r0, r6
 8012f08:	f000 fa1c 	bl	8013344 <__swsetup_r>
 8012f0c:	b170      	cbz	r0, 8012f2c <_vfiprintf_r+0x5c>
 8012f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f10:	07dc      	lsls	r4, r3, #31
 8012f12:	d504      	bpl.n	8012f1e <_vfiprintf_r+0x4e>
 8012f14:	f04f 30ff 	mov.w	r0, #4294967295
 8012f18:	b01d      	add	sp, #116	; 0x74
 8012f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1e:	89ab      	ldrh	r3, [r5, #12]
 8012f20:	0598      	lsls	r0, r3, #22
 8012f22:	d4f7      	bmi.n	8012f14 <_vfiprintf_r+0x44>
 8012f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f26:	f7fe fcb0 	bl	801188a <__retarget_lock_release_recursive>
 8012f2a:	e7f3      	b.n	8012f14 <_vfiprintf_r+0x44>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f30:	2320      	movs	r3, #32
 8012f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f3a:	2330      	movs	r3, #48	; 0x30
 8012f3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80130f0 <_vfiprintf_r+0x220>
 8012f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f44:	f04f 0901 	mov.w	r9, #1
 8012f48:	4623      	mov	r3, r4
 8012f4a:	469a      	mov	sl, r3
 8012f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f50:	b10a      	cbz	r2, 8012f56 <_vfiprintf_r+0x86>
 8012f52:	2a25      	cmp	r2, #37	; 0x25
 8012f54:	d1f9      	bne.n	8012f4a <_vfiprintf_r+0x7a>
 8012f56:	ebba 0b04 	subs.w	fp, sl, r4
 8012f5a:	d00b      	beq.n	8012f74 <_vfiprintf_r+0xa4>
 8012f5c:	465b      	mov	r3, fp
 8012f5e:	4622      	mov	r2, r4
 8012f60:	4629      	mov	r1, r5
 8012f62:	4630      	mov	r0, r6
 8012f64:	f7ff ffa1 	bl	8012eaa <__sfputs_r>
 8012f68:	3001      	adds	r0, #1
 8012f6a:	f000 80a9 	beq.w	80130c0 <_vfiprintf_r+0x1f0>
 8012f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f70:	445a      	add	r2, fp
 8012f72:	9209      	str	r2, [sp, #36]	; 0x24
 8012f74:	f89a 3000 	ldrb.w	r3, [sl]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f000 80a1 	beq.w	80130c0 <_vfiprintf_r+0x1f0>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	f04f 32ff 	mov.w	r2, #4294967295
 8012f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f88:	f10a 0a01 	add.w	sl, sl, #1
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	9307      	str	r3, [sp, #28]
 8012f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f94:	931a      	str	r3, [sp, #104]	; 0x68
 8012f96:	4654      	mov	r4, sl
 8012f98:	2205      	movs	r2, #5
 8012f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f9e:	4854      	ldr	r0, [pc, #336]	; (80130f0 <_vfiprintf_r+0x220>)
 8012fa0:	f7ed f916 	bl	80001d0 <memchr>
 8012fa4:	9a04      	ldr	r2, [sp, #16]
 8012fa6:	b9d8      	cbnz	r0, 8012fe0 <_vfiprintf_r+0x110>
 8012fa8:	06d1      	lsls	r1, r2, #27
 8012faa:	bf44      	itt	mi
 8012fac:	2320      	movmi	r3, #32
 8012fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fb2:	0713      	lsls	r3, r2, #28
 8012fb4:	bf44      	itt	mi
 8012fb6:	232b      	movmi	r3, #43	; 0x2b
 8012fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8012fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8012fc2:	d015      	beq.n	8012ff0 <_vfiprintf_r+0x120>
 8012fc4:	9a07      	ldr	r2, [sp, #28]
 8012fc6:	4654      	mov	r4, sl
 8012fc8:	2000      	movs	r0, #0
 8012fca:	f04f 0c0a 	mov.w	ip, #10
 8012fce:	4621      	mov	r1, r4
 8012fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fd4:	3b30      	subs	r3, #48	; 0x30
 8012fd6:	2b09      	cmp	r3, #9
 8012fd8:	d94d      	bls.n	8013076 <_vfiprintf_r+0x1a6>
 8012fda:	b1b0      	cbz	r0, 801300a <_vfiprintf_r+0x13a>
 8012fdc:	9207      	str	r2, [sp, #28]
 8012fde:	e014      	b.n	801300a <_vfiprintf_r+0x13a>
 8012fe0:	eba0 0308 	sub.w	r3, r0, r8
 8012fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	9304      	str	r3, [sp, #16]
 8012fec:	46a2      	mov	sl, r4
 8012fee:	e7d2      	b.n	8012f96 <_vfiprintf_r+0xc6>
 8012ff0:	9b03      	ldr	r3, [sp, #12]
 8012ff2:	1d19      	adds	r1, r3, #4
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	9103      	str	r1, [sp, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	bfbb      	ittet	lt
 8012ffc:	425b      	neglt	r3, r3
 8012ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8013002:	9307      	strge	r3, [sp, #28]
 8013004:	9307      	strlt	r3, [sp, #28]
 8013006:	bfb8      	it	lt
 8013008:	9204      	strlt	r2, [sp, #16]
 801300a:	7823      	ldrb	r3, [r4, #0]
 801300c:	2b2e      	cmp	r3, #46	; 0x2e
 801300e:	d10c      	bne.n	801302a <_vfiprintf_r+0x15a>
 8013010:	7863      	ldrb	r3, [r4, #1]
 8013012:	2b2a      	cmp	r3, #42	; 0x2a
 8013014:	d134      	bne.n	8013080 <_vfiprintf_r+0x1b0>
 8013016:	9b03      	ldr	r3, [sp, #12]
 8013018:	1d1a      	adds	r2, r3, #4
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	9203      	str	r2, [sp, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	bfb8      	it	lt
 8013022:	f04f 33ff 	movlt.w	r3, #4294967295
 8013026:	3402      	adds	r4, #2
 8013028:	9305      	str	r3, [sp, #20]
 801302a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013100 <_vfiprintf_r+0x230>
 801302e:	7821      	ldrb	r1, [r4, #0]
 8013030:	2203      	movs	r2, #3
 8013032:	4650      	mov	r0, sl
 8013034:	f7ed f8cc 	bl	80001d0 <memchr>
 8013038:	b138      	cbz	r0, 801304a <_vfiprintf_r+0x17a>
 801303a:	9b04      	ldr	r3, [sp, #16]
 801303c:	eba0 000a 	sub.w	r0, r0, sl
 8013040:	2240      	movs	r2, #64	; 0x40
 8013042:	4082      	lsls	r2, r0
 8013044:	4313      	orrs	r3, r2
 8013046:	3401      	adds	r4, #1
 8013048:	9304      	str	r3, [sp, #16]
 801304a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801304e:	4829      	ldr	r0, [pc, #164]	; (80130f4 <_vfiprintf_r+0x224>)
 8013050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013054:	2206      	movs	r2, #6
 8013056:	f7ed f8bb 	bl	80001d0 <memchr>
 801305a:	2800      	cmp	r0, #0
 801305c:	d03f      	beq.n	80130de <_vfiprintf_r+0x20e>
 801305e:	4b26      	ldr	r3, [pc, #152]	; (80130f8 <_vfiprintf_r+0x228>)
 8013060:	bb1b      	cbnz	r3, 80130aa <_vfiprintf_r+0x1da>
 8013062:	9b03      	ldr	r3, [sp, #12]
 8013064:	3307      	adds	r3, #7
 8013066:	f023 0307 	bic.w	r3, r3, #7
 801306a:	3308      	adds	r3, #8
 801306c:	9303      	str	r3, [sp, #12]
 801306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013070:	443b      	add	r3, r7
 8013072:	9309      	str	r3, [sp, #36]	; 0x24
 8013074:	e768      	b.n	8012f48 <_vfiprintf_r+0x78>
 8013076:	fb0c 3202 	mla	r2, ip, r2, r3
 801307a:	460c      	mov	r4, r1
 801307c:	2001      	movs	r0, #1
 801307e:	e7a6      	b.n	8012fce <_vfiprintf_r+0xfe>
 8013080:	2300      	movs	r3, #0
 8013082:	3401      	adds	r4, #1
 8013084:	9305      	str	r3, [sp, #20]
 8013086:	4619      	mov	r1, r3
 8013088:	f04f 0c0a 	mov.w	ip, #10
 801308c:	4620      	mov	r0, r4
 801308e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013092:	3a30      	subs	r2, #48	; 0x30
 8013094:	2a09      	cmp	r2, #9
 8013096:	d903      	bls.n	80130a0 <_vfiprintf_r+0x1d0>
 8013098:	2b00      	cmp	r3, #0
 801309a:	d0c6      	beq.n	801302a <_vfiprintf_r+0x15a>
 801309c:	9105      	str	r1, [sp, #20]
 801309e:	e7c4      	b.n	801302a <_vfiprintf_r+0x15a>
 80130a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80130a4:	4604      	mov	r4, r0
 80130a6:	2301      	movs	r3, #1
 80130a8:	e7f0      	b.n	801308c <_vfiprintf_r+0x1bc>
 80130aa:	ab03      	add	r3, sp, #12
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	462a      	mov	r2, r5
 80130b0:	4b12      	ldr	r3, [pc, #72]	; (80130fc <_vfiprintf_r+0x22c>)
 80130b2:	a904      	add	r1, sp, #16
 80130b4:	4630      	mov	r0, r6
 80130b6:	f7fd fe97 	bl	8010de8 <_printf_float>
 80130ba:	4607      	mov	r7, r0
 80130bc:	1c78      	adds	r0, r7, #1
 80130be:	d1d6      	bne.n	801306e <_vfiprintf_r+0x19e>
 80130c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130c2:	07d9      	lsls	r1, r3, #31
 80130c4:	d405      	bmi.n	80130d2 <_vfiprintf_r+0x202>
 80130c6:	89ab      	ldrh	r3, [r5, #12]
 80130c8:	059a      	lsls	r2, r3, #22
 80130ca:	d402      	bmi.n	80130d2 <_vfiprintf_r+0x202>
 80130cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130ce:	f7fe fbdc 	bl	801188a <__retarget_lock_release_recursive>
 80130d2:	89ab      	ldrh	r3, [r5, #12]
 80130d4:	065b      	lsls	r3, r3, #25
 80130d6:	f53f af1d 	bmi.w	8012f14 <_vfiprintf_r+0x44>
 80130da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130dc:	e71c      	b.n	8012f18 <_vfiprintf_r+0x48>
 80130de:	ab03      	add	r3, sp, #12
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	462a      	mov	r2, r5
 80130e4:	4b05      	ldr	r3, [pc, #20]	; (80130fc <_vfiprintf_r+0x22c>)
 80130e6:	a904      	add	r1, sp, #16
 80130e8:	4630      	mov	r0, r6
 80130ea:	f7fe f921 	bl	8011330 <_printf_i>
 80130ee:	e7e4      	b.n	80130ba <_vfiprintf_r+0x1ea>
 80130f0:	08013a44 	.word	0x08013a44
 80130f4:	08013a4e 	.word	0x08013a4e
 80130f8:	08010de9 	.word	0x08010de9
 80130fc:	08012eab 	.word	0x08012eab
 8013100:	08013a4a 	.word	0x08013a4a

08013104 <__sflush_r>:
 8013104:	898a      	ldrh	r2, [r1, #12]
 8013106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801310a:	4605      	mov	r5, r0
 801310c:	0710      	lsls	r0, r2, #28
 801310e:	460c      	mov	r4, r1
 8013110:	d458      	bmi.n	80131c4 <__sflush_r+0xc0>
 8013112:	684b      	ldr	r3, [r1, #4]
 8013114:	2b00      	cmp	r3, #0
 8013116:	dc05      	bgt.n	8013124 <__sflush_r+0x20>
 8013118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801311a:	2b00      	cmp	r3, #0
 801311c:	dc02      	bgt.n	8013124 <__sflush_r+0x20>
 801311e:	2000      	movs	r0, #0
 8013120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013126:	2e00      	cmp	r6, #0
 8013128:	d0f9      	beq.n	801311e <__sflush_r+0x1a>
 801312a:	2300      	movs	r3, #0
 801312c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013130:	682f      	ldr	r7, [r5, #0]
 8013132:	6a21      	ldr	r1, [r4, #32]
 8013134:	602b      	str	r3, [r5, #0]
 8013136:	d032      	beq.n	801319e <__sflush_r+0x9a>
 8013138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	075a      	lsls	r2, r3, #29
 801313e:	d505      	bpl.n	801314c <__sflush_r+0x48>
 8013140:	6863      	ldr	r3, [r4, #4]
 8013142:	1ac0      	subs	r0, r0, r3
 8013144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013146:	b10b      	cbz	r3, 801314c <__sflush_r+0x48>
 8013148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801314a:	1ac0      	subs	r0, r0, r3
 801314c:	2300      	movs	r3, #0
 801314e:	4602      	mov	r2, r0
 8013150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013152:	6a21      	ldr	r1, [r4, #32]
 8013154:	4628      	mov	r0, r5
 8013156:	47b0      	blx	r6
 8013158:	1c43      	adds	r3, r0, #1
 801315a:	89a3      	ldrh	r3, [r4, #12]
 801315c:	d106      	bne.n	801316c <__sflush_r+0x68>
 801315e:	6829      	ldr	r1, [r5, #0]
 8013160:	291d      	cmp	r1, #29
 8013162:	d82b      	bhi.n	80131bc <__sflush_r+0xb8>
 8013164:	4a29      	ldr	r2, [pc, #164]	; (801320c <__sflush_r+0x108>)
 8013166:	410a      	asrs	r2, r1
 8013168:	07d6      	lsls	r6, r2, #31
 801316a:	d427      	bmi.n	80131bc <__sflush_r+0xb8>
 801316c:	2200      	movs	r2, #0
 801316e:	6062      	str	r2, [r4, #4]
 8013170:	04d9      	lsls	r1, r3, #19
 8013172:	6922      	ldr	r2, [r4, #16]
 8013174:	6022      	str	r2, [r4, #0]
 8013176:	d504      	bpl.n	8013182 <__sflush_r+0x7e>
 8013178:	1c42      	adds	r2, r0, #1
 801317a:	d101      	bne.n	8013180 <__sflush_r+0x7c>
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	b903      	cbnz	r3, 8013182 <__sflush_r+0x7e>
 8013180:	6560      	str	r0, [r4, #84]	; 0x54
 8013182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013184:	602f      	str	r7, [r5, #0]
 8013186:	2900      	cmp	r1, #0
 8013188:	d0c9      	beq.n	801311e <__sflush_r+0x1a>
 801318a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801318e:	4299      	cmp	r1, r3
 8013190:	d002      	beq.n	8013198 <__sflush_r+0x94>
 8013192:	4628      	mov	r0, r5
 8013194:	f7ff f9f6 	bl	8012584 <_free_r>
 8013198:	2000      	movs	r0, #0
 801319a:	6360      	str	r0, [r4, #52]	; 0x34
 801319c:	e7c0      	b.n	8013120 <__sflush_r+0x1c>
 801319e:	2301      	movs	r3, #1
 80131a0:	4628      	mov	r0, r5
 80131a2:	47b0      	blx	r6
 80131a4:	1c41      	adds	r1, r0, #1
 80131a6:	d1c8      	bne.n	801313a <__sflush_r+0x36>
 80131a8:	682b      	ldr	r3, [r5, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0c5      	beq.n	801313a <__sflush_r+0x36>
 80131ae:	2b1d      	cmp	r3, #29
 80131b0:	d001      	beq.n	80131b6 <__sflush_r+0xb2>
 80131b2:	2b16      	cmp	r3, #22
 80131b4:	d101      	bne.n	80131ba <__sflush_r+0xb6>
 80131b6:	602f      	str	r7, [r5, #0]
 80131b8:	e7b1      	b.n	801311e <__sflush_r+0x1a>
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131c0:	81a3      	strh	r3, [r4, #12]
 80131c2:	e7ad      	b.n	8013120 <__sflush_r+0x1c>
 80131c4:	690f      	ldr	r7, [r1, #16]
 80131c6:	2f00      	cmp	r7, #0
 80131c8:	d0a9      	beq.n	801311e <__sflush_r+0x1a>
 80131ca:	0793      	lsls	r3, r2, #30
 80131cc:	680e      	ldr	r6, [r1, #0]
 80131ce:	bf08      	it	eq
 80131d0:	694b      	ldreq	r3, [r1, #20]
 80131d2:	600f      	str	r7, [r1, #0]
 80131d4:	bf18      	it	ne
 80131d6:	2300      	movne	r3, #0
 80131d8:	eba6 0807 	sub.w	r8, r6, r7
 80131dc:	608b      	str	r3, [r1, #8]
 80131de:	f1b8 0f00 	cmp.w	r8, #0
 80131e2:	dd9c      	ble.n	801311e <__sflush_r+0x1a>
 80131e4:	6a21      	ldr	r1, [r4, #32]
 80131e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131e8:	4643      	mov	r3, r8
 80131ea:	463a      	mov	r2, r7
 80131ec:	4628      	mov	r0, r5
 80131ee:	47b0      	blx	r6
 80131f0:	2800      	cmp	r0, #0
 80131f2:	dc06      	bgt.n	8013202 <__sflush_r+0xfe>
 80131f4:	89a3      	ldrh	r3, [r4, #12]
 80131f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131fa:	81a3      	strh	r3, [r4, #12]
 80131fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013200:	e78e      	b.n	8013120 <__sflush_r+0x1c>
 8013202:	4407      	add	r7, r0
 8013204:	eba8 0800 	sub.w	r8, r8, r0
 8013208:	e7e9      	b.n	80131de <__sflush_r+0xda>
 801320a:	bf00      	nop
 801320c:	dfbffffe 	.word	0xdfbffffe

08013210 <_fflush_r>:
 8013210:	b538      	push	{r3, r4, r5, lr}
 8013212:	690b      	ldr	r3, [r1, #16]
 8013214:	4605      	mov	r5, r0
 8013216:	460c      	mov	r4, r1
 8013218:	b913      	cbnz	r3, 8013220 <_fflush_r+0x10>
 801321a:	2500      	movs	r5, #0
 801321c:	4628      	mov	r0, r5
 801321e:	bd38      	pop	{r3, r4, r5, pc}
 8013220:	b118      	cbz	r0, 801322a <_fflush_r+0x1a>
 8013222:	6a03      	ldr	r3, [r0, #32]
 8013224:	b90b      	cbnz	r3, 801322a <_fflush_r+0x1a>
 8013226:	f7fe fa1f 	bl	8011668 <__sinit>
 801322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d0f3      	beq.n	801321a <_fflush_r+0xa>
 8013232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013234:	07d0      	lsls	r0, r2, #31
 8013236:	d404      	bmi.n	8013242 <_fflush_r+0x32>
 8013238:	0599      	lsls	r1, r3, #22
 801323a:	d402      	bmi.n	8013242 <_fflush_r+0x32>
 801323c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801323e:	f7fe fb23 	bl	8011888 <__retarget_lock_acquire_recursive>
 8013242:	4628      	mov	r0, r5
 8013244:	4621      	mov	r1, r4
 8013246:	f7ff ff5d 	bl	8013104 <__sflush_r>
 801324a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801324c:	07da      	lsls	r2, r3, #31
 801324e:	4605      	mov	r5, r0
 8013250:	d4e4      	bmi.n	801321c <_fflush_r+0xc>
 8013252:	89a3      	ldrh	r3, [r4, #12]
 8013254:	059b      	lsls	r3, r3, #22
 8013256:	d4e1      	bmi.n	801321c <_fflush_r+0xc>
 8013258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801325a:	f7fe fb16 	bl	801188a <__retarget_lock_release_recursive>
 801325e:	e7dd      	b.n	801321c <_fflush_r+0xc>

08013260 <_putc_r>:
 8013260:	b570      	push	{r4, r5, r6, lr}
 8013262:	460d      	mov	r5, r1
 8013264:	4614      	mov	r4, r2
 8013266:	4606      	mov	r6, r0
 8013268:	b118      	cbz	r0, 8013272 <_putc_r+0x12>
 801326a:	6a03      	ldr	r3, [r0, #32]
 801326c:	b90b      	cbnz	r3, 8013272 <_putc_r+0x12>
 801326e:	f7fe f9fb 	bl	8011668 <__sinit>
 8013272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013274:	07d8      	lsls	r0, r3, #31
 8013276:	d405      	bmi.n	8013284 <_putc_r+0x24>
 8013278:	89a3      	ldrh	r3, [r4, #12]
 801327a:	0599      	lsls	r1, r3, #22
 801327c:	d402      	bmi.n	8013284 <_putc_r+0x24>
 801327e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013280:	f7fe fb02 	bl	8011888 <__retarget_lock_acquire_recursive>
 8013284:	68a3      	ldr	r3, [r4, #8]
 8013286:	3b01      	subs	r3, #1
 8013288:	2b00      	cmp	r3, #0
 801328a:	60a3      	str	r3, [r4, #8]
 801328c:	da05      	bge.n	801329a <_putc_r+0x3a>
 801328e:	69a2      	ldr	r2, [r4, #24]
 8013290:	4293      	cmp	r3, r2
 8013292:	db12      	blt.n	80132ba <_putc_r+0x5a>
 8013294:	b2eb      	uxtb	r3, r5
 8013296:	2b0a      	cmp	r3, #10
 8013298:	d00f      	beq.n	80132ba <_putc_r+0x5a>
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	1c5a      	adds	r2, r3, #1
 801329e:	6022      	str	r2, [r4, #0]
 80132a0:	701d      	strb	r5, [r3, #0]
 80132a2:	b2ed      	uxtb	r5, r5
 80132a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132a6:	07da      	lsls	r2, r3, #31
 80132a8:	d405      	bmi.n	80132b6 <_putc_r+0x56>
 80132aa:	89a3      	ldrh	r3, [r4, #12]
 80132ac:	059b      	lsls	r3, r3, #22
 80132ae:	d402      	bmi.n	80132b6 <_putc_r+0x56>
 80132b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132b2:	f7fe faea 	bl	801188a <__retarget_lock_release_recursive>
 80132b6:	4628      	mov	r0, r5
 80132b8:	bd70      	pop	{r4, r5, r6, pc}
 80132ba:	4629      	mov	r1, r5
 80132bc:	4622      	mov	r2, r4
 80132be:	4630      	mov	r0, r6
 80132c0:	f000 f802 	bl	80132c8 <__swbuf_r>
 80132c4:	4605      	mov	r5, r0
 80132c6:	e7ed      	b.n	80132a4 <_putc_r+0x44>

080132c8 <__swbuf_r>:
 80132c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ca:	460e      	mov	r6, r1
 80132cc:	4614      	mov	r4, r2
 80132ce:	4605      	mov	r5, r0
 80132d0:	b118      	cbz	r0, 80132da <__swbuf_r+0x12>
 80132d2:	6a03      	ldr	r3, [r0, #32]
 80132d4:	b90b      	cbnz	r3, 80132da <__swbuf_r+0x12>
 80132d6:	f7fe f9c7 	bl	8011668 <__sinit>
 80132da:	69a3      	ldr	r3, [r4, #24]
 80132dc:	60a3      	str	r3, [r4, #8]
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	071a      	lsls	r2, r3, #28
 80132e2:	d525      	bpl.n	8013330 <__swbuf_r+0x68>
 80132e4:	6923      	ldr	r3, [r4, #16]
 80132e6:	b31b      	cbz	r3, 8013330 <__swbuf_r+0x68>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	6922      	ldr	r2, [r4, #16]
 80132ec:	1a98      	subs	r0, r3, r2
 80132ee:	6963      	ldr	r3, [r4, #20]
 80132f0:	b2f6      	uxtb	r6, r6
 80132f2:	4283      	cmp	r3, r0
 80132f4:	4637      	mov	r7, r6
 80132f6:	dc04      	bgt.n	8013302 <__swbuf_r+0x3a>
 80132f8:	4621      	mov	r1, r4
 80132fa:	4628      	mov	r0, r5
 80132fc:	f7ff ff88 	bl	8013210 <_fflush_r>
 8013300:	b9e0      	cbnz	r0, 801333c <__swbuf_r+0x74>
 8013302:	68a3      	ldr	r3, [r4, #8]
 8013304:	3b01      	subs	r3, #1
 8013306:	60a3      	str	r3, [r4, #8]
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	1c5a      	adds	r2, r3, #1
 801330c:	6022      	str	r2, [r4, #0]
 801330e:	701e      	strb	r6, [r3, #0]
 8013310:	6962      	ldr	r2, [r4, #20]
 8013312:	1c43      	adds	r3, r0, #1
 8013314:	429a      	cmp	r2, r3
 8013316:	d004      	beq.n	8013322 <__swbuf_r+0x5a>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	07db      	lsls	r3, r3, #31
 801331c:	d506      	bpl.n	801332c <__swbuf_r+0x64>
 801331e:	2e0a      	cmp	r6, #10
 8013320:	d104      	bne.n	801332c <__swbuf_r+0x64>
 8013322:	4621      	mov	r1, r4
 8013324:	4628      	mov	r0, r5
 8013326:	f7ff ff73 	bl	8013210 <_fflush_r>
 801332a:	b938      	cbnz	r0, 801333c <__swbuf_r+0x74>
 801332c:	4638      	mov	r0, r7
 801332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013330:	4621      	mov	r1, r4
 8013332:	4628      	mov	r0, r5
 8013334:	f000 f806 	bl	8013344 <__swsetup_r>
 8013338:	2800      	cmp	r0, #0
 801333a:	d0d5      	beq.n	80132e8 <__swbuf_r+0x20>
 801333c:	f04f 37ff 	mov.w	r7, #4294967295
 8013340:	e7f4      	b.n	801332c <__swbuf_r+0x64>
	...

08013344 <__swsetup_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4b2a      	ldr	r3, [pc, #168]	; (80133f0 <__swsetup_r+0xac>)
 8013348:	4605      	mov	r5, r0
 801334a:	6818      	ldr	r0, [r3, #0]
 801334c:	460c      	mov	r4, r1
 801334e:	b118      	cbz	r0, 8013358 <__swsetup_r+0x14>
 8013350:	6a03      	ldr	r3, [r0, #32]
 8013352:	b90b      	cbnz	r3, 8013358 <__swsetup_r+0x14>
 8013354:	f7fe f988 	bl	8011668 <__sinit>
 8013358:	89a3      	ldrh	r3, [r4, #12]
 801335a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801335e:	0718      	lsls	r0, r3, #28
 8013360:	d422      	bmi.n	80133a8 <__swsetup_r+0x64>
 8013362:	06d9      	lsls	r1, r3, #27
 8013364:	d407      	bmi.n	8013376 <__swsetup_r+0x32>
 8013366:	2309      	movs	r3, #9
 8013368:	602b      	str	r3, [r5, #0]
 801336a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801336e:	81a3      	strh	r3, [r4, #12]
 8013370:	f04f 30ff 	mov.w	r0, #4294967295
 8013374:	e034      	b.n	80133e0 <__swsetup_r+0x9c>
 8013376:	0758      	lsls	r0, r3, #29
 8013378:	d512      	bpl.n	80133a0 <__swsetup_r+0x5c>
 801337a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801337c:	b141      	cbz	r1, 8013390 <__swsetup_r+0x4c>
 801337e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013382:	4299      	cmp	r1, r3
 8013384:	d002      	beq.n	801338c <__swsetup_r+0x48>
 8013386:	4628      	mov	r0, r5
 8013388:	f7ff f8fc 	bl	8012584 <_free_r>
 801338c:	2300      	movs	r3, #0
 801338e:	6363      	str	r3, [r4, #52]	; 0x34
 8013390:	89a3      	ldrh	r3, [r4, #12]
 8013392:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013396:	81a3      	strh	r3, [r4, #12]
 8013398:	2300      	movs	r3, #0
 801339a:	6063      	str	r3, [r4, #4]
 801339c:	6923      	ldr	r3, [r4, #16]
 801339e:	6023      	str	r3, [r4, #0]
 80133a0:	89a3      	ldrh	r3, [r4, #12]
 80133a2:	f043 0308 	orr.w	r3, r3, #8
 80133a6:	81a3      	strh	r3, [r4, #12]
 80133a8:	6923      	ldr	r3, [r4, #16]
 80133aa:	b94b      	cbnz	r3, 80133c0 <__swsetup_r+0x7c>
 80133ac:	89a3      	ldrh	r3, [r4, #12]
 80133ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133b6:	d003      	beq.n	80133c0 <__swsetup_r+0x7c>
 80133b8:	4621      	mov	r1, r4
 80133ba:	4628      	mov	r0, r5
 80133bc:	f000 f8c4 	bl	8013548 <__smakebuf_r>
 80133c0:	89a0      	ldrh	r0, [r4, #12]
 80133c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133c6:	f010 0301 	ands.w	r3, r0, #1
 80133ca:	d00a      	beq.n	80133e2 <__swsetup_r+0x9e>
 80133cc:	2300      	movs	r3, #0
 80133ce:	60a3      	str	r3, [r4, #8]
 80133d0:	6963      	ldr	r3, [r4, #20]
 80133d2:	425b      	negs	r3, r3
 80133d4:	61a3      	str	r3, [r4, #24]
 80133d6:	6923      	ldr	r3, [r4, #16]
 80133d8:	b943      	cbnz	r3, 80133ec <__swsetup_r+0xa8>
 80133da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133de:	d1c4      	bne.n	801336a <__swsetup_r+0x26>
 80133e0:	bd38      	pop	{r3, r4, r5, pc}
 80133e2:	0781      	lsls	r1, r0, #30
 80133e4:	bf58      	it	pl
 80133e6:	6963      	ldrpl	r3, [r4, #20]
 80133e8:	60a3      	str	r3, [r4, #8]
 80133ea:	e7f4      	b.n	80133d6 <__swsetup_r+0x92>
 80133ec:	2000      	movs	r0, #0
 80133ee:	e7f7      	b.n	80133e0 <__swsetup_r+0x9c>
 80133f0:	20000188 	.word	0x20000188

080133f4 <_sbrk_r>:
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	4d06      	ldr	r5, [pc, #24]	; (8013410 <_sbrk_r+0x1c>)
 80133f8:	2300      	movs	r3, #0
 80133fa:	4604      	mov	r4, r0
 80133fc:	4608      	mov	r0, r1
 80133fe:	602b      	str	r3, [r5, #0]
 8013400:	f7f1 f908 	bl	8004614 <_sbrk>
 8013404:	1c43      	adds	r3, r0, #1
 8013406:	d102      	bne.n	801340e <_sbrk_r+0x1a>
 8013408:	682b      	ldr	r3, [r5, #0]
 801340a:	b103      	cbz	r3, 801340e <_sbrk_r+0x1a>
 801340c:	6023      	str	r3, [r4, #0]
 801340e:	bd38      	pop	{r3, r4, r5, pc}
 8013410:	2000268c 	.word	0x2000268c

08013414 <memcpy>:
 8013414:	440a      	add	r2, r1
 8013416:	4291      	cmp	r1, r2
 8013418:	f100 33ff 	add.w	r3, r0, #4294967295
 801341c:	d100      	bne.n	8013420 <memcpy+0xc>
 801341e:	4770      	bx	lr
 8013420:	b510      	push	{r4, lr}
 8013422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013426:	f803 4f01 	strb.w	r4, [r3, #1]!
 801342a:	4291      	cmp	r1, r2
 801342c:	d1f9      	bne.n	8013422 <memcpy+0xe>
 801342e:	bd10      	pop	{r4, pc}

08013430 <__assert_func>:
 8013430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013432:	4614      	mov	r4, r2
 8013434:	461a      	mov	r2, r3
 8013436:	4b09      	ldr	r3, [pc, #36]	; (801345c <__assert_func+0x2c>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4605      	mov	r5, r0
 801343c:	68d8      	ldr	r0, [r3, #12]
 801343e:	b14c      	cbz	r4, 8013454 <__assert_func+0x24>
 8013440:	4b07      	ldr	r3, [pc, #28]	; (8013460 <__assert_func+0x30>)
 8013442:	9100      	str	r1, [sp, #0]
 8013444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013448:	4906      	ldr	r1, [pc, #24]	; (8013464 <__assert_func+0x34>)
 801344a:	462b      	mov	r3, r5
 801344c:	f000 f844 	bl	80134d8 <fiprintf>
 8013450:	f000 f8d8 	bl	8013604 <abort>
 8013454:	4b04      	ldr	r3, [pc, #16]	; (8013468 <__assert_func+0x38>)
 8013456:	461c      	mov	r4, r3
 8013458:	e7f3      	b.n	8013442 <__assert_func+0x12>
 801345a:	bf00      	nop
 801345c:	20000188 	.word	0x20000188
 8013460:	08013a5f 	.word	0x08013a5f
 8013464:	08013a6c 	.word	0x08013a6c
 8013468:	08013a9a 	.word	0x08013a9a

0801346c <_calloc_r>:
 801346c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801346e:	fba1 2402 	umull	r2, r4, r1, r2
 8013472:	b94c      	cbnz	r4, 8013488 <_calloc_r+0x1c>
 8013474:	4611      	mov	r1, r2
 8013476:	9201      	str	r2, [sp, #4]
 8013478:	f7ff f8f8 	bl	801266c <_malloc_r>
 801347c:	9a01      	ldr	r2, [sp, #4]
 801347e:	4605      	mov	r5, r0
 8013480:	b930      	cbnz	r0, 8013490 <_calloc_r+0x24>
 8013482:	4628      	mov	r0, r5
 8013484:	b003      	add	sp, #12
 8013486:	bd30      	pop	{r4, r5, pc}
 8013488:	220c      	movs	r2, #12
 801348a:	6002      	str	r2, [r0, #0]
 801348c:	2500      	movs	r5, #0
 801348e:	e7f8      	b.n	8013482 <_calloc_r+0x16>
 8013490:	4621      	mov	r1, r4
 8013492:	f7fe f97c 	bl	801178e <memset>
 8013496:	e7f4      	b.n	8013482 <_calloc_r+0x16>

08013498 <__ascii_mbtowc>:
 8013498:	b082      	sub	sp, #8
 801349a:	b901      	cbnz	r1, 801349e <__ascii_mbtowc+0x6>
 801349c:	a901      	add	r1, sp, #4
 801349e:	b142      	cbz	r2, 80134b2 <__ascii_mbtowc+0x1a>
 80134a0:	b14b      	cbz	r3, 80134b6 <__ascii_mbtowc+0x1e>
 80134a2:	7813      	ldrb	r3, [r2, #0]
 80134a4:	600b      	str	r3, [r1, #0]
 80134a6:	7812      	ldrb	r2, [r2, #0]
 80134a8:	1e10      	subs	r0, r2, #0
 80134aa:	bf18      	it	ne
 80134ac:	2001      	movne	r0, #1
 80134ae:	b002      	add	sp, #8
 80134b0:	4770      	bx	lr
 80134b2:	4610      	mov	r0, r2
 80134b4:	e7fb      	b.n	80134ae <__ascii_mbtowc+0x16>
 80134b6:	f06f 0001 	mvn.w	r0, #1
 80134ba:	e7f8      	b.n	80134ae <__ascii_mbtowc+0x16>

080134bc <__ascii_wctomb>:
 80134bc:	b149      	cbz	r1, 80134d2 <__ascii_wctomb+0x16>
 80134be:	2aff      	cmp	r2, #255	; 0xff
 80134c0:	bf85      	ittet	hi
 80134c2:	238a      	movhi	r3, #138	; 0x8a
 80134c4:	6003      	strhi	r3, [r0, #0]
 80134c6:	700a      	strbls	r2, [r1, #0]
 80134c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80134cc:	bf98      	it	ls
 80134ce:	2001      	movls	r0, #1
 80134d0:	4770      	bx	lr
 80134d2:	4608      	mov	r0, r1
 80134d4:	4770      	bx	lr
	...

080134d8 <fiprintf>:
 80134d8:	b40e      	push	{r1, r2, r3}
 80134da:	b503      	push	{r0, r1, lr}
 80134dc:	4601      	mov	r1, r0
 80134de:	ab03      	add	r3, sp, #12
 80134e0:	4805      	ldr	r0, [pc, #20]	; (80134f8 <fiprintf+0x20>)
 80134e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80134e6:	6800      	ldr	r0, [r0, #0]
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	f7ff fcf1 	bl	8012ed0 <_vfiprintf_r>
 80134ee:	b002      	add	sp, #8
 80134f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134f4:	b003      	add	sp, #12
 80134f6:	4770      	bx	lr
 80134f8:	20000188 	.word	0x20000188

080134fc <__swhatbuf_r>:
 80134fc:	b570      	push	{r4, r5, r6, lr}
 80134fe:	460c      	mov	r4, r1
 8013500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013504:	2900      	cmp	r1, #0
 8013506:	b096      	sub	sp, #88	; 0x58
 8013508:	4615      	mov	r5, r2
 801350a:	461e      	mov	r6, r3
 801350c:	da0d      	bge.n	801352a <__swhatbuf_r+0x2e>
 801350e:	89a3      	ldrh	r3, [r4, #12]
 8013510:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013514:	f04f 0100 	mov.w	r1, #0
 8013518:	bf0c      	ite	eq
 801351a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801351e:	2340      	movne	r3, #64	; 0x40
 8013520:	2000      	movs	r0, #0
 8013522:	6031      	str	r1, [r6, #0]
 8013524:	602b      	str	r3, [r5, #0]
 8013526:	b016      	add	sp, #88	; 0x58
 8013528:	bd70      	pop	{r4, r5, r6, pc}
 801352a:	466a      	mov	r2, sp
 801352c:	f000 f848 	bl	80135c0 <_fstat_r>
 8013530:	2800      	cmp	r0, #0
 8013532:	dbec      	blt.n	801350e <__swhatbuf_r+0x12>
 8013534:	9901      	ldr	r1, [sp, #4]
 8013536:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801353a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801353e:	4259      	negs	r1, r3
 8013540:	4159      	adcs	r1, r3
 8013542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013546:	e7eb      	b.n	8013520 <__swhatbuf_r+0x24>

08013548 <__smakebuf_r>:
 8013548:	898b      	ldrh	r3, [r1, #12]
 801354a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801354c:	079d      	lsls	r5, r3, #30
 801354e:	4606      	mov	r6, r0
 8013550:	460c      	mov	r4, r1
 8013552:	d507      	bpl.n	8013564 <__smakebuf_r+0x1c>
 8013554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013558:	6023      	str	r3, [r4, #0]
 801355a:	6123      	str	r3, [r4, #16]
 801355c:	2301      	movs	r3, #1
 801355e:	6163      	str	r3, [r4, #20]
 8013560:	b002      	add	sp, #8
 8013562:	bd70      	pop	{r4, r5, r6, pc}
 8013564:	ab01      	add	r3, sp, #4
 8013566:	466a      	mov	r2, sp
 8013568:	f7ff ffc8 	bl	80134fc <__swhatbuf_r>
 801356c:	9900      	ldr	r1, [sp, #0]
 801356e:	4605      	mov	r5, r0
 8013570:	4630      	mov	r0, r6
 8013572:	f7ff f87b 	bl	801266c <_malloc_r>
 8013576:	b948      	cbnz	r0, 801358c <__smakebuf_r+0x44>
 8013578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801357c:	059a      	lsls	r2, r3, #22
 801357e:	d4ef      	bmi.n	8013560 <__smakebuf_r+0x18>
 8013580:	f023 0303 	bic.w	r3, r3, #3
 8013584:	f043 0302 	orr.w	r3, r3, #2
 8013588:	81a3      	strh	r3, [r4, #12]
 801358a:	e7e3      	b.n	8013554 <__smakebuf_r+0xc>
 801358c:	89a3      	ldrh	r3, [r4, #12]
 801358e:	6020      	str	r0, [r4, #0]
 8013590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013594:	81a3      	strh	r3, [r4, #12]
 8013596:	9b00      	ldr	r3, [sp, #0]
 8013598:	6163      	str	r3, [r4, #20]
 801359a:	9b01      	ldr	r3, [sp, #4]
 801359c:	6120      	str	r0, [r4, #16]
 801359e:	b15b      	cbz	r3, 80135b8 <__smakebuf_r+0x70>
 80135a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135a4:	4630      	mov	r0, r6
 80135a6:	f000 f81d 	bl	80135e4 <_isatty_r>
 80135aa:	b128      	cbz	r0, 80135b8 <__smakebuf_r+0x70>
 80135ac:	89a3      	ldrh	r3, [r4, #12]
 80135ae:	f023 0303 	bic.w	r3, r3, #3
 80135b2:	f043 0301 	orr.w	r3, r3, #1
 80135b6:	81a3      	strh	r3, [r4, #12]
 80135b8:	89a3      	ldrh	r3, [r4, #12]
 80135ba:	431d      	orrs	r5, r3
 80135bc:	81a5      	strh	r5, [r4, #12]
 80135be:	e7cf      	b.n	8013560 <__smakebuf_r+0x18>

080135c0 <_fstat_r>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	4d07      	ldr	r5, [pc, #28]	; (80135e0 <_fstat_r+0x20>)
 80135c4:	2300      	movs	r3, #0
 80135c6:	4604      	mov	r4, r0
 80135c8:	4608      	mov	r0, r1
 80135ca:	4611      	mov	r1, r2
 80135cc:	602b      	str	r3, [r5, #0]
 80135ce:	f7f0 fff8 	bl	80045c2 <_fstat>
 80135d2:	1c43      	adds	r3, r0, #1
 80135d4:	d102      	bne.n	80135dc <_fstat_r+0x1c>
 80135d6:	682b      	ldr	r3, [r5, #0]
 80135d8:	b103      	cbz	r3, 80135dc <_fstat_r+0x1c>
 80135da:	6023      	str	r3, [r4, #0]
 80135dc:	bd38      	pop	{r3, r4, r5, pc}
 80135de:	bf00      	nop
 80135e0:	2000268c 	.word	0x2000268c

080135e4 <_isatty_r>:
 80135e4:	b538      	push	{r3, r4, r5, lr}
 80135e6:	4d06      	ldr	r5, [pc, #24]	; (8013600 <_isatty_r+0x1c>)
 80135e8:	2300      	movs	r3, #0
 80135ea:	4604      	mov	r4, r0
 80135ec:	4608      	mov	r0, r1
 80135ee:	602b      	str	r3, [r5, #0]
 80135f0:	f7f0 fff7 	bl	80045e2 <_isatty>
 80135f4:	1c43      	adds	r3, r0, #1
 80135f6:	d102      	bne.n	80135fe <_isatty_r+0x1a>
 80135f8:	682b      	ldr	r3, [r5, #0]
 80135fa:	b103      	cbz	r3, 80135fe <_isatty_r+0x1a>
 80135fc:	6023      	str	r3, [r4, #0]
 80135fe:	bd38      	pop	{r3, r4, r5, pc}
 8013600:	2000268c 	.word	0x2000268c

08013604 <abort>:
 8013604:	b508      	push	{r3, lr}
 8013606:	2006      	movs	r0, #6
 8013608:	f000 f82c 	bl	8013664 <raise>
 801360c:	2001      	movs	r0, #1
 801360e:	f7f0 ff89 	bl	8004524 <_exit>

08013612 <_raise_r>:
 8013612:	291f      	cmp	r1, #31
 8013614:	b538      	push	{r3, r4, r5, lr}
 8013616:	4604      	mov	r4, r0
 8013618:	460d      	mov	r5, r1
 801361a:	d904      	bls.n	8013626 <_raise_r+0x14>
 801361c:	2316      	movs	r3, #22
 801361e:	6003      	str	r3, [r0, #0]
 8013620:	f04f 30ff 	mov.w	r0, #4294967295
 8013624:	bd38      	pop	{r3, r4, r5, pc}
 8013626:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013628:	b112      	cbz	r2, 8013630 <_raise_r+0x1e>
 801362a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801362e:	b94b      	cbnz	r3, 8013644 <_raise_r+0x32>
 8013630:	4620      	mov	r0, r4
 8013632:	f000 f831 	bl	8013698 <_getpid_r>
 8013636:	462a      	mov	r2, r5
 8013638:	4601      	mov	r1, r0
 801363a:	4620      	mov	r0, r4
 801363c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013640:	f000 b818 	b.w	8013674 <_kill_r>
 8013644:	2b01      	cmp	r3, #1
 8013646:	d00a      	beq.n	801365e <_raise_r+0x4c>
 8013648:	1c59      	adds	r1, r3, #1
 801364a:	d103      	bne.n	8013654 <_raise_r+0x42>
 801364c:	2316      	movs	r3, #22
 801364e:	6003      	str	r3, [r0, #0]
 8013650:	2001      	movs	r0, #1
 8013652:	e7e7      	b.n	8013624 <_raise_r+0x12>
 8013654:	2400      	movs	r4, #0
 8013656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801365a:	4628      	mov	r0, r5
 801365c:	4798      	blx	r3
 801365e:	2000      	movs	r0, #0
 8013660:	e7e0      	b.n	8013624 <_raise_r+0x12>
	...

08013664 <raise>:
 8013664:	4b02      	ldr	r3, [pc, #8]	; (8013670 <raise+0xc>)
 8013666:	4601      	mov	r1, r0
 8013668:	6818      	ldr	r0, [r3, #0]
 801366a:	f7ff bfd2 	b.w	8013612 <_raise_r>
 801366e:	bf00      	nop
 8013670:	20000188 	.word	0x20000188

08013674 <_kill_r>:
 8013674:	b538      	push	{r3, r4, r5, lr}
 8013676:	4d07      	ldr	r5, [pc, #28]	; (8013694 <_kill_r+0x20>)
 8013678:	2300      	movs	r3, #0
 801367a:	4604      	mov	r4, r0
 801367c:	4608      	mov	r0, r1
 801367e:	4611      	mov	r1, r2
 8013680:	602b      	str	r3, [r5, #0]
 8013682:	f7f0 ff3f 	bl	8004504 <_kill>
 8013686:	1c43      	adds	r3, r0, #1
 8013688:	d102      	bne.n	8013690 <_kill_r+0x1c>
 801368a:	682b      	ldr	r3, [r5, #0]
 801368c:	b103      	cbz	r3, 8013690 <_kill_r+0x1c>
 801368e:	6023      	str	r3, [r4, #0]
 8013690:	bd38      	pop	{r3, r4, r5, pc}
 8013692:	bf00      	nop
 8013694:	2000268c 	.word	0x2000268c

08013698 <_getpid_r>:
 8013698:	f7f0 bf2c 	b.w	80044f4 <_getpid>

0801369c <_init>:
 801369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369e:	bf00      	nop
 80136a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136a2:	bc08      	pop	{r3}
 80136a4:	469e      	mov	lr, r3
 80136a6:	4770      	bx	lr

080136a8 <_fini>:
 80136a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136aa:	bf00      	nop
 80136ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ae:	bc08      	pop	{r3}
 80136b0:	469e      	mov	lr, r3
 80136b2:	4770      	bx	lr
